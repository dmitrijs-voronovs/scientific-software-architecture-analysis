id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:31011,Performance,load,loader,31011,"). virtual Vec3 sofa::core::loader::MeshLoader::getTranslation ; (; ); const. inlinevirtual . ◆ init(). void sofa::core::loader::MeshLoader::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ load(). bool sofa::core::loader::MeshLoader::load ; (; ). finalvirtual . Implements sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::MeshLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::MeshLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ setRotation(). void sofa::core::loader::MeshLoader::setRotation ; (; SReal ; rx, . SReal ; ry, . SReal ; rz . ). inline . ◆ setScale(). void sofa::core::loader::MeshLoader::setScale ; (; SReal ; sx, . SReal ; sy, . SReal ; sz . ). inline . ◆ setTransformation(). void sofa::core::loader::MeshLoader::setTransformation ; (; const sofa::type::Matrix4 & ; t). inline . ◆ setTranslation(). void sofa::core::loader::MeshLoader::setTranslation ; (; SReal ; dx, . SReal ; dy, . SReal ; dz . ). inline . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::MeshLoader::SOFA_ABSTRACT_CLASS ; (; MeshLoader ; , . BaseLoader ;  . ). ◆ updateElements(). void sofa::core::loader::MeshLoader::updateElements ; (; ). virtual . ◆ updateMesh(). void sofa::core::loader::MeshLoader::updateMesh ; (; ). virtual . ◆ updateNormals(). void sofa::core::loader::MeshLoader::updateNormals ; (; ). virtual . ◆ updatePoints(). void sofa::core::loader::MeshLoader::updatePoints ; (; ). virtual . sofacoreloaderMeshLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:31098,Performance,load,loader,31098,"). virtual Vec3 sofa::core::loader::MeshLoader::getTranslation ; (; ); const. inlinevirtual . ◆ init(). void sofa::core::loader::MeshLoader::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ load(). bool sofa::core::loader::MeshLoader::load ; (; ). finalvirtual . Implements sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::MeshLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::MeshLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ setRotation(). void sofa::core::loader::MeshLoader::setRotation ; (; SReal ; rx, . SReal ; ry, . SReal ; rz . ). inline . ◆ setScale(). void sofa::core::loader::MeshLoader::setScale ; (; SReal ; sx, . SReal ; sy, . SReal ; sz . ). inline . ◆ setTransformation(). void sofa::core::loader::MeshLoader::setTransformation ; (; const sofa::type::Matrix4 & ; t). inline . ◆ setTranslation(). void sofa::core::loader::MeshLoader::setTranslation ; (; SReal ; dx, . SReal ; dy, . SReal ; dz . ). inline . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::MeshLoader::SOFA_ABSTRACT_CLASS ; (; MeshLoader ; , . BaseLoader ;  . ). ◆ updateElements(). void sofa::core::loader::MeshLoader::updateElements ; (; ). virtual . ◆ updateMesh(). void sofa::core::loader::MeshLoader::updateMesh ; (; ). virtual . ◆ updateNormals(). void sofa::core::loader::MeshLoader::updateNormals ; (; ). virtual . ◆ updatePoints(). void sofa::core::loader::MeshLoader::updatePoints ; (; ). virtual . sofacoreloaderMeshLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:6286,Security,access,accessors,6286,".;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (MeshLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual bool load () final;  ; virtual void applyTransformation (sofa::type::Matrix4 const &T);  Apply Homogeneous transformation to the positions. More...;  ; virtual void updateMesh ();  ; virtual void updateElements ();  ; virtual void updatePoints ();  ; virtual void updateNormals ();  ; Initial transformations accessors.; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; void setTransformation (const sofa::type::Matrix4 &t);  ; virtual Vec3 getTranslation () const;  ; virtual Vec3 getRotation () const;  ; virtual Vec3 getScale () const;  ; virtual sofa::type::Matrix4 getTransformation () const;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:11012,Testability,log,logging,11012," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:11085,Testability,log,logging,11085," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:11127,Testability,log,logging,11127," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:11197,Testability,log,logging,11197," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:11308,Testability,log,logging,11308," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:11350,Testability,log,logging,11350," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:13174,Testability,log,logErrors,13174,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:11393,Usability,clear,clearLoggedMessages,11393," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:15155,Usability,clear,clearBuffers,15155,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:28509,Usability,clear,clearBuffers,28509," ; p . ). protected . ◆ addTetrahedron() [2/2]. void sofa::core::loader::MeshLoader::addTetrahedron ; (; type::vector< Tetrahedron > & ; pTetrahedra, . Topology::TetrahedronID ; p0, . Topology::TetrahedronID ; p1, . Topology::TetrahedronID ; p2, . Topology::TetrahedronID ; p3 . ). protected . ◆ addTriangle() [1/2]. void sofa::core::loader::MeshLoader::addTriangle ; (; type::vector< Triangle > & ; pTriangles, . const Triangle & ; p . ). protected . ◆ addTriangle() [2/2]. void sofa::core::loader::MeshLoader::addTriangle ; (; type::vector< Triangle > & ; pTriangles, . Topology::TriangleID ; p0, . Topology::TriangleID ; p1, . Topology::TriangleID ; p2 . ). protected . ◆ applyTransformation(). void sofa::core::loader::MeshLoader::applyTransformation ; (; sofa::type::Matrix4 const & ; T). virtual . Apply Homogeneous transformation to the positions. . ◆ canLoad(). bool sofa::core::loader::MeshLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ clearBuffers(). void sofa::core::loader::MeshLoader::clearBuffers ; (; ). finalprotectedvirtual . ◆ copyMeshToData(). void sofa::core::loader::MeshLoader::copyMeshToData ; (; helper::io::Mesh & ; _mesh). protected . Temporary method that will copy all buffers from a io::Mesh into the corresponding Data. Will be removed as soon as work on unifying meshloader is finished. . ◆ getRotation(). virtual Vec3 sofa::core::loader::MeshLoader::getRotation ; (; ); const. inlinevirtual . ◆ getScale(). virtual Vec3 sofa::core::loader::MeshLoader::getScale ; (; ); const. inlinevirtual . ◆ getTransformation(). virtual sofa::type::Matrix4 sofa::core::loader::MeshLoader::getTransformation ; (; ); const. inlinevirtual . ◆ getTranslation(). virtual Vec3 sofa::core::loader::MeshLoader::getTranslation ; (; ); const. inlinevirtual . ◆ init(). void sofa::core::loader::MeshLoader::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:28562,Usability,clear,clearBuffers,28562,"() [2/2]. void sofa::core::loader::MeshLoader::addTetrahedron ; (; type::vector< Tetrahedron > & ; pTetrahedra, . Topology::TetrahedronID ; p0, . Topology::TetrahedronID ; p1, . Topology::TetrahedronID ; p2, . Topology::TetrahedronID ; p3 . ). protected . ◆ addTriangle() [1/2]. void sofa::core::loader::MeshLoader::addTriangle ; (; type::vector< Triangle > & ; pTriangles, . const Triangle & ; p . ). protected . ◆ addTriangle() [2/2]. void sofa::core::loader::MeshLoader::addTriangle ; (; type::vector< Triangle > & ; pTriangles, . Topology::TriangleID ; p0, . Topology::TriangleID ; p1, . Topology::TriangleID ; p2 . ). protected . ◆ applyTransformation(). void sofa::core::loader::MeshLoader::applyTransformation ; (; sofa::type::Matrix4 const & ; T). virtual . Apply Homogeneous transformation to the positions. . ◆ canLoad(). bool sofa::core::loader::MeshLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ clearBuffers(). void sofa::core::loader::MeshLoader::clearBuffers ; (; ). finalprotectedvirtual . ◆ copyMeshToData(). void sofa::core::loader::MeshLoader::copyMeshToData ; (; helper::io::Mesh & ; _mesh). protected . Temporary method that will copy all buffers from a io::Mesh into the corresponding Data. Will be removed as soon as work on unifying meshloader is finished. . ◆ getRotation(). virtual Vec3 sofa::core::loader::MeshLoader::getRotation ; (; ); const. inlinevirtual . ◆ getScale(). virtual Vec3 sofa::core::loader::MeshLoader::getScale ; (; ); const. inlinevirtual . ◆ getTransformation(). virtual sofa::type::Matrix4 sofa::core::loader::MeshLoader::getTransformation ; (; ); const. inlinevirtual . ◆ getTranslation(). virtual Vec3 sofa::core::loader::MeshLoader::getTranslation ; (; ); const. inlinevirtual . ◆ init(). void sofa::core::loader::MeshLoader::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:10258,Deployability,update,updateInternal,10258,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLoader() overridesofa::core::loader::SceneLoaderinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:10311,Deployability,update,updateLinks,10311,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLoader() overridesofa::core::loader::SceneLoaderinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::loader::SceneLoader Member List . This is the complete list of members for sofa::core::loader::SceneLoader, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:112,Performance,load,loader,112,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::loader::SceneLoader Member List . This is the complete list of members for sofa::core::loader::SceneLoader, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:199,Performance,load,loader,199,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::loader::SceneLoader Member List . This is the complete list of members for sofa::core::loader::SceneLoader, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:1315,Performance,load,loader,1315,"el::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:1635,Performance,load,loader,1635,"l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::Visu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:2464,Performance,load,loader,2464,"e::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtual; findLinks(const std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:4127,Performance,load,loader,4127,"dLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:7116,Performance,load,load,7116," char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; load()=0sofa::core::loader::BaseLoaderpure virtual; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(sofa::core::objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::SceneLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:7136,Performance,load,loader,7136,"isplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; load()=0sofa::core::loader::BaseLoaderpure virtual; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(sofa::core::objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::SceneLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:8007,Performance,load,loader,8007,"lavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; load()=0sofa::core::loader::BaseLoaderpure virtual; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(sofa::core::objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::SceneLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit() overridesofa::core::loader::SceneLoadervirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; SceneLoader()sofa::core::loader::SceneLoaderprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:8410,Performance,load,loader,8410,"ofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(sofa::core::objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::SceneLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit() overridesofa::core::loader::SceneLoadervirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; SceneLoader()sofa::core::loader::SceneLoaderprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:8474,Performance,load,loader,8474,"core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(sofa::core::objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::SceneLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit() overridesofa::core::loader::SceneLoadervirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; SceneLoader()sofa::core::loader::SceneLoaderprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:8828,Performance,load,loader,8828,"l::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(sofa::core::objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::SceneLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit() overridesofa::core::loader::SceneLoadervirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; SceneLoader()sofa::core::loader::SceneLoaderprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(Scene",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:9057,Performance,load,loader,9057,"ing &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit() overridesofa::core::loader::SceneLoadervirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; SceneLoader()sofa::core::loader::SceneLoaderprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:9540,Performance,load,loader,9540,"model::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; SceneLoader()sofa::core::loader::SceneLoaderprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::m",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:9772,Performance,load,loader,9772,"ctmodel::BaseObjectvirtual; SceneLoader()sofa::core::loader::SceneLoaderprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:9863,Performance,load,loader,9863,"itionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:9896,Performance,load,loader,9896,"ring &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:9984,Performance,load,loader,9984,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLoader() overridesofa::core::loader::SceneLoaderinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:10795,Performance,load,loader,10795,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLoader() overridesofa::core::loader::SceneLoaderinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:10927,Performance,load,loader,10927,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLoader() overridesofa::core::loader::SceneLoaderinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:702,Testability,log,logging,702," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:2179,Testability,log,logging,2179,"zer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:2221,Testability,log,logging,2221,":objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:4492,Testability,log,logging,4492,::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:4534,Testability,log,logging,4534,:core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotecte,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:10328,Testability,log,logErrors,10328,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLoader() overridesofa::core::loader::SceneLoaderinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:1988,Usability,clear,clearLoggedMessages,1988,"dUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:2732,Availability,down,down,2732,"ink) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initiali",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:2896,Deployability,update,updateInternal,2896," const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:7391,Deployability,update,updateLinks,7391,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:9770,Deployability,update,update,9770,"nst char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SceneLoader ();  Constructor. More...;  ;  ~SceneLoader () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:1448,Integrability,depend,dependent,1448,"gend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:11580,Integrability,message,messages,11580,"od used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of field",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:707,Modifiability,variab,variables,707,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:791,Modifiability,inherit,inherited,791,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:1029,Modifiability,inherit,inherited,1029,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:2942,Modifiability,variab,variables,2942," const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:2984,Modifiability,variab,variables,2984," const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:3229,Modifiability,inherit,inherited,3229,"seObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:9481,Modifiability,inherit,inherited,9481,"nst char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SceneLoader ();  Constructor. More...;  ;  ~SceneLoader () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:9604,Modifiability,inherit,inherited,9604,"nst char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SceneLoader ();  Constructor. More...;  ;  ~SceneLoader () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:10327,Modifiability,inherit,inherited,10327,"ore...;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Dat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:11058,Modifiability,inherit,inherited,11058,"...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inhe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:11165,Modifiability,inherit,inherited,11165,"...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inhe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:11331,Modifiability,inherit,inherited,11331,"nitData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:12153,Modifiability,inherit,inherited,12153,"nts, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:12407,Modifiability,inherit,inherited,12407,"nts, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:12846,Modifiability,inherit,inherited,12846,"g, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:13246,Modifiability,inherit,inherited,13246,"ited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables us",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:13478,Modifiability,inherit,inherited,13478,"ited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables us",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:14401,Modifiability,variab,variables,14401," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:25,Performance,load,loader,25,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:227,Performance,load,loader,227,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:327,Performance,load,loader,327,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:818,Performance,load,loader,818,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:914,Performance,load,load,914,"﻿. SOFA API: sofa::core::loader::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::SceneLoader Class Reference . #include <SceneLoader.h>. Inheritance diagram for sofa::core::loader::SceneLoader:. [legend]. Public Member Functions;  SOFA_ABSTRACT_CLASS (SceneLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseConte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:1529,Performance,load,loader,1529,"ameters. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:9508,Performance,load,loader,9508,"nst char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SceneLoader ();  Constructor. More...;  ;  ~SceneLoader () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:11085,Performance,load,loader,11085,"...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inhe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:13505,Performance,load,loader,13505,"ited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables us",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:13667,Performance,load,loader,13667," VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:13765,Performance,load,loader,13765," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:13895,Performance,load,loader,13895," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:13981,Performance,load,loader,13981," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:14029,Performance,load,loader,14029," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:14272,Performance,load,loader,14272," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:14321,Performance,load,loader,14321," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:14543,Performance,load,loader,14543," More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Constructor details. ◆ SceneLoader(). sofa::core::loader::SceneLoader::SceneLoader ; (; ). protected . Constructor. . ◆ ~SceneLoader(). sofa::core::loader::SceneLoader::~SceneLoader ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ canLoad(). bool sofa::core::loader::SceneLoader::canLoad ; (; ). overridevirtual . Reimplemented from sofa::core::loader::BaseLoader. ◆ parse(). void sofa::core::loader::SceneLoader::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::loader::BaseLoader. ◆ reinit(). void sofa::core::loader::SceneLoader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::SceneLoader::SOFA_ABSTRACT_CLASS ; (; SceneLoader ; , . BaseLoader ;  . ). sofacoreloaderSceneLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:5247,Testability,log,logging,5247," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:5320,Testability,log,logging,5320," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:5362,Testability,log,logging,5362," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:5432,Testability,log,logging,5432," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:5543,Testability,log,logging,5543," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:5585,Testability,log,logging,5585," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:7409,Testability,log,logErrors,7409,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:5628,Usability,clear,clearLoggedMessages,5628," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:11195,Deployability,update,updateInternal,11195,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:11248,Deployability,update,updateLinks,11248,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::loader::VoxelLoader Member List . This is the complete list of members for sofa::core::loader::VoxelLoader, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addHexahedron(type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:112,Performance,load,loader,112,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::loader::VoxelLoader Member List . This is the complete list of members for sofa::core::loader::VoxelLoader, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addHexahedron(type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:199,Performance,load,loader,199,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::loader::VoxelLoader Member List . This is the complete list of members for sofa::core::loader::VoxelLoader, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addHexahedron(type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:732,Performance,load,loader,732," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addHexahedron(type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:954,Performance,load,loader,954," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addHexahedron(type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:1670,Performance,load,loader,1670," const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObject",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:1981,Performance,load,loader,1981,"aseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; createSegmentation3DTexture(unsigned char **textureData, int &width, int &height, int &depth)=0sofa::core::loader::VoxelLoaderpure virtual; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCoun",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:2847,Performance,load,loader,2847,"rtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; createSegmentation3DTexture(unsigned char **textureData, int &width, int &height, int &depth)=0sofa::core::loader::VoxelLoaderpure virtual; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:2949,Performance,load,loader,2949,"static; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; createSegmentation3DTexture(unsigned char **textureData, int &width, int &height, int &depth)=0sofa::core::loader::VoxelLoaderpure virtual; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtual; findLinks(const std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:4362,Performance,load,loader,4362,"d::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getData()=0sofa::core::loader::VoxelLoaderpure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDataSize() const =0sofa::core::loader::VoxelLoaderpure virtual; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectm",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:4546,Performance,load,loader,4546,"d(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getData()=0sofa::core::loader::VoxelLoaderpure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDataSize() const =0sofa::core::loader::VoxelLoaderpure virtual; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseOb",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:4735,Performance,load,loader,4735,"eLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getData()=0sofa::core::loader::VoxelLoaderpure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDataSize() const =0sofa::core::loader::VoxelLoaderpure virtual; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getROI() const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:4798,Performance,load,loader,4798,"ass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getData()=0sofa::core::loader::VoxelLoaderpure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDataSize() const =0sofa::core::loader::VoxelLoaderpure virtual; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getROI() const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:5592,Performance,load,loader,5592,rceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getROI() const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; getVoxelSize() const =0sofa::core::loader::VoxelLoaderpure virtual; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; hexahedrasofa::core::loader::VoxelLoader; Hexahe,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:5653,Performance,load,loader,5653,onSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getROI() const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; getVoxelSize() const =0sofa::core::loader::VoxelLoaderpure virtual; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; hexahedrasofa::core::loader::VoxelLoader; Hexahedron typedefsofa::core::loader::VoxelLoader; init()sofa::core,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:6072,Performance,load,loader,6072,"ine; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getROI() const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; getVoxelSize() const =0sofa::core::loader::VoxelLoaderpure virtual; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; hexahedrasofa::core::loader::VoxelLoader; Hexahedron typedefsofa::core::loader::VoxelLoader; init()sofa::core::objectmodel::BaseObjectvirtual; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *n",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:6569,Performance,load,loader,6569,"const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; getVoxelSize() const =0sofa::core::loader::VoxelLoaderpure virtual; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; hexahedrasofa::core::loader::VoxelLoader; Hexahedron typedefsofa::core::loader::VoxelLoader; init()sofa::core::objectmodel::BaseObjectvirtual; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:6620,Performance,load,loader,6620,"; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; getVoxelSize() const =0sofa::core::loader::VoxelLoaderpure virtual; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; hexahedrasofa::core::loader::VoxelLoader; Hexahedron typedefsofa::core::loader::VoxelLoader; init()sofa::core::objectmodel::BaseObjectvirtual; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:8084,Performance,load,load,8084," char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; load()=0sofa::core::loader::BaseLoaderpure virtual; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::BaseLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:8104,Performance,load,loader,8104,"isplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; load()=0sofa::core::loader::BaseLoaderpure virtual; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::BaseLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:8963,Performance,load,loader,8963,"otected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; load()=0sofa::core::loader::BaseLoaderpure virtual; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::BaseLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; positionssofa::core::loader::VoxelLoader; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:9294,Performance,load,loader,9294,"definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::BaseLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; positionssofa::core::loader::VoxelLoader; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:9407,Performance,load,loader,9407," m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(objectmodel::BaseObjectDescription *arg) overridesofa::core::loader::BaseLoadervirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; positionssofa::core::loader::VoxelLoader; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:9994,Performance,load,loader,9994,"eld(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; positionssofa::core::loader::VoxelLoader; Ptr typedefsofa::core::objectmodel::Base; readLine(char *buf, int size, FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:10477,Performance,load,loader,10477,"bjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:10709,Performance,load,loader,10709,")sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:10800,Performance,load,loader,10800,"itionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:10833,Performance,load,loader,10833,"ring &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:10921,Performance,load,loader,10921,")sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() ove",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:11343,Performance,load,loader,11343,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:11389,Performance,load,loader,11389,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:11581,Performance,load,loader,11581,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:11879,Performance,load,loader,11879,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:12011,Performance,load,loader,12011,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:1057,Testability,log,logging,1057," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addHexahedron(type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:2524,Testability,log,logging,2524,"::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; createSegmentation3DTexture(unsigned char **textureData, int &width, int &height, int &depth)=0sofa::core::loader::VoxelLoaderpure virtual; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:2566,Testability,log,logging,2566,"ofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; createSegmentation3DTexture(unsigned char **textureData, int &width, int &height, int &depth)=0sofa::core::loader::VoxelLoaderpure virtual; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:5176,Testability,log,logging,5176,onentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getData()=0sofa::core::loader::VoxelLoaderpure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDataSize() const =0sofa::core::loader::VoxelLoaderpure virtual; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getROI() const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; getVoxelSize() const =0sofa::core::loader::VoxelLoaderpure virtual; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopol,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:5218,Testability,log,logging,5218,:Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getData()=0sofa::core::loader::VoxelLoaderpure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDataSize() const =0sofa::core::loader::VoxelLoaderpure virtual; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFilename()sofa::core::loader::BaseLoader; getHexaIndicesInGrid() const =0sofa::core::loader::VoxelLoaderpure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getROI() const =0sofa::core::loader::VoxelLoaderpure virtual; getSegmentID()=0sofa::core::loader::VoxelLoaderpure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; getVoxelSize() const =0sofa::core::loader::VoxelLoaderpure virtual; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseOb,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:11265,Testability,log,logErrors,11265,"eName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::core::loader::VoxelLoader; Vec6i typedefsofa::core::loader::VoxelLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoaderprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:2333,Usability,clear,clearLoggedMessages,2333,"::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; createSegmentation3DTexture(unsigned char **textureData, int &width, int &height, int &depth)=0sofa::core::loader::VoxelLoaderpure virtual; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::core::loader::BaseLoader; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:4634,Availability,down,down,4634,"ink) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:4908,Deployability,update,updateInternal,4908,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:9403,Deployability,update,updateLinks,9403,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:11737,Deployability,update,update,11737," addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  VoxelLoader ();  ;  ~VoxelLoader () override;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:1123,Integrability,message,messages,1123,"for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7);  ; virtual type::Vec3 getVoxelSize () const =0;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:3350,Integrability,depend,dependent,3350,"0;  ; virtual unsigned char * getData ()=0;  ; virtual unsigned char * getSegmentID ()=0;  ; virtual void createSegmentation3DTexture (unsigned char **textureData, int &width, int &height, int &depth)=0;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; virtual bool canLoad ();  ; void parse (objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:601,Modifiability,inherit,inherited,601,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:708,Modifiability,inherit,inherited,708,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:874,Modifiability,inherit,inherited,874,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:2486,Modifiability,inherit,inherited,2486,"o More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7);  ; virtual type::Vec3 getVoxelSize () const =0;  ; virtual type::vector< unsigned int > getHexaIndicesInGrid () const =0;  ; virtual int getDataSize () const =0;  ; virtual Vec6i getROI () const =0;  ; virtual unsigned char * getData ()=0;  ; virtual unsigned char * getSegmentID ()=0;  ; virtual void createSegmentation3DTexture (unsigned char **textureData, int &width, int &height, int &depth)=0;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; virtual bool canLoad ();  ; void parse (objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:2931,Modifiability,inherit,inherited,2931," int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7);  ; virtual type::Vec3 getVoxelSize () const =0;  ; virtual type::vector< unsigned int > getHexaIndicesInGrid () const =0;  ; virtual int getDataSize () const =0;  ; virtual Vec6i getROI () const =0;  ; virtual unsigned char * getData ()=0;  ; virtual unsigned char * getSegmentID ()=0;  ; virtual void createSegmentation3DTexture (unsigned char **textureData, int &width, int &height, int &depth)=0;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; virtual bool canLoad ();  ; void parse (objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:4844,Modifiability,variab,variables,4844,"ore...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:4954,Modifiability,variab,variables,4954,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:4996,Modifiability,variab,variables,4996,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:5241,Modifiability,inherit,inherited,5241,"potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:11448,Modifiability,inherit,inherited,11448," addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  VoxelLoader ();  ;  ~VoxelLoader () override;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:11571,Modifiability,inherit,inherited,11571," addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  VoxelLoader ();  ;  ~VoxelLoader () override;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:12294,Modifiability,inherit,inherited,12294,"erride;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:13028,Modifiability,inherit,inherited,13028,"now if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:13282,Modifiability,inherit,inherited,13282,"now if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:13721,Modifiability,inherit,inherited,13721,"ame Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::cor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14121,Modifiability,inherit,inherited,14121,"ited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14353,Modifiability,inherit,inherited,14353,"ited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:25,Performance,load,loader,25,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:248,Performance,load,loader,248,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:356,Performance,load,loader,356,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:485,Performance,load,loaded,485,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:562,Performance,load,loaded,562,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:628,Performance,load,loader,628,"﻿. SOFA API: sofa::core::loader::VoxelLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::loader::VoxelLoader Class Referenceabstract . #include <VoxelLoader.h>. Inheritance diagram for sofa::core::loader::VoxelLoader:. [legend]. Public Attributes; Data< type::vector< sofa::type::Vec3 > > positions;  Coordinates of the nodes loaded. More...;  ; Data< type::vector< Hexahedron > > hexahedra;  Hexahedra loaded. More...;  ;  Public Attributes inherited from sofa::core::loader::BaseLoader; objectmodel::DataFileName d_filename;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:2513,Performance,load,loader,2513,"o More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7);  ; virtual type::Vec3 getVoxelSize () const =0;  ; virtual type::vector< unsigned int > getHexaIndicesInGrid () const =0;  ; virtual int getDataSize () const =0;  ; virtual Vec6i getROI () const =0;  ; virtual unsigned char * getData ()=0;  ; virtual unsigned char * getSegmentID ()=0;  ; virtual void createSegmentation3DTexture (unsigned char **textureData, int &width, int &height, int &depth)=0;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; virtual bool canLoad ();  ; void parse (objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:2609,Performance,load,load,2609,"o More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VoxelLoader, BaseLoader);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p);  ; void addHexahedron (type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7);  ; virtual type::Vec3 getVoxelSize () const =0;  ; virtual type::vector< unsigned int > getHexaIndicesInGrid () const =0;  ; virtual int getDataSize () const =0;  ; virtual Vec6i getROI () const =0;  ; virtual unsigned char * getData ()=0;  ; virtual unsigned char * getSegmentID ()=0;  ; virtual void createSegmentation3DTexture (unsigned char **textureData, int &width, int &height, int &depth)=0;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; virtual bool canLoad ();  ; void parse (objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::strin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:3431,Performance,load,loader,3431,"FA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; virtual bool canLoad ();  ; void parse (objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:11475,Performance,load,loader,11475," addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  VoxelLoader ();  ;  ~VoxelLoader () override;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14380,Performance,load,loader,14380,"ited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14570,Performance,load,loader,14570,"k m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsig",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14612,Performance,load,loaded,14612," m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14687,Performance,load,loader,14687," More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14744,Performance,load,loaded,14744,"m sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). vir",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14804,Performance,load,loader,14804,"T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:14887,Performance,load,loader,14887,"by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtua",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:15009,Performance,load,loader,15009,"on method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:15190,Performance,load,loader,15190,"T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ hexahedra. Data< type::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::m",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:15503,Performance,load,loader,15503,"e::vector<Hexahedron > > sofa::core::loader::VoxelLoader::hexahedra. Hexahedra loaded. . ◆ positions. Data< type::vector<sofa::type::Vec3 > > sofa::core::loader::VoxelLoader::positions. Coordinates of the nodes loaded. . Constructor details. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::com",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:15767,Performance,load,loader,15767,"etails. ◆ VoxelLoader(). sofa::core::loader::VoxelLoader::VoxelLoader ; (; ). protected . ◆ ~VoxelLoader(). sofa::core::loader::VoxelLoader::~VoxelLoader ; (; ). overrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getVoxelSize(). virtual type::Vec3 sofa::core::loader::VoxelLoader::getVoxelSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ SOFA_ABSTRACT_CLASS(). s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:15919,Performance,load,loader,15919,"verrideprotected . Function details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getVoxelSize(). virtual type::Vec3 sofa::core::loader::VoxelLoader::getVoxelSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::VoxelLoader::SOFA_ABSTRACT_CLASS ; (; VoxelLoader ; , . BaseLoader ;  . ). sofacoreloaderVoxelLoader; Generated on Mon Nov 11 2024 03:15:48 for ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:16114,Performance,load,loader,16114,"unction details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getVoxelSize(). virtual type::Vec3 sofa::core::loader::VoxelLoader::getVoxelSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::VoxelLoader::SOFA_ABSTRACT_CLASS ; (; VoxelLoader ; , . BaseLoader ;  . ). sofacoreloaderVoxelLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:16283,Performance,load,loader,16283,"unction details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getVoxelSize(). virtual type::Vec3 sofa::core::loader::VoxelLoader::getVoxelSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::VoxelLoader::SOFA_ABSTRACT_CLASS ; (; VoxelLoader ; , . BaseLoader ;  . ). sofacoreloaderVoxelLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:16453,Performance,load,loader,16453,"unction details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getVoxelSize(). virtual type::Vec3 sofa::core::loader::VoxelLoader::getVoxelSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::VoxelLoader::SOFA_ABSTRACT_CLASS ; (; VoxelLoader ; , . BaseLoader ;  . ). sofacoreloaderVoxelLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:16618,Performance,load,loader,16618,"unction details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getVoxelSize(). virtual type::Vec3 sofa::core::loader::VoxelLoader::getVoxelSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::VoxelLoader::SOFA_ABSTRACT_CLASS ; (; VoxelLoader ; , . BaseLoader ;  . ). sofacoreloaderVoxelLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:16778,Performance,load,loader,16778,"unction details. ◆ addHexahedron() [1/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . const type::fixed_array< unsigned int, 8 > & ; p . ). ◆ addHexahedron() [2/2]. void sofa::core::loader::VoxelLoader::addHexahedron ; (; type::vector< Hexahedron > * ; pHexahedra, . unsigned int ; p0, . unsigned int ; p1, . unsigned int ; p2, . unsigned int ; p3, . unsigned int ; p4, . unsigned int ; p5, . unsigned int ; p6, . unsigned int ; p7 . ). ◆ createSegmentation3DTexture(). virtual void sofa::core::loader::VoxelLoader::createSegmentation3DTexture ; (; unsigned char ** ; textureData, . int & ; width, . int & ; height, . int & ; depth . ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getData(). virtual unsigned char* sofa::core::loader::VoxelLoader::getData ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getDataSize(). virtual int sofa::core::loader::VoxelLoader::getDataSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getHexaIndicesInGrid(). virtual type::vector<unsigned int> sofa::core::loader::VoxelLoader::getHexaIndicesInGrid ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getROI(). virtual Vec6i sofa::core::loader::VoxelLoader::getROI ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getSegmentID(). virtual unsigned char* sofa::core::loader::VoxelLoader::getSegmentID ; (; ). pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ getVoxelSize(). virtual type::Vec3 sofa::core::loader::VoxelLoader::getVoxelSize ; (; ); const. pure virtual . Implemented in sofa::component::io::mesh::VoxelGridLoader. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::loader::VoxelLoader::SOFA_ABSTRACT_CLASS ; (; VoxelLoader ; , . BaseLoader ;  . ). sofacoreloaderVoxelLoader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:7259,Testability,log,logging,7259," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:7332,Testability,log,logging,7332," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:7374,Testability,log,logging,7374," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:7444,Testability,log,logging,7444," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:7555,Testability,log,logging,7555," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:7597,Testability,log,logging,7597," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:9421,Testability,log,logErrors,9421,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:7640,Usability,clear,clearLoggedMessages,7640," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_deprecated_data-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::lifecycle::DeprecatedData Member List . This is the complete list of members for sofa::core::objectmodel::lifecycle::DeprecatedData, including all inherited members. DeprecatedData(Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext)sofa::core::objectmodel::lifecycle::DeprecatedData; m_deprecationVersionsofa::core::objectmodel::lifecycle::DeprecatedData; m_helptextsofa::core::objectmodel::lifecycle::DeprecatedData; m_isRemovedsofa::core::objectmodel::lifecycle::DeprecatedData; m_namesofa::core::objectmodel::lifecycle::DeprecatedData; m_removalVersionsofa::core::objectmodel::lifecycle::DeprecatedData. Generated on Mon Nov 11 2024 03:16:01 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_deprecated_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_deprecated_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::lifecycle::RemovedData Member List . This is the complete list of members for sofa::core::objectmodel::lifecycle::RemovedData, including all inherited members. DeprecatedData(Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext)sofa::core::objectmodel::lifecycle::DeprecatedData; m_deprecationVersionsofa::core::objectmodel::lifecycle::DeprecatedData; m_helptextsofa::core::objectmodel::lifecycle::DeprecatedData; m_isRemovedsofa::core::objectmodel::lifecycle::DeprecatedData; m_namesofa::core::objectmodel::lifecycle::DeprecatedData; m_removalVersionsofa::core::objectmodel::lifecycle::DeprecatedData; RemovedData(Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext)sofa::core::objectmodel::lifecycle::RemovedDatainline. Generated on Mon Nov 11 2024 03:16:01 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html:890,Modifiability,inherit,inherited,890,"﻿. SOFA API: sofa::core::objectmodel::lifecycle::RemovedData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::lifecycle::RemovedData Class Reference . #include <RemovedData.h>. Inheritance diagram for sofa::core::objectmodel::lifecycle::RemovedData:. [legend]; Detailed Description; Placeholder for a Data<T> to indicate a Data is now removed; This will also register the data name into a dedicated structure of Base object so a warning will be issued if users continue accessing it;; Use case: RemovedData d_sofaIsGreatM(this, ""v23.06"", ""v23.12"", ""sofaIsGreat"", """") . Public Member Functions;  RemovedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  ;  Public Member Functions inherited from sofa::core::objectmodel::lifecycle::DeprecatedData;  DeprecatedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::lifecycle::DeprecatedData; std::string m_deprecationVersion;  ; std::string m_removalVersion;  ; std::string m_name;  ; std::string m_helptext;  ; bool m_isRemoved;  . Constructor details. ◆ RemovedData(). sofa::core::objectmodel::lifecycle::RemovedData::RemovedData ; (; Base * ; b, . const std::string & ; deprecationVersion, . const std::string & ; removalVersion, . const std::string & ; name, . const std::string & ; helptext . ). inline . sofacoreobjectmodellifecycleRemovedData; Generated on Mon Nov 11 2024 03:16:01 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html:1164,Modifiability,inherit,inherited,1164,"﻿. SOFA API: sofa::core::objectmodel::lifecycle::RemovedData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::lifecycle::RemovedData Class Reference . #include <RemovedData.h>. Inheritance diagram for sofa::core::objectmodel::lifecycle::RemovedData:. [legend]; Detailed Description; Placeholder for a Data<T> to indicate a Data is now removed; This will also register the data name into a dedicated structure of Base object so a warning will be issued if users continue accessing it;; Use case: RemovedData d_sofaIsGreatM(this, ""v23.06"", ""v23.12"", ""sofaIsGreat"", """") . Public Member Functions;  RemovedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  ;  Public Member Functions inherited from sofa::core::objectmodel::lifecycle::DeprecatedData;  DeprecatedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::lifecycle::DeprecatedData; std::string m_deprecationVersion;  ; std::string m_removalVersion;  ; std::string m_name;  ; std::string m_helptext;  ; bool m_isRemoved;  . Constructor details. ◆ RemovedData(). sofa::core::objectmodel::lifecycle::RemovedData::RemovedData ; (; Base * ; b, . const std::string & ; deprecationVersion, . const std::string & ; removalVersion, . const std::string & ; name, . const std::string & ; helptext . ). inline . sofacoreobjectmodellifecycleRemovedData; Generated on Mon Nov 11 2024 03:16:01 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html:586,Security,access,accessing,586,"﻿. SOFA API: sofa::core::objectmodel::lifecycle::RemovedData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::lifecycle::RemovedData Class Reference . #include <RemovedData.h>. Inheritance diagram for sofa::core::objectmodel::lifecycle::RemovedData:. [legend]; Detailed Description; Placeholder for a Data<T> to indicate a Data is now removed; This will also register the data name into a dedicated structure of Base object so a warning will be issued if users continue accessing it;; Use case: RemovedData d_sofaIsGreatM(this, ""v23.06"", ""v23.12"", ""sofaIsGreat"", """") . Public Member Functions;  RemovedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  ;  Public Member Functions inherited from sofa::core::objectmodel::lifecycle::DeprecatedData;  DeprecatedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::lifecycle::DeprecatedData; std::string m_deprecationVersion;  ; std::string m_removalVersion;  ; std::string m_name;  ; std::string m_helptext;  ; bool m_isRemoved;  . Constructor details. ◆ RemovedData(). sofa::core::objectmodel::lifecycle::RemovedData::RemovedData ; (; Base * ; b, . const std::string & ; deprecationVersion, . const std::string & ; removalVersion, . const std::string & ; name, . const std::string & ; helptext . ). inline . sofacoreobjectmodellifecycleRemovedData; Generated on Mon Nov 11 2024 03:16:01 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::vectorData< T > Member List . This is the complete list of members for sofa::core::objectmodel::vectorData< T >, including all inherited members. Alloc typedefsofa::type::vector< core::objectmodel::Data< T > * >; const_reference typedefsofa::type::vector< core::objectmodel::Data< T > * >; fastResize(Size n)sofa::type::vector< core::objectmodel::Data< T > * >inline; fill(const core::objectmodel::Data< T > * &value)sofa::type::vector< core::objectmodel::Data< T > * >inline; Inherit typedefsofa::core::objectmodel::vectorData< T >; m_componentsofa::core::objectmodel::vectorData< T >protected; m_dataEngineDataTypesofa::core::objectmodel::vectorData< T >protected; m_defaultValuesofa::core::objectmodel::vectorData< T >protected; m_helpsofa::core::objectmodel::vectorData< T >protected; m_namesofa::core::objectmodel::vectorData< T >protected; memory_manager typedefsofa::type::vector< core::objectmodel::Data< T > * >; merge(Data< T > &outputData, const vectorData< T > &vectorData)sofa::core::objectmodel::vectorData< T >inlinestatic; operator=(const std::vector< core::objectmodel::Data< T > *, Alloc > &x)sofa::type::vector< core::objectmodel::Data< T > * >inline; operator=(std::vector< core::objectmodel::Data< T > *, Alloc > &&v)sofa::type::vector< core::objectmodel::Data< T > * >inline; operator[](Size n)sofa::type::vector< core::objectmodel::Data< T > * >inline; operator[](Size n) constsofa::type::vector< core::objectmodel::Data< T > * >inline; parseFieldsSizeData(const std::map< std::string, std::string * > &str, Data< unsigned int > &size)sofa::core::objectmodel::vectorData< T >inline; parseSizeData(sofa::core::objectmodel::BaseObjectDescription *arg, Data< unsigned int > &size)sofa::core::objectmodel::vectorData< T >inline; read(std::istream &in)sofa::type::vector< core::objectmodel::Data< T > * >inline; read(std::istream &in)sofa::type::vector< core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html:566,Modifiability,variab,variable,566,"﻿. SOFA API: sofa::core::objectmodel::vectorData< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::vectorData< T > Class Template Reference . #include <vectorData.h>. Inheritance diagram for sofa::core::objectmodel::vectorData< T >:. [legend]; Detailed Description; template<class T>; class sofa::core::objectmodel::vectorData< T >; A helper class which implements a vector of a variable number of Data; When the owner component is a DataEngine, the Data can be automatically added as inputs or outputs; WarningThe first index is 1 in the Data name; AuthorThomas Lemaire ; Date2014 . Protected Attributes; core::objectmodel::Base * m_component;  ; std::string m_name;  ; std::string m_help;  ; DataEngineDataType m_dataEngineDataType;  only valid if m_component is a DataEngine More...;  ; T m_defaultValue;  . Public Member Functions;  vectorData (core::objectmodel::Base *component, std::string const &name, std::string const &help, DataEngineDataType dataEngineDataType=DataEngineDataType::DataEngineNothing, const T &defaultValue=T());  'dataEngineInOut' is only valid if 'component' is a DataEngine More...;  ;  ~vectorData ();  ; void parseSizeData (sofa::core::objectmodel::BaseObjectDescription *arg, Data< unsigned int > &size);  ; void parseFieldsSizeData (const std::map< std::string, std::string * > &str, Data< unsigned int > &size);  ; void resize (const unsigned int count);  ;  Public Member Functions inherited from sofa::type::vector< core::objectmodel::Data< T > * >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const core::objectmodel::Data< T > * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< core::objectm",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html:1605,Modifiability,inherit,inherited,1605,"::vectorData< T >; A helper class which implements a vector of a variable number of Data; When the owner component is a DataEngine, the Data can be automatically added as inputs or outputs; WarningThe first index is 1 in the Data name; AuthorThomas Lemaire ; Date2014 . Protected Attributes; core::objectmodel::Base * m_component;  ; std::string m_name;  ; std::string m_help;  ; DataEngineDataType m_dataEngineDataType;  only valid if m_component is a DataEngine More...;  ; T m_defaultValue;  . Public Member Functions;  vectorData (core::objectmodel::Base *component, std::string const &name, std::string const &help, DataEngineDataType dataEngineDataType=DataEngineDataType::DataEngineNothing, const T &defaultValue=T());  'dataEngineInOut' is only valid if 'component' is a DataEngine More...;  ;  ~vectorData ();  ; void parseSizeData (sofa::core::objectmodel::BaseObjectDescription *arg, Data< unsigned int > &size);  ; void parseFieldsSizeData (const std::map< std::string, std::string * > &str, Data< unsigned int > &size);  ; void resize (const unsigned int count);  ;  Public Member Functions inherited from sofa::type::vector< core::objectmodel::Data< T > * >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const core::objectmodel::Data< T > * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< core::objectmodel::Data< T > * > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< core::objectmodel::Data< T > * >::const_iterator first, typename vector< core::objectmodel::Data< T > * >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html:2630,Security,access,access,2630,"nherited from sofa::type::vector< core::objectmodel::Data< T > * >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const core::objectmodel::Data< T > * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< core::objectmodel::Data< T > * > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< core::objectmodel::Data< T > * >::const_iterator first, typename vector< core::objectmodel::Data< T > * >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html:2711,Security,access,access,2711," ();  Basic constructor. More...;  ;  vector (Size n, const core::objectmodel::Data< T > * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< core::objectmodel::Data< T > * > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< core::objectmodel::Data< T > * >::const_iterator first, typename vector< core::objectmodel::Data< T > * >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; void fill (const core::objectmodel::Data< T > * &value);  Sets every elem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AbstractDataLink Member List . This is the complete list of members for sofa::core::objectmodel::AbstractDataLink, including all inherited members. getOwner() constsofa::core::objectmodel::AbstractDataLink; getPath() constsofa::core::objectmodel::AbstractDataLink; getTarget() constsofa::core::objectmodel::AbstractDataLink; hasPath() constsofa::core::objectmodel::AbstractDataLink; hasTarget() constsofa::core::objectmodel::AbstractDataLink; m_pathsofa::core::objectmodel::AbstractDataLinkprotected; resolvePathAndGetTarget()sofa::core::objectmodel::AbstractDataLink; resolvePathAndSetTarget()sofa::core::objectmodel::AbstractDataLink; setPath(const std::string &path)sofa::core::objectmodel::AbstractDataLink; setTarget(BaseData *target)sofa::core::objectmodel::AbstractDataLink. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html:572,Security,access,access,572,"﻿. SOFA API: sofa::core::objectmodel::AbstractDataLink Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AbstractDataLink Class Reference . #include <AbstractDataLink.h>; AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. ; More... Inheritance diagram for sofa::core::objectmodel::AbstractDataLink:. [legend]; Detailed Description; AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. . Protected Attributes; std::string m_path {""""};  . Public Member Functions; const BaseData & getOwner () const;  ; void setTarget (BaseData *target);  Change the targeted DataField and set the path to the empty string. More...;  ; BaseData * getTarget () const;  Get the targeted DataField. More...;  ; bool hasTarget () const;  Returns true if there is a target. More...;  ; const std::string getPath () const;  Get the path (is any) More...;  ; void setPath (const std::string &path);  Set the path, try to resolve it, on success set the DataField. More...;  ; bool hasPath () const;  Returns true if the path is set (and thus getTarget() == nullptr) More...;  ; bool resolvePathAndSetTarget ();  ; BaseData * resolvePathAndGetTarget ();  . Attribute details. ◆ m_path. std::string sofa::core::objectmo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html:1070,Security,access,access,1070,"﻿. SOFA API: sofa::core::objectmodel::AbstractDataLink Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AbstractDataLink Class Reference . #include <AbstractDataLink.h>; AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. ; More... Inheritance diagram for sofa::core::objectmodel::AbstractDataLink:. [legend]; Detailed Description; AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. . Protected Attributes; std::string m_path {""""};  . Public Member Functions; const BaseData & getOwner () const;  ; void setTarget (BaseData *target);  Change the targeted DataField and set the path to the empty string. More...;  ; BaseData * getTarget () const;  Get the targeted DataField. More...;  ; bool hasTarget () const;  Returns true if there is a target. More...;  ; const std::string getPath () const;  Get the path (is any) More...;  ; void setPath (const std::string &path);  Set the path, try to resolve it, on success set the DataField. More...;  ; bool hasPath () const;  Returns true if the path is set (and thus getTarget() == nullptr) More...;  ; bool resolvePathAndSetTarget ();  ; BaseData * resolvePathAndGetTarget ();  . Attribute details. ◆ m_path. std::string sofa::core::objectmo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html:405,Deployability,release,release,405,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Aspect Member List . This is the complete list of members for sofa::core::objectmodel::Aspect, including all inherited members. add_ref()sofa::core::objectmodel::Aspect; aspectID() constsofa::core::objectmodel::Aspectinline; AspectPool classsofa::core::objectmodel::Aspectfriend; release()sofa::core::objectmodel::Aspect. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Aspect Member List . This is the complete list of members for sofa::core::objectmodel::Aspect, including all inherited members. add_ref()sofa::core::objectmodel::Aspect; aspectID() constsofa::core::objectmodel::Aspectinline; AspectPool classsofa::core::objectmodel::Aspectfriend; release()sofa::core::objectmodel::Aspect. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:571,Deployability,release,release,571,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:925,Deployability,release,release,925,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:974,Deployability,release,release,974,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:318,Energy Efficiency,allocate,allocated,318,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:448,Safety,safe,safe,448,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:754,Safety,avoid,avoid,754,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:1047,Safety,avoid,avoid,1047,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html:448,Availability,avail,availableIDsofa,448,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectBuffer Member List . This is the complete list of members for sofa::core::objectmodel::AspectBuffer, including all inherited members. allocate()sofa::core::objectmodel::AspectBuffer; AspectBuffer(AspectPool &pool)sofa::core::objectmodel::AspectBuffer; AtomicInt typedefsofa::core::objectmodel::AspectBufferprotected; availableIDsofa::core::objectmodel::AspectBufferprotected; clear()sofa::core::objectmodel::AspectBuffer; latestIDsofa::core::objectmodel::AspectBufferprotected; poolsofa::core::objectmodel::AspectBufferprotected; pop(AspectRef &id)sofa::core::objectmodel::AspectBuffer; push(AspectRef id)sofa::core::objectmodel::AspectBuffer; ~AspectBuffer()sofa::core::objectmodel::AspectBuffer. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html:265,Energy Efficiency,allocate,allocate,265,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectBuffer Member List . This is the complete list of members for sofa::core::objectmodel::AspectBuffer, including all inherited members. allocate()sofa::core::objectmodel::AspectBuffer; AspectBuffer(AspectPool &pool)sofa::core::objectmodel::AspectBuffer; AtomicInt typedefsofa::core::objectmodel::AspectBufferprotected; availableIDsofa::core::objectmodel::AspectBufferprotected; clear()sofa::core::objectmodel::AspectBuffer; latestIDsofa::core::objectmodel::AspectBufferprotected; poolsofa::core::objectmodel::AspectBufferprotected; pop(AspectRef &id)sofa::core::objectmodel::AspectBuffer; push(AspectRef id)sofa::core::objectmodel::AspectBuffer; ~AspectBuffer()sofa::core::objectmodel::AspectBuffer. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectBuffer Member List . This is the complete list of members for sofa::core::objectmodel::AspectBuffer, including all inherited members. allocate()sofa::core::objectmodel::AspectBuffer; AspectBuffer(AspectPool &pool)sofa::core::objectmodel::AspectBuffer; AtomicInt typedefsofa::core::objectmodel::AspectBufferprotected; availableIDsofa::core::objectmodel::AspectBufferprotected; clear()sofa::core::objectmodel::AspectBuffer; latestIDsofa::core::objectmodel::AspectBufferprotected; poolsofa::core::objectmodel::AspectBufferprotected; pop(AspectRef &id)sofa::core::objectmodel::AspectBuffer; push(AspectRef id)sofa::core::objectmodel::AspectBuffer; ~AspectBuffer()sofa::core::objectmodel::AspectBuffer. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html:507,Usability,clear,clear,507,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectBuffer Member List . This is the complete list of members for sofa::core::objectmodel::AspectBuffer, including all inherited members. allocate()sofa::core::objectmodel::AspectBuffer; AspectBuffer(AspectPool &pool)sofa::core::objectmodel::AspectBuffer; AtomicInt typedefsofa::core::objectmodel::AspectBufferprotected; availableIDsofa::core::objectmodel::AspectBufferprotected; clear()sofa::core::objectmodel::AspectBuffer; latestIDsofa::core::objectmodel::AspectBufferprotected; poolsofa::core::objectmodel::AspectBufferprotected; pop(AspectRef &id)sofa::core::objectmodel::AspectBuffer; push(AspectRef id)sofa::core::objectmodel::AspectBuffer; ~AspectBuffer()sofa::core::objectmodel::AspectBuffer. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:684,Availability,avail,availableID,684,"﻿. SOFA API: sofa::core::objectmodel::AspectBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:714,Availability,avail,available,714,"﻿. SOFA API: sofa::core::objectmodel::AspectBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1207,Availability,avail,available,1207,"f all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1320,Availability,avail,availableID,1320,"lass is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1382,Availability,avail,availableID,1382,"fer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false ot",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1423,Availability,avail,available,1423,"t up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:2341,Availability,avail,available,2341,"ct ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::objectmodel::AspectBuffer::push ; (; AspectRef ; id). Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) . sofacoreobjectmodelAspectBuffer; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:509,Deployability,update,update,509,"﻿. SOFA API: sofa::core::objectmodel::AspectBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:855,Energy Efficiency,allocate,allocate,855,"﻿. SOFA API: sofa::core::objectmodel::AspectBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1108,Energy Efficiency,allocate,allocate,1108,"ctBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1881,Energy Efficiency,allocate,allocate,1881,"ct ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::objectmodel::AspectBuffer::push ; (; AspectRef ; id). Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) . sofacoreobjectmodelAspectBuffer; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1942,Energy Efficiency,allocate,allocate,1942,"ct ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::objectmodel::AspectBuffer::push ; (; AspectRef ; id). Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) . sofacoreobjectmodelAspectBuffer; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:2601,Energy Efficiency,allocate,allocate,2601,"ct ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::objectmodel::AspectBuffer::push ; (; AspectRef ; id). Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) . sofacoreobjectmodelAspectBuffer; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1286,Usability,clear,clear,1286,"Pool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:2048,Usability,clear,clear,2048,"ct ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::objectmodel::AspectBuffer::push ; (; AspectRef ; id). Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) . sofacoreobjectmodelAspectBuffer; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:2101,Usability,clear,clear,2101,"ct ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::objectmodel::AspectBuffer::push ; (; AspectRef ; id). Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) . sofacoreobjectmodelAspectBuffer; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html:599,Deployability,release,release,599,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectPool Member List . This is the complete list of members for sofa::core::objectmodel::AspectPool, including all inherited members. allocate()sofa::core::objectmodel::AspectPool; Aspect classsofa::core::objectmodel::AspectPoolfriend; AspectPool()sofa::core::objectmodel::AspectPool; getAspect(int id)sofa::core::objectmodel::AspectPool; getAspectCounter(int id) constsofa::core::objectmodel::AspectPoolinline; nbAspects() constsofa::core::objectmodel::AspectPoolinline; release(int id)sofa::core::objectmodel::AspectPoolprotected; setReleaseCallback(const std::function< void(int)> &callback)sofa::core::objectmodel::AspectPool; ~AspectPool()sofa::core::objectmodel::AspectPool. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html:261,Energy Efficiency,allocate,allocate,261,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectPool Member List . This is the complete list of members for sofa::core::objectmodel::AspectPool, including all inherited members. allocate()sofa::core::objectmodel::AspectPool; Aspect classsofa::core::objectmodel::AspectPoolfriend; AspectPool()sofa::core::objectmodel::AspectPool; getAspect(int id)sofa::core::objectmodel::AspectPool; getAspectCounter(int id) constsofa::core::objectmodel::AspectPoolinline; nbAspects() constsofa::core::objectmodel::AspectPoolinline; release(int id)sofa::core::objectmodel::AspectPoolprotected; setReleaseCallback(const std::function< void(int)> &callback)sofa::core::objectmodel::AspectPool; ~AspectPool()sofa::core::objectmodel::AspectPool. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectPool Member List . This is the complete list of members for sofa::core::objectmodel::AspectPool, including all inherited members. allocate()sofa::core::objectmodel::AspectPool; Aspect classsofa::core::objectmodel::AspectPoolfriend; AspectPool()sofa::core::objectmodel::AspectPool; getAspect(int id)sofa::core::objectmodel::AspectPool; getAspectCounter(int id) constsofa::core::objectmodel::AspectPoolinline; nbAspects() constsofa::core::objectmodel::AspectPoolinline; release(int id)sofa::core::objectmodel::AspectPoolprotected; setReleaseCallback(const std::function< void(int)> &callback)sofa::core::objectmodel::AspectPool; ~AspectPool()sofa::core::objectmodel::AspectPool. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:382,Availability,avail,available,382,"﻿. SOFA API: sofa::core::objectmodel::AspectPool Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::functio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1176,Availability,alive,alive,1176,"ember Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . sofacoreobjectmodelAspectPool; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1328,Availability,avail,available,1328,"ber Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . sofacoreobjectmodelAspectPool; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1828,Availability,avail,available,1828,"ber Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . sofacoreobjectmodelAspectPool; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:756,Deployability,release,release,756,"﻿. SOFA API: sofa::core::objectmodel::AspectPool Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::functio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1659,Deployability,release,release,1659,"ber Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . sofacoreobjectmodelAspectPool; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1712,Deployability,release,release,1712,"ber Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . sofacoreobjectmodelAspectPool; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:607,Energy Efficiency,allocate,allocate,607,"﻿. SOFA API: sofa::core::objectmodel::AspectPool Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::functio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1046,Energy Efficiency,allocate,allocate,1046,"lass Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ A",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1105,Energy Efficiency,allocate,allocate,1105,"Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1872,Energy Efficiency,allocate,allocate,1872,"ber Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . sofacoreobjectmodelAspectPool; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:415,Safety,safe,safe,415,"﻿. SOFA API: sofa::core::objectmodel::AspectPool Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::functio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:6822,Deployability,update,updateLinks,6822,"model::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeData(BaseData *f)sofa::core::objectmodel::Base; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:230,Modifiability,inherit,inherited,230,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Base Member List . This is the complete list of members for sofa::core::objectmodel::Base, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:698,Testability,log,logging,698," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:1354,Testability,log,logging,1354,"r *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:1396,Testability,log,logging,1396,"dData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:3142,Testability,log,logging,3142,"ass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=tr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:3184,Testability,log,logging,3184,"nst BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() constsofa::core::objectmodel::Baseinlinevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::obje",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:6839,Testability,log,logErrors,6839,"model::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeData(BaseData *f)sofa::core::objectmodel::Base; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:1262,Usability,clear,clearLoggedMessages,1262,"d, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:7592,Deployability,update,updateLinks,7592,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:27427,Deployability,update,updateLinks,27427,"re the instance has been created This is useful to store where the component was emitted from . ◆ setInstanciationSourceFilePos(). void sofa::core::objectmodel::Base::setInstanciationSourceFilePos ; (; const int ; lineco). Set the file location (line number) where the instance has been created This is useful to store where the component was emitted from . ◆ setName() [1/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n). Set the name of this object. . ◆ setName() [2/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n, . int ; counter . ). Set the name of this object, adding an integer counter. . ◆ shortName(). template<class T > . static std::string sofa::core::objectmodel::Base::shortName ; (; const T * ; ptr = nullptr, . BaseObjectDescription * ; = nullptr . ). inlinestatic . Helper method to get the shortname of a type derived from this class. The default implementation return the class name.; This method should be used as follow : std::string type = Base::shortName<B>(); ; This way derived classes can redefine the shortName method . ◆ updateLinks(). void sofa::core::objectmodel::Base::updateLinks ; (; bool ; logErrors = true). virtual . Update pointers in case the pointed-to objects have appeared. . ◆ writeDatas() [1/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::map< std::string, std::string * > & ; str). Write the current field values to the given map of name -> value pairs. . ◆ writeDatas() [2/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::ostream & ; out, . const std::string & ; separator = "" "" . ). Write the current field values to the given output stream separated with the given separator ("" "" used by default for XML) . Related details. ◆ intrusive_ptr_add_ref. void intrusive_ptr_add_ref ; (; Base * ; p). friend . ◆ intrusive_ptr_release. void intrusive_ptr_release ; (; Base * ; p). friend . sofacoreobjectmodelBase; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:27478,Deployability,update,updateLinks,27478,"re the instance has been created This is useful to store where the component was emitted from . ◆ setInstanciationSourceFilePos(). void sofa::core::objectmodel::Base::setInstanciationSourceFilePos ; (; const int ; lineco). Set the file location (line number) where the instance has been created This is useful to store where the component was emitted from . ◆ setName() [1/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n). Set the name of this object. . ◆ setName() [2/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n, . int ; counter . ). Set the name of this object, adding an integer counter. . ◆ shortName(). template<class T > . static std::string sofa::core::objectmodel::Base::shortName ; (; const T * ; ptr = nullptr, . BaseObjectDescription * ; = nullptr . ). inlinestatic . Helper method to get the shortname of a type derived from this class. The default implementation return the class name.; This method should be used as follow : std::string type = Base::shortName<B>(); ; This way derived classes can redefine the shortName method . ◆ updateLinks(). void sofa::core::objectmodel::Base::updateLinks ; (; bool ; logErrors = true). virtual . Update pointers in case the pointed-to objects have appeared. . ◆ writeDatas() [1/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::map< std::string, std::string * > & ; str). Write the current field values to the given map of name -> value pairs. . ◆ writeDatas() [2/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::ostream & ; out, . const std::string & ; separator = "" "" . ). Write the current field values to the given output stream separated with the given separator ("" "" used by default for XML) . Related details. ◆ intrusive_ptr_add_ref. void intrusive_ptr_add_ref ; (; Base * ; p). friend . ◆ intrusive_ptr_release. void intrusive_ptr_release ; (; Base * ; p). friend . sofacoreobjectmodelBase; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:1025,Integrability,message,messages,1025,"PI: sofa::core::objectmodel::Base Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Base Class Reference . #include <Base.h>; Base class for everything. ; More... Inheritance diagram for sofa::core::objectmodel::Base:. [legend]; Detailed Description; Base class for everything. ; This class contains all functionality shared by every objects in SOFA. Most importantly it defines how to retrieve information about an object (name, type, data fields). All classes deriving from Base should use the SOFA_CLASS macro within their declaration (see BaseClass.h). . Public Attributes; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions; virtual const BaseClass *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:10147,Integrability,message,messages,10147,"r to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Attribute details. ◆ d_componentState. Data< sofa::core::objectmodel::ComponentState > sofa::core::objectmodel::Base::d_componentState. The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). . ◆ d_messageLogCount. Data<int> sofa::core::objectmodel::Base::d_messageLogCount. mutable . ◆ f_bbox. Data< sofa::type::BoundingBox > sofa::core::objectmodel::Base::f_bbox. this object bounding box . ◆ f_printLog. Data<bool> sofa::core::objectmodel::Base::f_printLog. if true, emits extra messages at runtime. . ◆ f_tags. Data< sofa::core::objectmodel::TagSet > sofa::core::objectmodel::Base::f_tags. list of the subsets the object belongs to . ◆ m_aliasData. MapData sofa::core::objectmodel::Base::m_aliasData. protected . name -> Data multi-map (includes names and aliases) . ◆ m_aliasLink. MapLink sofa::core::objectmodel::Base::m_aliasLink. protected . name -> Link multi-map (includes names and aliases) . ◆ m_definitionSourceFileName. std::string sofa::core::objectmodel::Base::m_definitionSourceFileName {""""}. ◆ m_definitionSourceFilePos. int sofa::core::objectmodel::Base::m_definitionSourceFilePos {-1}. ◆ m_instanciationSourceFileName. std::string sofa::core::objectmodel::Base::m_instanciationSourceFileName {""""}. ◆ m_instanciationSourceFilePos. int sofa::core::objectmodel::Base::m_instanciationSourceFilePos {-1}. ◆ m_internalEngine. std::map<std::string, sofa::core::DataTrackerCallback> sofa::core::objectmodel::Base::m_internalEngine. protected . ◆ m_oldAttributes. std::v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:22387,Performance,load,loader,22387,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:22420,Performance,load,loader,22420,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:23345,Performance,load,loader,23345,"n, sofa::simulation::Node, sofa::core::loader::SceneLoader, sofa::core::loader::MeshLoader, sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >, sofa::component::sceneutility::BaseAddResourceRepository, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::engine::transform::ROIValueMapper, sofa::component::engine::transform::MathOp< VecT >, sofa::component::engine::select::SelectConnectedLabelsROI< _T >, sofa::component::engine::select::MeshSplittingEngine< DataTypes >, sofa::component::engine::select::ComplementaryROI< DataTypes >, sofa::component::engine::generate::MergeVectors< VecT >, sofa::component::engine::generate::MergeMeshes< DataTypes >, sofa::component::collision::response::contact::RuleBasedContactManager, sofa::core::loader::BaseLoader, sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglModel, sofa::gl::component::rendering2d::OglLabel, sofa::component::visual::VisualModelImpl, sofa::component::topology::container::grid::RegularGridTopology, sofa::component::topology::container::grid::GridTopology, sofa::component::topology::container::constant::CubeTopology, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >, sofa::component::sceneutility::FileMessageHandlerComponent, sofa::component::sceneutility::MessageHandlerComponent, sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent, sofa::component::sceneutility::makealiascomponent::MakeAliasComponent, sofa::component::odesolver::backward::VariationalSymplecticSolver, sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >, sofa::component::engine::selec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:4001,Testability,log,logging,4001,ing getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; tags; Methods related to tagged subsets . const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; componentstate; Methods related to component state . ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  . Static Public Member Functions; static const BaseClass * GetClass ();  ; template<class T > ; static std::stri,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:4074,Testability,log,logging,4074,ing getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; tags; Methods related to tagged subsets . const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; componentstate; Methods related to component state . ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  . Static Public Member Functions; static const BaseClass * GetClass ();  ; template<class T > ; static std::stri,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:4116,Testability,log,logging,4116,ing getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; tags; Methods related to tagged subsets . const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; componentstate; Methods related to component state . ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  . Static Public Member Functions; static const BaseClass * GetClass ();  ; template<class T > ; static std::stri,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:4186,Testability,log,logging,4186,ing getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; tags; Methods related to tagged subsets . const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; componentstate; Methods related to component state . ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  . Static Public Member Functions; static const BaseClass * GetClass ();  ; template<class T > ; static std::stri,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:4297,Testability,log,logging,4297,ing getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; tags; Methods related to tagged subsets . const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; componentstate; Methods related to component state . ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  . Static Public Member Functions; static const BaseClass * GetClass ();  ; template<class T > ; static std::stri,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:4339,Testability,log,logging,4339,ing getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; tags; Methods related to tagged subsets . const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; componentstate; Methods related to component state . ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  . Static Public Member Functions; static const BaseClass * GetClass ();  ; template<class T > ; static std::stri,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:7610,Testability,log,logErrors,7610,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:13281,Testability,log,logging,13281,"field. Note that this method should only be called if the Data was not initialized with the initData method; Add a data field. Note that this method should only be called if the field was not initialized with the initData method . ◆ addData() [2/2]. void sofa::core::objectmodel::Base::addData ; (; BaseData * ; f, . const std::string & ; name . ). Add a data field. Note that this method should only be called if the Data was not initialized with the initData method; Add a data field. Note that this method should only be called if the field was not initialized with the initData method . ◆ addDeprecatedAttribute(). void sofa::core::objectmodel::Base::addDeprecatedAttribute ; (; lifecycle::DeprecatedData * ; attribute). ◆ addLink(). void sofa::core::objectmodel::Base::addLink ; (; BaseLink * ; l). Add a link. ; Add a link. Note that this method should only be called if the link was not initialized with the initLink method . ◆ addMessage(). void sofa::core::objectmodel::Base::addMessage ; (; const sofa::helper::logging::Message & ; m); const. ◆ addOutputsToCallback(). void sofa::core::objectmodel::Base::addOutputsToCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; outputs . ). ◆ addTag(). void sofa::core::objectmodel::Base::addTag ; (; Tag ; t). Add a subset qualification to the object. . ◆ addUpdateCallback(). void sofa::core::objectmodel::Base::addUpdateCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; inputs, . std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> ; function, . std::initializer_list< BaseData * > ; outputs . ). ◆ clearLoggedMessages(). void sofa::core::objectmodel::Base::clearLoggedMessages ; (; ); const. ◆ countLoggedMessages(). size_t sofa::core::objectmodel::Base::countLoggedMessages ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ findData(). BaseData * sofa::core::objectmodel::Base::findData ; (; const std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:14096,Testability,log,logging,14096,"at this method should only be called if the link was not initialized with the initLink method . ◆ addMessage(). void sofa::core::objectmodel::Base::addMessage ; (; const sofa::helper::logging::Message & ; m); const. ◆ addOutputsToCallback(). void sofa::core::objectmodel::Base::addOutputsToCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; outputs . ). ◆ addTag(). void sofa::core::objectmodel::Base::addTag ; (; Tag ; t). Add a subset qualification to the object. . ◆ addUpdateCallback(). void sofa::core::objectmodel::Base::addUpdateCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; inputs, . std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> ; function, . std::initializer_list< BaseData * > ; outputs . ). ◆ clearLoggedMessages(). void sofa::core::objectmodel::Base::clearLoggedMessages ; (; ); const. ◆ countLoggedMessages(). size_t sofa::core::objectmodel::Base::countLoggedMessages ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ findData(). BaseData * sofa::core::objectmodel::Base::findData ; (; const std::string & ; name); const. Find a data field given its name. Return nullptr if not found. If more than one field is found (due to aliases), only the first is returned. . ◆ findDataLinkDest(). bool sofa::core::objectmodel::Base::findDataLinkDest ; (; BaseData *& ; ptr, . const std::string & ; path, . const BaseLink * ; link . ). virtual . ◆ findGlobalField(). std::vector< BaseData * > sofa::core::objectmodel::Base::findGlobalField ; (; const std::string & ; name); const. Find data fields given a name: several can be found as we look into the alias map. ; Find fields given a name: several can be found as we look into the alias map. . ◆ findLink(). BaseLink * sofa::core::objectmodel::Base::findLink ; (; const std::string & ; name); const. Find a link given its name. Return nullptr if not found. If more than one link is found (due to",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:14142,Testability,log,logging,14142,"at this method should only be called if the link was not initialized with the initLink method . ◆ addMessage(). void sofa::core::objectmodel::Base::addMessage ; (; const sofa::helper::logging::Message & ; m); const. ◆ addOutputsToCallback(). void sofa::core::objectmodel::Base::addOutputsToCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; outputs . ). ◆ addTag(). void sofa::core::objectmodel::Base::addTag ; (; Tag ; t). Add a subset qualification to the object. . ◆ addUpdateCallback(). void sofa::core::objectmodel::Base::addUpdateCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; inputs, . std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> ; function, . std::initializer_list< BaseData * > ; outputs . ). ◆ clearLoggedMessages(). void sofa::core::objectmodel::Base::clearLoggedMessages ; (; ); const. ◆ countLoggedMessages(). size_t sofa::core::objectmodel::Base::countLoggedMessages ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ findData(). BaseData * sofa::core::objectmodel::Base::findData ; (; const std::string & ; name); const. Find a data field given its name. Return nullptr if not found. If more than one field is found (due to aliases), only the first is returned. . ◆ findDataLinkDest(). bool sofa::core::objectmodel::Base::findDataLinkDest ; (; BaseData *& ; ptr, . const std::string & ; path, . const BaseLink * ; link . ). virtual . ◆ findGlobalField(). std::vector< BaseData * > sofa::core::objectmodel::Base::findGlobalField ; (; const std::string & ; name); const. Find data fields given a name: several can be found as we look into the alias map. ; Find fields given a name: several can be found as we look into the alias map. . ◆ findLink(). BaseLink * sofa::core::objectmodel::Base::findLink ; (; const std::string & ; name); const. Find a link given its name. Return nullptr if not found. If more than one link is found (due to",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:18175,Testability,log,logging,18175,"ionSourceFilePos ; (; ); const. Get the source location (where the component is implemented) . ◆ getInstanciationSourceFileName(). const std::string & sofa::core::objectmodel::Base::getInstanciationSourceFileName ; (; ); const. Get the file where the instance has been created This is useful to store where the component was emitted from . ◆ getInstanciationSourceFilePos(). int sofa::core::objectmodel::Base::getInstanciationSourceFilePos ; (; ); const. Get the file location (line number) where the instance has been created This is useful to store where the component was emitted from . ◆ getLinkAliases(). const MapLink& sofa::core::objectmodel::Base::getLinkAliases ; (; ); const. inline . Accessor to the map containing all the aliases of this object. . ◆ getLinks(). const VecLink& sofa::core::objectmodel::Base::getLinks ; (; ); const. inline . Accessor to the vector containing all the fields of this object. . ◆ getLoggedMessages(). const std::deque< sofa::helper::logging::Message > & sofa::core::objectmodel::Base::getLoggedMessages ; (; ); const. ◆ getLoggedMessagesAsString(). const std::string sofa::core::objectmodel::Base::getLoggedMessagesAsString ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ getName(). const std::string& sofa::core::objectmodel::Base::getName ; (; ); const. inline . Accessor to the object name. . ◆ getNameSpaceName(). std::string sofa::core::objectmodel::Base::getNameSpaceName ; (; ); const. Get the template type names (if any) used to instantiate this object. . ◆ getPathName(). virtual std::string sofa::core::objectmodel::Base::getPathName ; (; ); const. inlinevirtual . Reimplemented in sofa::core::objectmodel::BaseObject, and sofa::core::objectmodel::BaseNode. ◆ getTags(). const sofa::core::objectmodel::TagSet& sofa::core::objectmodel::Base::getTags ; (; ); const. inline . Represents the subsets the object belongs to. . ◆ getTemplateName(). std::string sofa::core::objectmodel::Base::getTempl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:18385,Testability,log,logging,18385,"se::getInstanciationSourceFileName ; (; ); const. Get the file where the instance has been created This is useful to store where the component was emitted from . ◆ getInstanciationSourceFilePos(). int sofa::core::objectmodel::Base::getInstanciationSourceFilePos ; (; ); const. Get the file location (line number) where the instance has been created This is useful to store where the component was emitted from . ◆ getLinkAliases(). const MapLink& sofa::core::objectmodel::Base::getLinkAliases ; (; ); const. inline . Accessor to the map containing all the aliases of this object. . ◆ getLinks(). const VecLink& sofa::core::objectmodel::Base::getLinks ; (; ); const. inline . Accessor to the vector containing all the fields of this object. . ◆ getLoggedMessages(). const std::deque< sofa::helper::logging::Message > & sofa::core::objectmodel::Base::getLoggedMessages ; (; ); const. ◆ getLoggedMessagesAsString(). const std::string sofa::core::objectmodel::Base::getLoggedMessagesAsString ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ getName(). const std::string& sofa::core::objectmodel::Base::getName ; (; ); const. inline . Accessor to the object name. . ◆ getNameSpaceName(). std::string sofa::core::objectmodel::Base::getNameSpaceName ; (; ); const. Get the template type names (if any) used to instantiate this object. . ◆ getPathName(). virtual std::string sofa::core::objectmodel::Base::getPathName ; (; ); const. inlinevirtual . Reimplemented in sofa::core::objectmodel::BaseObject, and sofa::core::objectmodel::BaseNode. ◆ getTags(). const sofa::core::objectmodel::TagSet& sofa::core::objectmodel::Base::getTags ; (; ); const. inline . Represents the subsets the object belongs to. . ◆ getTemplateName(). std::string sofa::core::objectmodel::Base::getTemplateName ; (; ); const. finalvirtual . Get the template type names (if any) used to instantiate this object. ; Get the template type names (if any) used to instantiate this objec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:18431,Testability,log,logging,18431,"se::getInstanciationSourceFileName ; (; ); const. Get the file where the instance has been created This is useful to store where the component was emitted from . ◆ getInstanciationSourceFilePos(). int sofa::core::objectmodel::Base::getInstanciationSourceFilePos ; (; ); const. Get the file location (line number) where the instance has been created This is useful to store where the component was emitted from . ◆ getLinkAliases(). const MapLink& sofa::core::objectmodel::Base::getLinkAliases ; (; ); const. inline . Accessor to the map containing all the aliases of this object. . ◆ getLinks(). const VecLink& sofa::core::objectmodel::Base::getLinks ; (; ); const. inline . Accessor to the vector containing all the fields of this object. . ◆ getLoggedMessages(). const std::deque< sofa::helper::logging::Message > & sofa::core::objectmodel::Base::getLoggedMessages ; (; ); const. ◆ getLoggedMessagesAsString(). const std::string sofa::core::objectmodel::Base::getLoggedMessagesAsString ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ getName(). const std::string& sofa::core::objectmodel::Base::getName ; (; ); const. inline . Accessor to the object name. . ◆ getNameSpaceName(). std::string sofa::core::objectmodel::Base::getNameSpaceName ; (; ); const. Get the template type names (if any) used to instantiate this object. . ◆ getPathName(). virtual std::string sofa::core::objectmodel::Base::getPathName ; (; ); const. inlinevirtual . Reimplemented in sofa::core::objectmodel::BaseObject, and sofa::core::objectmodel::BaseNode. ◆ getTags(). const sofa::core::objectmodel::TagSet& sofa::core::objectmodel::Base::getTags ; (; ); const. inline . Represents the subsets the object belongs to. . ◆ getTemplateName(). std::string sofa::core::objectmodel::Base::getTemplateName ; (; ); const. finalvirtual . Get the template type names (if any) used to instantiate this object. ; Get the template type names (if any) used to instantiate this objec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:27502,Testability,log,logErrors,27502,"re the instance has been created This is useful to store where the component was emitted from . ◆ setInstanciationSourceFilePos(). void sofa::core::objectmodel::Base::setInstanciationSourceFilePos ; (; const int ; lineco). Set the file location (line number) where the instance has been created This is useful to store where the component was emitted from . ◆ setName() [1/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n). Set the name of this object. . ◆ setName() [2/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n, . int ; counter . ). Set the name of this object, adding an integer counter. . ◆ shortName(). template<class T > . static std::string sofa::core::objectmodel::Base::shortName ; (; const T * ; ptr = nullptr, . BaseObjectDescription * ; = nullptr . ). inlinestatic . Helper method to get the shortname of a type derived from this class. The default implementation return the class name.; This method should be used as follow : std::string type = Base::shortName<B>(); ; This way derived classes can redefine the shortName method . ◆ updateLinks(). void sofa::core::objectmodel::Base::updateLinks ; (; bool ; logErrors = true). virtual . Update pointers in case the pointed-to objects have appeared. . ◆ writeDatas() [1/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::map< std::string, std::string * > & ; str). Write the current field values to the given map of name -> value pairs. . ◆ writeDatas() [2/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::ostream & ; out, . const std::string & ; separator = "" "" . ). Write the current field values to the given output stream separated with the given separator ("" "" used by default for XML) . Related details. ◆ intrusive_ptr_add_ref. void intrusive_ptr_add_ref ; (; Base * ; p). friend . ◆ intrusive_ptr_release. void intrusive_ptr_release ; (; Base * ; p). friend . sofacoreobjectmodelBase; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:4382,Usability,clear,clearLoggedMessages,4382,ing getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; tags; Methods related to tagged subsets . const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; componentstate; Methods related to component state . ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  . Static Public Member Functions; static const BaseClass * GetClass ();  ; template<class T > ; static std::stri,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:13900,Usability,clear,clearLoggedMessages,13900,"Base::addDeprecatedAttribute ; (; lifecycle::DeprecatedData * ; attribute). ◆ addLink(). void sofa::core::objectmodel::Base::addLink ; (; BaseLink * ; l). Add a link. ; Add a link. Note that this method should only be called if the link was not initialized with the initLink method . ◆ addMessage(). void sofa::core::objectmodel::Base::addMessage ; (; const sofa::helper::logging::Message & ; m); const. ◆ addOutputsToCallback(). void sofa::core::objectmodel::Base::addOutputsToCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; outputs . ). ◆ addTag(). void sofa::core::objectmodel::Base::addTag ; (; Tag ; t). Add a subset qualification to the object. . ◆ addUpdateCallback(). void sofa::core::objectmodel::Base::addUpdateCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; inputs, . std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> ; function, . std::initializer_list< BaseData * > ; outputs . ). ◆ clearLoggedMessages(). void sofa::core::objectmodel::Base::clearLoggedMessages ; (; ); const. ◆ countLoggedMessages(). size_t sofa::core::objectmodel::Base::countLoggedMessages ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ findData(). BaseData * sofa::core::objectmodel::Base::findData ; (; const std::string & ; name); const. Find a data field given its name. Return nullptr if not found. If more than one field is found (due to aliases), only the first is returned. . ◆ findDataLinkDest(). bool sofa::core::objectmodel::Base::findDataLinkDest ; (; BaseData *& ; ptr, . const std::string & ; path, . const BaseLink * ; link . ). virtual . ◆ findGlobalField(). std::vector< BaseData * > sofa::core::objectmodel::Base::findGlobalField ; (; const std::string & ; name); const. Find data fields given a name: several can be found as we look into the alias map. ; Find fields given a name: several can be found as we look into the alias map. . ◆ findLink().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:13959,Usability,clear,clearLoggedMessages,13959,"recatedData * ; attribute). ◆ addLink(). void sofa::core::objectmodel::Base::addLink ; (; BaseLink * ; l). Add a link. ; Add a link. Note that this method should only be called if the link was not initialized with the initLink method . ◆ addMessage(). void sofa::core::objectmodel::Base::addMessage ; (; const sofa::helper::logging::Message & ; m); const. ◆ addOutputsToCallback(). void sofa::core::objectmodel::Base::addOutputsToCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; outputs . ). ◆ addTag(). void sofa::core::objectmodel::Base::addTag ; (; Tag ; t). Add a subset qualification to the object. . ◆ addUpdateCallback(). void sofa::core::objectmodel::Base::addUpdateCallback ; (; const std::string & ; name, . std::initializer_list< BaseData * > ; inputs, . std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> ; function, . std::initializer_list< BaseData * > ; outputs . ). ◆ clearLoggedMessages(). void sofa::core::objectmodel::Base::clearLoggedMessages ; (; ); const. ◆ countLoggedMessages(). size_t sofa::core::objectmodel::Base::countLoggedMessages ; (; sofa::helper::logging::Message::TypeSet ; t = sofa::helper::logging::Message::AnyTypes); const. ◆ findData(). BaseData * sofa::core::objectmodel::Base::findData ; (; const std::string & ; name); const. Find a data field given its name. Return nullptr if not found. If more than one field is found (due to aliases), only the first is returned. . ◆ findDataLinkDest(). bool sofa::core::objectmodel::Base::findDataLinkDest ; (; BaseData *& ; ptr, . const std::string & ; path, . const BaseLink * ; link . ). virtual . ◆ findGlobalField(). std::vector< BaseData * > sofa::core::objectmodel::Base::findGlobalField ; (; const std::string & ; name); const. Find data fields given a name: several can be found as we look into the alias map. ; Find fields given a name: several can be found as we look into the alias map. . ◆ findLink(). BaseLink * sofa::core::objectmodel::Base::findL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_class-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseClass Member List . This is the complete list of members for sofa::core::objectmodel::BaseClass, including all inherited members. BaseClass()sofa::core::objectmodel::BaseClassprotected; classNamesofa::core::objectmodel::BaseClass; dynamicCast(Base *obj) const =0sofa::core::objectmodel::BaseClasspure virtual; hasParent(const BaseClass *c) constsofa::core::objectmodel::BaseClassinline; hasParent(const std::string &parentClassName) constsofa::core::objectmodel::BaseClassinline; isInstance(Base *obj) const =0sofa::core::objectmodel::BaseClasspure virtual; namespaceNamesofa::core::objectmodel::BaseClass; operator!=(const BaseClass &c) constsofa::core::objectmodel::BaseClassinline; operator==(const BaseClass &c) constsofa::core::objectmodel::BaseClassinline; parentssofa::core::objectmodel::BaseClass; shortNamesofa::core::objectmodel::BaseClass; templateNamesofa::core::objectmodel::BaseClass; typeNamesofa::core::objectmodel::BaseClass; ~BaseClass()sofa::core::objectmodel::BaseClassprotectedvirtual. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_class-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_class-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseClassNameHelper Member List . This is the complete list of members for sofa::core::objectmodel::BaseClassNameHelper, including all inherited members. getClassName()sofa::core::objectmodel::BaseClassNameHelperinlinestatic; getNamespaceName()sofa::core::objectmodel::BaseClassNameHelperinlinestatic; getShortName()sofa::core::objectmodel::BaseClassNameHelperinlinestatic; getTemplateName()sofa::core::objectmodel::BaseClassNameHelperinlinestatic; getTypeName()sofa::core::objectmodel::BaseClassNameHelperinlinestatic. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:12625,Deployability,update,updateLinks,12625,"Down enum valuesofa::core::objectmodel::BaseContext; SearchParents enum valuesofa::core::objectmodel::BaseContext; SearchRoot enum valuesofa::core::objectmodel::BaseContext; SearchUp enum valuesofa::core::objectmodel::BaseContext; setActive(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setAnimate(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setChangeSleepingState(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setDt(SReal)sofa::core::objectmodel::BaseContextinlinevirtual; setGravity(const Vec3 &)sofa::core::objectmodel::BaseContextinlinevirtual; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setMechanicalState(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSleeping(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseContext Member List . This is the complete list of members for sofa::core::objectmodel::BaseContext, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() constsofa::core::objectmodel::BaseContextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:712,Testability,log,logging,712," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() constsofa::core::objectmodel::BaseContextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:1623,Testability,log,logging,1623,"e; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() constsofa::core::objectmodel::BaseContextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; fi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:1665,Testability,log,logging,1665,"odel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() constsofa::core::objectmodel::BaseContextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) constsofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:5287,Testability,log,logging,5287,"s() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefault()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getDt() constsofa::core::objectmodel::BaseContextvirtual; getGravity() constsofa::core::objectmodel::BaseContextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() constsofa::core::objectmodel::BaseContextvirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getObject(const ClassInfo &class_info, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const std::string &path) constsofa::core::objectmodel::BaseContextvirtual; getObjects(const ClassInfo &class",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:5329,Testability,log,logging,5329,"nevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefault()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getDt() constsofa::core::objectmodel::BaseContextvirtual; getGravity() constsofa::core::objectmodel::BaseContextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() constsofa::core::objectmodel::BaseContextvirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getObject(const ClassInfo &class_info, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const std::string &path) constsofa::core::objectmodel::BaseContextvirtual; getObjects(const ClassInfo &class_info, GetObjectsCallBack &container, Sear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:12642,Testability,log,logErrors,12642,"Down enum valuesofa::core::objectmodel::BaseContext; SearchParents enum valuesofa::core::objectmodel::BaseContext; SearchRoot enum valuesofa::core::objectmodel::BaseContext; SearchUp enum valuesofa::core::objectmodel::BaseContext; setActive(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setAnimate(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setChangeSleepingState(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setDt(SReal)sofa::core::objectmodel::BaseContextinlinevirtual; setGravity(const Vec3 &)sofa::core::objectmodel::BaseContextinlinevirtual; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setMechanicalState(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSleeping(bool)sofa::core::objectmodel::BaseContextinlinevirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:1531,Usability,clear,clearLoggedMessages,1531,"dDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() constsofa::core::objectmodel::BaseContextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4753,Availability,down,down,4753,"const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4939,Availability,down,down,4939," ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5132,Availability,down,down,5132," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5346,Availability,down,down,5346,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5570,Availability,down,down,5570,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5801,Availability,down,down,5801,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6027,Availability,down,down,6027," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6263,Availability,down,down,6263,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6506,Availability,down,down,6506," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7216,Availability,down,down,7216,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7475,Availability,down,down,7475,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7746,Availability,down,down,7746,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached objects; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19307,Availability,down,down,19307,"irtual . Add an object, or return false if not supported. . ◆ canChangeSleepingState(). bool sofa::core::objectmodel::BaseContext::canChangeSleepingState ; (; ); const. virtual . Whether the context can change its sleeping state or not. ; The Context can not change its sleeping state by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19601,Availability,down,down,19601,"fault. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19934,Availability,down,down,19934,"ectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20279,Availability,down,down,20279," template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20569,Availability,down,down,20569,"given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = Searc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20805,Availability,down,down,20805,"rchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21349,Availability,down,down,21349,"[6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21667,Availability,down,down,21667," > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDire",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21930,Availability,down,down,21930,"text::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . Se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22462,Availability,down,down,22462,"re::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no loc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22773,Availability,down,down,22773,"id sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:23029,Availability,down,down,23029,":core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravity in local coordinates. ; Gravity in the world coordinate system. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getMass(). behavior::BaseMass * sofa::core::objectmodel::BaseContext::getMass ; (; ); const. virtual . Mass. . ◆ getMechanicalState(). core::behavior:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25614,Availability,down,down,25614,") ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26040,Availability,down,down,26040,". Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26528,Availability,down,down,26528,", possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26999,Availability,down,down,26999,"current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ). inline . List all objects of this node deriving from a given class. . ◆ getObjects() [5/6]. template<class Container > . Container* sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. . ◆ getObjects() [6/6]. template<class Object = sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:13692,Deployability,update,updateLinks,13692,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:839,Energy Efficiency,power,powerful,839,"﻿. SOFA API: sofa::core::objectmodel::BaseContext Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; Compone",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:948,Integrability,interface,interface,948,"﻿. SOFA API: sofa::core::objectmodel::BaseContext Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; Compone",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:3058,Integrability,interface,interface,3058,"eHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; Parameters; virtual bool isActive () const;  The Context is active. More...;  ; virtual void setActive (bool);  State of the context. More...;  ; virtual bool isSleeping () const;  Sleeping state of the context. More...;  ; virtual bool canChangeSleepingState () const;  Whether the context can change its sleeping state or not. More...;  ; virtual SReal getTime () const;  Simulation time. More...;  ; virtual SReal getDt () const;  Simulation timestep. More...;  ; virtual bool getAnimate () const;  Animation flag. More...;  ; Containers; virtual core::BaseState * getState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual behavior::BaseMechanicalState * getMechanicalState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual core::topology::Topology * getTopology () const;  Topology. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; virtual core::visual::Shader * getShader () const;  Global Shader. More...;  ; virtual void * getObject (const ClassInfo &class_info, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:3245,Integrability,interface,interface,3245,"etActive (bool);  State of the context. More...;  ; virtual bool isSleeping () const;  Sleeping state of the context. More...;  ; virtual bool canChangeSleepingState () const;  Whether the context can change its sleeping state or not. More...;  ; virtual SReal getTime () const;  Simulation time. More...;  ; virtual SReal getDt () const;  Simulation timestep. More...;  ; virtual bool getAnimate () const;  Animation flag. More...;  ; Containers; virtual core::BaseState * getState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual behavior::BaseMechanicalState * getMechanicalState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual core::topology::Topology * getTopology () const;  Topology. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; virtual core::visual::Shader * getShader () const;  Global Shader. More...;  ; virtual void * getObject (const ClassInfo &class_info, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4719,Integrability,wrap,wrapper,4719,"const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4905,Integrability,wrap,wrapper,4905," ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5098,Integrability,wrap,wrapper,5098," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5290,Integrability,wrap,wrapper,5290,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5514,Integrability,wrap,wrapper,5514,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5745,Integrability,wrap,wrapper,5745,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5963,Integrability,wrap,wrapper,5963," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6199,Integrability,wrap,wrapper,6199,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6442,Integrability,wrap,wrapper,6442," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6643,Integrability,wrap,wrapper,6643,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6807,Integrability,wrap,wrapper,6807,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6978,Integrability,wrap,wrapper,6978,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7182,Integrability,wrap,wrapper,7182,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7419,Integrability,wrap,wrapper,7419,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7682,Integrability,wrap,wrapper,7682,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached objects; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:17224,Integrability,message,messages,17224,"virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; std::ostream SOFA_CORE_API & operator<< (std::ostream &out, const BaseContext &c);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Attribute details. ◆ m_nameHelper. ComponentNameHelper sofa::core::objectmodel::BaseContext::m_nameHelper. protected . Constructor details. ◆ BaseContext(). sofa::core::objectmodel::BaseContext::BaseContext ; (; ). protected . ◆ ~BaseContext(). sofa::core::objectmodel::BaseContext::~BaseContext ; (; ). overrideprotected . Function details. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseContext::addObject ; (; sptr< Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19008,Integrability,wrap,wrapper,19008,"t(). sofa::core::objectmodel::BaseContext::~BaseContext ; (; ). overrideprotected . Function details. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseContext::addObject ; (; sptr< BaseObject > ; , . TypeOfInsertion ; = TypeOfInsertion::AtEnd . ). inlinevirtual . Add an object, or return false if not supported. . ◆ canChangeSleepingState(). bool sofa::core::objectmodel::BaseContext::canChangeSleepingState ; (; ); const. virtual . Whether the context can change its sleeping state or not. ; The Context can not change its sleeping state by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Containe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19251,Integrability,wrap,wrapper,19251,"irtual . Add an object, or return false if not supported. . ◆ canChangeSleepingState(). bool sofa::core::objectmodel::BaseContext::canChangeSleepingState ; (; ); const. virtual . Whether the context can change its sleeping state or not. ; The Context can not change its sleeping state by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19537,Integrability,wrap,wrapper,19537,"fault. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19878,Integrability,wrap,wrapper,19878,"ectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20215,Integrability,wrap,wrapper,20215," template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20535,Integrability,wrap,wrapper,20535,"given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = Searc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20771,Integrability,wrap,wrapper,20771,"rchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21027,Integrability,wrap,wrapper,21027,"ore::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21293,Integrability,wrap,wrapper,21293,"[6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21603,Integrability,wrap,wrapper,21603," > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDire",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21896,Integrability,wrap,wrapper,21896,"text::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . Se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22146,Integrability,wrap,wrapper,22146,"xt::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22406,Integrability,wrap,wrapper,22406,"re::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no loc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22709,Integrability,wrap,wrapper,22709,"id sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22995,Integrability,wrap,wrapper,22995,":core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravity in local coordinates. ; Gravity in the world coordinate system. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getMass(). behavior::BaseMass * sofa::core::objectmodel::BaseContext::getMass ; (; ); const. virtual . Mass. . ◆ getMechanicalState(). core::behavior:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:24380,Integrability,interface,interface,24380,"l parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravity in local coordinates. ; Gravity in the world coordinate system. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getMass(). behavior::BaseMass * sofa::core::objectmodel::BaseContext::getMass ; (; ); const. virtual . Mass. . ◆ getMechanicalState(). core::behavior::BaseMechanicalState * sofa::core::objectmodel::BaseContext::getMechanicalState ; (; ); const. virtual . Mechanical Degrees-of-Freedom. ; Reimplemented in sofa::simulation::Node. ◆ getMeshTopology(). core::topology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopology ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) . ◆ getMeshTopologyLink(). core::topology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:24630,Integrability,interface,interface,24630,"::BaseContext::getGravity ; (; ); const. virtual . Gravity in local coordinates. ; Gravity in the world coordinate system. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getMass(). behavior::BaseMass * sofa::core::objectmodel::BaseContext::getMass ; (; ); const. virtual . Mass. . ◆ getMechanicalState(). core::behavior::BaseMechanicalState * sofa::core::objectmodel::BaseContext::getMechanicalState ; (; ); const. virtual . Mechanical Degrees-of-Freedom. ; Reimplemented in sofa::simulation::Node. ◆ getMeshTopology(). core::topology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopology ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) . ◆ getMeshTopologyLink(). core::topology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25187,Integrability,wrap,wrapper,25187,"ology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopology ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) . ◆ getMeshTopologyLink(). core::topology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObject",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25668,Integrability,wrap,wrapper,25668,") ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26094,Integrability,wrap,wrapper,26094,". Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26582,Integrability,wrap,wrapper,26582,", possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:27053,Integrability,wrap,wrapper,27053,"current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ). inline . List all objects of this node deriving from a given class. . ◆ getObjects() [5/6]. template<class Container > . Container* sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. . ◆ getObjects() [6/6]. template<class Object = sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:428,Modifiability,variab,variables,428,"﻿. SOFA API: sofa::core::objectmodel::BaseContext Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; Compone",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:606,Modifiability,variab,variables,606,"﻿. SOFA API: sofa::core::objectmodel::BaseContext Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; Compone",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:675,Modifiability,variab,variables,675,"﻿. SOFA API: sofa::core::objectmodel::BaseContext Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; Compone",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:1206,Modifiability,inherit,inherited,1206,"unctions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; Parameters; virtual bool isActive () const;  The Context is active. More...;  ; virtual void setActive (bool);  State of the context. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:9320,Modifiability,inherit,inherited,9320,"l addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; Visitors.; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Event *);  Propagate an event. More...;  ; Notifications for graph change listeners; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; virtual std::string getPathName () const;  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:15846,Modifiability,inherit,inherited,15846,"s (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; static BaseContext * getDefault ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  BaseContext ();  ;  ~BaseContext () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; std::ostream SOFA_CORE_API & operator<< (std::ostrea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:16149,Modifiability,inherit,inherited,16149," () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; static BaseContext * getDefault ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  BaseContext ();  ;  ~BaseContext () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; std::ostream SOFA_CORE_API & operator<< (std::ostream &out, const BaseContext &c);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra mess",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:16975,Modifiability,inherit,inherited,16975,"rotected Member Functions;  BaseContext ();  ;  ~BaseContext () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; std::ostream SOFA_CORE_API & operator<< (std::ostream &out, const BaseContext &c);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Attribute details. ◆ m_nameHelper. ComponentNameHelper sofa::core::objectmodel::BaseContext::m_nameHelper. protected . Constructor details. ◆ BaseContext(). sofa::core::objectmodel::BaseContext::BaseContext ; (; ). protected . ◆ ~BaseContext(). sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4703,Security,access,access,4703,"const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4889,Security,access,access,4889," ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5082,Security,access,access,5082," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5274,Security,access,access,5274,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5498,Security,access,access,5498,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5729,Security,access,access,5729,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5947,Security,access,access,5947," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6183,Security,access,access,6183,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6426,Security,access,access,6426," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6627,Security,access,access,6627,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6791,Security,access,access,6791,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6962,Security,access,access,6962,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7166,Security,access,access,7166,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7403,Security,access,access,7403,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7666,Security,access,access,7666,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached objects; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:18992,Security,access,access,18992,"t(). sofa::core::objectmodel::BaseContext::~BaseContext ; (; ). overrideprotected . Function details. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseContext::addObject ; (; sptr< BaseObject > ; , . TypeOfInsertion ; = TypeOfInsertion::AtEnd . ). inlinevirtual . Add an object, or return false if not supported. . ◆ canChangeSleepingState(). bool sofa::core::objectmodel::BaseContext::canChangeSleepingState ; (; ); const. virtual . Whether the context can change its sleeping state or not. ; The Context can not change its sleeping state by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Containe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19235,Security,access,access,19235,"irtual . Add an object, or return false if not supported. . ◆ canChangeSleepingState(). bool sofa::core::objectmodel::BaseContext::canChangeSleepingState ; (; ); const. virtual . Whether the context can change its sleeping state or not. ; The Context can not change its sleeping state by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19521,Security,access,access,19521,"fault. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19862,Security,access,access,19862,"ectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20199,Security,access,access,20199," template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20519,Security,access,access,20519,"given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = Searc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20755,Security,access,access,20755,"rchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21011,Security,access,access,21011,"ore::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21277,Security,access,access,21277,"[6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21587,Security,access,access,21587," > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDire",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21880,Security,access,access,21880,"text::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . Se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22130,Security,access,access,22130,"xt::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22390,Security,access,access,22390,"re::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no loc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22693,Security,access,access,22693,"id sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22979,Security,access,access,22979,":core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravity in local coordinates. ; Gravity in the world coordinate system. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getMass(). behavior::BaseMass * sofa::core::objectmodel::BaseContext::getMass ; (; ); const. virtual . Mass. . ◆ getMechanicalState(). core::behavior:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25117,Security,access,access,25117,"ology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopology ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) . ◆ getMeshTopologyLink(). core::topology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObject",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25551,Security,access,access,25551,") ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26007,Security,access,access,26007,". Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26465,Security,access,access,26465,", possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26966,Security,access,access,26966,"current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ). inline . List all objects of this node deriving from a given class. . ◆ getObjects() [5/6]. template<class Container > . Container* sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. . ◆ getObjects() [6/6]. template<class Object = sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:11383,Testability,log,logging,11383," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:11456,Testability,log,logging,11456," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:11498,Testability,log,logging,11498," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:11568,Testability,log,logging,11568," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:11679,Testability,log,logging,11679," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:11721,Testability,log,logging,11721," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:13710,Testability,log,logErrors,13710,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:29700,Testability,test,test,29700,"r * sofa::core::objectmodel::BaseContext::getShader ; (; ); const. virtual . Global Shader. ; Shader. ; Reimplemented in sofa::simulation::Node. ◆ getState(). core::BaseState * sofa::core::objectmodel::BaseContext::getState ; (; ); const. virtual . Mechanical Degrees-of-Freedom. ; Degrees-of-Freedom. ; Reimplemented in sofa::simulation::Node. ◆ getTime(). SReal sofa::core::objectmodel::BaseContext::getTime ; (; ); const. virtual . Simulation time. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getTopology(). core::topology::Topology * sofa::core::objectmodel::BaseContext::getTopology ; (; ); const. virtual . Topology. ; Reimplemented in sofa::simulation::Node. ◆ hasAncestor(). virtual bool sofa::core::objectmodel::BaseContext::hasAncestor ; (; const BaseContext * ; ); const. inlinevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor.; This method is an alias to BaseNode::hasAncestor, so that dynamic casts are not required to test relationships between contexts. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ isActive(). bool sofa::core::objectmodel::BaseContext::isActive ; (; ); const. virtual . The Context is active. ; Reimplemented in sofa::core::objectmodel::Context. ◆ isSleeping(). bool sofa::core::objectmodel::BaseContext::isSleeping ; (; ); const. virtual . Sleeping state of the context. ; The Context is not sleeping by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ notifyAddSlave(). void sofa::core::objectmodel::BaseContext::notifyAddSlave ; (; core::objectmodel::BaseObject * ; master, . core::objectmodel::BaseObject * ; slave . ). virtual . ◆ notifyMoveSlave(). void sofa::core::objectmodel::BaseContext::notifyMoveSlave ; (; core::objectmodel::BaseObject * ; previousMaster, . core::objectmodel::BaseObject * ; master, . core::objectmodel::BaseObject * ; slave . ). virtual . ◆ notifyRemoveSlave(). void sofa::core::objectmodel::BaseContext::notifyRem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:806,Usability,simpl,simple,806,"﻿. SOFA API: sofa::core::objectmodel::BaseContext Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; Compone",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:11764,Usability,clear,clearLoggedMessages,11764," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back-members.html:284,Modifiability,inherit,inherited,284,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseContext::GetObjectsCallBack Member List . This is the complete list of members for sofa::core::objectmodel::BaseContext::GetObjectsCallBack, including all inherited members. operator()(void *ptr)=0sofa::core::objectmodel::BaseContext::GetObjectsCallBackpure virtual; ~GetObjectsCallBack()=defaultsofa::core::objectmodel::BaseContext::GetObjectsCallBackvirtual. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back_t-members.html:318,Modifiability,inherit,inherited,318,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container > Member List . This is the complete list of members for sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >, including all inherited members. destsofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >; GetObjectsCallBackT(Container *d)sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >inline; operator()(void *ptr) overridesofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >inlinevirtual; ~GetObjectsCallBack()=defaultsofa::core::objectmodel::BaseContext::GetObjectsCallBackvirtual. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back_t-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back_t-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back_t.html:940,Modifiability,inherit,inherited,940,"﻿. SOFA API: sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container > Class Template Reference . #include <BaseContext.h>; Helper functor allowing to insert an object into a container. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >:. [legend]; Detailed Description; template<class T, class Container>; class sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >; Helper functor allowing to insert an object into a container. . Public Attributes; Container * dest;  . Public Member Functions;  GetObjectsCallBackT (Container *d);  ; void operator() (void *ptr) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext::GetObjectsCallBack; virtual ~GetObjectsCallBack ()=default;  . Attribute details. ◆ dest. template<class T , class Container > . Container* sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >::dest. Constructor details. ◆ GetObjectsCallBackT(). template<class T , class Container > . sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >::GetObjectsCallBackT ; (; Container * ; d). inline . Function details. ◆ operator()(). template<class T , class Container > . void sofa::core::objectmodel::BaseContext::GetObjectsCallBackT< T, Container >::operator() ; (; void * ; ptr). inlineoverridevirtual . Implements sofa::core::objectmodel::BaseContext::GetObjectsCallBack. sofacoreobjectmodelBaseContextGetObjectsCallBackT; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back_t.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context_1_1_get_objects_call_back_t.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html:6203,Deployability,update,update,6203,"Data; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; ownerClasssofa::core::objectmodel::BaseData; parentDatasofa::core::objectmodel::BaseData; printValue(std::ostream &) const =0sofa::core::objectmodel::BaseDatapure virtual; read(const std::string &value)=0sofa::core::objectmodel::BaseDatapure virtual; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html:6262,Deployability,update,updateIfDirty,6262,"Data; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; ownerClasssofa::core::objectmodel::BaseData; parentDatasofa::core::objectmodel::BaseData; printValue(std::ostream &) const =0sofa::core::objectmodel::BaseDatapure virtual; read(const std::string &value)=0sofa::core::objectmodel::BaseDatapure virtual; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html:6317,Deployability,update,updateValueFromLink,6317,"Data; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; ownerClasssofa::core::objectmodel::BaseData; parentDatasofa::core::objectmodel::BaseData; printValue(std::ostream &) const =0sofa::core::objectmodel::BaseDatapure virtual; read(const std::string &value)=0sofa::core::objectmodel::BaseDatapure virtual; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseData Member List . This is the complete list of members for sofa::core::objectmodel::BaseData, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; BaseData(const BaseInitData &init)sofa::core::objectmodel::BaseDataexplicit; BaseData(const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; beginEditVoidPtr()sofa::core::objectmodel::BaseData; canBeLinked() constsofa::core::objectmodel::BaseDatainlinevirtual; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; copyValueFrom(const BaseData *data)sofa::core::objectmodel::BaseData; DataFlags typedefsofa::core::objectmodel::BaseData; DataFlagsEnum enum namesofa::core::objectmodel::BaseData; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; decodeTypeName(const std::type_info &t)sofa::core::objectmodel::BaseDatastatic; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; endEditVoidPtr()sofa::core::objectmodel::BaseData; FLAG_ANIMATION_INSTANCE enum valuesofa::core::objectmodel::BaseData; FLAG_AUTOLINK enum valuesofa::core:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:4361,Deployability,update,update,4361,"nkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; Flags; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:4533,Deployability,update,updateValueFromLink,4533,"aseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; Flags; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:7141,Deployability,update,updated,7141,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Dat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:7225,Deployability,update,updated,7225,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:7313,Deployability,update,updated,7313," the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:7555,Deployability,update,updateIfDirty,7555," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:7603,Deployability,update,update,7603," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:8096,Deployability,update,update,8096,"isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Attribute details. ◆ group. std::string sofa::core::objectmodel::BaseData::group {""""}. group . ◆ help. std::string sofa::core::objectmodel::BaseData::help {""""}. Help message. . ◆ m_counter. int sofa::core::objectmodel::BaseData::m_counter. Number of changes since creation. . ◆ m_dataFlags. DataFlags sofa::core::objectmodel::BaseData::m_dataFlags. Flags indicating the purpose and behaviour of this Data. . ◆ m_hasDefaultValue. bool sofa::co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:12807,Deployability,update,update,12807,"his Data from the value of its parent. ; Copy the value from another Data.; Note that this is a one-time copy and not a permanent link (otherwise see setParent()) Returnstrue if the copy was successful. . ◆ decodeTypeName(). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode the type name to a more readable form if possible. . ◆ endEditVoidPtr(). void sofa::core::objectmodel::BaseData::endEditVoidPtr ; (; ). Must be called after beginEditVoidPtr(), after you are finished modifying this Data. ; End edit current value as a void pointer (use getValueTypeInfo to find how to access it) . ◆ forceSet(). void sofa::core::objectmodel::BaseData::forceSet ; (; ). inline . Reset the isSet flag to true, to indicate that the current value has been modified. . ◆ genericCopyValueFrom(). bool sofa::core::objectmodel::BaseData::genericCopyValueFrom ; (; const BaseData * ; parent). protected . Try to update this Data from the value of its parent in ""fast mode"";. ; Update this Data from the value of its parent. . ◆ getCounter(). int sofa::core::objectmodel::BaseData::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getData(). BaseData* sofa::core::objectmodel::BaseData::getData ; (; ); const. inline . This method is needed by DDGNode. . ◆ getDefaultValueString(). virtual std::string sofa::core::objectmodel::BaseData::getDefaultValueString ; (; ); const. pure virtual . Get a string representation of the default value held in this Data. ; Implemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:146720,Deployability,update,update,146720,"s persistent information. . ◆ setReadOnly(). void sofa::core::objectmodel::BaseData::setReadOnly ; (; bool ; b). inline . Set whether this Data is read-only. . ◆ setRequired(). void sofa::core::objectmodel::BaseData::setRequired ; (; bool ; b). inline . Set whether the Data has to be set by the user for the owner component to be valid. . ◆ setWidget(). void sofa::core::objectmodel::BaseData::setWidget ; (; const char * ; val). inline . Set widget. . ◆ SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME(). template<class T > . sofa::core::objectmodel::BaseData::SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME ; (; ). inline . ◆ typeName(). template<class T > . static std::string sofa::core::objectmodel::BaseData::typeName ; (; ). inlinestatic . Helper method to get the type name of type T. . ◆ unset(). void sofa::core::objectmodel::BaseData::unset ; (; ). inline . Reset the isSet flag to false, to indicate that the current value is the default for this Data. . ◆ update(). void sofa::core::objectmodel::BaseData::update ; (; ). overridevirtual . Update the value of this Data. ; Implements sofa::core::objectmodel::DDGNode. ◆ updateValueFromLink(). bool sofa::core::objectmodel::BaseData::updateValueFromLink ; (; const BaseData * ; data). ◆ validParent(). bool sofa::core::objectmodel::BaseData::validParent ; (; const BaseData * ; parent). virtual . Check if a given Data can be linked as a parent of this data. . Enum details. ◆ anonymous enum. anonymous enum. Default value used for flags. . EnumeratorFLAG_DEFAULT . ◆ DataFlagsEnum. enum sofa::core::objectmodel::BaseData::DataFlagsEnum. Flags that describe some properties of a Data, and that can be OR'd together. . EnumeratorFLAG_NONE Means ""no flag"" when a value is required. . FLAG_READONLY The Data will be read-only in GUIs. . FLAG_DISPLAYED The Data will be displayed in GUIs. . FLAG_PERSISTENT The Data contains persistent information. . FLAG_AUTOLINK The Data should be autolinked when using the src=""",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:146770,Deployability,update,update,146770,"ReadOnly(). void sofa::core::objectmodel::BaseData::setReadOnly ; (; bool ; b). inline . Set whether this Data is read-only. . ◆ setRequired(). void sofa::core::objectmodel::BaseData::setRequired ; (; bool ; b). inline . Set whether the Data has to be set by the user for the owner component to be valid. . ◆ setWidget(). void sofa::core::objectmodel::BaseData::setWidget ; (; const char * ; val). inline . Set widget. . ◆ SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME(). template<class T > . sofa::core::objectmodel::BaseData::SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME ; (; ). inline . ◆ typeName(). template<class T > . static std::string sofa::core::objectmodel::BaseData::typeName ; (; ). inlinestatic . Helper method to get the type name of type T. . ◆ unset(). void sofa::core::objectmodel::BaseData::unset ; (; ). inline . Reset the isSet flag to false, to indicate that the current value is the default for this Data. . ◆ update(). void sofa::core::objectmodel::BaseData::update ; (; ). overridevirtual . Update the value of this Data. ; Implements sofa::core::objectmodel::DDGNode. ◆ updateValueFromLink(). bool sofa::core::objectmodel::BaseData::updateValueFromLink ; (; const BaseData * ; data). ◆ validParent(). bool sofa::core::objectmodel::BaseData::validParent ; (; const BaseData * ; parent). virtual . Check if a given Data can be linked as a parent of this data. . Enum details. ◆ anonymous enum. anonymous enum. Default value used for flags. . EnumeratorFLAG_DEFAULT . ◆ DataFlagsEnum. enum sofa::core::objectmodel::BaseData::DataFlagsEnum. Flags that describe some properties of a Data, and that can be OR'd together. . EnumeratorFLAG_NONE Means ""no flag"" when a value is required. . FLAG_READONLY The Data will be read-only in GUIs. . FLAG_DISPLAYED The Data will be displayed in GUIs. . FLAG_PERSISTENT The Data contains persistent information. . FLAG_AUTOLINK The Data should be autolinked when using the src=""..."" syntax. . FLAG_REQUIRED True ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:146883,Deployability,update,updateValueFromLink,146883,"ired(). void sofa::core::objectmodel::BaseData::setRequired ; (; bool ; b). inline . Set whether the Data has to be set by the user for the owner component to be valid. . ◆ setWidget(). void sofa::core::objectmodel::BaseData::setWidget ; (; const char * ; val). inline . Set widget. . ◆ SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME(). template<class T > . sofa::core::objectmodel::BaseData::SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME ; (; ). inline . ◆ typeName(). template<class T > . static std::string sofa::core::objectmodel::BaseData::typeName ; (; ). inlinestatic . Helper method to get the type name of type T. . ◆ unset(). void sofa::core::objectmodel::BaseData::unset ; (; ). inline . Reset the isSet flag to false, to indicate that the current value is the default for this Data. . ◆ update(). void sofa::core::objectmodel::BaseData::update ; (; ). overridevirtual . Update the value of this Data. ; Implements sofa::core::objectmodel::DDGNode. ◆ updateValueFromLink(). bool sofa::core::objectmodel::BaseData::updateValueFromLink ; (; const BaseData * ; data). ◆ validParent(). bool sofa::core::objectmodel::BaseData::validParent ; (; const BaseData * ; parent). virtual . Check if a given Data can be linked as a parent of this data. . Enum details. ◆ anonymous enum. anonymous enum. Default value used for flags. . EnumeratorFLAG_DEFAULT . ◆ DataFlagsEnum. enum sofa::core::objectmodel::BaseData::DataFlagsEnum. Flags that describe some properties of a Data, and that can be OR'd together. . EnumeratorFLAG_NONE Means ""no flag"" when a value is required. . FLAG_READONLY The Data will be read-only in GUIs. . FLAG_DISPLAYED The Data will be displayed in GUIs. . FLAG_PERSISTENT The Data contains persistent information. . FLAG_AUTOLINK The Data should be autolinked when using the src=""..."" syntax. . FLAG_REQUIRED True if the Data has to be set for the owner component to be valid (a warning is displayed at init otherwise) . FLAG_ANIMATION_INSTANCE ; FLA",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:146946,Deployability,update,updateValueFromLink,146946,"d ; (; bool ; b). inline . Set whether the Data has to be set by the user for the owner component to be valid. . ◆ setWidget(). void sofa::core::objectmodel::BaseData::setWidget ; (; const char * ; val). inline . Set widget. . ◆ SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME(). template<class T > . sofa::core::objectmodel::BaseData::SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME ; (; ). inline . ◆ typeName(). template<class T > . static std::string sofa::core::objectmodel::BaseData::typeName ; (; ). inlinestatic . Helper method to get the type name of type T. . ◆ unset(). void sofa::core::objectmodel::BaseData::unset ; (; ). inline . Reset the isSet flag to false, to indicate that the current value is the default for this Data. . ◆ update(). void sofa::core::objectmodel::BaseData::update ; (; ). overridevirtual . Update the value of this Data. ; Implements sofa::core::objectmodel::DDGNode. ◆ updateValueFromLink(). bool sofa::core::objectmodel::BaseData::updateValueFromLink ; (; const BaseData * ; data). ◆ validParent(). bool sofa::core::objectmodel::BaseData::validParent ; (; const BaseData * ; parent). virtual . Check if a given Data can be linked as a parent of this data. . Enum details. ◆ anonymous enum. anonymous enum. Default value used for flags. . EnumeratorFLAG_DEFAULT . ◆ DataFlagsEnum. enum sofa::core::objectmodel::BaseData::DataFlagsEnum. Flags that describe some properties of a Data, and that can be OR'd together. . EnumeratorFLAG_NONE Means ""no flag"" when a value is required. . FLAG_READONLY The Data will be read-only in GUIs. . FLAG_DISPLAYED The Data will be displayed in GUIs. . FLAG_PERSISTENT The Data contains persistent information. . FLAG_AUTOLINK The Data should be autolinked when using the src=""..."" syntax. . FLAG_REQUIRED True if the Data has to be set for the owner component to be valid (a warning is displayed at init otherwise) . FLAG_ANIMATION_INSTANCE ; FLAG_VISUAL_INSTANCE ; FLAG_HAPTICS_INSTANCE . sofacoreobject",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:13075,Energy Efficiency,efficient,efficiently,13075,"). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode the type name to a more readable form if possible. . ◆ endEditVoidPtr(). void sofa::core::objectmodel::BaseData::endEditVoidPtr ; (; ). Must be called after beginEditVoidPtr(), after you are finished modifying this Data. ; End edit current value as a void pointer (use getValueTypeInfo to find how to access it) . ◆ forceSet(). void sofa::core::objectmodel::BaseData::forceSet ; (; ). inline . Reset the isSet flag to true, to indicate that the current value has been modified. . ◆ genericCopyValueFrom(). bool sofa::core::objectmodel::BaseData::genericCopyValueFrom ; (; const BaseData * ; parent). protected . Try to update this Data from the value of its parent in ""fast mode"";. ; Update this Data from the value of its parent. . ◆ getCounter(). int sofa::core::objectmodel::BaseData::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getData(). BaseData* sofa::core::objectmodel::BaseData::getData ; (; ); const. inline . This method is needed by DDGNode. . ◆ getDefaultValueString(). virtual std::string sofa::core::objectmodel::BaseData::getDefaultValueString ; (; ); const. pure virtual . Get a string representation of the default value held in this Data. ; Implemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::type::vector< double > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< int, 3 > > >, sofa::core::objectmodel::Data< long >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:721,Integrability,message,message,721,"﻿. SOFA API: sofa::core::objectmodel::BaseData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::BaseData Class Referenceabstract . #include <BaseData.h>; Abstract base class for Data. ; More... Inheritance diagram for sofa::core::objectmodel::BaseData:. [legend]; Detailed Description; Abstract base class for Data. . Classes; class  BaseInitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  . Public Member Functions; virtual BaseData * getNewInstance ();  ;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; virtual bool read (const std::string &value)=0;  ; virtual void printValue (std::ostream &) co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:2968,Integrability,message,message,2968," virtual void printValue (std::ostream &) const =0;  Print the value of this Data to a stream. More...;  ; virtual std::string getValueString () const =0;  Get a string representation of the value held in this Data. More...;  ; virtual std::string getDefaultValueString () const =0;  Get a string representation of the default value held in this Data. More...;  ; virtual std::string getValueTypeString () const =0;  Get the name of the type of the value held in this Data. More...;  ; virtual const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const =0;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:3067,Integrability,message,message,3067,"a stream. More...;  ; virtual std::string getValueString () const =0;  Get a string representation of the value held in this Data. More...;  ; virtual std::string getDefaultValueString () const =0;  Get a string representation of the default value held in this Data. More...;  ; virtual std::string getValueTypeString () const =0;  Get the name of the type of the value held in this Data. More...;  ; virtual const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const =0;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:8807,Integrability,message,message,8807," Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Attribute details. ◆ group. std::string sofa::core::objectmodel::BaseData::group {""""}. group . ◆ help. std::string sofa::core::objectmodel::BaseData::help {""""}. Help message. . ◆ m_counter. int sofa::core::objectmodel::BaseData::m_counter. Number of changes since creation. . ◆ m_dataFlags. DataFlags sofa::core::objectmodel::BaseData::m_dataFlags. Flags indicating the purpose and behaviour of this Data. . ◆ m_hasDefaultValue. bool sofa::core::objectmodel::BaseData::m_hasDefaultValue = false. True if this Data has a default value. . ◆ m_isSet. bool sofa::core::objectmodel::BaseData::m_isSet. True if this Data is set, i.e. its value is different from the default value. . ◆ m_name. std::string sofa::core::objectmodel::BaseData::m_name. Data name within the Base component. . ◆ m_owner. Base* sofa::core::objectmodel::BaseData::m_owner {nullptr}. Return the Base component owning this Data. . ◆ ownerClass. std::string sofa::core::objectmodel::BaseData::ownerClass {""""}. Owner class. . ◆ parentData. DataLink<BaseData> sofa::core::objectmodel::BaseData::parentData. Parent Data. . ◆ widget. std::string sofa::core::objectmodel::BaseData::widget {""""}. widget . Co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:10169,Integrability,message,message,10169,"◆ m_isSet. bool sofa::core::objectmodel::BaseData::m_isSet. True if this Data is set, i.e. its value is different from the default value. . ◆ m_name. std::string sofa::core::objectmodel::BaseData::m_name. Data name within the Base component. . ◆ m_owner. Base* sofa::core::objectmodel::BaseData::m_owner {nullptr}. Return the Base component owning this Data. . ◆ ownerClass. std::string sofa::core::objectmodel::BaseData::ownerClass {""""}. Owner class. . ◆ parentData. DataLink<BaseData> sofa::core::objectmodel::BaseData::parentData. Parent Data. . ◆ widget. std::string sofa::core::objectmodel::BaseData::widget {""""}. widget . Constructor details. ◆ BaseData() [1/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const BaseInitData & ; init). explicit . Constructor used via the Base::initData() methods. . ◆ BaseData() [2/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const std::string & ; helpMsg, . DataFlags ; flags = FLAG_DEFAULT . ). Constructor. Parameters. helpMsgA help message that describes this Data. ; flagsThe flags for this Data (see DataFlagsEnum). . ◆ BaseData() [3/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . DataFlags ; flags = FLAG_DEFAULT . ). ◆ BaseData() [4/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const std::string & ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). Constructor. Parameters. helpMsgA help message that describes this Data. ; isDisplayedWhether this Data should be displayed in GUIs. ; isReadOnlyWhether this Data should be modifiable in GUIs. . ◆ BaseData() [5/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ ~BaseData(). sofa::core::objectmodel::BaseData::~BaseData ; (; ). override . Destructor. . Function details. ◆ beginEditVoidPtr(). void * sofa::core::objectmodel::BaseData::beginEditVoidPtr ; (; ). Begin edit current value as a void pointer (use getValueTypeInfo to find how",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:10591,Integrability,message,message,10591,"ownerClass {""""}. Owner class. . ◆ parentData. DataLink<BaseData> sofa::core::objectmodel::BaseData::parentData. Parent Data. . ◆ widget. std::string sofa::core::objectmodel::BaseData::widget {""""}. widget . Constructor details. ◆ BaseData() [1/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const BaseInitData & ; init). explicit . Constructor used via the Base::initData() methods. . ◆ BaseData() [2/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const std::string & ; helpMsg, . DataFlags ; flags = FLAG_DEFAULT . ). Constructor. Parameters. helpMsgA help message that describes this Data. ; flagsThe flags for this Data (see DataFlagsEnum). . ◆ BaseData() [3/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . DataFlags ; flags = FLAG_DEFAULT . ). ◆ BaseData() [4/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const std::string & ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). Constructor. Parameters. helpMsgA help message that describes this Data. ; isDisplayedWhether this Data should be displayed in GUIs. ; isReadOnlyWhether this Data should be modifiable in GUIs. . ◆ BaseData() [5/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ ~BaseData(). sofa::core::objectmodel::BaseData::~BaseData ; (; ). override . Destructor. . Function details. ◆ beginEditVoidPtr(). void * sofa::core::objectmodel::BaseData::beginEditVoidPtr ; (; ). Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) ; Get a void pointer to the value held in this Data, to be used with AbstractTypeInfo.; This pointer should be used via the instance of AbstractTypeInfo returned by getValueTypeInfo(). WarningYou must call endEditVoidPtr() once you're done modifying the value. . ◆ canBeLinked(). virtual bool sofa::core::objectmodel::BaseData::canBeLinked ; (; ); const. inlinevirtual . Return whether this Data can be used",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:25339,Integrability,message,message,25339,"sofa::type::Material >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::component::collision::geometry::TTriangle > >, sofa::core::objectmodel::Data< sofa::type::vector< Hexa > >, sofa::core::objectmodel::Data< sofa::type::vector< Quad > >, sofa::core::objectmodel::Data< vector< Triangle > >, sofa::core::objectmodel::Data< SeqPositions >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< unsigned int, 8 > > >, sofa::core::objectmodel::Data< sofa::type::SVector< SkeletonBone > >, sofa::core::objectmodel::Data< Mat< 3, 3, Real > >, and sofa::core::objectmodel::Data< sofa::type::vector< SReal > >. ◆ getFlag(). bool sofa::core::objectmodel::BaseData::getFlag ; (; DataFlagsEnum ; flag); const. inline . Get one of the flags. . ◆ getGroup(). const std::string& sofa::core::objectmodel::BaseData::getGroup ; (; ); const. inline . Get group. . ◆ getHelp(). const std::string& sofa::core::objectmodel::BaseData::getHelp ; (; ); const. inline . Get a help message that describes this Data. . ◆ getLinkPath(). std::string sofa::core::objectmodel::BaseData::getLinkPath ; (; ); const. virtual . If we use the Data as a link and not as value directly. . ◆ getName(). const std::string& sofa::core::objectmodel::BaseData::getName ; (; ); const. inline . Return the name of this Data within the Base component. . ◆ getNewInstance(). virtual BaseData* sofa::core::objectmodel::BaseData::getNewInstance ; (; ). inlinevirtual . Reimplemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::type::vector< double > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< int, 3 > > >, sofa::core::objectmodel::Dat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:144867,Integrability,message,message,144867,"del::Data< SeqPositions >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< unsigned int, 8 > > >, sofa::core::objectmodel::Data< sofa::type::SVector< SkeletonBone > >, sofa::core::objectmodel::Data< Mat< 3, 3, Real > >, and sofa::core::objectmodel::Data< sofa::type::vector< SReal > >. ◆ setAutoLink(). void sofa::core::objectmodel::BaseData::setAutoLink ; (; bool ; b). inline . Set whether this data should be autolinked when using the src="""" syntax. . ◆ setDisplayed(). void sofa::core::objectmodel::BaseData::setDisplayed ; (; bool ; b). inline . Set whether this Data should be displayed in GUIs. . ◆ setFlag(). void sofa::core::objectmodel::BaseData::setFlag ; (; DataFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setGroup(). void sofa::core::objectmodel::BaseData::setGroup ; (; const std::string & ; val). inline . Set group. . ◆ setHelp(). void sofa::core::objectmodel::BaseData::setHelp ; (; const std::string & ; val). inline . Set the help message. . ◆ setName(). void sofa::core::objectmodel::BaseData::setName ; (; const std::string & ; name). inline . Set the name of this Data.; This method should not be called directly, the Data registration methods in Base should be used instead. . ◆ setOwner(). void sofa::core::objectmodel::BaseData::setOwner ; (; Base * ; o). inline . Set the owner of this Data. . ◆ setParent() [1/2]. bool sofa::core::objectmodel::BaseData::setParent ; (; BaseData * ; parent, . const std::string & ; path = std::string() . ). Link to a parent data. The value of this data will automatically duplicate the value of the parent data. . ◆ setParent() [2/2]. bool sofa::core::objectmodel::BaseData::setParent ; (; const std::string & ; path). ◆ setPersistent(). void sofa::core::objectmodel::BaseData::setPersistent ; (; bool ; b). inline . Set whether this Data contains persistent information. . ◆ setReadOnly(). void sofa::core::objectmodel::BaseData::setReadOnly ; (; bool ; b). inline . Set whether this Da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:6425,Modifiability,inherit,inherited,6425,"ayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAutoLink (bool b);  Set whether this data should be autolinked when using the src="""" syntax. More...;  ; void setRequired (bool b);  Set whether the Data has to be set by the user for the owner component to be valid. More...;  ; Optimized edition and retrieval API (for multi-threading performances); True if the value has been modified If this data is linked, the value of this data will be considered as modified (even if the parent's value has not been modified)s . bool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty fla",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:8199,Modifiability,inherit,inherited,8199," This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Attribute details. ◆ group. std::string sofa::core::objectmodel::BaseData::group {""""}. group . ◆ help. std::string sofa::core::objectmodel::BaseData::help {""""}. Help message. . ◆ m_counter. int sofa::core::objectmodel::BaseData::m_counter. Number of changes since creation. . ◆ m_dataFlags. DataFlags sofa::core::objectmodel::BaseData::m_dataFlags. Flags indicating the purpose and behaviour of this Data. . ◆ m_hasDefaultValue. bool sofa::core::objectmodel::BaseData::m_hasDefaultValue = false. True if this Data has a default value. . ◆ m_isSet. bool sofa::core::objectmodel::BaseData::m_isSet. True if this Data is set, i.e. its value is different from the default value. . ◆ m",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:8535,Modifiability,inherit,inherited,8535,"IfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Attribute details. ◆ group. std::string sofa::core::objectmodel::BaseData::group {""""}. group . ◆ help. std::string sofa::core::objectmodel::BaseData::help {""""}. Help message. . ◆ m_counter. int sofa::core::objectmodel::BaseData::m_counter. Number of changes since creation. . ◆ m_dataFlags. DataFlags sofa::core::objectmodel::BaseData::m_dataFlags. Flags indicating the purpose and behaviour of this Data. . ◆ m_hasDefaultValue. bool sofa::core::objectmodel::BaseData::m_hasDefaultValue = false. True if this Data has a default value. . ◆ m_isSet. bool sofa::core::objectmodel::BaseData::m_isSet. True if this Data is set, i.e. its value is different from the default value. . ◆ m_name. std::string sofa::core::objectmodel::BaseData::m_name. Data name within the Base component. . ◆ m_owner. Base* sofa::core::objectmodel::BaseData::m_owner {nullptr}. Return the Base component owning this Data. . ◆ ownerClass. std::str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:5910,Performance,multi-thread,multi-threading,5910,"a will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAutoLink (bool b);  Set whether this data should be autolinked when using the src="""" syntax. More...;  ; void setRequired (bool b);  Set whether the Data has to be set by the user for the owner component to be valid. More...;  ; Optimized edition and retrieval API (for multi-threading performances); True if the value has been modified If this data is linked, the value of this data will be considered as modified (even if the parent's value has not been modified)s . bool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:5926,Performance,perform,performances,5926,"a will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAutoLink (bool b);  Set whether this data should be autolinked when using the src="""" syntax. More...;  ; void setRequired (bool b);  Set whether the Data has to be set by the user for the owner component to be valid. More...;  ; Optimized edition and retrieval API (for multi-threading performances); True if the value has been modified If this data is linked, the value of this data will be considered as modified (even if the parent's value has not been modified)s . bool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:13087,Safety,detect,detect,13087,"). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode the type name to a more readable form if possible. . ◆ endEditVoidPtr(). void sofa::core::objectmodel::BaseData::endEditVoidPtr ; (; ). Must be called after beginEditVoidPtr(), after you are finished modifying this Data. ; End edit current value as a void pointer (use getValueTypeInfo to find how to access it) . ◆ forceSet(). void sofa::core::objectmodel::BaseData::forceSet ; (; ). inline . Reset the isSet flag to true, to indicate that the current value has been modified. . ◆ genericCopyValueFrom(). bool sofa::core::objectmodel::BaseData::genericCopyValueFrom ; (; const BaseData * ; parent). protected . Try to update this Data from the value of its parent in ""fast mode"";. ; Update this Data from the value of its parent. . ◆ getCounter(). int sofa::core::objectmodel::BaseData::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getData(). BaseData* sofa::core::objectmodel::BaseData::getData ; (; ); const. inline . This method is needed by DDGNode. . ◆ getDefaultValueString(). virtual std::string sofa::core::objectmodel::BaseData::getDefaultValueString ; (; ); const. pure virtual . Get a string representation of the default value held in this Data. ; Implemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::type::vector< double > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< int, 3 > > >, sofa::core::objectmodel::Data< long >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:2641,Security,access,access,2641,"  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; virtual bool read (const std::string &value)=0;  ; virtual void printValue (std::ostream &) const =0;  Print the value of this Data to a stream. More...;  ; virtual std::string getValueString () const =0;  Get a string representation of the value held in this Data. More...;  ; virtual std::string getDefaultValueString () const =0;  Get a string representation of the default value held in this Data. More...;  ; virtual std::string getValueTypeString () const =0;  Get the name of the type of the value held in this Data. More...;  ; virtual const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const =0;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:2773,Security,access,access,2773,", bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; virtual bool read (const std::string &value)=0;  ; virtual void printValue (std::ostream &) const =0;  Print the value of this Data to a stream. More...;  ; virtual std::string getValueString () const =0;  Get a string representation of the value held in this Data. More...;  ; virtual std::string getDefaultValueString () const =0;  Get a string representation of the default value held in this Data. More...;  ; virtual std::string getValueTypeString () const =0;  Get the name of the type of the value held in this Data. More...;  ; virtual const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const =0;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:11182,Security,access,access,11182,"s this Data. ; flagsThe flags for this Data (see DataFlagsEnum). . ◆ BaseData() [3/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . DataFlags ; flags = FLAG_DEFAULT . ). ◆ BaseData() [4/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const std::string & ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). Constructor. Parameters. helpMsgA help message that describes this Data. ; isDisplayedWhether this Data should be displayed in GUIs. ; isReadOnlyWhether this Data should be modifiable in GUIs. . ◆ BaseData() [5/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ ~BaseData(). sofa::core::objectmodel::BaseData::~BaseData ; (; ). override . Destructor. . Function details. ◆ beginEditVoidPtr(). void * sofa::core::objectmodel::BaseData::beginEditVoidPtr ; (; ). Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) ; Get a void pointer to the value held in this Data, to be used with AbstractTypeInfo.; This pointer should be used via the instance of AbstractTypeInfo returned by getValueTypeInfo(). WarningYou must call endEditVoidPtr() once you're done modifying the value. . ◆ canBeLinked(). virtual bool sofa::core::objectmodel::BaseData::canBeLinked ; (; ); const. inlinevirtual . Return whether this Data can be used as a linkPath.; True by default. Useful if you want to customize the use of @ syntax (see ObjectRef and DataObjectRef) . ◆ copyValueFrom(). bool sofa::core::objectmodel::BaseData::copyValueFrom ; (; const BaseData * ; data). Update this Data from the value of its parent. ; Copy the value from another Data.; Note that this is a one-time copy and not a permanent link (otherwise see setParent()) Returnstrue if the copy was successful. . ◆ decodeTypeName(). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:12489,Security,access,access,12489,". ◆ canBeLinked(). virtual bool sofa::core::objectmodel::BaseData::canBeLinked ; (; ); const. inlinevirtual . Return whether this Data can be used as a linkPath.; True by default. Useful if you want to customize the use of @ syntax (see ObjectRef and DataObjectRef) . ◆ copyValueFrom(). bool sofa::core::objectmodel::BaseData::copyValueFrom ; (; const BaseData * ; data). Update this Data from the value of its parent. ; Copy the value from another Data.; Note that this is a one-time copy and not a permanent link (otherwise see setParent()) Returnstrue if the copy was successful. . ◆ decodeTypeName(). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode the type name to a more readable form if possible. . ◆ endEditVoidPtr(). void sofa::core::objectmodel::BaseData::endEditVoidPtr ; (; ). Must be called after beginEditVoidPtr(), after you are finished modifying this Data. ; End edit current value as a void pointer (use getValueTypeInfo to find how to access it) . ◆ forceSet(). void sofa::core::objectmodel::BaseData::forceSet ; (; ). inline . Reset the isSet flag to true, to indicate that the current value has been modified. . ◆ genericCopyValueFrom(). bool sofa::core::objectmodel::BaseData::genericCopyValueFrom ; (; const BaseData * ; parent). protected . Try to update this Data from the value of its parent in ""fast mode"";. ; Update this Data from the value of its parent. . ◆ getCounter(). int sofa::core::objectmodel::BaseData::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getData(). BaseData* sofa::core::objectmodel::BaseData::getData ; (; ); const. inline . This method is needed by DDGNode. . ◆ getDefaultValueString(). virtual std::string sofa::core::objectmodel::BaseData::getDefaultValueString ; (; ); const. pure virtual . Get a string representation of the default value held in this Data. ; Implemented in sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:49557,Security,access,access,49557,"core::objectmodel::Data< sofa::type::vector< sofa::type::Material > >, sofa::core::objectmodel::Data< sofa::type::Material >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::component::collision::geometry::TTriangle > >, sofa::core::objectmodel::Data< sofa::type::vector< Hexa > >, sofa::core::objectmodel::Data< sofa::type::vector< Quad > >, sofa::core::objectmodel::Data< vector< Triangle > >, sofa::core::objectmodel::Data< SeqPositions >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< unsigned int, 8 > > >, sofa::core::objectmodel::Data< sofa::type::SVector< SkeletonBone > >, sofa::core::objectmodel::Data< Mat< 3, 3, Real > >, and sofa::core::objectmodel::Data< sofa::type::vector< SReal > >. ◆ getValueTypeInfo(). virtual const sofa::defaulttype::AbstractTypeInfo* sofa::core::objectmodel::BaseData::getValueTypeInfo ; (; ); const. pure virtual . Get the TypeInfo for the type of the value held in this Data.; This can be used to access the content of the Data generically, without knowing its type. See alsosofa::defaulttype::AbstractTypeInfo ; Implemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::type::vector< double > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< int, 3 > > >, sofa::core::objectmodel::Data< long >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::vector< sofa::Index > > >, sofa::core::objectmodel::Data< sofa::type::vector< unsigned int > >, sofa::core::objectmodel::Data< sofa::type::Vec >, sofa::core::objectmodel::Data< Deriv >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< std::string, 2 > > >, sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:73137,Security,access,access,73137,"model::Data< sofa::type::SVector< sofa::type::SVector< int > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::Material > >, sofa::core::objectmodel::Data< sofa::type::Material >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::component::collision::geometry::TTriangle > >, sofa::core::objectmodel::Data< sofa::type::vector< Hexa > >, sofa::core::objectmodel::Data< sofa::type::vector< Quad > >, sofa::core::objectmodel::Data< vector< Triangle > >, sofa::core::objectmodel::Data< SeqPositions >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< unsigned int, 8 > > >, sofa::core::objectmodel::Data< sofa::type::SVector< SkeletonBone > >, sofa::core::objectmodel::Data< Mat< 3, 3, Real > >, and sofa::core::objectmodel::Data< sofa::type::vector< SReal > >. ◆ getValueVoidPtr(). const void * sofa::core::objectmodel::BaseData::getValueVoidPtr ; (; ); const. Get current value as a void pointer (use getValueTypeInfo to find how to access it) ; Get a constant void pointer to the value held in this Data, to be used with AbstractTypeInfo.; This pointer should be used via the instance of AbstractTypeInfo returned by getValueTypeInfo(). . ◆ getWidget(). const std::string& sofa::core::objectmodel::BaseData::getWidget ; (; ); const. inline . Get widget. . ◆ hasDefaultValue(). bool sofa::core::objectmodel::BaseData::hasDefaultValue ; (; ); const. inline . Return whether the Data has a default value or not. . ◆ isAutoLink(). bool sofa::core::objectmodel::BaseData::isAutoLink ; (; ); const. inline . Return whether this Data should be autolinked when using the src="""" syntax. . ◆ isDisplayed(). bool sofa::core::objectmodel::BaseData::isDisplayed ; (; ); const. inline . Return whether this Data has to be displayed in GUIs. . ◆ isPersistent(). bool sofa::core::objectmodel::BaseData::isPersistent ; (; ); const. inline . Return whether this Data contains persistent information. . ◆ isReadOnly(). bool sofa::core::objectmodel::BaseData::isReadOn",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data_1_1_base_init_data-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseData::BaseInitData Member List . This is the complete list of members for sofa::core::objectmodel::BaseData::BaseInitData, including all inherited members. BaseInitData()sofa::core::objectmodel::BaseData::BaseInitDatainline; datasofa::core::objectmodel::BaseData::BaseInitData; dataFlagssofa::core::objectmodel::BaseData::BaseInitData; groupsofa::core::objectmodel::BaseData::BaseInitData; helpMsgsofa::core::objectmodel::BaseData::BaseInitData; namesofa::core::objectmodel::BaseData::BaseInitData; ownersofa::core::objectmodel::BaseData::BaseInitData; widgetsofa::core::objectmodel::BaseData::BaseInitData. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data_1_1_base_init_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data_1_1_base_init_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html:3980,Deployability,update,updateCounter,3980,"aseLinkinline; getSize() const =0sofa::core::objectmodel::BaseLinkpure virtual; getValueString() constsofa::core::objectmodel::BaseLinkvirtual; getValueTypeString() constsofa::core::objectmodel::BaseLinkvirtual; isDoubleLink() constsofa::core::objectmodel::BaseLinkinline; isDuplicate() constsofa::core::objectmodel::BaseLinkinline; isMultiLink() constsofa::core::objectmodel::BaseLinkinline; isPersistent() constsofa::core::objectmodel::BaseLinkinline; isReadOnly() constsofa::core::objectmodel::BaseLinkinline; isStrongLink() constsofa::core::objectmodel::BaseLinkinline; LinkFlags typedefsofa::core::objectmodel::BaseLink; LinkFlagsEnum enum namesofa::core::objectmodel::BaseLink; m_countersofa::core::objectmodel::BaseLinkprotected; m_flagssofa::core::objectmodel::BaseLinkprotected; m_helpsofa::core::objectmodel::BaseLinkprotected; m_namesofa::core::objectmodel::BaseLinkprotected; ParseString(const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr)sofa::core::objectmodel::BaseLinkstatic; parseString(const std::string &text, std::string *path, std::string *data=nullptr) constsofa::core::objectmodel::BaseLinkinline; printValue(std::ostream &) constsofa::core::objectmodel::BaseLinkvirtual; read(const std::string &str)sofa::core::objectmodel::BaseLink; set(Base *baseptr, size_t index=0)sofa::core::objectmodel::BaseLinkinline; setFlag(LinkFlagsEnum flag, bool b)sofa::core::objectmodel::BaseLinkinline; setHelp(const std::string &val)sofa::core::objectmodel::BaseLinkinline; setLinkedBase(Base *link)sofa::core::objectmodel::BaseLink; setName(const std::string &name)sofa::core::objectmodel::BaseLinkinline; setOwner(Base *owner)sofa::core::objectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; storePath() constsofa::core::objectmodel::BaseLinkinline; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html:4045,Deployability,update,updateLinks,4045,"aseLinkinline; getSize() const =0sofa::core::objectmodel::BaseLinkpure virtual; getValueString() constsofa::core::objectmodel::BaseLinkvirtual; getValueTypeString() constsofa::core::objectmodel::BaseLinkvirtual; isDoubleLink() constsofa::core::objectmodel::BaseLinkinline; isDuplicate() constsofa::core::objectmodel::BaseLinkinline; isMultiLink() constsofa::core::objectmodel::BaseLinkinline; isPersistent() constsofa::core::objectmodel::BaseLinkinline; isReadOnly() constsofa::core::objectmodel::BaseLinkinline; isStrongLink() constsofa::core::objectmodel::BaseLinkinline; LinkFlags typedefsofa::core::objectmodel::BaseLink; LinkFlagsEnum enum namesofa::core::objectmodel::BaseLink; m_countersofa::core::objectmodel::BaseLinkprotected; m_flagssofa::core::objectmodel::BaseLinkprotected; m_helpsofa::core::objectmodel::BaseLinkprotected; m_namesofa::core::objectmodel::BaseLinkprotected; ParseString(const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr)sofa::core::objectmodel::BaseLinkstatic; parseString(const std::string &text, std::string *path, std::string *data=nullptr) constsofa::core::objectmodel::BaseLinkinline; printValue(std::ostream &) constsofa::core::objectmodel::BaseLinkvirtual; read(const std::string &str)sofa::core::objectmodel::BaseLink; set(Base *baseptr, size_t index=0)sofa::core::objectmodel::BaseLinkinline; setFlag(LinkFlagsEnum flag, bool b)sofa::core::objectmodel::BaseLinkinline; setHelp(const std::string &val)sofa::core::objectmodel::BaseLinkinline; setLinkedBase(Base *link)sofa::core::objectmodel::BaseLink; setName(const std::string &name)sofa::core::objectmodel::BaseLinkinline; setOwner(Base *owner)sofa::core::objectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; storePath() constsofa::core::objectmodel::BaseLinkinline; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseLink Member List . This is the complete list of members for sofa::core::objectmodel::BaseLink, including all inherited members. add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; clear()sofa::core::objectmodel::BaseLinkinline; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateStringData(BaseData *data)sofa::core::objectmodel::BaseLinkstatic; CreateStringPath(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; FLAG_DOUBLELINK enum valuesofa::core::objectmodel::BaseLink; FLAG_DUPLICATE enum valuesofa::core::objectmodel::BaseLink; FLAG_MULTILINK enum valuesofa::core::objectmodel::BaseLink; FLAG_NONE enum valuesofa::core::objectmodel::BaseLink; FLAG_STOREPATH enum valuesofa::core::objectmodel::BaseLink; FLAG_STRONGLINK enum valuesofa::core::objectmodel::BaseLink; getCounter() constsofa::core::objectmodel::BaseLinkinline; getDestClass() const =0sofa::core::objectmodel::BaseLinkpure virtual; getFlag(LinkFlagsEnum flag) constsofa::core::objectmodel::BaseLinkinline; getHelp() constsofa::core::objectmodel::BaseLinkinline; getLinkedBase(std::size_t index=0) constsofa::core::objectmodel::BaseLinkinline; getLinkedPath(const std::size_t index=0) constsofa::core::objectmodel::BaseLink; getName() constsofa::core::objectmodel::BaseLinkinline; getOwner() constsofa::core::objectmodel::BaseLinkinline; getOwnerBase() const =0sofa::core::objectmodel::BaseLinkpu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html:487,Usability,clear,clear,487," add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; clear()sofa::core::objectmodel::BaseLinkinline; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateStringData(BaseData *data)sofa::core::objectmodel::BaseLinkstatic; CreateStringPath(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; FLAG_DOUBLELINK enum valuesofa::core::objectmodel::BaseLink; FLAG_DUPLICATE enum valuesofa::core::objectmodel::BaseLink; FLAG_MULTILINK enum valuesofa::core::objectmodel::BaseLink; FLAG_NONE enum valuesofa::core::objectmodel::BaseLink; FLAG_STOREPATH enum valuesofa::core::objectmodel::BaseLink; FLAG_STRONGLINK enum valuesofa::core::objectmodel::BaseLink; getCounter() constsofa::core::objectmodel::BaseLinkinline; getDestClass() const =0sofa::core::objectmodel::BaseLinkpure virtual; getFlag(LinkFlagsEnum flag) constsofa::core::objectmodel::BaseLinkinline; getHelp() constsofa::core::objectmodel::BaseLinkinline; getLinkedBase(std::size_t index=0) constsofa::core::objectmodel::BaseLinkinline; getLinkedPath(const std::size_t index=0) constsofa::core::objectmodel::BaseLink; getName() constsofa::core::objectmodel::BaseLinkinline; getOwner() constsofa::core::objectmodel::BaseLinkinline; getOwnerBase() const =0sofa::core::objectmodel::BaseLinkpu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:9670,Availability,avail,available,9670,"ink::isReadOnly ; (; ); const. inline . Alias to match BaseData API. . ◆ isStrongLink(). bool sofa::core::objectmodel::BaseLink::isStrongLink ; (; ); const. inline . ◆ parseString(). bool sofa::core::objectmodel::BaseLink::parseString ; (; const std::string & ; text, . std::string * ; path, . std::string * ; data = nullptr . ); const. inline . ◆ ParseString(). bool sofa::core::objectmodel::BaseLink::ParseString ; (; const std::string & ; text, . std::string * ; path, . std::string * ; data = nullptr, . Base * ; start = nullptr . ). static . ◆ printValue(). void sofa::core::objectmodel::BaseLink::printValue ; (; std::ostream & ; o); const. virtual . Print the value of the associated variable. . ◆ read(). bool sofa::core::objectmodel::BaseLink::read ; (; const std::string & ; str). Read the command line. ; Returns false if:; one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). inline . ◆ setOwner(). void sofa::core::objectmodel::BaseLink::setOwner ; (; Base * ; owner). inline . ◆ setPersistent(). void sofa::core::objectmodel::BaseLink::setPersistent ; (; bool ; b). inline . Alias to match BaseData API. . ◆ storePath(). bool sofa::core::objectmodel::BaseLink::storePath ; (; ); const. inline . ◆ ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:2194,Deployability,update,updateLinks,2194,"(LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; virtual const BaseClass * getDestClass () const =0;  ; virtual const BaseClass * getOwnerClass () const =0;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; virtual size_t getSize () const =0;  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; Serialization API; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  . Serialization Helper API; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  ; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:3594,Deployability,update,updateCounter,3594,"d::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  . Serialization Helper API; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  ; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ; void updateCounter ();  . Attribute details. ◆ m_counter. int sofa::core::objectmodel::BaseLink::m_counter. protected . Number of changes since creation. . ◆ m_flags. unsigned int sofa::core::objectmodel::BaseLink::m_flags. protected . ◆ m_help. std::string sofa::core::objectmodel::BaseLink::m_help. protected . ◆ m_name. std::string sofa::core::objectmodel::BaseLink::m_name. protected . Constructor details. ◆ BaseLink() [1/2]. sofa::core::objectmodel::BaseLink::BaseLink ; (; LinkFlags ; flags). ◆ BaseLink() [2/2]. sofa::core::objectmodel::BaseLink::BaseLink ; (; const BaseInitLink & ; init, . LinkFlags ; flags . ). ◆ ~BaseLink(). sofa::core::objectmodel::BaseLink::~BaseLink ; (; ). virtual . Function details. ◆ add(). bool sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:10622,Deployability,update,updateCounter,10622,"one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). inline . ◆ setOwner(). void sofa::core::objectmodel::BaseLink::setOwner ; (; Base * ; owner). inline . ◆ setPersistent(). void sofa::core::objectmodel::BaseLink::setPersistent ; (; bool ; b). inline . Alias to match BaseData API. . ◆ storePath(). bool sofa::core::objectmodel::BaseLink::storePath ; (; ); const. inline . ◆ updateCounter(). void sofa::core::objectmodel::BaseLink::updateCounter ; (; ). inlineprotected . ◆ updateLinks(). bool sofa::core::objectmodel::BaseLink::updateLinks ; (; ). Update pointers in case the pointed-to objects have appeared Returnsfalse if there are broken links . Enum details. ◆ LinkFlagsEnum. enum sofa::core::objectmodel::BaseLink::LinkFlagsEnum. EnumeratorFLAG_NONE ; FLAG_MULTILINK True if link is an array. . FLAG_STRONGLINK True if link has ownership of linked object(s) . FLAG_DOUBLELINK True if link has a reciprocal link in linked object(s) . FLAG_DUPLICATE True if link duplicates another one (possibly with a different/specialized DestType) . FLAG_STOREPATH True if link requires a path string in order to be created. . sofacoreobjectmodelBaseLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:10679,Deployability,update,updateCounter,10679,"one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). inline . ◆ setOwner(). void sofa::core::objectmodel::BaseLink::setOwner ; (; Base * ; owner). inline . ◆ setPersistent(). void sofa::core::objectmodel::BaseLink::setPersistent ; (; bool ; b). inline . Alias to match BaseData API. . ◆ storePath(). bool sofa::core::objectmodel::BaseLink::storePath ; (; ); const. inline . ◆ updateCounter(). void sofa::core::objectmodel::BaseLink::updateCounter ; (; ). inlineprotected . ◆ updateLinks(). bool sofa::core::objectmodel::BaseLink::updateLinks ; (; ). Update pointers in case the pointed-to objects have appeared Returnsfalse if there are broken links . Enum details. ◆ LinkFlagsEnum. enum sofa::core::objectmodel::BaseLink::LinkFlagsEnum. EnumeratorFLAG_NONE ; FLAG_MULTILINK True if link is an array. . FLAG_STRONGLINK True if link has ownership of linked object(s) . FLAG_DOUBLELINK True if link has a reciprocal link in linked object(s) . FLAG_DUPLICATE True if link duplicates another one (possibly with a different/specialized DestType) . FLAG_STOREPATH True if link requires a path string in order to be created. . sofacoreobjectmodelBaseLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:10721,Deployability,update,updateLinks,10721,"one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). inline . ◆ setOwner(). void sofa::core::objectmodel::BaseLink::setOwner ; (; Base * ; owner). inline . ◆ setPersistent(). void sofa::core::objectmodel::BaseLink::setPersistent ; (; bool ; b). inline . Alias to match BaseData API. . ◆ storePath(). bool sofa::core::objectmodel::BaseLink::storePath ; (; ); const. inline . ◆ updateCounter(). void sofa::core::objectmodel::BaseLink::updateCounter ; (; ). inlineprotected . ◆ updateLinks(). bool sofa::core::objectmodel::BaseLink::updateLinks ; (; ). Update pointers in case the pointed-to objects have appeared Returnsfalse if there are broken links . Enum details. ◆ LinkFlagsEnum. enum sofa::core::objectmodel::BaseLink::LinkFlagsEnum. EnumeratorFLAG_NONE ; FLAG_MULTILINK True if link is an array. . FLAG_STRONGLINK True if link has ownership of linked object(s) . FLAG_DOUBLELINK True if link has a reciprocal link in linked object(s) . FLAG_DUPLICATE True if link duplicates another one (possibly with a different/specialized DestType) . FLAG_STOREPATH True if link requires a path string in order to be created. . sofacoreobjectmodelBaseLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:10776,Deployability,update,updateLinks,10776,"one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). inline . ◆ setOwner(). void sofa::core::objectmodel::BaseLink::setOwner ; (; Base * ; owner). inline . ◆ setPersistent(). void sofa::core::objectmodel::BaseLink::setPersistent ; (; bool ; b). inline . Alias to match BaseData API. . ◆ storePath(). bool sofa::core::objectmodel::BaseLink::storePath ; (; ); const. inline . ◆ updateCounter(). void sofa::core::objectmodel::BaseLink::updateCounter ; (; ). inlineprotected . ◆ updateLinks(). bool sofa::core::objectmodel::BaseLink::updateLinks ; (; ). Update pointers in case the pointed-to objects have appeared Returnsfalse if there are broken links . Enum details. ◆ LinkFlagsEnum. enum sofa::core::objectmodel::BaseLink::LinkFlagsEnum. EnumeratorFLAG_NONE ; FLAG_MULTILINK True if link is an array. . FLAG_STRONGLINK True if link has ownership of linked object(s) . FLAG_DOUBLELINK True if link has a reciprocal link in linked object(s) . FLAG_DUPLICATE True if link duplicates another one (possibly with a different/specialized DestType) . FLAG_STOREPATH True if link requires a path string in order to be created. . sofacoreobjectmodelBaseLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:5541,Energy Efficiency,efficient,efficiently,5541,". inline . ◆ CreateString() [1/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . Base * ; from . ). static . ◆ CreateString() [2/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [3/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [4/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; const std::string & ; path, . const std::string & ; data = """" . ). static . ◆ CreateStringData(). std::string sofa::core::objectmodel::BaseLink::CreateStringData ; (; BaseData * ; data). static . ◆ CreateStringPath(). std::string sofa::core::objectmodel::BaseLink::CreateStringPath ; (; Base * ; object, . Base * ; from . ). static . ◆ getCounter(). int sofa::core::objectmodel::BaseLink::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getDestClass(). virtual const BaseClass* sofa::core::objectmodel::BaseLink::getDestClass ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getFlag(). bool sofa::core::objectmodel::BaseLink::getFlag ; (; LinkFlagsEnum ; flag); const. inline . Get one flag. . ◆ getHelp(). const std::string& sofa::core::objectmodel::BaseLink::getHelp ; (; ); const. inline . Get help message. . ◆ getLinkedBase(). Base* sofa::core::objectmodel::BaseLink::getLinkedBase ; (; std::size_t ; index = 0); const. inline . ◆ getLinkedPath(). std::string sofa::core::objectmodel::BaseLink::getLinkedPath ; (; const std::size_t ; index = 0); const. ◆ getName(). const std::string& sofa::core::objectmodel::BaseLink::getName ; (; )",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:1096,Integrability,message,message,1096,"﻿. SOFA API: sofa::core::objectmodel::BaseLink Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseLink Class Referenceabstract . #include <BaseLink.h>; Abstract base class for all links in the scene grapn, independently of their type. ; More... Inheritance diagram for sofa::core::objectmodel::BaseLink:. [legend]; Detailed Description; Abstract base class for all links in the scene grapn, independently of their type. . Classes; class  BaseInitLink;  This internal class is used by the initLink() methods to store initialization parameters of a Data. More...;  ; class  InitLink;  This internal class is used by the initLink() methods to store initialization parameters of a Data. More...;  . Public Member Functions;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; virtual Base * getOwnerBase () const =0;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; virtual const BaseClass * getDestClass () const =0;  ; virtual const BaseClass * getOwnerClass () const =0;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; virtual size_t getSize () const =0;  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLink",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:1166,Integrability,message,message,1166,"es |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseLink Class Referenceabstract . #include <BaseLink.h>; Abstract base class for all links in the scene grapn, independently of their type. ; More... Inheritance diagram for sofa::core::objectmodel::BaseLink:. [legend]; Detailed Description; Abstract base class for all links in the scene grapn, independently of their type. . Classes; class  BaseInitLink;  This internal class is used by the initLink() methods to store initialization parameters of a Data. More...;  ; class  InitLink;  This internal class is used by the initLink() methods to store initialization parameters of a Data. More...;  . Public Member Functions;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; virtual Base * getOwnerBase () const =0;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; virtual const BaseClass * getDestClass () const =0;  ; virtual const BaseClass * getOwnerClass () const =0;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; virtual size_t getSize () const =0;  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; Serialization API; bool read (const std::stri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:6186,Integrability,message,message,6186,"l::BaseLink::CreateStringData ; (; BaseData * ; data). static . ◆ CreateStringPath(). std::string sofa::core::objectmodel::BaseLink::CreateStringPath ; (; Base * ; object, . Base * ; from . ). static . ◆ getCounter(). int sofa::core::objectmodel::BaseLink::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getDestClass(). virtual const BaseClass* sofa::core::objectmodel::BaseLink::getDestClass ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getFlag(). bool sofa::core::objectmodel::BaseLink::getFlag ; (; LinkFlagsEnum ; flag); const. inline . Get one flag. . ◆ getHelp(). const std::string& sofa::core::objectmodel::BaseLink::getHelp ; (; ); const. inline . Get help message. . ◆ getLinkedBase(). Base* sofa::core::objectmodel::BaseLink::getLinkedBase ; (; std::size_t ; index = 0); const. inline . ◆ getLinkedPath(). std::string sofa::core::objectmodel::BaseLink::getLinkedPath ; (; const std::size_t ; index = 0); const. ◆ getName(). const std::string& sofa::core::objectmodel::BaseLink::getName ; (; ); const. inline . ◆ getOwner(). Base* sofa::core::objectmodel::BaseLink::getOwner ; (; ); const. inline . ◆ getOwnerBase(). virtual Base* sofa::core::objectmodel::BaseLink::getOwnerBase ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getOwnerClass(). virtual const BaseClass* sofa::core::objectmodel::BaseLink::getOwnerClass ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:10099,Integrability,message,message,10099,"d::string * ; data = nullptr, . Base * ; start = nullptr . ). static . ◆ printValue(). void sofa::core::objectmodel::BaseLink::printValue ; (; std::ostream & ; o); const. virtual . Print the value of the associated variable. . ◆ read(). bool sofa::core::objectmodel::BaseLink::read ; (; const std::string & ; str). Read the command line. ; Returns false if:; one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). inline . ◆ setOwner(). void sofa::core::objectmodel::BaseLink::setOwner ; (; Base * ; owner). inline . ◆ setPersistent(). void sofa::core::objectmodel::BaseLink::setPersistent ; (; bool ; b). inline . Alias to match BaseData API. . ◆ storePath(). bool sofa::core::objectmodel::BaseLink::storePath ; (; ); const. inline . ◆ updateCounter(). void sofa::core::objectmodel::BaseLink::updateCounter ; (; ). inlineprotected . ◆ updateLinks(). bool sofa::core::objectmodel::BaseLink::updateLinks ; (; ). Update pointers in case the pointed-to objects have appeared Returnsfalse if there are broken links . Enum details. ◆ LinkFlagsEnum. enum sofa::core::objectmodel::BaseLink::LinkFlagsEnum. EnumeratorFLAG_NONE ; FLAG_MULTILINK True if link is an array. . FLAG_STRONGLINK True if link has ownership of lin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:2296,Modifiability,variab,variable,2296,"(LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; virtual const BaseClass * getDestClass () const =0;  ; virtual const BaseClass * getOwnerClass () const =0;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; virtual size_t getSize () const =0;  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; Serialization API; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  . Serialization Helper API; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  ; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:2398,Modifiability,variab,variable,2398,"lag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; virtual const BaseClass * getDestClass () const =0;  ; virtual const BaseClass * getOwnerClass () const =0;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; virtual size_t getSize () const =0;  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; Serialization API; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  . Serialization Helper API; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  ; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:2509,Modifiability,variab,variable,2509," ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; virtual const BaseClass * getDestClass () const =0;  ; virtual const BaseClass * getOwnerClass () const =0;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; virtual size_t getSize () const =0;  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; Serialization API; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  . Serialization Helper API; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  ; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string Cre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:8017,Modifiability,variab,variable,8017," ◆ getOwnerClass(). virtual const BaseClass* sofa::core::objectmodel::BaseLink::getOwnerClass ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getPath(). std::string sofa::core::objectmodel::BaseLink::getPath ; (; std::size_t ; index = 0); const. inline . ◆ getSize(). virtual size_t sofa::core::objectmodel::BaseLink::getSize ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getValueString(). std::string sofa::core::objectmodel::BaseLink::getValueString ; (; ); const. virtual . Print the value of the associated variable. . ◆ getValueTypeString(). std::string sofa::core::objectmodel::BaseLink::getValueTypeString ; (; ); const. virtual . Print the value type of the associated variable. . ◆ isDoubleLink(). bool sofa::core::objectmodel::BaseLink::isDoubleLink ; (; ); const. inline . ◆ isDuplicate(). bool sofa::core::objectmodel::BaseLink::isDuplicate ; (; ); const. inline . ◆ isMultiLink(). bool sofa::core::objectmodel::BaseLink::isMultiLink ; (; ); const. inline . ◆ isPersistent(). bool sofa::core::objectmodel::BaseLink::isPersistent ; (; ); const. inline . ◆ isReadOnly(). bool sofa::core::objectmodel::BaseLink::isReadOnly ; (; ); const. inline . Alias to match BaseData API. . ◆ isStrongLink(). bool sofa::core::objectmodel::BaseLink::isStrongLink ; (; ); const. inline . ◆ parseString(). bool sofa::core::objectmodel::BaseLink::parseString ; (; const std::string & ; text, . std::string * ; path, . std::string * ; data = nullptr . ); const. inline . ◆ ParseString(). bool sofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:8183,Modifiability,variab,variable,8183,":TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getPath(). std::string sofa::core::objectmodel::BaseLink::getPath ; (; std::size_t ; index = 0); const. inline . ◆ getSize(). virtual size_t sofa::core::objectmodel::BaseLink::getSize ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getValueString(). std::string sofa::core::objectmodel::BaseLink::getValueString ; (; ); const. virtual . Print the value of the associated variable. . ◆ getValueTypeString(). std::string sofa::core::objectmodel::BaseLink::getValueTypeString ; (; ); const. virtual . Print the value type of the associated variable. . ◆ isDoubleLink(). bool sofa::core::objectmodel::BaseLink::isDoubleLink ; (; ); const. inline . ◆ isDuplicate(). bool sofa::core::objectmodel::BaseLink::isDuplicate ; (; ); const. inline . ◆ isMultiLink(). bool sofa::core::objectmodel::BaseLink::isMultiLink ; (; ); const. inline . ◆ isPersistent(). bool sofa::core::objectmodel::BaseLink::isPersistent ; (; ); const. inline . ◆ isReadOnly(). bool sofa::core::objectmodel::BaseLink::isReadOnly ; (; ); const. inline . Alias to match BaseData API. . ◆ isStrongLink(). bool sofa::core::objectmodel::BaseLink::isStrongLink ; (; ); const. inline . ◆ parseString(). bool sofa::core::objectmodel::BaseLink::parseString ; (; const std::string & ; text, . std::string * ; path, . std::string * ; data = nullptr . ); const. inline . ◆ ParseString(). bool sofa::core::objectmodel::BaseLink::ParseString ; (; const std::string & ; text, . std::string * ; path, . std::string * ; data = nullptr, . Base * ; start = nullptr . ). static .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:9313,Modifiability,variab,variable,9313,"ate(). bool sofa::core::objectmodel::BaseLink::isDuplicate ; (; ); const. inline . ◆ isMultiLink(). bool sofa::core::objectmodel::BaseLink::isMultiLink ; (; ); const. inline . ◆ isPersistent(). bool sofa::core::objectmodel::BaseLink::isPersistent ; (; ); const. inline . ◆ isReadOnly(). bool sofa::core::objectmodel::BaseLink::isReadOnly ; (; ); const. inline . Alias to match BaseData API. . ◆ isStrongLink(). bool sofa::core::objectmodel::BaseLink::isStrongLink ; (; ); const. inline . ◆ parseString(). bool sofa::core::objectmodel::BaseLink::parseString ; (; const std::string & ; text, . std::string * ; path, . std::string * ; data = nullptr . ); const. inline . ◆ ParseString(). bool sofa::core::objectmodel::BaseLink::ParseString ; (; const std::string & ; text, . std::string * ; path, . std::string * ; data = nullptr, . Base * ; start = nullptr . ). static . ◆ printValue(). void sofa::core::objectmodel::BaseLink::printValue ; (; std::ostream & ; o); const. virtual . Print the value of the associated variable. . ◆ read(). bool sofa::core::objectmodel::BaseLink::read ; (; const std::string & ; str). Read the command line. ; Returns false if:; one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:5553,Safety,detect,detect,5553,". inline . ◆ CreateString() [1/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . Base * ; from . ). static . ◆ CreateString() [2/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [3/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [4/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; const std::string & ; path, . const std::string & ; data = """" . ). static . ◆ CreateStringData(). std::string sofa::core::objectmodel::BaseLink::CreateStringData ; (; BaseData * ; data). static . ◆ CreateStringPath(). std::string sofa::core::objectmodel::BaseLink::CreateStringPath ; (; Base * ; object, . Base * ; from . ). static . ◆ getCounter(). int sofa::core::objectmodel::BaseLink::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getDestClass(). virtual const BaseClass* sofa::core::objectmodel::BaseLink::getDestClass ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getFlag(). bool sofa::core::objectmodel::BaseLink::getFlag ; (; LinkFlagsEnum ; flag); const. inline . Get one flag. . ◆ getHelp(). const std::string& sofa::core::objectmodel::BaseLink::getHelp ; (; ); const. inline . Get help message. . ◆ getLinkedBase(). Base* sofa::core::objectmodel::BaseLink::getLinkedBase ; (; std::size_t ; index = 0); const. inline . ◆ getLinkedPath(). std::string sofa::core::objectmodel::BaseLink::getLinkedPath ; (; const std::size_t ; index = 0); const. ◆ getName(). const std::string& sofa::core::objectmodel::BaseLink::getName ; (; )",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:1969,Usability,clear,clear,1969,";  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; virtual Base * getOwnerBase () const =0;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; virtual const BaseClass * getDestClass () const =0;  ; virtual const BaseClass * getOwnerClass () const =0;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; virtual size_t getSize () const =0;  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; Serialization API; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  . Serialization Helper API; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. Mo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:4461,Usability,clear,clear,4461," CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ; void updateCounter ();  . Attribute details. ◆ m_counter. int sofa::core::objectmodel::BaseLink::m_counter. protected . Number of changes since creation. . ◆ m_flags. unsigned int sofa::core::objectmodel::BaseLink::m_flags. protected . ◆ m_help. std::string sofa::core::objectmodel::BaseLink::m_help. protected . ◆ m_name. std::string sofa::core::objectmodel::BaseLink::m_name. protected . Constructor details. ◆ BaseLink() [1/2]. sofa::core::objectmodel::BaseLink::BaseLink ; (; LinkFlags ; flags). ◆ BaseLink() [2/2]. sofa::core::objectmodel::BaseLink::BaseLink ; (; const BaseInitLink & ; init, . LinkFlags ; flags . ). ◆ ~BaseLink(). sofa::core::objectmodel::BaseLink::~BaseLink ; (; ). virtual . Function details. ◆ add(). bool sofa::core::objectmodel::BaseLink::add ; (; Base * ; baseptr, . const std::string & ; path . ). inline . Add a new target to the link. . ◆ clear(). void sofa::core::objectmodel::BaseLink::clear ; (; ). inline . ◆ CreateString() [1/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . Base * ; from . ). static . ◆ CreateString() [2/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [3/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [4/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; const std::string & ; path, . const std::string & ; data = """" . ). static . ◆ CreateStringData(). std::string sofa::core::objectmodel::BaseLink::CreateStringData ; (; BaseData * ; data). static . ◆ CreateStringPath(). std::string sofa::core::objectmodel::BaseLink::CreateStringPath ; (; Base * ; object, . Base * ; from . ). static . ◆ getCounter(). int sofa::core::objectmodel::BaseLink::getCounter ; (; ); con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:4510,Usability,clear,clear,4510,"se *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ; void updateCounter ();  . Attribute details. ◆ m_counter. int sofa::core::objectmodel::BaseLink::m_counter. protected . Number of changes since creation. . ◆ m_flags. unsigned int sofa::core::objectmodel::BaseLink::m_flags. protected . ◆ m_help. std::string sofa::core::objectmodel::BaseLink::m_help. protected . ◆ m_name. std::string sofa::core::objectmodel::BaseLink::m_name. protected . Constructor details. ◆ BaseLink() [1/2]. sofa::core::objectmodel::BaseLink::BaseLink ; (; LinkFlags ; flags). ◆ BaseLink() [2/2]. sofa::core::objectmodel::BaseLink::BaseLink ; (; const BaseInitLink & ; init, . LinkFlags ; flags . ). ◆ ~BaseLink(). sofa::core::objectmodel::BaseLink::~BaseLink ; (; ). virtual . Function details. ◆ add(). bool sofa::core::objectmodel::BaseLink::add ; (; Base * ; baseptr, . const std::string & ; path . ). inline . Add a new target to the link. . ◆ clear(). void sofa::core::objectmodel::BaseLink::clear ; (; ). inline . ◆ CreateString() [1/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . Base * ; from . ). static . ◆ CreateString() [2/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [3/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [4/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; const std::string & ; path, . const std::string & ; data = """" . ). static . ◆ CreateStringData(). std::string sofa::core::objectmodel::BaseLink::CreateStringData ; (; BaseData * ; data). static . ◆ CreateStringPath(). std::string sofa::core::objectmodel::BaseLink::CreateStringPath ; (; Base * ; object, . Base * ; from . ). static . ◆ getCounter(). int sofa::core::objectmodel::BaseLink::getCounter ; (; ); const. inline . Return the number o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_base_init_link-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseLink::BaseInitLink Member List . This is the complete list of members for sofa::core::objectmodel::BaseLink::BaseInitLink, including all inherited members. BaseInitLink(const std::string &name, const std::string &help)sofa::core::objectmodel::BaseLink::BaseInitLinkinline; helpsofa::core::objectmodel::BaseLink::BaseInitLink; namesofa::core::objectmodel::BaseLink::BaseInitLink. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_base_init_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_base_init_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link-members.html:276,Modifiability,inherit,inherited,276,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseLink::InitLink< Owner > Member List . This is the complete list of members for sofa::core::objectmodel::BaseLink::InitLink< Owner >, including all inherited members. BaseInitLink(const std::string &name, const std::string &help)sofa::core::objectmodel::BaseLink::BaseInitLinkinline; helpsofa::core::objectmodel::BaseLink::BaseInitLink; InitLink(Owner *o, const std::string &n, const std::string &h)sofa::core::objectmodel::BaseLink::InitLink< Owner >inline; namesofa::core::objectmodel::BaseLink::BaseInitLink; ownersofa::core::objectmodel::BaseLink::InitLink< Owner >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link.html:801,Modifiability,inherit,inherited,801,"﻿. SOFA API: sofa::core::objectmodel::BaseLink::InitLink< Owner > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseLink::InitLink< Owner > Class Template Reference . #include <BaseLink.h>; This internal class is used by the initLink() methods to store initialization parameters of a Data. ; More... Inheritance diagram for sofa::core::objectmodel::BaseLink::InitLink< Owner >:. [legend]; Detailed Description; template<class Owner>; class sofa::core::objectmodel::BaseLink::InitLink< Owner >; This internal class is used by the initLink() methods to store initialization parameters of a Data. . Public Attributes; Owner * owner;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseLink::BaseInitLink; std::string name;  ; std::string help;  . Public Member Functions;  InitLink (Owner *o, const std::string &n, const std::string &h);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink::BaseInitLink;  BaseInitLink (const std::string &name, const std::string &help);  . Attribute details. ◆ owner. template<class Owner > . Owner* sofa::core::objectmodel::BaseLink::InitLink< Owner >::owner. Constructor details. ◆ InitLink(). template<class Owner > . sofa::core::objectmodel::BaseLink::InitLink< Owner >::InitLink ; (; Owner * ; o, . const std::string & ; n, . const std::string & ; h . ). inline . sofacoreobjectmodelBaseLinkInitLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link.html:1026,Modifiability,inherit,inherited,1026,"﻿. SOFA API: sofa::core::objectmodel::BaseLink::InitLink< Owner > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseLink::InitLink< Owner > Class Template Reference . #include <BaseLink.h>; This internal class is used by the initLink() methods to store initialization parameters of a Data. ; More... Inheritance diagram for sofa::core::objectmodel::BaseLink::InitLink< Owner >:. [legend]; Detailed Description; template<class Owner>; class sofa::core::objectmodel::BaseLink::InitLink< Owner >; This internal class is used by the initLink() methods to store initialization parameters of a Data. . Public Attributes; Owner * owner;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseLink::BaseInitLink; std::string name;  ; std::string help;  . Public Member Functions;  InitLink (Owner *o, const std::string &n, const std::string &h);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink::BaseInitLink;  BaseInitLink (const std::string &name, const std::string &help);  . Attribute details. ◆ owner. template<class Owner > . Owner* sofa::core::objectmodel::BaseLink::InitLink< Owner >::owner. Constructor details. ◆ InitLink(). template<class Owner > . sofa::core::objectmodel::BaseLink::InitLink< Owner >::InitLink ; (; Owner * ; o, . const std::string & ; n, . const std::string & ; h . ). inline . sofacoreobjectmodelBaseLinkInitLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link_1_1_init_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:8772,Deployability,update,updateLinks,8772,"ctmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; Parents typedefsofa::core::objectmodel::BaseNode; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeChild(BaseNode::SPtr node)=0sofa::core::objectmodel::BaseNodepure virtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeObject(BaseObject::SPtr obj)=0sofa::core::objectmodel::BaseNodepure virtual; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseNode Member List . This is the complete list of members for sofa::core::objectmodel::BaseNode, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node)=0sofa::core::objectmodel::BaseNodepure virtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(BaseObject::SPtr obj, TypeOfInsertion=TypeOfInsertion::AtEnd)=0sofa::core::objectmodel::BaseNodepure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; detachFromGraph()=0sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:784,Testability,log,logging,784," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node)=0sofa::core::objectmodel::BaseNodepure virtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(BaseObject::SPtr obj, TypeOfInsertion=TypeOfInsertion::AtEnd)=0sofa::core::objectmodel::BaseNodepure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; detachFromGraph()=0sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:1749,Testability,log,logging,1749,"addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(BaseObject::SPtr obj, TypeOfInsertion=TypeOfInsertion::AtEnd)=0sofa::core::objectmodel::BaseNodepure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; detachFromGraph()=0sofa::core::objectmodel::BaseNodepure virtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) override=0sofa::core::objectmodel::BaseNodepure virtual; findLinks(const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:1791,Testability,log,logging,1791,"ssage &m) constsofa::core::objectmodel::Base; addObject(BaseObject::SPtr obj, TypeOfInsertion=TypeOfInsertion::AtEnd)=0sofa::core::objectmodel::BaseNodepure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; detachFromGraph()=0sofa::core::objectmodel::BaseNodepure virtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) override=0sofa::core::objectmodel::BaseNodepure virtual; findLinks(const std::string &name) constsofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:4029,Testability,log,logging,4029,inevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getCollisionPipeline() constsofa::core::objectmodel::BaseNodevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext()=0sofa::core::objectmodel::BaseNodepure virtual; getContext() const =0sofa::core::objectmodel::BaseNodepure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFirstParent() const =0sofa::core::objectmodel::BaseNodepure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbParents() const =0sofa::core::objectmodel::BaseNodepure virtual; getOdeSolver() constsofa::core::objectmodel::BaseNodevirtual; getParents() const =0sofa::core::objectmodel::BaseNodepure virtual; getPathName() const overridesofa::core::objectmodel::BaseNodevirtual; getRoot() constsofa::core::objectmodel::BaseNodevirtual; getRootPath() constsofa::core::objectmodel::BaseNodevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; getVisualLoop() constsofa::core::objectmodel::BaseNodevirtual; hasAncestor(const BaseNode *node) const =0sofa::core::objectmodel::BaseNodepure virtual; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:4071,Testability,log,logging,4071,::objectmodel::Basevirtual; getCollisionPipeline() constsofa::core::objectmodel::BaseNodevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext()=0sofa::core::objectmodel::BaseNodepure virtual; getContext() const =0sofa::core::objectmodel::BaseNodepure virtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getFirstParent() const =0sofa::core::objectmodel::BaseNodepure virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbParents() const =0sofa::core::objectmodel::BaseNodepure virtual; getOdeSolver() constsofa::core::objectmodel::BaseNodevirtual; getParents() const =0sofa::core::objectmodel::BaseNodepure virtual; getPathName() const overridesofa::core::objectmodel::BaseNodevirtual; getRoot() constsofa::core::objectmodel::BaseNodevirtual; getRootPath() constsofa::core::objectmodel::BaseNodevirtual; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTypeName() constsofa::core::objectmodel::Base; getVisualLoop() constsofa::core::objectmodel::BaseNodevirtual; hasAncestor(const BaseNode *node) const =0sofa::core::objectmodel::BaseNodepure virtual; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasParent(const BaseNode *node) const =0so,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:8789,Testability,log,logErrors,8789,"ctmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; Parents typedefsofa::core::objectmodel::BaseNode; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeChild(BaseNode::SPtr node)=0sofa::core::objectmodel::BaseNodepure virtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeObject(BaseObject::SPtr obj)=0sofa::core::objectmodel::BaseNodepure virtual; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:1573,Usability,clear,clearLoggedMessages,1573,"a::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(BaseObject::SPtr obj, TypeOfInsertion=TypeOfInsertion::AtEnd)=0sofa::core::objectmodel::BaseNodepure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; detachFromGraph()=0sofa::core::objectmodel::BaseNodepure virtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:1631,Usability,clear,clearObjectContext,1631,"cle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(BaseObject::SPtr obj, TypeOfInsertion=TypeOfInsertion::AtEnd)=0sofa::core::objectmodel::BaseNodepure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; detachFromGraph()=0sofa::core::objectmodel::BaseNodepure virtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:5166,Deployability,update,updateLinks,5166,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:10647,Integrability,message,messages,10647,"re...;  ; virtual const BaseContext * getContext () const =0;  Get this node context. More...;  ; virtual std::string getPathName () const override;  Return the full path name of this node. More...;  ; virtual std::string getRootPath () const;  Return the path from this node to the root node. More...;  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override=0;  . Solvers and main algorithms; virtual core::behavior::BaseAnimationLoop * getAnimationLoop () const;  ; virtual core::behavior::OdeSolver * getOdeSolver () const;  ; virtual core::collision::Pipeline * getCollisionPipeline () const;  ; virtual core::visual::VisualLoop * getVisualLoop () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Sta",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:12772,Integrability,depend,depending,12772,"g shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ BaseNode(). sofa::core::objectmodel::BaseNode::BaseNode ; (; ). protected . ◆ ~BaseNode(). sofa::core::objectmodel::BaseNode::~BaseNode ; (; ). overrideprotected . Function details. ◆ addChild(). virtual void sofa::core::objectmodel::BaseNode::addChild ; (; BaseNode::SPtr ; node). pure virtual . Add a child node. ; Implemented in sofa::simulation::Node. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseNode::addObject ; (; BaseObject::SPtr ; obj, . TypeOfInsertion ; = TypeOfInsertion::AtEnd . ). pure virtual . Add a generic object. ; Implemented in sofa::simulation::Node. ◆ clearObjectContext(). void sofa::core::objectmodel::BaseNode::clearObjectContext ; (; BaseObject::SPtr ; obj). protected . Reset the context of an object. . ◆ detachFromGraph(). virtual void sofa::core::objectmodel::BaseNode::detachFromGraph ; (; ). pure virtual . Remove the current node from the graph: depending on the type of Node, it can have one or several parents. WarningYou must have a SPtr on the node you detach if you want to keep it or the smart pointer mechanism will remove it ! ; Implemented in sofa::simulation::graph::DAGNode. ◆ findLinkDestClass(). Base* sofa::core::objectmodel::BaseNode::findLinkDestClass ; (; const BaseClass * ; destType, . const std::string & ; path, . const BaseLink * ; link . ). overridepure virtual . Reimplemented from sofa::core::objectmodel::Base.; Implemented in sofa::simulation::Node. ◆ getAnimationLoop(). core::behavior::BaseAnimationLoop * sofa::core::objectmodel::BaseNode::getAnimationLoop ; (; ); const. virtual . Reimplemented in sofa::simulation::Node. ◆ getChildren(). virtual Children sofa::core::objectmodel::BaseNode::getChildren ; (; ); const. pure virtual . Get a list of child node. ; Implemented in sofa::simulation::Node. ◆ getCollisionPipeline(). core::collision::Pipeline * sofa::core::objectmodel::BaseNode::getCollisionPipeline ; (; ); const. vir",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:839,Modifiability,inherit,inherited,839,"I;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::BaseNode Class Referenceabstract . #include <BaseNode.h>; Base class for simulation nodes. ; More... Inheritance diagram for sofa::core::objectmodel::BaseNode:. [legend]; Detailed Description; Base class for simulation nodes. ; A Node is a class defining the main scene data structure of a simulation. It defined hierarchical relations between elements. Each node can have parent and child nodes (potentially defining a tree), as well as attached objects (the leaves of the tree).; AuthorJeremie Allard . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseNode, Base);  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; vo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:7395,Modifiability,inherit,inherited,7395,"aining all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Scene hierarchy; typedef sofa::type::vector< BaseNode * > Children;  ; typedef sofa::type::vector< BaseNode * > Parents;  ; virtual Children getChildren () const =0;  Get a list of child node. More...;  ; virtual Parents getParents () const =0;  ; virtual size_t getNbParents () const =0;  returns number of parents More...;  ; virtual BaseNode * getFirstParent () const =0;  return the first parent (returns nullptr if no parent) Mor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:10398,Modifiability,inherit,inherited,10398,"virtual bool hasAncestor (const BaseNode *node) const =0;  ; virtual void detachFromGraph ()=0;  ; virtual BaseContext * getContext ()=0;  Get this node context. More...;  ; virtual const BaseContext * getContext () const =0;  Get this node context. More...;  ; virtual std::string getPathName () const override;  Return the full path name of this node. More...;  ; virtual std::string getRootPath () const;  Return the path from this node to the root node. More...;  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override=0;  . Solvers and main algorithms; virtual core::behavior::BaseAnimationLoop * getAnimationLoop () const;  ; virtual core::behavior::OdeSolver * getOdeSolver () const;  ; virtual core::collision::Pipeline * getCollisionPipeline () const;  ; virtual core::visual::VisualLoop * getVisualLoop () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:11220,Modifiability,inherit,inherited,11220,"const;  ; virtual core::collision::Pipeline * getCollisionPipeline () const;  ; virtual core::visual::VisualLoop * getVisualLoop () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ BaseNode(). sofa::core::objectmodel::BaseNode::BaseNode ; (; ). protected . ◆ ~BaseNode(). sofa::core::objectmodel::BaseNode::~BaseNode ; (; ). overrideprotected . Function details. ◆ addChild(). virtual void sofa::core::objectmodel::BaseNode::addChild ; (; BaseNode::SPtr ; node). pure virtual . Add a child node. ; Implemented",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:11659,Modifiability,inherit,inherited,11659,"he subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ BaseNode(). sofa::core::objectmodel::BaseNode::BaseNode ; (; ). protected . ◆ ~BaseNode(). sofa::core::objectmodel::BaseNode::~BaseNode ; (; ). overrideprotected . Function details. ◆ addChild(). virtual void sofa::core::objectmodel::BaseNode::addChild ; (; BaseNode::SPtr ; node). pure virtual . Add a child node. ; Implemented in sofa::simulation::Node. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseNode::addObject ; (; BaseObject::SPtr ; obj, . TypeOfInsertion ; = TypeOfInsertion::AtEnd . ). pure virtual . Add a generic object. ; Implemented in sofa::simulation::Node. ◆ clearObjectContext(). void sofa::core::objectmodel::BaseNode::clearObjectContext ; (; BaseObject::SPtr ; obj). protected . Reset the context of an object. . ◆ detachFromGraph(). virtual void sofa::core::objectmodel::BaseNode::detachFromGraph ; (; ). pure virtual . Remove ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:2857,Testability,log,logging,2857," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:2930,Testability,log,logging,2930," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:2972,Testability,log,logging,2972," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:3042,Testability,log,logging,3042," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:3153,Testability,log,logging,3153," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:3195,Testability,log,logging,3195," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:5184,Testability,log,logErrors,5184,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:3238,Usability,clear,clearLoggedMessages,3238," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:7279,Usability,clear,clearObjectContext,7279,"nk (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Scene hierarchy; typedef sofa::type::vector< BaseNode * > Children;  ; typedef sofa::type::vector< BaseNode * > Parents;  ; virtual Children getChildren () const =0;  Get a list of child node. More...;  ; virtual Parents getParents () ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:12467,Usability,clear,clearObjectContext,12467,"ases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ BaseNode(). sofa::core::objectmodel::BaseNode::BaseNode ; (; ). protected . ◆ ~BaseNode(). sofa::core::objectmodel::BaseNode::~BaseNode ; (; ). overrideprotected . Function details. ◆ addChild(). virtual void sofa::core::objectmodel::BaseNode::addChild ; (; BaseNode::SPtr ; node). pure virtual . Add a child node. ; Implemented in sofa::simulation::Node. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseNode::addObject ; (; BaseObject::SPtr ; obj, . TypeOfInsertion ; = TypeOfInsertion::AtEnd . ). pure virtual . Add a generic object. ; Implemented in sofa::simulation::Node. ◆ clearObjectContext(). void sofa::core::objectmodel::BaseNode::clearObjectContext ; (; BaseObject::SPtr ; obj). protected . Reset the context of an object. . ◆ detachFromGraph(). virtual void sofa::core::objectmodel::BaseNode::detachFromGraph ; (; ). pure virtual . Remove the current node from the graph: depending on the type of Node, it can have one or several parents. WarningYou must have a SPtr on the node you detach if you want to keep it or the smart pointer mechanism will remove it ! ; Implemented in sofa::simulation::graph::DAGNode. ◆ findLinkDestClass(). Base* sofa::core::objectmodel::BaseNode::findLinkDestClass ; (; const BaseClass * ; destType, . const std::string & ; path, . const BaseLink * ; link . ). overridepure virtual . Reimplemented from sofa::core::objectmodel::Base.; Implemented in sofa::simulation::Node. ◆ getAnimationLoop(). core::behavior::BaseAnimationLoop * sofa::core::objectmodel::BaseNode::getAnimationLoop ; (; ); const. virtual . Reimplemented in sofa::simulation::Nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html:12529,Usability,clear,clearObjectContext,12529,"e...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ BaseNode(). sofa::core::objectmodel::BaseNode::BaseNode ; (; ). protected . ◆ ~BaseNode(). sofa::core::objectmodel::BaseNode::~BaseNode ; (; ). overrideprotected . Function details. ◆ addChild(). virtual void sofa::core::objectmodel::BaseNode::addChild ; (; BaseNode::SPtr ; node). pure virtual . Add a child node. ; Implemented in sofa::simulation::Node. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseNode::addObject ; (; BaseObject::SPtr ; obj, . TypeOfInsertion ; = TypeOfInsertion::AtEnd . ). pure virtual . Add a generic object. ; Implemented in sofa::simulation::Node. ◆ clearObjectContext(). void sofa::core::objectmodel::BaseNode::clearObjectContext ; (; BaseObject::SPtr ; obj). protected . Reset the context of an object. . ◆ detachFromGraph(). virtual void sofa::core::objectmodel::BaseNode::detachFromGraph ; (; ). pure virtual . Remove the current node from the graph: depending on the type of Node, it can have one or several parents. WarningYou must have a SPtr on the node you detach if you want to keep it or the smart pointer mechanism will remove it ! ; Implemented in sofa::simulation::graph::DAGNode. ◆ findLinkDestClass(). Base* sofa::core::objectmodel::BaseNode::findLinkDestClass ; (; const BaseClass * ; destType, . const std::string & ; path, . const BaseLink * ; link . ). overridepure virtual . Reimplemented from sofa::core::objectmodel::Base.; Implemented in sofa::simulation::Node. ◆ getAnimationLoop(). core::behavior::BaseAnimationLoop * sofa::core::objectmodel::BaseNode::getAnimationLoop ; (; ); const. virtual . Reimplemented in sofa::simulation::Node. ◆ getChildren(). virtual Children sofa::core::objectmo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:9587,Deployability,update,updateInternal,9587,"init()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:9640,Deployability,update,updateLinks,9640,"init()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseObject Member List . This is the complete list of members for sofa::core::objectmodel::BaseObject, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode classsofa::core::objectmodel::BaseObjectfriend; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:9131,Performance,load,loader,9131,":objectmodel::Base; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:710,Testability,log,logging,710," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode classsofa::core::objectmodel::BaseObjectfriend; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:2133,Testability,log,logging,2133,"entState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode classsofa::core::objectmodel::BaseObjectfriend; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:2175,Testability,log,logging,2175,"td::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode classsofa::core::objectmodel::BaseObjectfriend; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:4359,Testability,log,logging,4359,inks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:4401,Testability,log,logging,4401,ore::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotecte,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:9657,Testability,log,logErrors,9657,"init()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:1942,Usability,clear,clearLoggedMessages,1942,"irtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode classsofa::core::objectmodel::BaseObjectfriend; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Bas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:713,Availability,avail,available,713,"﻿. SOFA API: sofa::core::objectmodel::BaseObject Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseObject Class Reference . #include <BaseObject.h>; Base class for simulation components. ; More... Inheritance diagram for sofa::core::objectmodel::BaseObject:. [legend]; Detailed Description; Base class for simulation components. ; An object defines a part of the functionality in the simulation (stores state data, specify topology, compute forces, etc). Each simulation object is related to a context, which gives access to all available external data. It is able to process events, if listening enabled (default is false). . Protected Attributes; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:11195,Availability,down,down,11195,"void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  . events; Methods related to Event processing . Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:37504,Availability,down,down,37504,"ponent::shader::OglShaderVisualModel, sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >, sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >, sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >, and sofa::component::collision::geometry::LineCollisionModel< TDataTypes >. ◆ handleTopologyChange() [2/2]. void sofa::core::objectmodel::BaseObject::handleTopologyChange ; (; core::topology::Topology * ; t). virtual . Handle topological Changes from a given Topology ; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< DataTypes >. ◆ hasDataChanged(). bool sofa::core::objectmodel::BaseObject::hasDataChanged ; (; const BaseData & ; data). protected . Method called to know if a tracked Data has changed. . ◆ init(). void sofa::core::objectmodel::BaseObject::init ; (; void ; ). virtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented in sofa::component::collision::response::contact::ContactListener, sofa::gui::component::performer::MouseInteractor< DataTypes >, sofa::gl::component::shader::VisualManagerSecondaryPass, sofa::gl::component::shader::VisualManagerPass, sofa::gl::component::shader::PostProcessManager, sofa::gl::component::shader::OrderIndependentTransparencyManager, sofa::gl::component::shader::OglMatrix4VectorVariable, sofa::gl::component::shader::OglMatrix4x3Variable, sofa::gl::component::shader::OglMatrix3x4Variable, sofa::gl::component::shader::OglMatrix4x2Variable, sofa::gl::component::shader::OglMatrix2x4Variable, sofa::gl::component::shader::OglMatrix3x2Variable, sofa::gl::component::shader::OglMatrix2x3Variable, sofa::gl::component::shader::OglMatrix4Variable, sofa::gl::component::shader::OglMatrix3Variable, sofa::gl::component::shader::OglMatrix2Variable, sofa::gl::component::shader::OglFloatVector4Variable, sofa::gl::component::shad",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:6560,Deployability,update,updateLinks,6560,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:8641,Deployability,update,update,8641,"Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper met",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:10624,Deployability,update,update,10624,"() More...;  . Friends; class BaseNode;  BaseNode can set the context of its own objects. More...;  . Context accessors; typedef sofa::core::objectmodel::MultiLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK|BaseLink::FLAG_STRONGLINK > LinkSlaves;  ; typedef LinkSlaves::Container VecSlaves;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  . events; Methods related to Event processing . Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:11469,Deployability,update,updateInternal,11469," (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:20369,Deployability,update,update,20369,"idmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >, sofa::component::mapping::nonlinear::DistanceMapping< TIn, TOut >, sofa::component::engine::transform::SmoothMeshEngine< DataTypes >, sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::engine::select::BaseROI< DataTypes >, and sofa::component::mechanicalload::PlaneForceField< DataTypes >. ◆ create(). template<class T > . static T::SPtr sofa::core::objectmodel::BaseObject::create ; (; T * ; , . BaseContext * ; context, . BaseObjectDescription * ; arg . ). inlinestatic . Construction method called by ObjectFactory. . ◆ doUpdateInternal(). void sofa::core::objectmodel::BaseObject::doUpdateInternal ; (; ). protectedvirtual . Implementation of the internal update. ; Reimplemented in sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ draw(). virtual void sofa::core::objectmodel::BaseObject::draw ; (; const core::visual::VisualParams * ; ). inlinevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented in sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::visual::VisualTransform, sofa::gui::component::performer::BaseMouseInter",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:80463,Deployability,update,updateInternal,80463,"rojective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data. . ◆ SOFA_CLASS(). sofa::core::objectmodel::BaseObject::SOFA_CLASS ; (; BaseObject ; , . Base ;  . ). ◆ storeResetState(). void sofa::core::objectmodel::BaseObject::storeResetState ; (; ). virtual . Save the initial state for later uses in reset() ; Reimplemented in sofa::core::behavior::BaseAnimationLoop, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, and sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >. ◆ trackInternalData(). void sofa::core::objectmodel::BaseObject::trackInternalData ; (; const BaseData & ; data). protected . Method called to add the Data to the DataTracker (listing the Data to track) . ◆ updateInternal(). void sofa::core::objectmodel::BaseObject::updateInternal ; (; ). Update method called when variables (used to compute other internal variables) are modified. . Related details. ◆ BaseNode. friend class BaseNode. friend . BaseNode can set the context of its own objects. . sofacoreobjectmodelBaseObject; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:80523,Deployability,update,updateInternal,80523,"rojective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data. . ◆ SOFA_CLASS(). sofa::core::objectmodel::BaseObject::SOFA_CLASS ; (; BaseObject ; , . Base ;  . ). ◆ storeResetState(). void sofa::core::objectmodel::BaseObject::storeResetState ; (; ). virtual . Save the initial state for later uses in reset() ; Reimplemented in sofa::core::behavior::BaseAnimationLoop, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, and sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >. ◆ trackInternalData(). void sofa::core::objectmodel::BaseObject::trackInternalData ; (; const BaseData & ; data). protected . Method called to add the Data to the DataTracker (listing the Data to track) . ◆ updateInternal(). void sofa::core::objectmodel::BaseObject::updateInternal ; (; ). Update method called when variables (used to compute other internal variables) are modified. . Related details. ◆ BaseNode. friend class BaseNode. friend . BaseNode can set the context of its own objects. . sofacoreobjectmodelBaseObject; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:1834,Integrability,depend,dependent,1834,"It is able to process events, if listening enabled (default is false). . Protected Attributes; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; data access; Access to external data . SReal getTime () const;  Current time. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> funct",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:12391,Integrability,message,messages,12391,");  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ f_listening. Data<bool> sofa::core::objectmodel::BaseObject::f_listening. if true, handle the events, otherwise ignore the events . ◆ l_context. SingleLink<BaseObject, BaseContext, Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:79474,Integrability,depend,dependent,79474,"ponent::playback::ReadState, sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >, sofa::component::io::mesh::OffSequenceLoader, sofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data. . ◆ SOFA_CLASS(). sofa::core::objectmodel::BaseObject::SOFA_CLASS ; (; BaseObject ; , . Base ;  . ). ◆ storeResetState(). void sofa::core::objectmodel::BaseObject::storeResetState ; (; ). virtual . Save the initial state for later uses in reset() ; Reimplemented in sofa::core::behavior::BaseAnimationLoop, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, and sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >. ◆ trackInternalData(). void sofa::core::objectmodel::BaseObject::trackInternalData ; (; const BaseData & ; data). protected . Method called to add the Data to the DataTracker (listing the Data to track) . ◆ updateInternal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:79732,Integrability,depend,dependent,79732,">, sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data. . ◆ SOFA_CLASS(). sofa::core::objectmodel::BaseObject::SOFA_CLASS ; (; BaseObject ; , . Base ;  . ). ◆ storeResetState(). void sofa::core::objectmodel::BaseObject::storeResetState ; (; ). virtual . Save the initial state for later uses in reset() ; Reimplemented in sofa::core::behavior::BaseAnimationLoop, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, and sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >. ◆ trackInternalData(). void sofa::core::objectmodel::BaseObject::trackInternalData ; (; const BaseData & ; data). protected . Method called to add the Data to the DataTracker (listing the Data to track) . ◆ updateInternal(). void sofa::core::objectmodel::BaseObject::updateInternal ; (; ). Update method called when variables (used to compute other internal variables) are modified. . Related details. ◆ BaseNode. friend class BaseNode. friend . BaseNode can s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:1035,Modifiability,inherit,inherited,1035,"sofa::core::objectmodel::BaseObject Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseObject Class Reference . #include <BaseObject.h>; Base class for simulation components. ; More... Inheritance diagram for sofa::core::objectmodel::BaseObject:. [legend]; Detailed Description; Base class for simulation components. ; An object defines a part of the functionality in the simulation (stores state data, specify topology, compute forces, etc). Each simulation object is related to a context, which gives access to all available external data. It is able to process events, if listening enabled (default is false). . Protected Attributes; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const Bas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:2398,Modifiability,inherit,inherited,2398,"core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; data access; Access to external data . SReal getTime () const;  Current time. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:8926,Modifiability,inherit,inherited,8926,"s of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; class BaseNode;  BaseNode can set the context of its own objects. More...;  . Context accessors; typedef sofa::core::objectmodel::MultiLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK|BaseLink::FLAG_STRONGLINK > LinkSlaves;  ; typedef LinkSlaves::Container VecSlaves;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:11405,Modifiability,variab,variables,11405,"vent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:11515,Modifiability,variab,variables,11515," (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:11557,Modifiability,variab,variables,11557," (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:12142,Modifiability,inherit,inherited,12142,"More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ f_listening. Data<bo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:12974,Modifiability,inherit,inherited,12974,"T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ f_listening. Data<bool> sofa::core::objectmodel::BaseObject::f_listening. if true, handle the events, otherwise ignore the events . ◆ l_context. SingleLink<BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK> sofa::core::objectmodel::BaseObject::l_context. protected . ◆ l_master. SingleLink<BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK> sofa::core::objectmodel::BaseObject::l_master. protected . ◆ l_slaves. LinkSlaves sofa::core::objectmodel::BaseObject::l_slaves. protected . Constructor details. ◆ BaseObject(). sofa::core::objectmodel::BaseObject::BaseObject ; (; ). protected . ◆ ~BaseObject(). sofa::core::objectmodel::BaseObject::~BaseObject ; (; ). overrideprotected . Function details. ◆ addSlave(). void sofa::core::objectmodel::BaseObject::addSlave ; (; Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:64530,Modifiability,variab,variables,64530,"or::BaseAnimationLoop, sofa::core::BaseState, sofa::core::BaseMapping, sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglCylinderModel, sofa::gl::component::rendering3d::DataDisplay, and sofa::component::visual::VisualModelImpl. ◆ parse(). void sofa::core::objectmodel::BaseObject::parse ; (; BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base.; Reimplemented in sofa::gl::component::rendering3d::MergeVisualModels, sofa::simulation::RequiredPlugin, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglModel, sofa::gl::component::rendering2d::OglLabel, and sofa::component::statecontainer::MechanicalObject< T >. ◆ reinit(). void sofa::core::objectmodel::BaseObject::reinit ; (; ). virtual . Update method called when variables used in precomputation are modified. ; Reimplemented in sofa::gl::component::shader::PostProcessManager, sofa::gl::component::shader::OrderIndependentTransparencyManager, sofa::gl::component::shader::OglVariable< DataTypes >, sofa::gl::component::shader::OglVariable< type::vector< type::Vec2f > >, sofa::gl::component::shader::OglVariable< type::Vec2f >, sofa::gl::component::shader::OglVariable< type::vector< type::Vec3f > >, sofa::gl::component::shader::OglVariable< type::Vec3f >, sofa::gl::component::shader::OglVariable< type::vector< float > >, sofa::gl::component::shader::OglVariable< type::vector< type::Vec4f > >, sofa::gl::component::shader::OglVariable< type::Vec4f >, sofa::gl::component::shader::OglVariable< float >, sofa::gl::component::shader::OglVariable< type::vector< GLint > >, sofa::gl::component::shader::OglVariable< int >, sofa::gl::component::shader::OglVariable< type::Vec< 2, int > >, sofa::gl::component::shader::OglVariable< type::vector< type::Mat4x4f > >, sofa::gl::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:80572,Modifiability,variab,variables,80572,"rojective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data. . ◆ SOFA_CLASS(). sofa::core::objectmodel::BaseObject::SOFA_CLASS ; (; BaseObject ; , . Base ;  . ). ◆ storeResetState(). void sofa::core::objectmodel::BaseObject::storeResetState ; (; ). virtual . Save the initial state for later uses in reset() ; Reimplemented in sofa::core::behavior::BaseAnimationLoop, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, and sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >. ◆ trackInternalData(). void sofa::core::objectmodel::BaseObject::trackInternalData ; (; const BaseData & ; data). protected . Method called to add the Data to the DataTracker (listing the Data to track) . ◆ updateInternal(). void sofa::core::objectmodel::BaseObject::updateInternal ; (; ). Update method called when variables (used to compute other internal variables) are modified. . Related details. ◆ BaseNode. friend class BaseNode. friend . BaseNode can set the context of its own objects. . sofacoreobjectmodelBaseObject; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:80614,Modifiability,variab,variables,80614,"rojective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data. . ◆ SOFA_CLASS(). sofa::core::objectmodel::BaseObject::SOFA_CLASS ; (; BaseObject ; , . Base ;  . ). ◆ storeResetState(). void sofa::core::objectmodel::BaseObject::storeResetState ; (; ). virtual . Save the initial state for later uses in reset() ; Reimplemented in sofa::core::behavior::BaseAnimationLoop, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, and sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >. ◆ trackInternalData(). void sofa::core::objectmodel::BaseObject::trackInternalData ; (; const BaseData & ; data). protected . Method called to add the Data to the DataTracker (listing the Data to track) . ◆ updateInternal(). void sofa::core::objectmodel::BaseObject::updateInternal ; (; ). Update method called when variables (used to compute other internal variables) are modified. . Related details. ◆ BaseNode. friend class BaseNode. friend . BaseNode can set the context of its own objects. . sofacoreobjectmodelBaseObject; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:1915,Performance,load,loader,1915,"ted Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; data access; Access to external data . SReal getTime () const;  Current time. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the na",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:16763,Performance,perform,performer,16763,"add . ). protected . This method insures that slaves objects have master and context links set correctly. . ◆ cleanTracker(). void sofa::core::objectmodel::BaseObject::cleanTracker ; (; ). protected . ◆ cleanup(). void sofa::core::objectmodel::BaseObject::cleanup ; (; ). virtual . Called just before deleting this object Any object in the tree below this object that are to be removed will be removed only after this call, so any references this object holds should still be valid. ; Reimplemented in sofa::gui::component::performer::BaseMouseInteractor, sofa::core::behavior::ConstraintCorrection< TDataTypes >, sofa::component::sceneutility::BaseAddResourceRepository, sofa::component::odesolver::backward::EulerImplicitSolver, sofa::component::constraint::lagrangian::solver::GenericConstraintSolver, sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl, sofa::component::constraint::lagrangian::correction::GenericConstraintCorrection, sofa::component::collision::response::contact::StickContactConstraint< TCollisionModel1, TCollisionModel2 >, sofa::component::collision::response::contact::FrictionContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >, sofa::component::collision::response::contact::CollisionResponse, sofa::component::collision::response::contact::BarycentricStickContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >, and sofa::component::collision::response::contact::BarycentricPenalityContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >. ◆ computeBBox(). virtual void sofa::core::objectmodel::BaseObject::computeBBox ; (; const core::ExecParams * ; , . bool ; = false . ). inlinevirtual . Bounding Box computation method. Default to empty method. ; Reimplemented in sofa::component::visual::VisualModelImpl, sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >, sofa::core::State< TDataTypes >, sofa::core::State< In >, sofa::core::State< Out >, sofa::core::State< InRoot >, sofa::core::State< Da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:21332,Performance,perform,performer,21332,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:36113,Performance,perform,performer,36113,"bjectmodel::BaseObject::handleEvent ; (; Event * ; ). virtual . Handle an event. ; Reimplemented in sofa::gl::component::shader::PostProcessManager, sofa::gl::component::shader::LightManager, sofa::component::visual::BaseCamera, sofa::component::topology::utility::TopologyChecker, sofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >, sofa::component::topology::utility::TopologicalChangeProcessor, sofa::component::sceneutility::PauseAnimationOnEvent, sofa::component::playback::WriteTopology, sofa::component::playback::WriteState, sofa::component::playback::ReadTopology, sofa::component::playback::ReadState, sofa::component::playback::CompareTopology, sofa::component::playback::CompareState, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::io::mesh::OffSequenceLoader, sofa::component::haptics::LCPForceFeedback< TDataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< sofa::defaulttype::StdVectorTypes >, sofa::gl::component::shader::VisualManagerPass, sofa::component::visual::RecordedCamera, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >, sofa::component::playback::InputEventReader, sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >, sofa::component::engine::analyze::HausdorffDistance< DataTypes >, sofa::component::engine::analyze::AverageCoord< DataTypes >, sofa::component::collision::response::contact::ContactListener, sofa::gui::component::performer::BaseMouseInteractor, sofa::gl::component::rendering2d::OglLabel, sofa::component::visual::TrailRenderer< DataTypes >, and sofa::component::controller::Controller. ◆ handleTopologyChange() [1/2]. virtual void sofa::core::objectmodel::BaseObjec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:37625,Performance,perform,performer,37625,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:42531,Performance,load,loader,42531,"d::OglModel, sofa::gl::component::rendering3d::OglCylinderModel, sofa::gl::component::rendering3d::MergeVisualModels, sofa::gl::component::rendering3d::DataDisplay, sofa::gl::component::rendering3d::ClipPlane, sofa::gl::component::rendering2d::OglViewport, sofa::gl::component::rendering2d::OglLabel, sofa::gl::component::rendering2d::OglColorMap, sofa::gl::component::engine::TextureInterpolation< DataTypes >, sofa::simulation::PipelineImpl, sofa::simulation::DefaultVisualManagerLoop, sofa::simulation::DefaultAnimationLoop, sofa::core::topology::TopologyContainer, sofa::core::topology::TopologyModifier, sofa::core::topology::GeometryAlgorithms, sofa::core::topology::BaseMeshTopology, sofa::core::objectmodel::ConfigurationSetting, sofa::core::MultiMapping< TIn, TOut >, sofa::core::MultiMapping< In, Out >, sofa::core::Multi2Mapping< TIn1, TIn2, TOut >, sofa::core::Mapping< TIn, TOut >, sofa::core::Mapping< In, Out >, sofa::core::Mapping< defaulttype::Vec3Types, DataTypes >, sofa::core::loader::MeshLoader, sofa::core::behavior::SingleStateAccessor< DataTypes >, sofa::core::behavior::SingleStateAccessor< TDataTypes >, sofa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 >, sofa::core::behavior::PairStateAccessor< TDataTypes >, sofa::core::behavior::PairStateAccessor< TDataTypes1, TDataTypes2 >, sofa::core::behavior::PairStateAccessor< DataTypes, DataTypes >, sofa::core::behavior::LinearSolverAccessor, sofa::core::behavior::ConstraintCorrection< TDataTypes >, sofa::core::behavior::Constraint< DataTypes >, sofa::core::behavior::BaseAnimationLoop, sofa::component::visual::VisualModelImpl, sofa::component::visual::VisualGrid, sofa::component::visual::Visual3DText, sofa::component::visual::RecordedCamera, sofa::component::visual::LineAxis, sofa::component::visual::BaseCamera, sofa::component::topology::utility::TopologyChecker, sofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >, sofa::component::topology::utility::TopologicalChangeProcessor, sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:67280,Performance,load,loader,67280,"ibute< 4, GL_FLOAT, sofa::type::Vec< 4, float > >, sofa::gl::component::shader::OglAttribute< 2, GL_FLOAT, sofa::type::Vec< 2, float > >, sofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >, sofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >, sofa::gl::component::shader::OglAttribute< 1, GL_INT, int >, sofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >, sofa::gl::component::shader::OglAttribute< 4, GL_UNSIGNED_INT, sofa::type::Vec< 4, unsigned int > >, sofa::gl::component::shader::LightManager, sofa::gl::component::shader::Light, sofa::gl::component::rendering3d::SlicedVolumetricModel, sofa::gl::component::rendering3d::PointSplatModel, sofa::gl::component::rendering3d::MergeVisualModels, sofa::gl::component::rendering3d::ClipPlane, sofa::gl::component::rendering2d::OglLabel, sofa::gl::component::rendering2d::OglColorMap, sofa::gl::component::engine::TextureInterpolation< DataTypes >, sofa::core::loader::SceneLoader, sofa::core::loader::MeshLoader, sofa::component::visual::VisualGrid, sofa::component::visual::Visual3DText, sofa::component::visual::RecordedCamera, sofa::component::visual::LineAxis, sofa::component::visual::BaseCamera, sofa::component::topology::utility::TopologyChecker, sofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >, sofa::component::topology::utility::TopologicalChangeProcessor, sofa::component::topology::container::grid::RegularGridTopology, sofa::component::topology::container::grid::GridTopology, sofa::component::topology::container::dynamic::TriangleSetTopologyModifier, sofa::component::topology::container::dynamic::TriangleSetTopologyContainer, sofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >, sofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier, sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >, sofa::component::topology::container:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:67313,Performance,load,loader,67313,"ec< 4, float > >, sofa::gl::component::shader::OglAttribute< 2, GL_FLOAT, sofa::type::Vec< 2, float > >, sofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >, sofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >, sofa::gl::component::shader::OglAttribute< 1, GL_INT, int >, sofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >, sofa::gl::component::shader::OglAttribute< 4, GL_UNSIGNED_INT, sofa::type::Vec< 4, unsigned int > >, sofa::gl::component::shader::LightManager, sofa::gl::component::shader::Light, sofa::gl::component::rendering3d::SlicedVolumetricModel, sofa::gl::component::rendering3d::PointSplatModel, sofa::gl::component::rendering3d::MergeVisualModels, sofa::gl::component::rendering3d::ClipPlane, sofa::gl::component::rendering2d::OglLabel, sofa::gl::component::rendering2d::OglColorMap, sofa::gl::component::engine::TextureInterpolation< DataTypes >, sofa::core::loader::SceneLoader, sofa::core::loader::MeshLoader, sofa::component::visual::VisualGrid, sofa::component::visual::Visual3DText, sofa::component::visual::RecordedCamera, sofa::component::visual::LineAxis, sofa::component::visual::BaseCamera, sofa::component::topology::utility::TopologyChecker, sofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >, sofa::component::topology::utility::TopologicalChangeProcessor, sofa::component::topology::container::grid::RegularGridTopology, sofa::component::topology::container::grid::GridTopology, sofa::component::topology::container::dynamic::TriangleSetTopologyModifier, sofa::component::topology::container::dynamic::TriangleSetTopologyContainer, sofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >, sofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier, sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >, sofa::component::topology::container::dynamic::EdgeSetTopologyContaine",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:79358,Performance,load,loader,79358,"component::playback::WriteTopology, sofa::component::playback::WriteState, sofa::component::playback::ReadTopology, sofa::component::playback::ReadState, sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >, sofa::component::io::mesh::OffSequenceLoader, sofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data. . ◆ SOFA_CLASS(). sofa::core::objectmodel::BaseObject::SOFA_CLASS ; (; BaseObject ; , . Base ;  . ). ◆ storeResetState(). void sofa::core::objectmodel::BaseObject::storeResetState ; (; ). virtual . Save the initial state for later uses in reset() ; Reimplemented in sofa::core::behavior::BaseAnimationLoop, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, and sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >. ◆ trackInternalData(). void sofa::core::objectmodel::BaseObject::trackInternalData ; (; const Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:32925,Safety,detect,detection,32925,"lisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::geometry::CubeCollisionModel, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >, sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >, sofa::core::CollisionModel, sofa::component::visual::BaseCamera, sofa::component::solidmechanics::spring::QuadBendingSprings< DataTypes >, sofa::component::haptics::LCPForceFeedback< TDataTypes >, sofa::component::engine::select::PairBoxROI< DataTypes >, sofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >, sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >, sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase, sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >, and sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60061,Safety,detect,detection,60061,"tion::UncoupledConstraintCorrection< TDataTypes >, sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, sofa::component::collision::geometry::TriangleModelInRegularGrid, sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60140,Safety,detect,detection,60140,":lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, sofa::component::collision::geometry::TriangleModelInRegularGrid, sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60219,Safety,detect,detection,60219,"component::collision::response::contact::CollisionResponse, sofa::component::collision::geometry::TriangleModelInRegularGrid, sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60290,Safety,detect,detection,60290,"nent::collision::geometry::TriangleModelInRegularGrid, sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60359,Safety,detect,detection,60359,"t::collision::geometry::TriangleCollisionModel< TDataTypes >, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60418,Safety,detect,detection,60418,">, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60479,Safety,detect,detection,60479,"el< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::Diagonal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60548,Safety,detect,detection,60548,"try::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:60619,Safety,detect,detection,60619,"phereCollisionModel< TDataTypes >, sofa::component::collision::geometry::RayCollisionModel, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::detection::intersection::NewProximityIntersection, sofa::component::collision::detection::intersection::MinProximityIntersection, sofa::component::collision::detection::intersection::LocalMinDistance, sofa::component::collision::detection::algorithm::RayTraceDetection, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::DirectSAP, sofa::component::collision::detection::algorithm::CollisionPipeline, sofa::component::collision::detection::algorithm::BruteForceDetection, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, sofa::component::animationloop::ConstraintAnimationLoop, sofa::component::engine::select::BaseROI< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:75640,Safety,detect,detection,75640," >, sofa::component::engine::analyze::HausdorffDistance< DataTypes >, sofa::component::engine::analyze::Distances< DataTypes >, sofa::component::engine::analyze::AverageCoord< DataTypes >, sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >, sofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::ParabolicProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::DirectionProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< sofa::defaulttype::StdVectorTypes >, sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:75699,Safety,detect,detection,75699," >, sofa::component::engine::analyze::HausdorffDistance< DataTypes >, sofa::component::engine::analyze::Distances< DataTypes >, sofa::component::engine::analyze::AverageCoord< DataTypes >, sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >, sofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::ParabolicProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::DirectionProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< sofa::defaulttype::StdVectorTypes >, sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >, sofa::component::collision::detection::algorithm::IncrSAP, sofa::component::collision::detection::algorithm::BruteForceBroadPhase, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:79194,Safety,detect,detection,79194,"Shader, sofa::gl::component::rendering3d::OglCylinderModel, sofa::gl::component::rendering3d::DataDisplay, and sofa::component::visual::VisualModelImpl. ◆ removeSlave(). void sofa::core::objectmodel::BaseObject::removeSlave ; (; BaseObject::SPtr ; s). virtual . ◆ reset(). void sofa::core::objectmodel::BaseObject::reset ; (; ). virtual . Reset to initial state. ; Reimplemented in sofa::core::collision::Pipeline, sofa::simulation::PipelineImpl, sofa::component::visual::TrailRenderer< DataTypes >, sofa::component::visual::RecordedCamera, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >, sofa::component::playback::WriteTopology, sofa::component::playback::WriteState, sofa::component::playback::ReadTopology, sofa::component::playback::ReadState, sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >, sofa::component::io::mesh::OffSequenceLoader, sofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >, sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >, sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >, sofa::component::collision::response::contact::CollisionResponse, and sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase. ◆ setSrc() [1/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; const std::string & ; v, . const BaseObject * ; loader, . std::vector< std::string > * ; attributeList = nullptr . ). Sets a source Object and parses it to collect dependent Data Use it before scene graph insertion . ◆ setSrc() [2/2]. void sofa::core::objectmodel::BaseObject::setSrc ; (; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:699,Security,access,access,699,"﻿. SOFA API: sofa::core::objectmodel::BaseObject Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseObject Class Reference . #include <BaseObject.h>; Base class for simulation components. ; More... Inheritance diagram for sofa::core::objectmodel::BaseObject:. [legend]; Detailed Description; Base class for simulation components. ; An object defines a part of the functionality in the simulation (stores state data, specify topology, compute forces, etc). Each simulation object is related to a context, which gives access to all available external data. It is able to process events, if listening enabled (default is false). . Protected Attributes; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:2288,Security,access,access,2288,"a multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; data access; Access to external data . SReal getTime () const;  Current time. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and te",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:9703,Security,access,accessors,9703,"Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; class BaseNode;  BaseNode can set the context of its own objects. More...;  . Context accessors; typedef sofa::core::objectmodel::MultiLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK|BaseLink::FLAG_STRONGLINK > LinkSlaves;  ; typedef LinkSlaves::Container VecSlaves;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  . events; Methods related to Event processing . Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:4416,Testability,log,logging,4416," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:4489,Testability,log,logging,4489," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:4531,Testability,log,logging,4531," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:4601,Testability,log,logging,4601," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:4712,Testability,log,logging,4712," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:4754,Testability,log,logging,4754," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:6578,Testability,log,logErrors,6578,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:62556,Testability,test,test,62556,"torTypes >, sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >, and sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >. ◆ insertInNode(). virtual bool sofa::core::objectmodel::BaseObject::insertInNode ; (; BaseNode * ; ). inlinevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented in sofa::core::visual::VisualModel, sofa::core::visual::VisualManager, sofa::core::visual::VisualLoop, sofa::core::visual::Shader, sofa::core::topology::Topology, sofa::core::topology::BaseTopologyObject, sofa::core::topology::TopologyContainer, sofa::core::topology::BaseMeshTopology, sofa::core::objectmodel::ContextObject, sofa::core::objectmodel::ConfigurationSetting, sofa::core::CollisionModel, sofa::core::collision::Pipeline, sofa::core::BehaviorModel, sofa::core::behavior::OdeSolver, sofa::core::behavior::Mass< DataTypes >, sofa::core::behavior::ConstraintSolver, sofa::core::behavior::BaseProjectiveConstraintSet, sofa::core::behavior::BaseMechanicalState, sofa::core::behavior::BaseMass, sofa::core::behavior::BaseLinearSolver, sofa::core::behavior::BaseInteractionForceField, sofa::core::behavior::BaseForceField, sofa::core::behavior::BaseConstraintSet, sofa::core::behavior::BaseAnimationLoop, sofa::core::BaseState, sofa::core::BaseMapping, sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglCylinderModel, sofa::gl::component::rendering3d::DataDisplay, and sofa::component::visual::VisualModelImpl. ◆ parse(). void sofa::core::objectmodel::BaseObject::parse ; (; BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base.; Reimplemented in sofa::gl::component::rendering3d::MergeVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:76513,Testability,test,test,76513," >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ removeInNode(). virtual bool sofa::core::objectmodel::BaseObject::removeInNode ; (; BaseNode * ; ). inlinevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented in sofa::core::visual::VisualModel, sofa::core::visual::VisualManager, sofa::core::visual::VisualLoop, sofa::core::visual::Shader, sofa::core::topology::Topology, sofa::core::topology::BaseTopologyObject, sofa::core::topology::TopologyContainer, sofa::core::topology::BaseMeshTopology, sofa::core::objectmodel::ContextObject, sofa::core::objectmodel::ConfigurationSetting, sofa::core::CollisionModel, sofa::core::collision::Pipeline, sofa::core::BehaviorModel, sofa::core::behavior::OdeSolver, sofa::core::behavior::Mass< DataTypes >, sofa::core::behavior::ConstraintSolver, sofa::core::behavior::BaseProjectiveConstraintSet, sofa::core::behavior::BaseMechanicalState, sofa::core::behavior::BaseMass, sofa::core::behavior::BaseLinearSolver, sofa::core::behavior::BaseInteractionForceField, sofa::core::behavior::BaseForceField, sofa::core::behavior::BaseConstraintSet, sofa::core::behavior::BaseAnimationLoop, sofa::core::BaseState, sofa::core::BaseMapping, sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglCylinderModel, sofa::gl::component::rendering3d::DataDisplay, and sofa::component::visual::VisualModelImpl. ◆ removeSlave(). void sofa::core::objectmodel::BaseObject::removeSlave ; (; BaseObject::SPtr ; s). virtual . ◆ reset(). void sofa::core::objectmodel::BaseObject::reset ; (; ). virtual . Reset to initial state. ; Reimplemented in sofa::core::collision::Pipeline, sofa::simulation::PipelineImpl, sofa::component::visual::TrailRend",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:4797,Usability,clear,clearLoggedMessages,4797," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html:613,Availability,error,errorssofa,613,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseObjectDescription Member List . This is the complete list of members for sofa::core::objectmodel::BaseObjectDescription, including all inherited members. AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false)sofa::core::objectmodel::BaseObjectDescriptionvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeList(T &container) constsofa::core::objectmodel::BaseObjectDescriptioninline; getAttributeMap() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; getBaseFile()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getObject()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getParent() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptionin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html:264,Modifiability,inherit,inherited,264,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseObjectDescription Member List . This is the complete list of members for sofa::core::objectmodel::BaseObjectDescription, including all inherited members. AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false)sofa::core::objectmodel::BaseObjectDescriptionvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeList(T &container) constsofa::core::objectmodel::BaseObjectDescriptioninline; getAttributeMap() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; getBaseFile()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getObject()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getParent() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptionin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html:1816,Testability,log,logError,1816,"ame=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false)sofa::core::objectmodel::BaseObjectDescriptionvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeList(T &container) constsofa::core::objectmodel::BaseObjectDescriptioninline; getAttributeMap() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; getBaseFile()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getObject()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getParent() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; removeAttribute(const std::string &attr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setName(const std::string &name)sofa::core::objectmodel::BaseObjectDescriptionvirtual; ~BaseObjectDescription()sofa::core::objectmodel::BaseObjectDescriptionvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html:1907,Testability,log,logErrors,1907,"ame=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false)sofa::core::objectmodel::BaseObjectDescriptionvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeList(T &container) constsofa::core::objectmodel::BaseObjectDescriptioninline; getAttributeMap() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; getBaseFile()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getObject()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getParent() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; removeAttribute(const std::string &attr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setAttribute(const std::string &attr, const std::string &val)sofa::core::objectmodel::BaseObjectDescriptionvirtual; setName(const std::string &name)sofa::core::objectmodel::BaseObjectDescriptionvirtual; ~BaseObjectDescription()sofa::core::objectmodel::BaseObjectDescriptionvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html:539,Usability,clear,clearErrors,539,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseObjectDescription Member List . This is the complete list of members for sofa::core::objectmodel::BaseObjectDescription, including all inherited members. AttributeMap typedefsofa::core::objectmodel::BaseObjectDescription; attributessofa::core::objectmodel::BaseObjectDescriptionprotected; BaseObjectDescription(const char *name=nullptr, const char *type=nullptr)sofa::core::objectmodel::BaseObjectDescription; clearErrors()sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; errorssofa::core::objectmodel::BaseObjectDescriptionprotected; find(const char *nodeName, bool absolute=false)sofa::core::objectmodel::BaseObjectDescriptionvirtual; findObject(const char *nodeName)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttribute(const std::string &attr, const char *defaultVal=nullptr)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsFloat(const std::string &attr, const float defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeAsInt(const std::string &attr, const int defaultVal=0.0)sofa::core::objectmodel::BaseObjectDescriptionvirtual; getAttributeList(T &container) constsofa::core::objectmodel::BaseObjectDescriptioninline; getAttributeMap() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; getBaseFile()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getErrors() constsofa::core::objectmodel::BaseObjectDescriptioninline; getFullName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getName()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getObject()sofa::core::objectmodel::BaseObjectDescriptionvirtual; getParent() constsofa::core::objectmodel::BaseObjectDescriptionvirtual; logError(const std::string &s)sofa::core::objectmodel::BaseObjectDescriptioninlinevirtual; logErrors(const std::vector< std::string > &e)sofa::core::objectmodel::BaseObjectDescriptionin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:945,Availability,error,errors,945,"﻿. SOFA API: sofa::core::objectmodel::BaseObjectDescription Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseObjectDescription Class Reference . #include <BaseObjectDescription.h>; Base Interface for classes containing the description of an object, used to construct it. ; More... Inheritance diagram for sofa::core::objectmodel::BaseObjectDescription:. [legend]; Detailed Description; Base Interface for classes containing the description of an object, used to construct it. ; This class defines what information are used as input (read from a file for instance) to create an object. This default implementation simply stores an attributes map and does not support any hierarchy. . Classes; class  Attribute;  . Protected Attributes; AttributeMap attributes;  ; std::vector< std::string > errors;  . Public Member Functions;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual Base * getObject ();  Get the associated object (or nullptr if it is not created yet) More...;  ; virtual std::string getName ();  Get the object instance name. More...;  ; virtual void setName (const std::string &name);  Set the object instance name. More...;  ; virtual BaseObjectDescription * getParent () const;  Get the parent node. More...;  ; virtual std::string getBaseFile ();  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual BaseObjectDescription * find (const char *nodeName, bool absolute=false);  Find an object description given its name (relative to this object) More...;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:3119,Availability,error,errors,3119,"its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual bool removeAttribute (const std::string &attr);  Remove an attribute given its name. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Attribute details. ◆ attributes. AttributeMap sofa::core::objectmodel::BaseObjectDescription::attributes. protected . ◆ errors. std::vector< std::string > sofa::core::objectmodel::BaseObjectDescription::errors. protected . Constructor details. ◆ BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::BaseObjectDescription ; (; const char * ; name = nullptr, . const char * ; type = nullptr . ). ◆ ~BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::~BaseObjectDescription ; (; ). virtual . Function details. ◆ clearErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::clearErrors ; (; ). inlinevirtual . ◆ find(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ findObject(). Base * sofa::core::objectmodel::BaseObjectDescription::findObject ; (; const char * ; nodeName). virtual . Find an object given its name (relative to this object)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:3202,Availability,error,errors,3202,"re...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual bool removeAttribute (const std::string &attr);  Remove an attribute given its name. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Attribute details. ◆ attributes. AttributeMap sofa::core::objectmodel::BaseObjectDescription::attributes. protected . ◆ errors. std::vector< std::string > sofa::core::objectmodel::BaseObjectDescription::errors. protected . Constructor details. ◆ BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::BaseObjectDescription ; (; const char * ; name = nullptr, . const char * ; type = nullptr . ). ◆ ~BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::~BaseObjectDescription ; (; ). virtual . Function details. ◆ clearErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::clearErrors ; (; ). inlinevirtual . ◆ find(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ findObject(). Base * sofa::core::objectmodel::BaseObjectDescription::findObject ; (; const char * ; nodeName). virtual . Find an object given its name (relative to this object) ; Find an object given its name. . ◆ getAttrib",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:4746,Integrability,message,message,4746,"scription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ findObject(). Base * sofa::core::objectmodel::BaseObjectDescription::findObject ; (; const char * ; nodeName). virtual . Find an object given its name (relative to this object) ; Find an object given its name. . ◆ getAttribute(). const char * sofa::core::objectmodel::BaseObjectDescription::getAttribute ; (; const std::string & ; attr, . const char * ; defaultVal = nullptr . ). virtual . Get an attribute given its name (return defaultVal if not present) . ◆ getAttributeAsFloat(). float sofa::core::objectmodel::BaseObjectDescription::getAttributeAsFloat ; (; const std::string & ; attr, . const float ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a float given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeAsInt(). int sofa::core::objectmodel::BaseObjectDescription::getAttributeAsInt ; (; const std::string & ; attr, . const int ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a int given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeList(). template<class T > . void sofa::core::objectmodel::BaseObjectDescription::getAttributeList ; (; T & ; container); const. inline . ◆ getAttributeMap(). const BaseObjectDescription::AttributeMap & sofa::core::objectmodel::BaseObjectDescription::getAttributeMap ; (; ); const. virtual . ◆ getBaseFile(). std::string sofa::core::objectmodel::BaseObjectDescription::getBaseFile ; (; ). virtual . Get the file where this description was read from. Useful to resolve relative file paths. ; Reimplemente",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:5147,Integrability,message,message,5147,"ject given its name. . ◆ getAttribute(). const char * sofa::core::objectmodel::BaseObjectDescription::getAttribute ; (; const std::string & ; attr, . const char * ; defaultVal = nullptr . ). virtual . Get an attribute given its name (return defaultVal if not present) . ◆ getAttributeAsFloat(). float sofa::core::objectmodel::BaseObjectDescription::getAttributeAsFloat ; (; const std::string & ; attr, . const float ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a float given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeAsInt(). int sofa::core::objectmodel::BaseObjectDescription::getAttributeAsInt ; (; const std::string & ; attr, . const int ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a int given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeList(). template<class T > . void sofa::core::objectmodel::BaseObjectDescription::getAttributeList ; (; T & ; container); const. inline . ◆ getAttributeMap(). const BaseObjectDescription::AttributeMap & sofa::core::objectmodel::BaseObjectDescription::getAttributeMap ; (; ); const. virtual . ◆ getBaseFile(). std::string sofa::core::objectmodel::BaseObjectDescription::getBaseFile ; (; ). virtual . Get the file where this description was read from. Useful to resolve relative file paths. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ getErrors(). std::vector< std::string > const& sofa::core::objectmodel::BaseObjectDescription::getErrors ; (; ); const. inline . ◆ getFullName(). std::string sofa::core::objectmodel::BaseObjectDescription::getFullName ; (; ). virtual . Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) . ◆ getName(). std::str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:2808,Testability,log,logError,2808,"ase * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual bool removeAttribute (const std::string &attr);  Remove an attribute given its name. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Attribute details. ◆ attributes. AttributeMap sofa::core::objectmodel::BaseObjectDescription::attributes. protected . ◆ errors. std::vector< std::string > sofa::core::objectmodel::BaseObjectDescription::errors. protected . Constructor details. ◆ BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::BaseObjectDescription ; (; const char * ; name = nullptr, . const char * ; type = nullptr . ). ◆ ~BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::~BaseObjectDescription ; (; ). virtual . Function details. ◆ clearErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::clearErrors ; (; ). inlinevirtual . ◆ find(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:2857,Testability,log,logErrors,2857,"ase * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual bool removeAttribute (const std::string &attr);  Remove an attribute given its name. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Attribute details. ◆ attributes. AttributeMap sofa::core::objectmodel::BaseObjectDescription::attributes. protected . ◆ errors. std::vector< std::string > sofa::core::objectmodel::BaseObjectDescription::errors. protected . Constructor details. ◆ BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::BaseObjectDescription ; (; const char * ; name = nullptr, . const char * ; type = nullptr . ). ◆ ~BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::~BaseObjectDescription ; (; ). virtual . Function details. ◆ clearErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::clearErrors ; (; ). inlinevirtual . ◆ find(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:4761,Testability,log,logError,4761,"scription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ findObject(). Base * sofa::core::objectmodel::BaseObjectDescription::findObject ; (; const char * ; nodeName). virtual . Find an object given its name (relative to this object) ; Find an object given its name. . ◆ getAttribute(). const char * sofa::core::objectmodel::BaseObjectDescription::getAttribute ; (; const std::string & ; attr, . const char * ; defaultVal = nullptr . ). virtual . Get an attribute given its name (return defaultVal if not present) . ◆ getAttributeAsFloat(). float sofa::core::objectmodel::BaseObjectDescription::getAttributeAsFloat ; (; const std::string & ; attr, . const float ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a float given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeAsInt(). int sofa::core::objectmodel::BaseObjectDescription::getAttributeAsInt ; (; const std::string & ; attr, . const int ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a int given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeList(). template<class T > . void sofa::core::objectmodel::BaseObjectDescription::getAttributeList ; (; T & ; container); const. inline . ◆ getAttributeMap(). const BaseObjectDescription::AttributeMap & sofa::core::objectmodel::BaseObjectDescription::getAttributeMap ; (; ); const. virtual . ◆ getBaseFile(). std::string sofa::core::objectmodel::BaseObjectDescription::getBaseFile ; (; ). virtual . Get the file where this description was read from. Useful to resolve relative file paths. ; Reimplemente",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:5162,Testability,log,logError,5162,"ject given its name. . ◆ getAttribute(). const char * sofa::core::objectmodel::BaseObjectDescription::getAttribute ; (; const std::string & ; attr, . const char * ; defaultVal = nullptr . ). virtual . Get an attribute given its name (return defaultVal if not present) . ◆ getAttributeAsFloat(). float sofa::core::objectmodel::BaseObjectDescription::getAttributeAsFloat ; (; const std::string & ; attr, . const float ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a float given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeAsInt(). int sofa::core::objectmodel::BaseObjectDescription::getAttributeAsInt ; (; const std::string & ; attr, . const int ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get an attribute converted to a int given its name. returns defaultVal if not present or in case the attribute cannot be parsed totally adds a message in the logError if the attribute cannot be totally parsed. . ◆ getAttributeList(). template<class T > . void sofa::core::objectmodel::BaseObjectDescription::getAttributeList ; (; T & ; container); const. inline . ◆ getAttributeMap(). const BaseObjectDescription::AttributeMap & sofa::core::objectmodel::BaseObjectDescription::getAttributeMap ; (; ); const. virtual . ◆ getBaseFile(). std::string sofa::core::objectmodel::BaseObjectDescription::getBaseFile ; (; ). virtual . Get the file where this description was read from. Useful to resolve relative file paths. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ getErrors(). std::vector< std::string > const& sofa::core::objectmodel::BaseObjectDescription::getErrors ; (; ); const. inline . ◆ getFullName(). std::string sofa::core::objectmodel::BaseObjectDescription::getFullName ; (; ). virtual . Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) . ◆ getName(). std::str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:6965,Testability,log,logError,6965,"Description::getFullName ; (; ). virtual . Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) . ◆ getName(). std::string sofa::core::objectmodel::BaseObjectDescription::getName ; (; ). virtual . Get the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ getObject(). Base * sofa::core::objectmodel::BaseObjectDescription::getObject ; (; ). virtual . Get the associated object (or nullptr if it is not created yet) ; Reimplemented in sofa::simulation::xml::BaseElement, sofa::simulation::xml::Element< Object >, sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >, sofa::simulation::xml::Element< core::objectmodel::BaseObject >, and sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >. ◆ getParent(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::getParent ; (; ); const. virtual . Get the parent node. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ logError(). virtual void sofa::core::objectmodel::BaseObjectDescription::logError ; (; const std::string & ; s). inlinevirtual . ◆ logErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::logErrors ; (; const std::vector< std::string > & ; e). inlinevirtual . ◆ removeAttribute(). bool sofa::core::objectmodel::BaseObjectDescription::removeAttribute ; (; const std::string & ; attr). virtual . Remove an attribute given its name. ; Remove an attribute given its name, returns false if the attribute was not there. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ setAttribute(). void sofa::core::objectmodel::BaseObjectDescription::setAttribute ; (; const std::string & ; attr, . const std::string & ; val . ). virtual . Set an attribute. Override any existing value. . ◆ setName(). void sofa::core::objectmodel::BaseObjectDescription::setName ; (; const std::string & ; name). virtual . Set the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. sofaco",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:7038,Testability,log,logError,7038,"ame of this object (i.e. concatenation if all the names of its ancestors and itself) . ◆ getName(). std::string sofa::core::objectmodel::BaseObjectDescription::getName ; (; ). virtual . Get the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ getObject(). Base * sofa::core::objectmodel::BaseObjectDescription::getObject ; (; ). virtual . Get the associated object (or nullptr if it is not created yet) ; Reimplemented in sofa::simulation::xml::BaseElement, sofa::simulation::xml::Element< Object >, sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >, sofa::simulation::xml::Element< core::objectmodel::BaseObject >, and sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >. ◆ getParent(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::getParent ; (; ); const. virtual . Get the parent node. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ logError(). virtual void sofa::core::objectmodel::BaseObjectDescription::logError ; (; const std::string & ; s). inlinevirtual . ◆ logErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::logErrors ; (; const std::vector< std::string > & ; e). inlinevirtual . ◆ removeAttribute(). bool sofa::core::objectmodel::BaseObjectDescription::removeAttribute ; (; const std::string & ; attr). virtual . Remove an attribute given its name. ; Remove an attribute given its name, returns false if the attribute was not there. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ setAttribute(). void sofa::core::objectmodel::BaseObjectDescription::setAttribute ; (; const std::string & ; attr, . const std::string & ; val . ). virtual . Set an attribute. Override any existing value. . ◆ setName(). void sofa::core::objectmodel::BaseObjectDescription::setName ; (; const std::string & ; name). virtual . Set the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. sofacoreobjectmodelBaseObjectDescription; Generated on Mon Nov 1",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:7096,Testability,log,logErrors,7096," all the names of its ancestors and itself) . ◆ getName(). std::string sofa::core::objectmodel::BaseObjectDescription::getName ; (; ). virtual . Get the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ getObject(). Base * sofa::core::objectmodel::BaseObjectDescription::getObject ; (; ). virtual . Get the associated object (or nullptr if it is not created yet) ; Reimplemented in sofa::simulation::xml::BaseElement, sofa::simulation::xml::Element< Object >, sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >, sofa::simulation::xml::Element< core::objectmodel::BaseObject >, and sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >. ◆ getParent(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::getParent ; (; ); const. virtual . Get the parent node. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ logError(). virtual void sofa::core::objectmodel::BaseObjectDescription::logError ; (; const std::string & ; s). inlinevirtual . ◆ logErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::logErrors ; (; const std::vector< std::string > & ; e). inlinevirtual . ◆ removeAttribute(). bool sofa::core::objectmodel::BaseObjectDescription::removeAttribute ; (; const std::string & ; attr). virtual . Remove an attribute given its name. ; Remove an attribute given its name, returns false if the attribute was not there. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ setAttribute(). void sofa::core::objectmodel::BaseObjectDescription::setAttribute ; (; const std::string & ; attr, . const std::string & ; val . ). virtual . Set an attribute. Override any existing value. . ◆ setName(). void sofa::core::objectmodel::BaseObjectDescription::setName ; (; const std::string & ; name). virtual . Set the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. sofacoreobjectmodelBaseObjectDescription; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:7170,Testability,log,logErrors,7170," all the names of its ancestors and itself) . ◆ getName(). std::string sofa::core::objectmodel::BaseObjectDescription::getName ; (; ). virtual . Get the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ getObject(). Base * sofa::core::objectmodel::BaseObjectDescription::getObject ; (; ). virtual . Get the associated object (or nullptr if it is not created yet) ; Reimplemented in sofa::simulation::xml::BaseElement, sofa::simulation::xml::Element< Object >, sofa::simulation::xml::Element< sofa::core::objectmodel::BaseNode >, sofa::simulation::xml::Element< core::objectmodel::BaseObject >, and sofa::simulation::xml::Element< sofa::core::objectmodel::BaseObject >. ◆ getParent(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::getParent ; (; ); const. virtual . Get the parent node. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ logError(). virtual void sofa::core::objectmodel::BaseObjectDescription::logError ; (; const std::string & ; s). inlinevirtual . ◆ logErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::logErrors ; (; const std::vector< std::string > & ; e). inlinevirtual . ◆ removeAttribute(). bool sofa::core::objectmodel::BaseObjectDescription::removeAttribute ; (; const std::string & ; attr). virtual . Remove an attribute given its name. ; Remove an attribute given its name, returns false if the attribute was not there. ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ setAttribute(). void sofa::core::objectmodel::BaseObjectDescription::setAttribute ; (; const std::string & ; attr, . const std::string & ; val . ). virtual . Set an attribute. Override any existing value. . ◆ setName(). void sofa::core::objectmodel::BaseObjectDescription::setName ; (; const std::string & ; name). virtual . Set the object instance name. ; Reimplemented in sofa::simulation::xml::BaseElement. sofacoreobjectmodelBaseObjectDescription; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:768,Usability,simpl,simply,768,"﻿. SOFA API: sofa::core::objectmodel::BaseObjectDescription Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseObjectDescription Class Reference . #include <BaseObjectDescription.h>; Base Interface for classes containing the description of an object, used to construct it. ; More... Inheritance diagram for sofa::core::objectmodel::BaseObjectDescription:. [legend]; Detailed Description; Base Interface for classes containing the description of an object, used to construct it. ; This class defines what information are used as input (read from a file for instance) to create an object. This default implementation simply stores an attributes map and does not support any hierarchy. . Classes; class  Attribute;  . Protected Attributes; AttributeMap attributes;  ; std::vector< std::string > errors;  . Public Member Functions;  BaseObjectDescription (const char *name=nullptr, const char *type=nullptr);  ; virtual ~BaseObjectDescription ();  ; virtual Base * getObject ();  Get the associated object (or nullptr if it is not created yet) More...;  ; virtual std::string getName ();  Get the object instance name. More...;  ; virtual void setName (const std::string &name);  Set the object instance name. More...;  ; virtual BaseObjectDescription * getParent () const;  Get the parent node. More...;  ; virtual std::string getBaseFile ();  Get the file where this description was read from. Useful to resolve relative file paths. More...;  ; virtual const AttributeMap & getAttributeMap () const;  ; template<class T > ; void getAttributeList (T &container) const;  ; virtual BaseObjectDescription * find (const char *nodeName, bool absolute=false);  Find an object description given its name (relative to this object) More...;  ; virtual Base * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:2980,Usability,clear,clearErrors,2980,"ase * findObject (const char *nodeName);  Find an object given its name (relative to this object) More...;  ; virtual const char * getAttribute (const std::string &attr, const char *defaultVal=nullptr);  Get an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual bool removeAttribute (const std::string &attr);  Remove an attribute given its name. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Attribute details. ◆ attributes. AttributeMap sofa::core::objectmodel::BaseObjectDescription::attributes. protected . ◆ errors. std::vector< std::string > sofa::core::objectmodel::BaseObjectDescription::errors. protected . Constructor details. ◆ BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::BaseObjectDescription ; (; const char * ; name = nullptr, . const char * ; type = nullptr . ). ◆ ~BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::~BaseObjectDescription ; (; ). virtual . Function details. ◆ clearErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::clearErrors ; (; ). inlinevirtual . ◆ find(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:3550,Usability,clear,clearErrors,3550,"removeAttribute (const std::string &attr);  Remove an attribute given its name. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Attribute details. ◆ attributes. AttributeMap sofa::core::objectmodel::BaseObjectDescription::attributes. protected . ◆ errors. std::vector< std::string > sofa::core::objectmodel::BaseObjectDescription::errors. protected . Constructor details. ◆ BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::BaseObjectDescription ; (; const char * ; name = nullptr, . const char * ; type = nullptr . ). ◆ ~BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::~BaseObjectDescription ; (; ). virtual . Function details. ◆ clearErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::clearErrors ; (; ). inlinevirtual . ◆ find(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ findObject(). Base * sofa::core::objectmodel::BaseObjectDescription::findObject ; (; const char * ; nodeName). virtual . Find an object given its name (relative to this object) ; Find an object given its name. . ◆ getAttribute(). const char * sofa::core::objectmodel::BaseObjectDescription::getAttribute ; (; const std::string & ; attr, . const char * ; defaultVal = nullptr . ). virtual . Get an attribute given its name (return defaultVal if not present) . ◆ getAttributeAsFloat(). float sofa::core::objectmodel::BaseObjectDescription::getAttributeAsFloat ; (; const std::string & ; attr, . const float ; defa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html:3626,Usability,clear,clearErrors,3626,"e an attribute given its name. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Attribute details. ◆ attributes. AttributeMap sofa::core::objectmodel::BaseObjectDescription::attributes. protected . ◆ errors. std::vector< std::string > sofa::core::objectmodel::BaseObjectDescription::errors. protected . Constructor details. ◆ BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::BaseObjectDescription ; (; const char * ; name = nullptr, . const char * ; type = nullptr . ). ◆ ~BaseObjectDescription(). sofa::core::objectmodel::BaseObjectDescription::~BaseObjectDescription ; (; ). virtual . Function details. ◆ clearErrors(). virtual void sofa::core::objectmodel::BaseObjectDescription::clearErrors ; (; ). inlinevirtual . ◆ find(). BaseObjectDescription * sofa::core::objectmodel::BaseObjectDescription::find ; (; const char * ; nodeName, . bool ; absolute = false . ). virtual . Find an object description given its name (relative to this object) ; Reimplemented in sofa::simulation::xml::BaseElement. ◆ findObject(). Base * sofa::core::objectmodel::BaseObjectDescription::findObject ; (; const char * ; nodeName). virtual . Find an object given its name (relative to this object) ; Find an object given its name. . ◆ getAttribute(). const char * sofa::core::objectmodel::BaseObjectDescription::getAttribute ; (; const std::string & ; attr, . const char * ; defaultVal = nullptr . ). virtual . Get an attribute given its name (return defaultVal if not present) . ◆ getAttributeAsFloat(). float sofa::core::objectmodel::BaseObjectDescription::getAttributeAsFloat ; (; const std::string & ; attr, . const float ; defaultVal = 0.0 . ). virtual . Docs is in .h. ; Get ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseObjectDescription::Attribute Member List . This is the complete list of members for sofa::core::objectmodel::BaseObjectDescription::Attribute, including all inherited members. accessedsofa::core::objectmodel::BaseObjectDescription::Attributemutableprotected; Attribute()sofa::core::objectmodel::BaseObjectDescription::Attributeinline; Attribute(const std::string &v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; c_str() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; isAccessed() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator std::string() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator=(const std::string &v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator=(const char *v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; setAccessed(bool v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; valuesofa::core::objectmodel::BaseObjectDescription::Attributeprotected. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html:305,Security,access,accessedsofa,305,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseObjectDescription::Attribute Member List . This is the complete list of members for sofa::core::objectmodel::BaseObjectDescription::Attribute, including all inherited members. accessedsofa::core::objectmodel::BaseObjectDescription::Attributemutableprotected; Attribute()sofa::core::objectmodel::BaseObjectDescription::Attributeinline; Attribute(const std::string &v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; c_str() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; isAccessed() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator std::string() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator=(const std::string &v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator=(const char *v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; setAccessed(bool v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; valuesofa::core::objectmodel::BaseObjectDescription::Attributeprotected. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html:396,Security,access,accessed,396,﻿. SOFA API: sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference . #include <BaseObjectDescription.h>. Protected Attributes; std::string value;  ; bool accessed;  . Public Member Functions;  Attribute ();  ;  Attribute (const std::string &v);  ; void operator= (const std::string &v);  ; void operator= (const char *v);  ;  operator std::string () const;  ; const char * c_str () const;  ; bool isAccessed () const;  ; void setAccessed (bool v);  . Attribute details. ◆ accessed. bool sofa::core::objectmodel::BaseObjectDescription::Attribute::accessed. mutableprotected . ◆ value. std::string sofa::core::objectmodel::BaseObjectDescription::Attribute::value. protected . Constructor details. ◆ Attribute() [1/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; ). inline . ◆ Attribute() [2/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; const std::string & ; v). inline . Function details. ◆ c_str(). const char* sofa::core::objectmodel::BaseObjectDescription::Attribute::c_str ; (; ); const. inline . ◆ isAccessed(). bool sofa::core::objectmodel::BaseObjectDescription::Attribute::isAccessed ; (; ); const. inline . ◆ operator std::string(). sofa::core::objectmodel::BaseObjectDescription::Attribute::operator std::string ; (; ); const. inline . ◆ operator=() [1/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const char * ; v). inline . ◆ operator=() [2/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const std::string & ; v). inline . ◆ setAccessed(). void sofa::core::objectmodel::BaseObjectDescription::Attribute::setAccessed ; (; bool ; v). inline . sofacoreobjectmodelBaseObjectDescriptionAttribute; Generated on Mon Nov,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html:714,Security,access,accessed,714,﻿. SOFA API: sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference . #include <BaseObjectDescription.h>. Protected Attributes; std::string value;  ; bool accessed;  . Public Member Functions;  Attribute ();  ;  Attribute (const std::string &v);  ; void operator= (const std::string &v);  ; void operator= (const char *v);  ;  operator std::string () const;  ; const char * c_str () const;  ; bool isAccessed () const;  ; void setAccessed (bool v);  . Attribute details. ◆ accessed. bool sofa::core::objectmodel::BaseObjectDescription::Attribute::accessed. mutableprotected . ◆ value. std::string sofa::core::objectmodel::BaseObjectDescription::Attribute::value. protected . Constructor details. ◆ Attribute() [1/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; ). inline . ◆ Attribute() [2/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; const std::string & ; v). inline . Function details. ◆ c_str(). const char* sofa::core::objectmodel::BaseObjectDescription::Attribute::c_str ; (; ); const. inline . ◆ isAccessed(). bool sofa::core::objectmodel::BaseObjectDescription::Attribute::isAccessed ; (; ); const. inline . ◆ operator std::string(). sofa::core::objectmodel::BaseObjectDescription::Attribute::operator std::string ; (; ); const. inline . ◆ operator=() [1/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const char * ; v). inline . ◆ operator=() [2/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const std::string & ; v). inline . ◆ setAccessed(). void sofa::core::objectmodel::BaseObjectDescription::Attribute::setAccessed ; (; bool ; v). inline . sofacoreobjectmodelBaseObjectDescriptionAttribute; Generated on Mon Nov,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html:788,Security,access,accessed,788,﻿. SOFA API: sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference . #include <BaseObjectDescription.h>. Protected Attributes; std::string value;  ; bool accessed;  . Public Member Functions;  Attribute ();  ;  Attribute (const std::string &v);  ; void operator= (const std::string &v);  ; void operator= (const char *v);  ;  operator std::string () const;  ; const char * c_str () const;  ; bool isAccessed () const;  ; void setAccessed (bool v);  . Attribute details. ◆ accessed. bool sofa::core::objectmodel::BaseObjectDescription::Attribute::accessed. mutableprotected . ◆ value. std::string sofa::core::objectmodel::BaseObjectDescription::Attribute::value. protected . Constructor details. ◆ Attribute() [1/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; ). inline . ◆ Attribute() [2/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; const std::string & ; v). inline . Function details. ◆ c_str(). const char* sofa::core::objectmodel::BaseObjectDescription::Attribute::c_str ; (; ); const. inline . ◆ isAccessed(). bool sofa::core::objectmodel::BaseObjectDescription::Attribute::isAccessed ; (; ); const. inline . ◆ operator std::string(). sofa::core::objectmodel::BaseObjectDescription::Attribute::operator std::string ; (; ); const. inline . ◆ operator=() [1/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const char * ; v). inline . ◆ operator=() [2/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const std::string & ; v). inline . ◆ setAccessed(). void sofa::core::objectmodel::BaseObjectDescription::Attribute::setAccessed ; (; bool ; v). inline . sofacoreobjectmodelBaseObjectDescriptionAttribute; Generated on Mon Nov,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_class_info-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::ClassInfo Member List . This is the complete list of members for sofa::core::objectmodel::ClassInfo, including all inherited members. classessofa::core::objectmodel::ClassInfoprotectedstatic; ClassInfo(const std::type_info *ti)sofa::core::objectmodel::ClassInfoprotected; dynamicCast(Base *obj) const =0sofa::core::objectmodel::ClassInfopure virtual; isInstance(Base *obj) constsofa::core::objectmodel::ClassInfoinlinevirtual; name() constsofa::core::objectmodel::ClassInfoinline; operator const std::type_info &() constsofa::core::objectmodel::ClassInfoinline; operator!=(const ClassInfo &t) constsofa::core::objectmodel::ClassInfoinline; operator<(const ClassInfo &t) constsofa::core::objectmodel::ClassInfoinline; operator==(const ClassInfo &t) constsofa::core::objectmodel::ClassInfoinline; ptsofa::core::objectmodel::ClassInfoprotected; type() constsofa::core::objectmodel::ClassInfoinline; ~ClassInfo()sofa::core::objectmodel::ClassInfoprotectedvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_class_info-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_class_info-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:9835,Deployability,update,updateInternal,9835,"ore::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:9888,Deployability,update,updateLinks,9888,"ore::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::ConfigurationSetting Member List . This is the complete list of members for sofa::core::objectmodel::ConfigurationSetting, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:9251,Performance,load,loader,9251,"fa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::objectmodel::ConfigurationSettingvirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:730,Testability,log,logging,730," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:2174,Testability,log,logging,2174,"acker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:2216,Testability,log,logging,2216," BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:4400,Testability,log,logging,4400,inks(const std::string &name) constsofa::core::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:4442,Testability,log,logging,4442,ore::objectmodel::Base; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotecte,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:9905,Testability,log,logErrors,9905,"ore::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:1905,Usability,clear,clearLoggedMessages,1905,"e(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:730,Availability,down,down,730,"﻿. SOFA API: sofa::core::objectmodel::ConfigurationSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:13466,Availability,down,down,13466,"seObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::ConfigurationSetting ; (; ). protected . Default constructor. . ◆ ~ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::~ConfigurationSetting ; (; ). overrideprotected . Function details. ◆ init(). void sofa::core::objectmodel::ConfigurationSetting::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ insertInNode(). bool sofa::core::objectmodel::ConfigurationSetting::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::objectmodel::ConfigurationSetting::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS ; (; ConfigurationSetting ; , . BaseObject ;  . ). sofacoreobjectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:351,Deployability,configurat,configuration,351,"﻿. SOFA API: sofa::core::objectmodel::ConfigurationSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:520,Deployability,configurat,configuration,520,"﻿. SOFA API: sofa::core::objectmodel::ConfigurationSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:2669,Deployability,update,updateInternal,2669,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:7164,Deployability,update,updateLinks,7164,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:9424,Deployability,update,update,9424,"ink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:1324,Integrability,depend,dependent,1324," sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:11127,Integrability,message,messages,11127,"tData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of field",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:351,Modifiability,config,configuration,351,"﻿. SOFA API: sofa::core::objectmodel::ConfigurationSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:520,Modifiability,config,configuration,520,"﻿. SOFA API: sofa::core::objectmodel::ConfigurationSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:905,Modifiability,inherit,inherited,905,"﻿. SOFA API: sofa::core::objectmodel::ConfigurationSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:2605,Modifiability,variab,variables,2605," getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:2715,Modifiability,variab,variables,2715,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:2757,Modifiability,variab,variables,2757,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:3002,Modifiability,inherit,inherited,3002," ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:9258,Modifiability,inherit,inherited,9258,"ink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:9981,Modifiability,inherit,inherited,9981,"k);  . Protected Member Functions;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_pr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:10712,Modifiability,inherit,inherited,10712,"a to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; Singl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:10878,Modifiability,inherit,inherited,10878,"ted Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:11700,Modifiability,inherit,inherited,11700,"nts, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:11954,Modifiability,inherit,inherited,11954,"nts, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:12393,Modifiability,inherit,inherited,12393,"g, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::ConfigurationSetting ; (; ). protected . Default constructor. . ◆ ~ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::~ConfigurationSetting ; (; ). overrideprotected . Function details. ◆ init(). void sofa::core::objectmodel::ConfigurationSetting::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down tr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:12793,Modifiability,inherit,inherited,12793,"bject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::ConfigurationSetting ; (; ). protected . Default constructor. . ◆ ~ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::~ConfigurationSetting ; (; ). overrideprotected . Function details. ◆ init(). void sofa::core::objectmodel::ConfigurationSetting::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ insertInNode(). bool sofa::core::objectmodel::ConfigurationSetting::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemente",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:1405,Performance,load,loader,1405,"r all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modificatio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:5020,Testability,log,logging,5020," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:5093,Testability,log,logging,5093," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:5135,Testability,log,logging,5135," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:5205,Testability,log,logging,5205," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:5316,Testability,log,logging,5316," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:5358,Testability,log,logging,5358," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:7182,Testability,log,logErrors,7182,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:13779,Testability,test,test,13779,"scription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::ConfigurationSetting ; (; ). protected . Default constructor. . ◆ ~ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::~ConfigurationSetting ; (; ). overrideprotected . Function details. ◆ init(). void sofa::core::objectmodel::ConfigurationSetting::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ insertInNode(). bool sofa::core::objectmodel::ConfigurationSetting::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::objectmodel::ConfigurationSetting::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS ; (; ConfigurationSetting ; , . BaseObject ;  . ). sofacoreobjectmodelConfigurationSetting; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:14156,Testability,test,test,14156,"scription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::ConfigurationSetting ; (; ). protected . Default constructor. . ◆ ~ConfigurationSetting(). sofa::core::objectmodel::ConfigurationSetting::~ConfigurationSetting ; (; ). overrideprotected . Function details. ◆ init(). void sofa::core::objectmodel::ConfigurationSetting::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ insertInNode(). bool sofa::core::objectmodel::ConfigurationSetting::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::objectmodel::ConfigurationSetting::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS ; (; ConfigurationSetting ; , . BaseObject ;  . ). sofacoreobjectmodelConfigurationSetting; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:5401,Usability,clear,clearLoggedMessages,5401," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:13266,Deployability,update,updateLinks,13266,"a::core::objectmodel::Contextvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setDisplayWorldGravity(bool val)sofa::core::objectmodel::Contextinlinevirtual; setDt(SReal dt) overridesofa::core::objectmodel::Contextvirtual; setGravity(const Vec3 &) overridesofa::core::objectmodel::Contextvirtual; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setMechanicalState(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSleeping(bool val) overridesofa::core::objectmodel::Contextvirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; SPtr typedefsofa::core::objectmodel::Base; time_sofa::core::objectmodel::Context; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Context Member List . This is the complete list of members for sofa::core::objectmodel::Context, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; Context()sofa::core::objectmodel::Contextprotected; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_canChangeSleepingStatesofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:704,Testability,log,logging,704," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; Context()sofa::core::objectmodel::Contextprotected; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_canChangeSleepingStatesofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:1850,Testability,log,logging,1850,":BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; Context()sofa::core::objectmodel::Contextprotected; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; dt_sofa::core::objectmodel::Context; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:1892,Testability,log,logging,1892,"lback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; Context()sofa::core::objectmodel::Contextprotected; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; dt_sofa::core::objectmodel::Context; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:5670,Testability,log,logging,5670,"ofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefault()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getDt() const overridesofa::core::objectmodel::Contextvirtual; getGravity() const overridesofa::core::objectmodel::Contextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() constsofa::core::objectmodel::BaseContextvirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getObject(const ClassInfo &class_info, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const std::string &path) constsofa::core::objectmodel::BaseContextvirtual; getObjects(const ClassInfo &class",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:5712,Testability,log,logging,5712," GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefault()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getDt() const overridesofa::core::objectmodel::Contextvirtual; getGravity() const overridesofa::core::objectmodel::Contextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() constsofa::core::objectmodel::BaseContextvirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getObject(const ClassInfo &class_info, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const std::string &path) constsofa::core::objectmodel::BaseContextvirtual; getObjects(const ClassInfo &class_info, GetObjectsCallBack &container, Sear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:13283,Testability,log,logErrors,13283,"a::core::objectmodel::Contextvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setDisplayWorldGravity(bool val)sofa::core::objectmodel::Contextinlinevirtual; setDt(SReal dt) overridesofa::core::objectmodel::Contextvirtual; setGravity(const Vec3 &) overridesofa::core::objectmodel::Contextvirtual; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setMechanicalState(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSleeping(bool val) overridesofa::core::objectmodel::Contextvirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; SPtr typedefsofa::core::objectmodel::Base; time_sofa::core::objectmodel::Context; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:1570,Usability,clear,clearLoggedMessages,1570,"*attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; Context()sofa::core::objectmodel::Contextprotected; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; dt_sofa::core::objectmodel::Context; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:5849,Availability,down,down,5849,"const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6035,Availability,down,down,6035," ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6228,Availability,down,down,6228," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6442,Availability,down,down,6442,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6666,Availability,down,down,6666,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6897,Availability,down,down,6897,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7123,Availability,down,down,7123," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7359,Availability,down,down,7359,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7602,Availability,down,down,7602," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8312,Availability,down,down,8312,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8571,Availability,down,down,8571,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Eve",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8842,Availability,down,down,8842,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Event *);  Propagate an event. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:14294,Deployability,update,updateLinks,14294,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:1349,Integrability,message,messages,1349,"ontext, storing all shared parameters in Datas. ; More... Inheritance diagram for sofa::core::objectmodel::Context:. [legend]; Detailed Description; Implementation of BaseContext, storing all shared parameters in Datas. . Public Attributes; Data< bool > is_activated;  To Activate a node. More...;  ; Data< Vec3 > worldGravity_;  Gravity in the world coordinate system. More...;  ; Data< SReal > dt_;  Time step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sleeping, and thus ignored by visitors. More...;  ; Data< bool > d_canChangeSleepingState;  The node can change its sleeping state. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; Parameters; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:4154,Integrability,interface,interface,4154,"ool val) override;  Sleeping state of the context. More...;  ; void setChangeSleepingState (bool val) override;  Sleeping state change of the context. More...;  ; virtual void setDisplayWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::BaseState * getState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual behavior::BaseMechanicalState * getMechanicalState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual core::topology::Topology * getTopology () const;  Topology. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; virtual core::visual::Shader * getShader () const;  Global Shader. More...;  ; virtual void * getObject (const ClassInfo &class_info, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:4341,Integrability,interface,interface,4341,"yWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::BaseState * getState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual behavior::BaseMechanicalState * getMechanicalState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual core::topology::Topology * getTopology () const;  Topology. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; virtual core::visual::Shader * getShader () const;  Global Shader. More...;  ; virtual void * getObject (const ClassInfo &class_info, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:5815,Integrability,wrap,wrapper,5815,"const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6001,Integrability,wrap,wrapper,6001," ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6194,Integrability,wrap,wrapper,6194," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6386,Integrability,wrap,wrapper,6386,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6610,Integrability,wrap,wrapper,6610,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6841,Integrability,wrap,wrapper,6841,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7059,Integrability,wrap,wrapper,7059," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7295,Integrability,wrap,wrapper,7295,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7538,Integrability,wrap,wrapper,7538," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7739,Integrability,wrap,wrapper,7739,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7903,Integrability,wrap,wrapper,7903,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8074,Integrability,wrap,wrapper,8074,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8278,Integrability,wrap,wrapper,8278,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8515,Integrability,wrap,wrapper,8515,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Eve",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8778,Integrability,wrap,wrapper,8778,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Event *);  Propagate an event. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:1100,Modifiability,inherit,inherited,1100,"|; Protected Member Functions |; List of all members . sofa::core::objectmodel::Context Class Reference . #include <Context.h>; Implementation of BaseContext, storing all shared parameters in Datas. ; More... Inheritance diagram for sofa::core::objectmodel::Context:. [legend]; Detailed Description; Implementation of BaseContext, storing all shared parameters in Datas. . Public Attributes; Data< bool > is_activated;  To Activate a node. More...;  ; Data< Vec3 > worldGravity_;  Gravity in the world coordinate system. More...;  ; Data< SReal > dt_;  Time step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sleeping, and thus ignored by visitors. More...;  ; Data< bool > d_canChangeSleepingState;  The node can change its sleeping state. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:2019,Modifiability,variab,variables,2019," More...;  ; Data< bool > d_canChangeSleepingState;  The node can change its sleeping state. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; Parameters; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; Parameters Setters; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:2131,Modifiability,variab,variables,2131,"core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; Parameters; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; Parameters Setters; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setSleeping (bool ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:3391,Modifiability,inherit,inherited,3391,"ride;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; Parameters Setters; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setSleeping (bool val) override;  Sleeping state of the context. More...;  ; void setChangeSleepingState (bool val) override;  Sleeping state change of the context. More...;  ; virtual void setDisplayWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::BaseState * getState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual behavior::BaseMechanicalState * getMechanicalState () const;  Mechanical Degrees-of-Freedom. More...;  ; virtual core::topology::Topology * getTopology () const;  Topology. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:9922,Modifiability,inherit,inherited,9922,"opology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Event *);  Propagate an event. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; virtual std::string getPathName () const;  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type na",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:16450,Modifiability,inherit,inherited,16450,"ields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data ins",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:16581,Modifiability,inherit,inherited,16581,"ields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data ins",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:17315,Modifiability,inherit,inherited,17315,"mber Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ animate_. Data<bool> sofa::core::objectmodel::Context::animate_. Animate the Simulation(applied at initialization only) . ◆ d_canChangeSleepingState. Data<bool> sofa::core::objectmodel::Context::d_canChangeSleepingState. The no",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:17427,Modifiability,inherit,inherited,17427,"mber Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ animate_. Data<bool> sofa::core::objectmodel::Context::animate_. Animate the Simulation(applied at initialization only) . ◆ d_canChangeSleepingState. Data<bool> sofa::core::objectmodel::Context::d_canChangeSleepingState. The no",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:17866,Modifiability,inherit,inherited,17866,"itData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ animate_. Data<bool> sofa::core::objectmodel::Context::animate_. Animate the Simulation(applied at initialization only) . ◆ d_canChangeSleepingState. Data<bool> sofa::core::objectmodel::Context::d_canChangeSleepingState. The node can change its sleeping state. . ◆ d_isSleeping. Data<bool> sofa::core::objectmodel::Context::d_isSleeping. The node is sleeping, and thus ignored by visitors. . ◆ dt_. Data<SReal> sofa::core::objectmodel::Context::dt_. Time step. . ◆ is_activated. Data<bool> sofa::core::objectmodel::Context::is_activated. To Activate a node. . ◆ time_. Data<SReal> sofa::core::objectmodel::Context::time_. Current time. . ◆ worldGravity_. Data<Vec3> sofa::core::objectmodel::Context::worldGravity_. Gravity in the world coordinate system. . Constructor details. ◆ Context(). sofa::cor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:17990,Modifiability,inherit,inherited,17990,"itData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ animate_. Data<bool> sofa::core::objectmodel::Context::animate_. Animate the Simulation(applied at initialization only) . ◆ d_canChangeSleepingState. Data<bool> sofa::core::objectmodel::Context::d_canChangeSleepingState. The node can change its sleeping state. . ◆ d_isSleeping. Data<bool> sofa::core::objectmodel::Context::d_isSleeping. The node is sleeping, and thus ignored by visitors. . ◆ dt_. Data<SReal> sofa::core::objectmodel::Context::dt_. Time step. . ◆ is_activated. Data<bool> sofa::core::objectmodel::Context::is_activated. To Activate a node. . ◆ time_. Data<SReal> sofa::core::objectmodel::Context::time_. Current time. . ◆ worldGravity_. Data<Vec3> sofa::core::objectmodel::Context::worldGravity_. Gravity in the world coordinate system. . Constructor details. ◆ Context(). sofa::cor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:19522,Modifiability,variab,variables,19522,"::d_isSleeping. The node is sleeping, and thus ignored by visitors. . ◆ dt_. Data<SReal> sofa::core::objectmodel::Context::dt_. Time step. . ◆ is_activated. Data<bool> sofa::core::objectmodel::Context::is_activated. To Activate a node. . ◆ time_. Data<SReal> sofa::core::objectmodel::Context::time_. Current time. . ◆ worldGravity_. Data<Vec3> sofa::core::objectmodel::Context::worldGravity_. Gravity in the world coordinate system. . Constructor details. ◆ Context(). sofa::core::objectmodel::Context::Context ; (; ). protected . ◆ ~Context(). virtual sofa::core::objectmodel::Context::~Context ; (; ). inlineoverrideprotectedvirtual . Function details. ◆ canChangeSleepingState(). bool sofa::core::objectmodel::Context::canChangeSleepingState ; (; ); const. overridevirtual . The Context can change its sleeping state. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ copyContext(). void sofa::core::objectmodel::Context::copyContext ; (; const Context & ; c). Copy the context variables from the given instance. . ◆ copySimulationContext(). void sofa::core::objectmodel::Context::copySimulationContext ; (; const Context & ; c). Copy the context variables of visualization from the given instance. . ◆ getAnimate(). bool sofa::core::objectmodel::Context::getAnimate ; (; ); const. overridevirtual . Animation flag. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getDt(). SReal sofa::core::objectmodel::Context::getDt ; (; ); const. overridevirtual . Simulation timestep. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getGravity(). const Context::Vec3 & sofa::core::objectmodel::Context::getGravity ; (; ); const. overridevirtual . Gravity in local coordinates. ; Gravity vector in world coordinates. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getTime(). SReal sofa::core::objectmodel::Context::getTime ; (; ); const. overridevirtual . Simulation time. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ isActive(). bool sofa::co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:19691,Modifiability,variab,variables,19691,e::objectmodel::Context::is_activated. To Activate a node. . ◆ time_. Data<SReal> sofa::core::objectmodel::Context::time_. Current time. . ◆ worldGravity_. Data<Vec3> sofa::core::objectmodel::Context::worldGravity_. Gravity in the world coordinate system. . Constructor details. ◆ Context(). sofa::core::objectmodel::Context::Context ; (; ). protected . ◆ ~Context(). virtual sofa::core::objectmodel::Context::~Context ; (; ). inlineoverrideprotectedvirtual . Function details. ◆ canChangeSleepingState(). bool sofa::core::objectmodel::Context::canChangeSleepingState ; (; ); const. overridevirtual . The Context can change its sleeping state. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ copyContext(). void sofa::core::objectmodel::Context::copyContext ; (; const Context & ; c). Copy the context variables from the given instance. . ◆ copySimulationContext(). void sofa::core::objectmodel::Context::copySimulationContext ; (; const Context & ; c). Copy the context variables of visualization from the given instance. . ◆ getAnimate(). bool sofa::core::objectmodel::Context::getAnimate ; (; ); const. overridevirtual . Animation flag. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getDt(). SReal sofa::core::objectmodel::Context::getDt ; (; ); const. overridevirtual . Simulation timestep. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getGravity(). const Context::Vec3 & sofa::core::objectmodel::Context::getGravity ; (; ); const. overridevirtual . Gravity in local coordinates. ; Gravity vector in world coordinates. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getTime(). SReal sofa::core::objectmodel::Context::getTime ; (; ); const. overridevirtual . Simulation time. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ isActive(). bool sofa::core::objectmodel::Context::isActive ; (; ); const. overridevirtual . The Context is active. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ isSleeping(). bool sofa::c,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:5799,Security,access,access,5799,"const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:5985,Security,access,access,5985," ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6178,Security,access,access,6178," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6370,Security,access,access,6370,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6594,Security,access,access,6594,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:6825,Security,access,access,6825,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7043,Security,access,access,7043," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7279,Security,access,access,7279,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7522,Security,access,access,7522," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7723,Security,access,access,7723,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:7887,Security,access,access,7887,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8058,Security,access,access,8058,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8262,Security,access,access,8262,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8499,Security,access,access,8499,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Eve",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8762,Security,access,access,8762,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Event *);  Propagate an event. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:11985,Testability,log,logging,11985," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:12058,Testability,log,logging,12058," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:12100,Testability,log,logging,12100," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:12170,Testability,log,logging,12170," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:12281,Testability,log,logging,12281," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:12323,Testability,log,logging,12323," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:14312,Testability,log,logErrors,14312,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:12366,Usability,clear,clearLoggedMessages,12366," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:9799,Deployability,update,updateInternal,9799,"ectvirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ContextObject, BaseObject)sofa::core::objectmodel::ContextObject; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ContextObject() overridesofa::core::objectmodel::ContextObjectinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:9852,Deployability,update,updateLinks,9852,"ectvirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ContextObject, BaseObject)sofa::core::objectmodel::ContextObject; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ContextObject() overridesofa::core::objectmodel::ContextObjectinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::ContextObject Member List . This is the complete list of members for sofa::core::objectmodel::ContextObject, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply()=0sofa::core::objectmodel::ContextObjectpure virtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:9257,Performance,load,loader,9257,"nit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::objectmodel::ContextObjectvirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ContextObject, BaseObject)sofa::core::objectmodel::ContextObject; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:716,Testability,log,logging,716," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply()=0sofa::core::objectmodel::ContextObjectpure virtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:2213,Testability,log,logging,2213," > outputs)sofa::core::objectmodel::Base; apply()=0sofa::core::objectmodel::ContextObjectpure virtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ContextObject()sofa::core::objectmodel::ContextObjectinlineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:2255,Testability,log,logging,2255,"apply()=0sofa::core::objectmodel::ContextObjectpure virtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ContextObject()sofa::core::objectmodel::ContextObjectinlineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:4439,Testability,log,logging,4439,inks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:4481,Testability,log,logging,4481,ore::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotecte,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:9869,Testability,log,logErrors,9869,"ectvirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ContextObject, BaseObject)sofa::core::objectmodel::ContextObject; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ContextObject() overridesofa::core::objectmodel::ContextObjectinlineprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:1952,Usability,clear,clearLoggedMessages,1952,"al; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply()=0sofa::core::objectmodel::ContextObjectpure virtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ContextObject()sofa::core::objectmodel::ContextObjectinlineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:2551,Availability,down,down,2551,"ndLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:2825,Deployability,update,updateInternal,2825,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:7320,Deployability,update,updateLinks,7320,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:9535,Deployability,update,update,9535,"nst char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ContextObject ();  ;  ~ContextObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:1353,Integrability,depend,dependent,1353,"ect Class Referenceabstract . #include <ContextObject.h>; Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). ; More... Inheritance diagram for sofa::core::objectmodel::ContextObject:. [legend]; Detailed Description; Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). . Public Member Functions;  SOFA_ABSTRACT_CLASS (ContextObject, BaseObject);  ; virtual void apply ()=0;  modify the Context More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:11238,Integrability,message,messages,11238,"tData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of field",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:934,Modifiability,inherit,inherited,934,"﻿. SOFA API: sofa::core::objectmodel::ContextObject Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ContextObject Class Referenceabstract . #include <ContextObject.h>; Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). ; More... Inheritance diagram for sofa::core::objectmodel::ContextObject:. [legend]; Detailed Description; Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). . Public Member Functions;  SOFA_ABSTRACT_CLASS (ContextObject, BaseObject);  ; virtual void apply ()=0;  modify the Context More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &nam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:2761,Modifiability,variab,variables,2761,"ore...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:2871,Modifiability,variab,variables,2871,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:2913,Modifiability,variab,variables,2913,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:3158,Modifiability,inherit,inherited,3158,"potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:9369,Modifiability,inherit,inherited,9369,"nst char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ContextObject ();  ;  ~ContextObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:10092,Modifiability,inherit,inherited,10092," const std::string &path, const BaseLink *link);  . Protected Member Functions;  ContextObject ();  ;  ~ContextObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_pr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:10823,Modifiability,inherit,inherited,10823,"a to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; Singl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:10989,Modifiability,inherit,inherited,10989,"ted Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:11811,Modifiability,inherit,inherited,11811,"nts, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:12065,Modifiability,inherit,inherited,12065,"nts, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:12504,Modifiability,inherit,inherited,12504,"g, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ContextObject(). sofa::core::objectmodel::ContextObject::ContextObject ; (; ). inlineprotected . ◆ ~ContextObject(). sofa::core::objectmodel::ContextObject::~ContextObject ; (; ). inlineoverrideprotected . Function details. ◆ apply(). virtual void sofa::core::objectmodel::ContextObject::apply ; (; ). pure virtual . modify the Context ; Implemented in sofa::component::mechanicalload::Gravity. ◆ insertInNode(). bool sofa::core::objectmodel::ContextObject::in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:12904,Modifiability,inherit,inherited,12904,"bject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ContextObject(). sofa::core::objectmodel::ContextObject::ContextObject ; (; ). inlineprotected . ◆ ~ContextObject(). sofa::core::objectmodel::ContextObject::~ContextObject ; (; ). inlineoverrideprotected . Function details. ◆ apply(). virtual void sofa::core::objectmodel::ContextObject::apply ; (; ). pure virtual . modify the Context ; Implemented in sofa::component::mechanicalload::Gravity. ◆ insertInNode(). bool sofa::core::objectmodel::ContextObject::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::objectmodel::ContextObject::removeInNode ; (; objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:1434,Performance,load,loader,1434,"e class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). . Public Member Functions;  SOFA_ABSTRACT_CLASS (ContextObject, BaseObject);  ; virtual void apply ()=0;  modify the Context More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:5176,Testability,log,logging,5176," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:5249,Testability,log,logging,5249," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:5291,Testability,log,logging,5291," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:5361,Testability,log,logging,5361," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:5472,Testability,log,logging,5472," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:5514,Testability,log,logging,5514," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:7338,Testability,log,logErrors,7338,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:13751,Testability,test,test,13751,"lic Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ContextObject(). sofa::core::objectmodel::ContextObject::ContextObject ; (; ). inlineprotected . ◆ ~ContextObject(). sofa::core::objectmodel::ContextObject::~ContextObject ; (; ). inlineoverrideprotected . Function details. ◆ apply(). virtual void sofa::core::objectmodel::ContextObject::apply ; (; ). pure virtual . modify the Context ; Implemented in sofa::component::mechanicalload::Gravity. ◆ insertInNode(). bool sofa::core::objectmodel::ContextObject::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::objectmodel::ContextObject::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::objectmodel::ContextObject::SOFA_ABSTRACT_CLASS ; (; ContextObject ; , . BaseObject ;  . ). sofacoreobjectmodelContextObject; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:14121,Testability,test,test,14121,"lic Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ ContextObject(). sofa::core::objectmodel::ContextObject::ContextObject ; (; ). inlineprotected . ◆ ~ContextObject(). sofa::core::objectmodel::ContextObject::~ContextObject ; (; ). inlineoverrideprotected . Function details. ◆ apply(). virtual void sofa::core::objectmodel::ContextObject::apply ; (; ). pure virtual . modify the Context ; Implemented in sofa::component::mechanicalload::Gravity. ◆ insertInNode(). bool sofa::core::objectmodel::ContextObject::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::objectmodel::ContextObject::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::objectmodel::ContextObject::SOFA_ABSTRACT_CLASS ; (; ContextObject ; , . BaseObject ;  . ). sofacoreobjectmodelContextObject; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:5557,Usability,clear,clearLoggedMessages,5557," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html:8259,Deployability,update,update,8259,"td::istream &in)sofa::core::objectmodel::Data< T >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const T &value)sofa::core::objectmodel::Data< T >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< T >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< T >; ValueType typedefsofa::core::objectmodel::Data< T >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< T >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html:8318,Deployability,update,updateIfDirty,8318,"td::istream &in)sofa::core::objectmodel::Data< T >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const T &value)sofa::core::objectmodel::Data< T >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< T >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< T >; ValueType typedefsofa::core::objectmodel::Data< T >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< T >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html:8373,Deployability,update,updateValueFromLink,8373,"td::istream &in)sofa::core::objectmodel::Data< T >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const T &value)sofa::core::objectmodel::Data< T >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< T >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< T >; ValueType typedefsofa::core::objectmodel::Data< T >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< T >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Data< T > Member List . This is the complete list of members for sofa::core::objectmodel::Data< T >, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; BaseData(const BaseInitData &init)sofa::core::objectmodel::BaseDataexplicit; BaseData(const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; beginEdit()sofa::core::objectmodel::Data< T >inlinevirtual; beginEditVoidPtr()sofa::core::objectmodel::BaseData; beginWriteOnly()sofa::core::objectmodel::Data< T >inlinevirtual; canBeLinked() constsofa::core::objectmodel::BaseDatainlinevirtual; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; copyValueFrom(const Data< T > *data)sofa::core::objectmodel::Data< T >; sofa::core::objectmodel::BaseData::copyValueFrom(const BaseData *data)sofa::core::objectmodel::BaseData; Data(const BaseData::BaseInitData &init)sofa::core::objectmodel::Data< T >inlineexplicit; Data(const InitData &init)sofa::core::objectmodel::Data< T >inlineexplicit; Data(const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< T >inline; Data(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< T >inline; Data(const T &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< T >inline; Data(const T &value, const std::string &helpMsg, boo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:6837,Deployability,update,update,6837,"nkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:7009,Deployability,update,updateValueFromLink,7009," ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:9370,Deployability,update,updated,9370,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:9454,Deployability,update,updated,9454,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::ist",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:9542,Deployability,update,updated,9542," the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:9784,Deployability,update,updateIfDirty,9784," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::cor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:9832,Deployability,update,update,9832," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::cor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:10686,Deployability,update,update,10686,"s method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Construction / destruction; static std::string templateName ();  ; BaseData * getNewInstance () override;  ;  Data (const BaseData::BaseInitData &init);  ;  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &valu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:18445,Deployability,update,updated,18445, default value. ; Implements sofa::core::objectmodel::BaseData. ◆ read() [1/5]. template<class T > . bool sofa::core::objectmodel::Data< T >::read ; (; const std::string & ; s). overridevirtual . Try to read argument value from an input stream. Return false if failed ; Implements sofa::core::objectmodel::BaseData. ◆ read() [2/5]. bool SOFA_CORE_API sofa::core::objectmodel::Data< std::string >::read ; (; const std::string & ; str). virtual . Specialization for reading strings. ; Implements sofa::core::objectmodel::BaseData. ◆ read() [3/5]. bool SOFA_CORE_API sofa::core::objectmodel::Data< bool >::read ; (; const std::string & ; str). virtual . Specialization for reading booleans. ; Implements sofa::core::objectmodel::BaseData. ◆ read() [4/5]. bool sofa::core::objectmodel::Data< std::string >::read ; (; const std::string & ; str). virtual . Specialization for reading strings. ; Implements sofa::core::objectmodel::BaseData. ◆ read() [5/5]. bool sofa::core::objectmodel::Data< bool >::read ; (; const std::string & ; str). virtual . Specialization for reading booleans. ; Implements sofa::core::objectmodel::BaseData. ◆ readValue() [1/3]. template<class T > . std::istream & sofa::core::objectmodel::Data< T >::readValue ; (; std::istream & ; in). protected . ◆ readValue() [2/3]. std::istream & sofa::core::objectmodel::Data< sofa::core::visual::DisplayFlags >::readValue ; (; std::istream & ; in). protected . ◆ readValue() [3/3]. SOFA_CORE_API std::istream & sofa::core::objectmodel::Data< sofa::core::visual::DisplayFlags >::readValue ; (; std::istream & ; in). protected . ◆ setValue(). template<class T = void*> . void sofa::core::objectmodel::Data< T >::setValue ; (; const T & ; value). inline . WarningwriteOnly (the Data is not updated before being set) . ◆ templateName(). template<class T = void*> . static std::string sofa::core::objectmodel::Data< T >::templateName ; (; ). inlinestatic . sofacoreobjectmodelData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:2232,Integrability,message,message,2232,"has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  . Protected Attributes; T m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5444,Integrability,message,message,5444," virtual void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5543,Integrability,message,message,5543," const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:13070,Integrability,message,message,13070,"t from the default value. . ◆ m_value. template<class T = void*> . ValueType sofa::core::objectmodel::Data< T >::m_value. protected . Value. . Constructor details. ◆ Data() [1/7]. template<class T = void*> . sofa::core::objectmodel::Data< T >::Data ; (; const BaseData< T >::BaseInitData< T > & ; init). inlineexplicit . Constructor used via the Base::initData() methods. . ◆ Data() [2/7]. template<class T = void*> . sofa::core::objectmodel::Data< T >::Data ; (; const InitData< T > & ; init). inlineexplicit . Constructor used via the Base::initData() methods. . ◆ Data() [3/7]. template<class T = void*> . sofa::core::objectmodel::Data< T >::Data ; (; const char * ; helpMsg = nullptr, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). inline . ◆ Data() [4/7]. template<class T = void*> . sofa::core::objectmodel::Data< T >::Data ; (; const std::string & ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). inline . Constructor. Parameters. helpMsgA help message that describes this Data. ; isDisplayedWhether this Data should be displayed in GUIs. ; isReadOnlyWhether this Data should be modifiable in GUIs. . ◆ Data() [5/7]. template<class T = void*> . sofa::core::objectmodel::Data< T >::Data ; (; const T & ; value, . const char * ; helpMsg = nullptr, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). inline . Parameters. valueThe default value. . ◆ Data() [6/7]. template<class T = void*> . sofa::core::objectmodel::Data< T >::Data ; (; const T & ; value, . const std::string & ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). inline . Parameters. valueThe default value. . ◆ ~Data(). template<class T = void*> . sofa::core::objectmodel::Data< T >::~Data ; (; ). inlineoverride . Destructor. . ◆ Data() [7/7]. template<class T = void*> . sofa::core::objectmodel::Data< T >::Data ; (; const Data< T > & ; ). delete . Function details. ◆ beginEdit(). template<class T = void*> . virtual T* sofa::core::objectmodel::Data< T >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:421,Modifiability,variab,variable,421,"﻿. SOFA API: sofa::core::objectmodel::Data< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::Data< T > Class Template Reference . #include <Data.h>; Container that holds a variable for a component. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >; Container that holds a variable for a component. ; This is a fundamental class template in Sofa. Data are used to encapsulated member variables of Sofa components (i.e. classes that somehow inherit from Base) in order to access them dynamically and generically: briefly, Data can be retrieved at run-time by their name, and they can be assigned a value from a string, or be printed as a string.; More concretely, from the perspective of XML scene files, each Data declared in a component corresponds to an attribute of this component.; Example ; If a component Foo has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:642,Modifiability,variab,variable,642,"﻿. SOFA API: sofa::core::objectmodel::Data< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::Data< T > Class Template Reference . #include <Data.h>; Container that holds a variable for a component. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >; Container that holds a variable for a component. ; This is a fundamental class template in Sofa. Data are used to encapsulated member variables of Sofa components (i.e. classes that somehow inherit from Base) in order to access them dynamically and generically: briefly, Data can be retrieved at run-time by their name, and they can be assigned a value from a string, or be printed as a string.; More concretely, from the perspective of XML scene files, each Data declared in a component corresponds to an attribute of this component.; Example ; If a component Foo has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:753,Modifiability,variab,variables,753,"﻿. SOFA API: sofa::core::objectmodel::Data< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::Data< T > Class Template Reference . #include <Data.h>; Container that holds a variable for a component. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >; Container that holds a variable for a component. ; This is a fundamental class template in Sofa. Data are used to encapsulated member variables of Sofa components (i.e. classes that somehow inherit from Base) in order to access them dynamically and generically: briefly, Data can be retrieved at run-time by their name, and they can be assigned a value from a string, or be printed as a string.; More concretely, from the perspective of XML scene files, each Data declared in a component corresponds to an attribute of this component.; Example ; If a component Foo has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:809,Modifiability,inherit,inherit,809,"﻿. SOFA API: sofa::core::objectmodel::Data< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::Data< T > Class Template Reference . #include <Data.h>; Container that holds a variable for a component. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >; Container that holds a variable for a component. ; This is a fundamental class template in Sofa. Data are used to encapsulated member variables of Sofa components (i.e. classes that somehow inherit from Base) in order to access them dynamically and generically: briefly, Data can be retrieved at run-time by their name, and they can be assigned a value from a string, or be printed as a string.; More concretely, from the perspective of XML scene files, each Data declared in a component corresponds to an attribute of this component.; Example ; If a component Foo has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:2153,Modifiability,inherit,inherited,2153,"has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  . Protected Attributes; T m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:3056,Modifiability,inherit,inherited,3056,"nt from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  . Protected Attributes; T m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; void printValue (std::ostream &out) const override;  General case for printing default value. More...;  ; std::string getValueString () const override;  General case for printing value. More...;  ; std::string getDefaultValueString () const override;  General case for printing default value. More...;  ; std::string getValueTypeString () const override;  Get the name of the type of the value held in this Data. More...;  ; void operator= (const T &value);  ; bool copyValueFrom (const Data< T > *data);  ;  Data (const Data &)=delete;  ; Data & operator= (const Data &)=delete;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:3316,Modifiability,variab,variable,3316,"re...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  . Protected Attributes; T m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; void printValue (std::ostream &out) const override;  General case for printing default value. More...;  ; std::string getValueString () const override;  General case for printing value. More...;  ; std::string getDefaultValueString () const override;  General case for printing default value. More...;  ; std::string getValueTypeString () const override;  Get the name of the type of the value held in this Data. More...;  ; void operator= (const T &value);  ; bool copyValueFrom (const Data< T > *data);  ;  Data (const Data &)=delete;  ; Data & operator= (const Data &)=delete;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:4554,Modifiability,inherit,inherited,4554," default value. More...;  ; std::string getValueTypeString () const override;  Get the name of the type of the value held in this Data. More...;  ; void operator= (const T &value);  ; bool copyValueFrom (const Data< T > *data);  ;  Data (const Data &)=delete;  ; Data & operator= (const Data &)=delete;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; Simple edition and retrieval API; virtual T * beginEdit ();  ; virtual T * beginWriteOnly ();  ; virtual void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:8654,Modifiability,inherit,inherited,8654,"inked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAutoLink (bool b);  Set whether this data should be autolinked when using the src="""" syntax. More...;  ; void setRequired (bool b);  Set whether the Data has to be set by the user for the owner component to be valid. More...;  ; bool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty fla",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:10051,Modifiability,inherit,inherited,10051,"from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Construction / de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:10576,Modifiability,inherit,inherited,10576,"s method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Construction / destruction; static std::string templateName ();  ; BaseData * getNewInstance () override;  ;  Data (const BaseData::BaseInitData &init);  ;  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &valu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:10789,Modifiability,inherit,inherited,10789," value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Construction / destruction; static std::string templateName ();  ; BaseData * getNewInstance () override;  ;  Data (const BaseData::BaseInitData &init);  ;  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  . Attribute details. ◆ m_counter. template<class T = void*> . int sofa::core::objectmodel::BaseData::m_counter. Number of changes since creation. . ◆ m_defaultValue. template<class T = void*> . T sofa::core::objectmodel::Data< T >::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:15799,Modifiability,variab,variable,15799,nd sofa::core::objectmodel::DataFileName. ◆ getDefaultValueString(). template<class T > . std::string sofa::core::objectmodel::Data< T >::getDefaultValueString. overridevirtual . General case for printing default value. ; Implements sofa::core::objectmodel::BaseData. ◆ getNewInstance(). template<class T = void*> . BaseData* sofa::core::objectmodel::Data< T >::getNewInstance ; (; ). inlineoverridevirtual . Reimplemented from sofa::core::objectmodel::BaseData. ◆ getValue(). template<class T = void*> . const T& sofa::core::objectmodel::Data< T >::getValue ; (; ); const. inline . ◆ getValueString(). template<class T > . std::string sofa::core::objectmodel::Data< T >::getValueString. overridevirtual . General case for printing value. ; Implements sofa::core::objectmodel::BaseData. ◆ getValueTypeInfo(). template<class T = void*> . const sofa::defaulttype::AbstractTypeInfo* sofa::core::objectmodel::Data< T >::getValueTypeInfo ; (; ); const. inlineoverridevirtual . Get info about the value type of the associated variable. ; Implements sofa::core::objectmodel::BaseData. ◆ getValueTypeString(). template<class T > . std::string sofa::core::objectmodel::Data< T >::getValueTypeString ; (; ); const. overridevirtual . Get the name of the type of the value held in this Data. ; Implements sofa::core::objectmodel::BaseData. ◆ isCopyOnWrite(). template<class T = void*> . static constexpr bool sofa::core::objectmodel::Data< T >::isCopyOnWrite ; (; ). inlinestaticconstexpr . ◆ operator=() [1/2]. template<class T = void*> . Data& sofa::core::objectmodel::Data< T >::operator= ; (; const Data< T > & ; ). delete . ◆ operator=() [2/2]. template<class T = void*> . void sofa::core::objectmodel::Data< T >::operator= ; (; const T & ; value). inline . ◆ printValue(). template<class T > . void sofa::core::objectmodel::Data< T >::printValue ; (; std::ostream & ; out); const. overridevirtual . General case for printing default value. ; Implements sofa::core::objectmodel::BaseData. ◆ read() [1/5]. te,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:840,Security,access,access,840,"﻿. SOFA API: sofa::core::objectmodel::Data< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::Data< T > Class Template Reference . #include <Data.h>; Container that holds a variable for a component. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >; Container that holds a variable for a component. ; This is a fundamental class template in Sofa. Data are used to encapsulated member variables of Sofa components (i.e. classes that somehow inherit from Base) in order to access them dynamically and generically: briefly, Data can be retrieved at run-time by their name, and they can be assigned a value from a string, or be printed as a string.; More concretely, from the perspective of XML scene files, each Data declared in a component corresponds to an attribute of this component.; Example ; If a component Foo has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5117,Security,access,access,5117,"bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; Simple edition and retrieval API; virtual T * beginEdit ();  ; virtual T * beginWriteOnly ();  ; virtual void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5249,Security,access,access,5249,";  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; Simple edition and retrieval API; virtual T * beginEdit ();  ; virtual T * beginWriteOnly ();  ; virtual void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:1225,Usability,simpl,simply,1225," Member Functions |; List of all members . sofa::core::objectmodel::Data< T > Class Template Reference . #include <Data.h>; Container that holds a variable for a component. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >; Container that holds a variable for a component. ; This is a fundamental class template in Sofa. Data are used to encapsulated member variables of Sofa components (i.e. classes that somehow inherit from Base) in order to access them dynamically and generically: briefly, Data can be retrieved at run-time by their name, and they can be assigned a value from a string, or be printed as a string.; More concretely, from the perspective of XML scene files, each Data declared in a component corresponds to an attribute of this component.; Example ; If a component Foo has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Data< T >::InitData Member List . This is the complete list of members for sofa::core::objectmodel::Data< T >::InitData, including all inherited members. BaseInitData()sofa::core::objectmodel::BaseData::BaseInitDatainline; datasofa::core::objectmodel::BaseData::BaseInitData; dataFlagssofa::core::objectmodel::BaseData::BaseInitData; groupsofa::core::objectmodel::BaseData::BaseInitData; helpMsgsofa::core::objectmodel::BaseData::BaseInitData; InitData()sofa::core::objectmodel::Data< T >::InitDatainline; InitData(const T &v)sofa::core::objectmodel::Data< T >::InitDatainline; InitData(const BaseData::BaseInitData &i)sofa::core::objectmodel::Data< T >::InitDatainline; namesofa::core::objectmodel::BaseData::BaseInitData; ownersofa::core::objectmodel::BaseData::BaseInitData; valuesofa::core::objectmodel::Data< T >::InitData; widgetsofa::core::objectmodel::BaseData::BaseInitData. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data.html:745,Modifiability,inherit,inherited,745,﻿. SOFA API: sofa::core::objectmodel::Data< T >::InitData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::Data< T >::InitData Class Reference . #include <Data.h>; This internal class is used by the initData() methods to store initialization parameters of a Data. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >::InitData:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >::InitData; This internal class is used by the initData() methods to store initialization parameters of a Data. . Public Attributes; T value;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData::BaseInitData; BaseData * data;  ; std::string helpMsg;  ; DataFlags dataFlags;  ; Base * owner;  ; std::string name;  ; std::string group;  ; std::string widget;  . Public Member Functions;  InitData ();  ;  InitData (const T &v);  ;  InitData (const BaseData::BaseInitData &i);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData::BaseInitData;  BaseInitData ();  . Attribute details. ◆ value. template<class T = void*> . T sofa::core::objectmodel::Data< T >::InitData::value. Constructor details. ◆ InitData() [1/3]. template<class T = void*> . sofa::core::objectmodel::Data< T >::InitData::InitData ; (; ). inline . ◆ InitData() [2/3]. template<class T = void*> . sofa::core::objectmodel::Data< T >::InitData::InitData ; (; const T & ; v). inline . ◆ InitData() [3/3]. template<class T = void*> . sofa::core::objectmodel::Data< T >::InitData::InitData ; (; const BaseData::BaseInitData & ; i). inline . sofacoreobjectmodelDataInitData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data.html:1102,Modifiability,inherit,inherited,1102,﻿. SOFA API: sofa::core::objectmodel::Data< T >::InitData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::Data< T >::InitData Class Reference . #include <Data.h>; This internal class is used by the initData() methods to store initialization parameters of a Data. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >::InitData:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >::InitData; This internal class is used by the initData() methods to store initialization parameters of a Data. . Public Attributes; T value;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData::BaseInitData; BaseData * data;  ; std::string helpMsg;  ; DataFlags dataFlags;  ; Base * owner;  ; std::string name;  ; std::string group;  ; std::string widget;  . Public Member Functions;  InitData ();  ;  InitData (const T &v);  ;  InitData (const BaseData::BaseInitData &i);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData::BaseInitData;  BaseInitData ();  . Attribute details. ◆ value. template<class T = void*> . T sofa::core::objectmodel::Data< T >::InitData::value. Constructor details. ◆ InitData() [1/3]. template<class T = void*> . sofa::core::objectmodel::Data< T >::InitData::InitData ; (; ). inline . ◆ InitData() [2/3]. template<class T = void*> . sofa::core::objectmodel::Data< T >::InitData::InitData ; (; const T & ; v). inline . ◆ InitData() [3/3]. template<class T = void*> . sofa::core::objectmodel::Data< T >::InitData::InitData ; (; const BaseData::BaseInitData & ; i). inline . sofacoreobjectmodelDataInitData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_1_1_init_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html:899,Deployability,release,release,899,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataContentValue< T, false > Member List . This is the complete list of members for sofa::core::objectmodel::DataContentValue< T, false >, including all inherited members. beginEdit()sofa::core::objectmodel::DataContentValue< T, false >inline; DataContentValue()sofa::core::objectmodel::DataContentValue< T, false >inline; DataContentValue(const T &value)sofa::core::objectmodel::DataContentValue< T, false >inlineexplicit; DataContentValue(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, false >inline; endEdit()sofa::core::objectmodel::DataContentValue< T, false >inline; getValue() constsofa::core::objectmodel::DataContentValue< T, false >inline; operator=(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, false >inline; release()sofa::core::objectmodel::DataContentValue< T, false >inline; setValue(const T &value)sofa::core::objectmodel::DataContentValue< T, false >inline. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html:278,Modifiability,inherit,inherited,278,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataContentValue< T, false > Member List . This is the complete list of members for sofa::core::objectmodel::DataContentValue< T, false >, including all inherited members. beginEdit()sofa::core::objectmodel::DataContentValue< T, false >inline; DataContentValue()sofa::core::objectmodel::DataContentValue< T, false >inline; DataContentValue(const T &value)sofa::core::objectmodel::DataContentValue< T, false >inlineexplicit; DataContentValue(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, false >inline; endEdit()sofa::core::objectmodel::DataContentValue< T, false >inline; getValue() constsofa::core::objectmodel::DataContentValue< T, false >inline; operator=(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, false >inline; release()sofa::core::objectmodel::DataContentValue< T, false >inline; setValue(const T &value)sofa::core::objectmodel::DataContentValue< T, false >inline. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html:643,Deployability,release,release,643,"﻿. SOFA API: sofa::core::objectmodel::DataContentValue< T, false > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataContentValue< T, false > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const DataContentValue< T, false > & ; dc). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, false >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, false >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, false >::operator= ; (; const DataContentValue< T, false > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::release ; (; ). inline . ◆ setValue(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::setValue ; (; const T & ; value). inline . sofacoreobjectmode",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html:1728,Deployability,release,release,1728," SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataContentValue< T, false > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const DataContentValue< T, false > & ; dc). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, false >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, false >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, false >::operator= ; (; const DataContentValue< T, false > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::release ; (; ). inline . ◆ setValue(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::setValue ; (; const T & ; value). inline . sofacoreobjectmodelDataContentValue< T, false >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html:1820,Deployability,release,release,1820," SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataContentValue< T, false > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const DataContentValue< T, false > & ; dc). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, false >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, false >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, false >::operator= ; (; const DataContentValue< T, false > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::release ; (; ). inline . ◆ setValue(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::setValue ; (; const T & ; value). inline . sofacoreobjectmodelDataContentValue< T, false >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html:890,Deployability,release,release,890,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataContentValue< T, true > Member List . This is the complete list of members for sofa::core::objectmodel::DataContentValue< T, true >, including all inherited members. beginEdit()sofa::core::objectmodel::DataContentValue< T, true >inline; DataContentValue()sofa::core::objectmodel::DataContentValue< T, true >inline; DataContentValue(const T &value)sofa::core::objectmodel::DataContentValue< T, true >inlineexplicit; DataContentValue(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, true >inline; endEdit()sofa::core::objectmodel::DataContentValue< T, true >inline; getValue() constsofa::core::objectmodel::DataContentValue< T, true >inline; operator=(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, true >inline; release()sofa::core::objectmodel::DataContentValue< T, true >inline; setValue(const T &value)sofa::core::objectmodel::DataContentValue< T, true >inline; ~DataContentValue()sofa::core::objectmodel::DataContentValue< T, true >inline. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html:276,Modifiability,inherit,inherited,276,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataContentValue< T, true > Member List . This is the complete list of members for sofa::core::objectmodel::DataContentValue< T, true >, including all inherited members. beginEdit()sofa::core::objectmodel::DataContentValue< T, true >inline; DataContentValue()sofa::core::objectmodel::DataContentValue< T, true >inline; DataContentValue(const T &value)sofa::core::objectmodel::DataContentValue< T, true >inlineexplicit; DataContentValue(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, true >inline; endEdit()sofa::core::objectmodel::DataContentValue< T, true >inline; getValue() constsofa::core::objectmodel::DataContentValue< T, true >inline; operator=(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, true >inline; release()sofa::core::objectmodel::DataContentValue< T, true >inline; setValue(const T &value)sofa::core::objectmodel::DataContentValue< T, true >inline; ~DataContentValue()sofa::core::objectmodel::DataContentValue< T, true >inline. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html:667,Deployability,release,release,667,"﻿. SOFA API: sofa::core::objectmodel::DataContentValue< T, true > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataContentValue< T, true > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ;  ~DataContentValue ();  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const DataContentValue< T, true > & ; dc). inline . ◆ ~DataContentValue(). template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::~DataContentValue ; (; ). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, true >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, true >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, true >::operator= ; (; const DataContentValue< T, true > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::release ; (; ). inline . ◆ setValu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html:1876,Deployability,release,release,1876,":DataContentValue< T, true > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ;  ~DataContentValue ();  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const DataContentValue< T, true > & ; dc). inline . ◆ ~DataContentValue(). template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::~DataContentValue ; (; ). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, true >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, true >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, true >::operator= ; (; const DataContentValue< T, true > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::release ; (; ). inline . ◆ setValue(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::setValue ; (; const T & ; value). inline . sofacoreobjectmodelDataContentValue< T, true >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html:1967,Deployability,release,release,1967,":DataContentValue< T, true > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ;  ~DataContentValue ();  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const DataContentValue< T, true > & ; dc). inline . ◆ ~DataContentValue(). template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::~DataContentValue ; (; ). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, true >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, true >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, true >::operator= ; (; const DataContentValue< T, true > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::release ; (; ). inline . ◆ setValue(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::setValue ; (; const T & ; value). inline . sofacoreobjectmodelDataContentValue< T, true >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html:9746,Deployability,update,update,9746,":core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileName; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const std::string &value)sofa::core::objectmodel::Data< std::string >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< std::string >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< std::string >; ValueType typedefsofa::core::objectmodel::Data< std::string >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< std::string >inline; ~DataFileName() override=defaultsofa::core::objectmodel::DataFileName; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html:9805,Deployability,update,updateIfDirty,9805,":core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileName; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const std::string &value)sofa::core::objectmodel::Data< std::string >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< std::string >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< std::string >; ValueType typedefsofa::core::objectmodel::Data< std::string >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< std::string >inline; ~DataFileName() override=defaultsofa::core::objectmodel::DataFileName; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html:9860,Deployability,update,updatePath,9860,":core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileName; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const std::string &value)sofa::core::objectmodel::Data< std::string >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< std::string >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< std::string >; ValueType typedefsofa::core::objectmodel::Data< std::string >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< std::string >inline; ~DataFileName() override=defaultsofa::core::objectmodel::DataFileName; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html:9920,Deployability,update,updateValueFromLink,9920,":core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileName; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const std::string &value)sofa::core::objectmodel::Data< std::string >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< std::string >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< std::string >; ValueType typedefsofa::core::objectmodel::Data< std::string >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< std::string >inline; ~DataFileName() override=defaultsofa::core::objectmodel::DataFileName; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataFileName Member List . This is the complete list of members for sofa::core::objectmodel::DataFileName, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; BaseData(const BaseInitData &init)sofa::core::objectmodel::BaseDataexplicit; BaseData(const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; beginEdit()sofa::core::objectmodel::Data< std::string >inlinevirtual; beginEditVoidPtr()sofa::core::objectmodel::BaseData; beginWriteOnly()sofa::core::objectmodel::Data< std::string >inlinevirtual; canBeLinked() constsofa::core::objectmodel::BaseDatainlinevirtual; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; copyValueFrom(const Data< std::string > *data)sofa::core::objectmodel::Data< std::string >; sofa::core::objectmodel::BaseData::copyValueFrom(const BaseData *data)sofa::core::objectmodel::BaseData; Data(const BaseData::BaseInitData &init)sofa::core::objectmodel::Data< std::string >inlineexplicit; Data(const InitData &init)sofa::core::objectmodel::Data< std::string >inlineexplicit; Data(const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< std::string >inline; Data(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< std::string >inline; Data(const std::string &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=fals",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:6325,Deployability,update,update,6325,"nkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:6497,Deployability,update,updateValueFromLink,6497," ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:8858,Deployability,update,updated,8858,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:8942,Deployability,update,updated,8942,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its paren",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9030,Deployability,update,updated,9030," the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9272,Deployability,update,updateIfDirty,9272," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attribut",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9320,Deployability,update,update,9320," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attribut",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9465,Deployability,update,updatePath,9465,"GNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9868,Deployability,update,update,9868,"GNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:14686,Deployability,update,updatePath,14686,ctor should be used through the initData() methods . ◆ DataFileName() [4/5]. sofa::core::objectmodel::DataFileName::DataFileName ; (; const Inherit::InitData & ; init). explicit . Constructor this constructor should be used through the initData() methods . ◆ ~DataFileName(). sofa::core::objectmodel::DataFileName::~DataFileName ; (; ). overridedefault . ◆ DataFileName() [5/5]. sofa::core::objectmodel::DataFileName::DataFileName ; (; const Inherit & ; d). delete . Function details. ◆ doOnUpdate(). void sofa::core::objectmodel::DataFileName::doOnUpdate ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::BaseData. ◆ endEdit(). void sofa::core::objectmodel::DataFileName::endEdit ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::Data< std::string >. ◆ getAbsolutePath(). const std::string & sofa::core::objectmodel::DataFileName::getAbsolutePath ; (; ); const. virtual . ◆ getExtension(). const std::string & sofa::core::objectmodel::DataFileName::getExtension ; (; ); const. virtual . ◆ getFullPath(). const std::string & sofa::core::objectmodel::DataFileName::getFullPath ; (; ); const. virtual . ◆ getPathType(). PathType sofa::core::objectmodel::DataFileName::getPathType ; (; ); const. ◆ getRelativePath(). const std::string & sofa::core::objectmodel::DataFileName::getRelativePath ; (; ); const. virtual . ◆ operator=(). DataFileName& sofa::core::objectmodel::DataFileName::operator= ; (; const DataFileName & ; ). delete . ◆ read(). bool sofa::core::objectmodel::DataFileName::read ; (; const std::string & ; value). overridevirtual . Assign a value to this Data from a string representation. Returnstrue on success. ; Implements sofa::core::objectmodel::BaseData. ◆ setPathType(). void sofa::core::objectmodel::DataFileName::setPathType ; (; PathType ; pathType). ◆ updatePath(). void sofa::core::objectmodel::DataFileName::updatePath ; (; ). protected . sofacoreobjectmodelDataFileName; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:14744,Deployability,update,updatePath,14744,ctor should be used through the initData() methods . ◆ DataFileName() [4/5]. sofa::core::objectmodel::DataFileName::DataFileName ; (; const Inherit::InitData & ; init). explicit . Constructor this constructor should be used through the initData() methods . ◆ ~DataFileName(). sofa::core::objectmodel::DataFileName::~DataFileName ; (; ). overridedefault . ◆ DataFileName() [5/5]. sofa::core::objectmodel::DataFileName::DataFileName ; (; const Inherit & ; d). delete . Function details. ◆ doOnUpdate(). void sofa::core::objectmodel::DataFileName::doOnUpdate ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::BaseData. ◆ endEdit(). void sofa::core::objectmodel::DataFileName::endEdit ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::Data< std::string >. ◆ getAbsolutePath(). const std::string & sofa::core::objectmodel::DataFileName::getAbsolutePath ; (; ); const. virtual . ◆ getExtension(). const std::string & sofa::core::objectmodel::DataFileName::getExtension ; (; ); const. virtual . ◆ getFullPath(). const std::string & sofa::core::objectmodel::DataFileName::getFullPath ; (; ); const. virtual . ◆ getPathType(). PathType sofa::core::objectmodel::DataFileName::getPathType ; (; ); const. ◆ getRelativePath(). const std::string & sofa::core::objectmodel::DataFileName::getRelativePath ; (; ); const. virtual . ◆ operator=(). DataFileName& sofa::core::objectmodel::DataFileName::operator= ; (; const DataFileName & ; ). delete . ◆ read(). bool sofa::core::objectmodel::DataFileName::read ; (; const std::string & ; value). overridevirtual . Assign a value to this Data from a string representation. Returnstrue on success. ; Implements sofa::core::objectmodel::BaseData. ◆ setPathType(). void sofa::core::objectmodel::DataFileName::setPathType ; (; PathType ; pathType). ◆ updatePath(). void sofa::core::objectmodel::DataFileName::updatePath ; (; ). protected . sofacoreobjectmodelDataFileName; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:4932,Integrability,message,message,4932," bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:5031,Integrability,message,message,5031,"ore...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:10630,Integrability,message,message,10630,"am & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< std::string >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:878,Modifiability,inherit,inherited,878,"﻿. SOFA API: sofa::core::objectmodel::DataFileName Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DataFileName Class Reference . #include <DataFileName.h>; Data specialized to store filenames, potentially relative to the current directory at the time it was specified. ; More... Inheritance diagram for sofa::core::objectmodel::DataFileName:. [legend]; Detailed Description; Data specialized to store filenames, potentially relative to the current directory at the time it was specified. . Protected Attributes; std::string m_fullpath;  ; std::string m_relativepath;  ; std::string m_extension;  ; PathType m_pathType;  used to determine how file dialogs should be opened More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< std::string >; std::string m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileName (const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const std::string &value, const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const BaseData::BaseInitData &init);  ;  DataFileName (const Inherit::InitData &init);  ;  ~DataFileName () override=default;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ; bool read (const std::string &s) override;  ; void endEdit () override;  ; virtual const std::string & getRelativePath () const;  ; virtual const std::string & getFullPath () const;  ; virtual const std::string & getAbsolutePath () const;  ; virtual const std::string & getExtension () const;  ; void doOnUpdate () override;  ;  DataFileName (const Inherit &d)=delete;  ; DataFileName & operator= (cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:1031,Modifiability,inherit,inherited,1031,"SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DataFileName Class Reference . #include <DataFileName.h>; Data specialized to store filenames, potentially relative to the current directory at the time it was specified. ; More... Inheritance diagram for sofa::core::objectmodel::DataFileName:. [legend]; Detailed Description; Data specialized to store filenames, potentially relative to the current directory at the time it was specified. . Protected Attributes; std::string m_fullpath;  ; std::string m_relativepath;  ; std::string m_extension;  ; PathType m_pathType;  used to determine how file dialogs should be opened More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< std::string >; std::string m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileName (const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const std::string &value, const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const BaseData::BaseInitData &init);  ;  DataFileName (const Inherit::InitData &init);  ;  ~DataFileName () override=default;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ; bool read (const std::string &s) override;  ; void endEdit () override;  ; virtual const std::string & getRelativePath () const;  ; virtual const std::string & getFullPath () const;  ; virtual const std::string & getAbsolutePath () const;  ; virtual const std::string & getExtension () const;  ; void doOnUpdate () override;  ;  DataFileName (const Inherit &d)=delete;  ; DataFileName & operator= (const DataFileName &)=delete;  ;  Public Member Functions inherited from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:2055,Modifiability,inherit,inherited,2055,"std::string m_relativepath;  ; std::string m_extension;  ; PathType m_pathType;  used to determine how file dialogs should be opened More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< std::string >; std::string m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileName (const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const std::string &value, const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const BaseData::BaseInitData &init);  ;  DataFileName (const Inherit::InitData &init);  ;  ~DataFileName () override=default;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ; bool read (const std::string &s) override;  ; void endEdit () override;  ; virtual const std::string & getRelativePath () const;  ; virtual const std::string & getFullPath () const;  ; virtual const std::string & getAbsolutePath () const;  ; virtual const std::string & getExtension () const;  ; void doOnUpdate () override;  ;  DataFileName (const Inherit &d)=delete;  ; DataFileName & operator= (const DataFileName &)=delete;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< std::string >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:2277,Modifiability,variab,variable,2277,"std::string m_relativepath;  ; std::string m_extension;  ; PathType m_pathType;  used to determine how file dialogs should be opened More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< std::string >; std::string m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileName (const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const std::string &value, const std::string &helpMsg="""", bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileName (const BaseData::BaseInitData &init);  ;  DataFileName (const Inherit::InitData &init);  ;  ~DataFileName () override=default;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ; bool read (const std::string &s) override;  ; void endEdit () override;  ; virtual const std::string & getRelativePath () const;  ; virtual const std::string & getFullPath () const;  ; virtual const std::string & getAbsolutePath () const;  ; virtual const std::string & getExtension () const;  ; void doOnUpdate () override;  ;  DataFileName (const Inherit &d)=delete;  ; DataFileName & operator= (const DataFileName &)=delete;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< std::string >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:4042,Modifiability,inherit,inherited,4042,"om (const Data< std::string > *data);  ; virtual std::string * beginEdit ();  ; virtual std::string * beginWriteOnly ();  ; void setValue (const std::string &value);  ; const std::string & getValue () const;  ; BaseData * getNewInstance () override;  ;  Data (const BaseData::BaseInitData &init);  ;  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; vo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:8142,Modifiability,inherit,inherited,8142,"inked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAutoLink (bool b);  Set whether this data should be autolinked when using the src="""" syntax. More...;  ; void setRequired (bool b);  Set whether the Data has to be set by the user for the owner component to be valid. More...;  ; bool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty fla",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9511,Modifiability,inherit,inherited,9511,"GNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9758,Modifiability,inherit,inherited,9758,"GNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:9971,Modifiability,inherit,inherited,9971," this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:10304,Modifiability,inherit,inherited,10304,"ssary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:10551,Modifiability,inherit,inherited,10551,"am & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< std::string >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< std::string >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:11382,Modifiability,inherit,inherited,11382,"ibutes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< std::string >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Attribute details. ◆ m_extension. std::string sofa::core::objectmodel::DataFileName::m_extension. protected . ◆ m_fullpath. std::string sofa::core::objectmodel::DataFileName::m_fullpath. protected . ◆ m_pathType. PathType sofa::core::objectmodel::DataFileName::m_pathType. protected . used to determine how file dialogs should be opened . ◆ m_relativepath. std::string sofa::core::objectmodel::DataFileName::m_relativepath. protected . Constructor details. ◆ DataFileName() [1/5]. sofa::core::objectmodel::DataFileName::DataFileName ; (; const std::string & ; helpMsg = """", . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ DataFileName() [2/5]. sofa::core::obje",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:11557,Modifiability,inherit,inherited,11557,"ibutes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< std::string >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Attribute details. ◆ m_extension. std::string sofa::core::objectmodel::DataFileName::m_extension. protected . ◆ m_fullpath. std::string sofa::core::objectmodel::DataFileName::m_fullpath. protected . ◆ m_pathType. PathType sofa::core::objectmodel::DataFileName::m_pathType. protected . used to determine how file dialogs should be opened . ◆ m_relativepath. std::string sofa::core::objectmodel::DataFileName::m_relativepath. protected . Constructor details. ◆ DataFileName() [1/5]. sofa::core::objectmodel::DataFileName::DataFileName ; (; const std::string & ; helpMsg = """", . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ DataFileName() [2/5]. sofa::core::obje",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:4605,Security,access,access,4605,"nst InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:4737,Security,access,access,4737," &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html:10767,Deployability,update,update,10767,"Datainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileNameVector; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const sofa::type::SVector< std::string > &value)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; setValueAsString(const std::string &v)sofa::core::objectmodel::DataFileNameVector; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameVectorprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; ValueType typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; ~DataFileNameVector() override=defaultsofa::core::objectmodel::DataFileNameVector; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html:10826,Deployability,update,updateIfDirty,10826,"Datainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileNameVector; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const sofa::type::SVector< std::string > &value)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; setValueAsString(const std::string &v)sofa::core::objectmodel::DataFileNameVector; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameVectorprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; ValueType typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; ~DataFileNameVector() override=defaultsofa::core::objectmodel::DataFileNameVector; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html:10881,Deployability,update,updatePath,10881,"Datainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileNameVector; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const sofa::type::SVector< std::string > &value)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; setValueAsString(const std::string &v)sofa::core::objectmodel::DataFileNameVector; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameVectorprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; ValueType typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; ~DataFileNameVector() override=defaultsofa::core::objectmodel::DataFileNameVector; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html:10947,Deployability,update,updateValueFromLink,10947,"Datainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPathType(PathType pathType)sofa::core::objectmodel::DataFileNameVector; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const sofa::type::SVector< std::string > &value)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; setValueAsString(const std::string &v)sofa::core::objectmodel::DataFileNameVector; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updatePath()sofa::core::objectmodel::DataFileNameVectorprotected; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; ValueType typedefsofa::core::objectmodel::Data< sofa::type::SVector< std::string > >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inline; ~DataFileNameVector() override=defaultsofa::core::objectmodel::DataFileNameVector; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html:258,Modifiability,inherit,inherited,258,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataFileNameVector Member List . This is the complete list of members for sofa::core::objectmodel::DataFileNameVector, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addPath(const std::string &v, bool clear=false)sofa::core::objectmodel::DataFileNameVector; BaseData(const BaseInitData &init)sofa::core::objectmodel::BaseDataexplicit; BaseData(const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; beginEdit()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinevirtual; beginEditVoidPtr()sofa::core::objectmodel::BaseData; beginWriteOnly()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinevirtual; canBeLinked() constsofa::core::objectmodel::BaseDatainlinevirtual; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; copyValueFrom(const Data< sofa::type::SVector< std::string > > *data)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; sofa::core::objectmodel::BaseData::copyValueFrom(const BaseData *data)sofa::core::objectmodel::BaseData; Data(const BaseData::BaseInitData &init)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlineexplicit; Data(const InitData &init)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlineexplicit; Data(const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< sofa::type::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html:421,Usability,clear,clear,421," addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addPath(const std::string &v, bool clear=false)sofa::core::objectmodel::DataFileNameVector; BaseData(const BaseInitData &init)sofa::core::objectmodel::BaseDataexplicit; BaseData(const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; beginEdit()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinevirtual; beginEditVoidPtr()sofa::core::objectmodel::BaseData; beginWriteOnly()sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlinevirtual; canBeLinked() constsofa::core::objectmodel::BaseDatainlinevirtual; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; copyValueFrom(const Data< sofa::type::SVector< std::string > > *data)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; sofa::core::objectmodel::BaseData::copyValueFrom(const BaseData *data)sofa::core::objectmodel::BaseData; Data(const BaseData::BaseInitData &init)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlineexplicit; Data(const InitData &init)sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >inlineexplicit; Data(const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< sofa::type::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:6461,Deployability,update,update,6461,"nkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:6633,Deployability,update,updateValueFromLink,6633," ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:8994,Deployability,update,updated,8994,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseDat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9078,Deployability,update,updated,9078,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9166,Deployability,update,updated,9166," the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inhe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9408,Deployability,update,updateIfDirty,9408," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Me",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9456,Deployability,update,update,9456," More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Me",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9601,Deployability,update,updatePath,9601,"..;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:10027,Deployability,update,update,10027,"..;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:15126,Deployability,update,updatePath,15126,"ileNameVector::~DataFileNameVector ; (; ). overridedefault . ◆ DataFileNameVector() [5/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const Inherit & ; d). delete . Function details. ◆ addPath(). void sofa::core::objectmodel::DataFileNameVector::addPath ; (; const std::string & ; v, . bool ; clear = false . ). ◆ doOnUpdate(). void sofa::core::objectmodel::DataFileNameVector::doOnUpdate ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::BaseData. ◆ endEdit(). void sofa::core::objectmodel::DataFileNameVector::endEdit ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >. ◆ getAbsolutePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getAbsolutePath ; (; unsigned int ; i); const. virtual . ◆ getFullPath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getFullPath ; (; unsigned int ; i); const. virtual . ◆ getPathType(). PathType sofa::core::objectmodel::DataFileNameVector::getPathType ; (; ); const. ◆ getRelativePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getRelativePath ; (; unsigned int ; i). virtual . ◆ operator=(). DataFileNameVector& sofa::core::objectmodel::DataFileNameVector::operator= ; (; const DataFileNameVector & ; ). delete . ◆ read(). bool sofa::core::objectmodel::DataFileNameVector::read ; (; const std::string & ; value). overridevirtual . Assign a value to this Data from a string representation. Returnstrue on success. ; Implements sofa::core::objectmodel::BaseData. ◆ setPathType(). void sofa::core::objectmodel::DataFileNameVector::setPathType ; (; PathType ; pathType). ◆ setValueAsString(). void sofa::core::objectmodel::DataFileNameVector::setValueAsString ; (; const std::string & ; v). ◆ updatePath(). void sofa::core::objectmodel::DataFileNameVector::updatePath ; (; ). protected . sofacoreobjectmodelDataFileNameVector; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:15190,Deployability,update,updatePath,15190,"ileNameVector::~DataFileNameVector ; (; ). overridedefault . ◆ DataFileNameVector() [5/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const Inherit & ; d). delete . Function details. ◆ addPath(). void sofa::core::objectmodel::DataFileNameVector::addPath ; (; const std::string & ; v, . bool ; clear = false . ). ◆ doOnUpdate(). void sofa::core::objectmodel::DataFileNameVector::doOnUpdate ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::BaseData. ◆ endEdit(). void sofa::core::objectmodel::DataFileNameVector::endEdit ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >. ◆ getAbsolutePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getAbsolutePath ; (; unsigned int ; i); const. virtual . ◆ getFullPath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getFullPath ; (; unsigned int ; i); const. virtual . ◆ getPathType(). PathType sofa::core::objectmodel::DataFileNameVector::getPathType ; (; ); const. ◆ getRelativePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getRelativePath ; (; unsigned int ; i). virtual . ◆ operator=(). DataFileNameVector& sofa::core::objectmodel::DataFileNameVector::operator= ; (; const DataFileNameVector & ; ). delete . ◆ read(). bool sofa::core::objectmodel::DataFileNameVector::read ; (; const std::string & ; value). overridevirtual . Assign a value to this Data from a string representation. Returnstrue on success. ; Implements sofa::core::objectmodel::BaseData. ◆ setPathType(). void sofa::core::objectmodel::DataFileNameVector::setPathType ; (; PathType ; pathType). ◆ setValueAsString(). void sofa::core::objectmodel::DataFileNameVector::setValueAsString ; (; const std::string & ; v). ◆ updatePath(). void sofa::core::objectmodel::DataFileNameVector::updatePath ; (; ). protected . sofacoreobjectmodelDataFileNameVector; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:5068,Integrability,message,message,5068," bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:5167,Integrability,message,message,5167,"ore...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:10812,Integrability,message,message,10812,"tream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:605,Modifiability,inherit,inherited,605,"﻿. SOFA API: sofa::core::objectmodel::DataFileNameVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DataFileNameVector Class Reference . #include <DataFileNameVector.h>. Inheritance diagram for sofa::core::objectmodel::DataFileNameVector:. [legend]. Protected Attributes; sofa::type::vector< std::string > m_fullpath;  ; PathType m_pathType;  used to determine how file dialogs should be opened More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; sofa::type::SVector< std::string > m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileNameVector (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const BaseData::BaseInitData &init);  ;  DataFileNameVector (const Inherit::InitData &init);  ;  ~DataFileNameVector () override=default;  ; void endEdit () override;  ; void addPath (const std::string &v, bool clear=false);  ; void setValueAsString (const std::string &v);  ; bool read (const std::string &s) override;  ; virtual const std::string & getRelativePath (unsigned int i);  ; virtual const std::string & getFullPath (unsigned int i) const;  ; virtual const std::string & getAbsolutePath (unsigned int i) const;  ; void doOnUpdate () override;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ;  DataFileNameVector (const Inherit &d)=delete;  ; DataFileNameVector & operator= (const DataFileNameVector &)=delete;  ;  Public Member Functions inherited from so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:804,Modifiability,inherit,inherited,804,"﻿. SOFA API: sofa::core::objectmodel::DataFileNameVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DataFileNameVector Class Reference . #include <DataFileNameVector.h>. Inheritance diagram for sofa::core::objectmodel::DataFileNameVector:. [legend]. Protected Attributes; sofa::type::vector< std::string > m_fullpath;  ; PathType m_pathType;  used to determine how file dialogs should be opened More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; sofa::type::SVector< std::string > m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileNameVector (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const BaseData::BaseInitData &init);  ;  DataFileNameVector (const Inherit::InitData &init);  ;  ~DataFileNameVector () override=default;  ; void endEdit () override;  ; void addPath (const std::string &v, bool clear=false);  ; void setValueAsString (const std::string &v);  ; bool read (const std::string &s) override;  ; virtual const std::string & getRelativePath (unsigned int i);  ; virtual const std::string & getFullPath (unsigned int i) const;  ; virtual const std::string & getAbsolutePath (unsigned int i) const;  ; void doOnUpdate () override;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ;  DataFileNameVector (const Inherit &d)=delete;  ; DataFileNameVector & operator= (const DataFileNameVector &)=delete;  ;  Public Member Functions inherited from so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:1984,Modifiability,inherit,inherited,1984,"re...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; sofa::type::SVector< std::string > m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileNameVector (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const BaseData::BaseInitData &init);  ;  DataFileNameVector (const Inherit::InitData &init);  ;  ~DataFileNameVector () override=default;  ; void endEdit () override;  ; void addPath (const std::string &v, bool clear=false);  ; void setValueAsString (const std::string &v);  ; bool read (const std::string &s) override;  ; virtual const std::string & getRelativePath (unsigned int i);  ; virtual const std::string & getFullPath (unsigned int i) const;  ; virtual const std::string & getAbsolutePath (unsigned int i) const;  ; void doOnUpdate () override;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ;  DataFileNameVector (const Inherit &d)=delete;  ; DataFileNameVector & operator= (const DataFileNameVector &)=delete;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:2229,Modifiability,variab,variable,2229,"re...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; sofa::type::SVector< std::string > m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileNameVector (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const BaseData::BaseInitData &init);  ;  DataFileNameVector (const Inherit::InitData &init);  ;  ~DataFileNameVector () override=default;  ; void endEdit () override;  ; void addPath (const std::string &v, bool clear=false);  ; void setValueAsString (const std::string &v);  ; bool read (const std::string &s) override;  ; virtual const std::string & getRelativePath (unsigned int i);  ; virtual const std::string & getFullPath (unsigned int i) const;  ; virtual const std::string & getAbsolutePath (unsigned int i) const;  ; void doOnUpdate () override;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ;  DataFileNameVector (const Inherit &d)=delete;  ; DataFileNameVector & operator= (const DataFileNameVector &)=delete;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:4178,Modifiability,inherit,inherited,4178,"tring > * beginWriteOnly ();  ; void setValue (const sofa::type::SVector< std::string > &value);  ; const sofa::type::SVector< std::string > & getValue () const;  ; BaseData * getNewInstance () override;  ;  Data (const BaseData::BaseInitData &init);  ;  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; vo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:8278,Modifiability,inherit,inherited,8278,"inked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAutoLink (bool b);  Set whether this data should be autolinked when using the src="""" syntax. More...;  ; void setRequired (bool b);  Set whether the Data has to be set by the user for the owner component to be valid. More...;  ; bool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty fla",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9647,Modifiability,inherit,inherited,9647,"..;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9917,Modifiability,inherit,inherited,9917,"..;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:10130,Modifiability,inherit,inherited,10130," void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:10463,Modifiability,inherit,inherited,10463,"d before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:10733,Modifiability,inherit,inherited,10733,"tream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:11564,Modifiability,inherit,inherited,11564,"rited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Attribute details. ◆ m_fullpath. sofa::type::vector<std::string> sofa::core::objectmodel::DataFileNameVector::m_fullpath. protected . ◆ m_pathType. PathType sofa::core::objectmodel::DataFileNameVector::m_pathType. protected . used to determine how file dialogs should be opened . Constructor details. ◆ DataFileNameVector() [1/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const char * ; helpMsg = nullptr, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ DataFileNameVector() [2/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const sofa::type::SVector< std::string > & ; value, . const char * ; h",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:11762,Modifiability,inherit,inherited,11762,"rited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Attribute details. ◆ m_fullpath. sofa::type::vector<std::string> sofa::core::objectmodel::DataFileNameVector::m_fullpath. protected . ◆ m_pathType. PathType sofa::core::objectmodel::DataFileNameVector::m_pathType. protected . used to determine how file dialogs should be opened . Constructor details. ◆ DataFileNameVector() [1/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const char * ; helpMsg = nullptr, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ DataFileNameVector() [2/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const sofa::type::SVector< std::string > & ; value, . const char * ; h",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:4741,Security,access,access,4741,"pMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:4873,Security,access,access,4873,"nly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:1416,Usability,clear,clear,1416,"re...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; sofa::type::SVector< std::string > m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DataFileNameVector (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  DataFileNameVector (const BaseData::BaseInitData &init);  ;  DataFileNameVector (const Inherit::InitData &init);  ;  ~DataFileNameVector () override=default;  ; void endEdit () override;  ; void addPath (const std::string &v, bool clear=false);  ; void setValueAsString (const std::string &v);  ; bool read (const std::string &s) override;  ; virtual const std::string & getRelativePath (unsigned int i);  ; virtual const std::string & getFullPath (unsigned int i) const;  ; virtual const std::string & getAbsolutePath (unsigned int i) const;  ; void doOnUpdate () override;  ; void setPathType (PathType pathType);  ; PathType getPathType () const;  ;  DataFileNameVector (const Inherit &d)=delete;  ; DataFileNameVector & operator= (const DataFileNameVector &)=delete;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:13641,Usability,clear,clear,13641,"DataFileNameVector ; (; const sofa::type::SVector< std::string > & ; value, . const char * ; helpMsg = nullptr, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ DataFileNameVector() [3/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const BaseData::BaseInitData & ; init). explicit . Constructor this constructor should be used through the initData() methods . ◆ DataFileNameVector() [4/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const Inherit::InitData & ; init). explicit . Constructor this constructor should be used through the initData() methods . ◆ ~DataFileNameVector(). sofa::core::objectmodel::DataFileNameVector::~DataFileNameVector ; (; ). overridedefault . ◆ DataFileNameVector() [5/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const Inherit & ; d). delete . Function details. ◆ addPath(). void sofa::core::objectmodel::DataFileNameVector::addPath ; (; const std::string & ; v, . bool ; clear = false . ). ◆ doOnUpdate(). void sofa::core::objectmodel::DataFileNameVector::doOnUpdate ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::BaseData. ◆ endEdit(). void sofa::core::objectmodel::DataFileNameVector::endEdit ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >. ◆ getAbsolutePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getAbsolutePath ; (; unsigned int ; i); const. virtual . ◆ getFullPath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getFullPath ; (; unsigned int ; i); const. virtual . ◆ getPathType(). PathType sofa::core::objectmodel::DataFileNameVector::getPathType ; (; ); const. ◆ getRelativePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getRelativePath ; (; unsigned int ; i). virtual . ◆ operator=(). DataFileNameVector& sofa::core::objectmodel::DataFileNameVector::operator= ; (; const DataFileNameVector & ; ). dele",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataLink< T > Member List . This is the complete list of members for sofa::core::objectmodel::DataLink< T >, including all inherited members. DataLink(T &owner)sofa::core::objectmodel::DataLink< T >inline; getOwner() constsofa::core::objectmodel::DataLink< T >inline; getPath() constsofa::core::objectmodel::AbstractDataLink; getTarget() constsofa::core::objectmodel::DataLink< T >inline; hasPath() constsofa::core::objectmodel::AbstractDataLink; hasTarget() constsofa::core::objectmodel::AbstractDataLink; isSet() constsofa::core::objectmodel::DataLink< T >inline; m_pathsofa::core::objectmodel::AbstractDataLinkprotected; resolvePathAndGetTarget()sofa::core::objectmodel::AbstractDataLink; resolvePathAndSetTarget()sofa::core::objectmodel::AbstractDataLink; setPath(const std::string &path)sofa::core::objectmodel::AbstractDataLink; setTarget(T *target)sofa::core::objectmodel::DataLink< T >inline; sofa::core::objectmodel::AbstractDataLink::setTarget(BaseData *target)sofa::core::objectmodel::AbstractDataLink; unSet()sofa::core::objectmodel::DataLink< T >inline; ~DataLink()sofa::core::objectmodel::DataLink< T >inlinevirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html:455,Integrability,interface,interface,455,"﻿. SOFA API: sofa::core::objectmodel::DataLink< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataLink< T > Class Template Referencefinal . #include <DataLink.h>; DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. ; More... Inheritance diagram for sofa::core::objectmodel::DataLink< T >:. [legend]; Detailed Description; template<class T>; class sofa::core::objectmodel::DataLink< T >; DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. . Public Member Functions;  DataLink (T &owner);  ; virtual ~DataLink ();  ; T * getTarget () const;  ; void unSet ();  ; bool isSet () const;  ; void setTarget (T *target);  ; T & getOwner () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::AbstractDataLink; const BaseData & getOwner () const;  ; void setTarget (BaseData *target);  Change the targeted DataField and set the path to the empty string. More...;  ; BaseData * getTarget () const;  Get the targeted DataField. More...;  ; bool hasTarget () const;  Returns true if there is a target. More...;  ; const std::string getPath () const;  Get the path (is any) More...;  ; void setPath (const std::string &path);  Set the path, try to resolve it, on success set the DataField. More...;  ; bool hasPath () const;  Returns true if the path is set (and thus getTarget() == nullptr) More...;  ; bool resolvePathAndSetTarget ();  ; BaseData * resolvePathAndGetTarget ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::AbstractDataLink; std::string m_path {""""};  . Constructor details. ◆ DataLink(). template<class T > . sofa::core::objectmodel::DataLink< T >::DataL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html:798,Integrability,interface,interface,798,"﻿. SOFA API: sofa::core::objectmodel::DataLink< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataLink< T > Class Template Referencefinal . #include <DataLink.h>; DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. ; More... Inheritance diagram for sofa::core::objectmodel::DataLink< T >:. [legend]; Detailed Description; template<class T>; class sofa::core::objectmodel::DataLink< T >; DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. . Public Member Functions;  DataLink (T &owner);  ; virtual ~DataLink ();  ; T * getTarget () const;  ; void unSet ();  ; bool isSet () const;  ; void setTarget (T *target);  ; T & getOwner () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::AbstractDataLink; const BaseData & getOwner () const;  ; void setTarget (BaseData *target);  Change the targeted DataField and set the path to the empty string. More...;  ; BaseData * getTarget () const;  Get the targeted DataField. More...;  ; bool hasTarget () const;  Returns true if there is a target. More...;  ; const std::string getPath () const;  Get the path (is any) More...;  ; void setPath (const std::string &path);  Set the path, try to resolve it, on success set the DataField. More...;  ; bool hasPath () const;  Returns true if the path is set (and thus getTarget() == nullptr) More...;  ; bool resolvePathAndSetTarget ();  ; BaseData * resolvePathAndGetTarget ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::AbstractDataLink; std::string m_path {""""};  . Constructor details. ◆ DataLink(). template<class T > . sofa::core::objectmodel::DataLink< T >::DataL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html:1037,Modifiability,inherit,inherited,1037,"::objectmodel::DataLink< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataLink< T > Class Template Referencefinal . #include <DataLink.h>; DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. ; More... Inheritance diagram for sofa::core::objectmodel::DataLink< T >:. [legend]; Detailed Description; template<class T>; class sofa::core::objectmodel::DataLink< T >; DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. . Public Member Functions;  DataLink (T &owner);  ; virtual ~DataLink ();  ; T * getTarget () const;  ; void unSet ();  ; bool isSet () const;  ; void setTarget (T *target);  ; T & getOwner () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::AbstractDataLink; const BaseData & getOwner () const;  ; void setTarget (BaseData *target);  Change the targeted DataField and set the path to the empty string. More...;  ; BaseData * getTarget () const;  Get the targeted DataField. More...;  ; bool hasTarget () const;  Returns true if there is a target. More...;  ; const std::string getPath () const;  Get the path (is any) More...;  ; void setPath (const std::string &path);  Set the path, try to resolve it, on success set the DataField. More...;  ; bool hasPath () const;  Returns true if the path is set (and thus getTarget() == nullptr) More...;  ; bool resolvePathAndSetTarget ();  ; BaseData * resolvePathAndGetTarget ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::AbstractDataLink; std::string m_path {""""};  . Constructor details. ◆ DataLink(). template<class T > . sofa::core::objectmodel::DataLink< T >::DataLink ; (; T & ; owner). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html:1814,Modifiability,inherit,inherited,1814,"Public Member Functions;  DataLink (T &owner);  ; virtual ~DataLink ();  ; T * getTarget () const;  ; void unSet ();  ; bool isSet () const;  ; void setTarget (T *target);  ; T & getOwner () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::AbstractDataLink; const BaseData & getOwner () const;  ; void setTarget (BaseData *target);  Change the targeted DataField and set the path to the empty string. More...;  ; BaseData * getTarget () const;  Get the targeted DataField. More...;  ; bool hasTarget () const;  Returns true if there is a target. More...;  ; const std::string getPath () const;  Get the path (is any) More...;  ; void setPath (const std::string &path);  Set the path, try to resolve it, on success set the DataField. More...;  ; bool hasPath () const;  Returns true if the path is set (and thus getTarget() == nullptr) More...;  ; bool resolvePathAndSetTarget ();  ; BaseData * resolvePathAndGetTarget ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::AbstractDataLink; std::string m_path {""""};  . Constructor details. ◆ DataLink(). template<class T > . sofa::core::objectmodel::DataLink< T >::DataLink ; (; T & ; owner). inline . ◆ ~DataLink(). template<class T > . virtual sofa::core::objectmodel::DataLink< T >::~DataLink ; (; ). inlinevirtual . Function details. ◆ getOwner(). template<class T > . T& sofa::core::objectmodel::DataLink< T >::getOwner ; (; ); const. inline . ◆ getTarget(). template<class T > . T* sofa::core::objectmodel::DataLink< T >::getTarget ; (; ); const. inline . ◆ isSet(). template<class T > . bool sofa::core::objectmodel::DataLink< T >::isSet ; (; ); const. inline . ◆ setTarget(). template<class T > . void sofa::core::objectmodel::DataLink< T >::setTarget ; (; T * ; target). inline . ◆ unSet(). template<class T > . void sofa::core::objectmodel::DataLink< T >::unSet ; (; ). inline . sofacoreobjectmodelDataLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DeprecatedBaseClass Member List . This is the complete list of members for sofa::core::objectmodel::DeprecatedBaseClass, including all inherited members. BaseClass()sofa::core::objectmodel::BaseClassprotected; classNamesofa::core::objectmodel::BaseClass; DeprecatedBaseClass()sofa::core::objectmodel::DeprecatedBaseClass; dynamicCast(Base *) const overridesofa::core::objectmodel::DeprecatedBaseClassinlinevirtual; GetSingleton()sofa::core::objectmodel::DeprecatedBaseClassstatic; hasParent(const BaseClass *c) constsofa::core::objectmodel::BaseClassinline; hasParent(const std::string &parentClassName) constsofa::core::objectmodel::BaseClassinline; isInstance(Base *) const overridesofa::core::objectmodel::DeprecatedBaseClassinlinevirtual; namespaceNamesofa::core::objectmodel::BaseClass; operator!=(const BaseClass &c) constsofa::core::objectmodel::BaseClassinline; operator==(const BaseClass &c) constsofa::core::objectmodel::BaseClassinline; parentssofa::core::objectmodel::BaseClass; shortNamesofa::core::objectmodel::BaseClass; templateNamesofa::core::objectmodel::BaseClass; typeNamesofa::core::objectmodel::BaseClass; ~BaseClass()sofa::core::objectmodel::BaseClassprotectedvirtual. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html:569,Modifiability,inherit,inherited,569,﻿. SOFA API: sofa::core::objectmodel::DeprecatedBaseClass Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::DeprecatedBaseClass Class Reference . #include <BaseClass.h>. Inheritance diagram for sofa::core::objectmodel::DeprecatedBaseClass:. [legend]. Public Member Functions;  DeprecatedBaseClass ();  ; Base * dynamicCast (Base *) const override;  ; bool isInstance (Base *) const override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseClass; bool hasParent (const BaseClass *c) const;  returns true iff c is a parent class of this More...;  ; bool hasParent (const std::string &parentClassName) const;  returns true iff a parent class of this is named parentClassName More...;  ; bool operator== (const BaseClass &c) const;  ; bool operator!= (const BaseClass &c) const;  . Static Public Member Functions; static BaseClass * GetSingleton ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseClass; std::string namespaceName;  ; std::string typeName;  ; std::string className;  ; std::string templateName;  ; std::string shortName;  ; type::vector< const BaseClass * > parents;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseClass;  BaseClass ();  ; virtual ~BaseClass ();  . Constructor details. ◆ DeprecatedBaseClass(). sofa::core::objectmodel::DeprecatedBaseClass::DeprecatedBaseClass ; (; ). Function details. ◆ dynamicCast(). Base* sofa::core::objectmodel::DeprecatedBaseClass::dynamicCast ; (; Base * ; ); const. inlineoverridevirtual . Implements sofa::core::objectmodel::BaseClass. ◆ GetSingleton(). BaseClass * sofa::core::objectmodel::DeprecatedBaseClass::GetSingleton ; (; ). static . ◆ isInstance(). bool sofa::core::objectmodel::DeprecatedBaseClass::isInstance ; (; Base * ; ); const. inlineoverridevirtual . Implements sofa::core::obje,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html:1072,Modifiability,inherit,inherited,1072, multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::DeprecatedBaseClass Class Reference . #include <BaseClass.h>. Inheritance diagram for sofa::core::objectmodel::DeprecatedBaseClass:. [legend]. Public Member Functions;  DeprecatedBaseClass ();  ; Base * dynamicCast (Base *) const override;  ; bool isInstance (Base *) const override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseClass; bool hasParent (const BaseClass *c) const;  returns true iff c is a parent class of this More...;  ; bool hasParent (const std::string &parentClassName) const;  returns true iff a parent class of this is named parentClassName More...;  ; bool operator== (const BaseClass &c) const;  ; bool operator!= (const BaseClass &c) const;  . Static Public Member Functions; static BaseClass * GetSingleton ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseClass; std::string namespaceName;  ; std::string typeName;  ; std::string className;  ; std::string templateName;  ; std::string shortName;  ; type::vector< const BaseClass * > parents;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseClass;  BaseClass ();  ; virtual ~BaseClass ();  . Constructor details. ◆ DeprecatedBaseClass(). sofa::core::objectmodel::DeprecatedBaseClass::DeprecatedBaseClass ; (; ). Function details. ◆ dynamicCast(). Base* sofa::core::objectmodel::DeprecatedBaseClass::dynamicCast ; (; Base * ; ); const. inlineoverridevirtual . Implements sofa::core::objectmodel::BaseClass. ◆ GetSingleton(). BaseClass * sofa::core::objectmodel::DeprecatedBaseClass::GetSingleton ; (; ). static . ◆ isInstance(). bool sofa::core::objectmodel::DeprecatedBaseClass::isInstance ; (; Base * ; ); const. inlineoverridevirtual . Implements sofa::core::objectmodel::BaseClass. sofacoreobjectmodelDeprecatedBaseClass; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html:1333,Modifiability,inherit,inherited,1333, multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::DeprecatedBaseClass Class Reference . #include <BaseClass.h>. Inheritance diagram for sofa::core::objectmodel::DeprecatedBaseClass:. [legend]. Public Member Functions;  DeprecatedBaseClass ();  ; Base * dynamicCast (Base *) const override;  ; bool isInstance (Base *) const override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseClass; bool hasParent (const BaseClass *c) const;  returns true iff c is a parent class of this More...;  ; bool hasParent (const std::string &parentClassName) const;  returns true iff a parent class of this is named parentClassName More...;  ; bool operator== (const BaseClass &c) const;  ; bool operator!= (const BaseClass &c) const;  . Static Public Member Functions; static BaseClass * GetSingleton ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseClass; std::string namespaceName;  ; std::string typeName;  ; std::string className;  ; std::string templateName;  ; std::string shortName;  ; type::vector< const BaseClass * > parents;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseClass;  BaseClass ();  ; virtual ~BaseClass ();  . Constructor details. ◆ DeprecatedBaseClass(). sofa::core::objectmodel::DeprecatedBaseClass::DeprecatedBaseClass ; (; ). Function details. ◆ dynamicCast(). Base* sofa::core::objectmodel::DeprecatedBaseClass::dynamicCast ; (; Base * ; ); const. inlineoverridevirtual . Implements sofa::core::objectmodel::BaseClass. ◆ GetSingleton(). BaseClass * sofa::core::objectmodel::DeprecatedBaseClass::GetSingleton ; (; ). static . ◆ isInstance(). bool sofa::core::objectmodel::DeprecatedBaseClass::isInstance ; (; Base * ; ); const. inlineoverridevirtual . Implements sofa::core::objectmodel::BaseClass. sofacoreobjectmodelDeprecatedBaseClass; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_deprecated_base_class.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DetachNodeEvent Member List . This is the complete list of members for sofa::core::objectmodel::DetachNodeEvent, including all inherited members. contains(BaseNode *n) constsofa::core::objectmodel::DetachNodeEvent; contains(BaseObject *o) constsofa::core::objectmodel::DetachNodeEvent; DetachNodeEvent(BaseNode *n)sofa::core::objectmodel::DetachNodeEvent; Event()sofa::core::objectmodel::Event; GetClassName()sofa::core::objectmodel::DetachNodeEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getNode() constsofa::core::objectmodel::DetachNodeEvent; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; nodesofa::core::objectmodel::DetachNodeEventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~DetachNodeEvent() overridesofa::core::objectmodel::DetachNodeEvent; ~Event()sofa::core::objectmodel::Eventvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html:659,Modifiability,inherit,inherited,659,"﻿. SOFA API: sofa::core::objectmodel::DetachNodeEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::DetachNodeEvent Class Reference . #include <DetachNodeEvent.h>. Inheritance diagram for sofa::core::objectmodel::DetachNodeEvent:. [legend]; Detailed Description; Event indicating that a child node is being detached from the scene. Any reference to one of its descendant (such as active contacts) should be removed. . Protected Attributes; BaseNode * node;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  DetachNodeEvent (BaseNode *n);  ;  ~DetachNodeEvent () override;  ; BaseNode * getNode () const;  ; bool contains (BaseNode *n) const;  ; bool contains (BaseObject *o) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ node. BaseNode* sofa::core::objectmodel::DetachNodeEvent::node. protected . Constructor details. ◆ DetachNodeEvent(). sofa::core::objectmodel::DetachNodeEvent::DetachNodeEvent ; (; BaseNode * ; n). ◆ ~DetachNodeEvent(). sofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html:954,Modifiability,inherit,inherited,954,"﻿. SOFA API: sofa::core::objectmodel::DetachNodeEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::DetachNodeEvent Class Reference . #include <DetachNodeEvent.h>. Inheritance diagram for sofa::core::objectmodel::DetachNodeEvent:. [legend]; Detailed Description; Event indicating that a child node is being detached from the scene. Any reference to one of its descendant (such as active contacts) should be removed. . Protected Attributes; BaseNode * node;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  DetachNodeEvent (BaseNode *n);  ;  ~DetachNodeEvent () override;  ; BaseNode * getNode () const;  ; bool contains (BaseNode *n) const;  ; bool contains (BaseObject *o) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ node. BaseNode* sofa::core::objectmodel::DetachNodeEvent::node. protected . Constructor details. ◆ DetachNodeEvent(). sofa::core::objectmodel::DetachNodeEvent::DetachNodeEvent ; (; BaseNode * ; n). ◆ ~DetachNodeEvent(). sofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html:1426,Modifiability,inherit,inherited,1426,"on; Event indicating that a child node is being detached from the scene. Any reference to one of its descendant (such as active contacts) should be removed. . Protected Attributes; BaseNode * node;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  DetachNodeEvent (BaseNode *n);  ;  ~DetachNodeEvent () override;  ; BaseNode * getNode () const;  ; bool contains (BaseNode *n) const;  ; bool contains (BaseObject *o) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ node. BaseNode* sofa::core::objectmodel::DetachNodeEvent::node. protected . Constructor details. ◆ DetachNodeEvent(). sofa::core::objectmodel::DetachNodeEvent::DetachNodeEvent ; (; BaseNode * ; n). ◆ ~DetachNodeEvent(). sofa::core::objectmodel::DetachNodeEvent::~DetachNodeEvent ; (; ). override . Function details. ◆ contains() [1/2]. bool sofa::core::objectmodel::DetachNodeEvent::contains ; (; BaseNode * ; n); const. ◆ contains() [2/2]. bool sofa::core::objectmodel::DetachNodeEvent::contains ; (; BaseObject * ; o); const. ◆ GetClassName(). static const char* sofa::core::objectmodel::DetachNodeEvent::GetClassName ; (; ). inlinestatic . ◆ getNode(). BaseNode * sofa::core:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html:1611,Modifiability,inherit,inherited,1611,"ved. . Protected Attributes; BaseNode * node;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  DetachNodeEvent (BaseNode *n);  ;  ~DetachNodeEvent () override;  ; BaseNode * getNode () const;  ; bool contains (BaseNode *n) const;  ; bool contains (BaseObject *o) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ node. BaseNode* sofa::core::objectmodel::DetachNodeEvent::node. protected . Constructor details. ◆ DetachNodeEvent(). sofa::core::objectmodel::DetachNodeEvent::DetachNodeEvent ; (; BaseNode * ; n). ◆ ~DetachNodeEvent(). sofa::core::objectmodel::DetachNodeEvent::~DetachNodeEvent ; (; ). override . Function details. ◆ contains() [1/2]. bool sofa::core::objectmodel::DetachNodeEvent::contains ; (; BaseNode * ; n); const. ◆ contains() [2/2]. bool sofa::core::objectmodel::DetachNodeEvent::contains ; (; BaseObject * ; o); const. ◆ GetClassName(). static const char* sofa::core::objectmodel::DetachNodeEvent::GetClassName ; (; ). inlinestatic . ◆ getNode(). BaseNode * sofa::core::objectmodel::DetachNodeEvent::getNode ; (; ); const. sofacoreobjectmodelDetachNodeEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_detach_node_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html:1452,Deployability,update,update,1452,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DDGNode Member List . This is the complete list of members for sofa::core::objectmodel::DDGNode, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; getInputs()sofa::core::objectmodel::DDGNode; getOutputs()sofa::core::objectmodel::DDGNode; inputssofa::core::objectmodel::DDGNodeprotected; isDirty() constsofa::core::objectmodel::DDGNodeinline; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; update()=0sofa::core::objectmodel::DDGNodepure virtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html:1508,Deployability,update,updateIfDirty,1508,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DDGNode Member List . This is the complete list of members for sofa::core::objectmodel::DDGNode, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; getInputs()sofa::core::objectmodel::DDGNode; getOutputs()sofa::core::objectmodel::DDGNode; inputssofa::core::objectmodel::DDGNodeprotected; isDirty() constsofa::core::objectmodel::DDGNodeinline; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; update()=0sofa::core::objectmodel::DDGNodepure virtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DDGNode Member List . This is the complete list of members for sofa::core::objectmodel::DDGNode, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; getInputs()sofa::core::objectmodel::DDGNode; getOutputs()sofa::core::objectmodel::DDGNode; inputssofa::core::objectmodel::DDGNodeprotected; isDirty() constsofa::core::objectmodel::DDGNodeinline; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; update()=0sofa::core::objectmodel::DDGNodepure virtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:423,Deployability,update,update,423,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:522,Deployability,update,update,522,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:755,Deployability,update,update,755,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:854,Deployability,update,update,854,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:1617,Deployability,update,update,1617,GNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:1726,Deployability,update,updated,1726,ta dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. prot,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:1810,Deployability,update,updated,1810, of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. protected . ◆ outputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::outputs. prote,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:1898,Deployability,update,updated,1898,isme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. protected . ◆ outputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::outputs. protected . Constructor details. ◆ DDGNode(). sofa::core::objectmodel::DDGNode::DDGNode ; (,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:2140,Deployability,update,updateIfDirty,2140,to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. protected . ◆ outputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::outputs. protected . Constructor details. ◆ DDGNode(). sofa::core::objectmodel::DDGNode::DDGNode ; (; ). Constructor. . ◆ ~DDGNode(). sofa::core::objectmodel::DDGNode::~DDGNode ; (; ). virtual . Destructor. Automatically remove remaining links. . Function details. ◆ addInput(). void sofa::core::objectmodel::DDGNode::addInput ; (; DDGNode * ; n). Add a new input to this node. . ◆ addOutput(). void sof,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:2188,Deployability,update,update,2188,to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. protected . ◆ outputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::outputs. protected . Constructor details. ◆ DDGNode(). sofa::core::objectmodel::DDGNode::DDGNode ; (; ). Constructor. . ◆ ~DDGNode(). sofa::core::objectmodel::DDGNode::~DDGNode ; (; ). virtual . Destructor. Automatically remove remaining links. . Function details. ◆ addInput(). void sofa::core::objectmodel::DDGNode::addInput ; (; DDGNode * ; n). Add a new input to this node. . ◆ addOutput(). void sof,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:4625,Deployability,update,updated,4625," (; DDGNode * ; n). Remove an input from this node. . ◆ delOutput(). void sofa::core::objectmodel::DDGNode::delOutput ; (; DDGNode * ; n). Remove an output from this node. . ◆ doAddInput(). void sofa::core::objectmodel::DDGNode::doAddInput ; (; DDGNode * ; n). protectedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:4956,Deployability,update,updated,4956,"ctedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::objectmodel::DDGNode::updateIfDirty ; (; ); const. Utility method to call update if necessary. This method should be called before reading of writing the value of this node. . sofacoreobjectmodelDDGNode; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:5154,Deployability,update,updated,5154,"ctedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::objectmodel::DDGNode::updateIfDirty ; (; ); const. Utility method to call update if necessary. This method should be called before reading of writing the value of this node. . sofacoreobjectmodelDDGNode; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:5231,Deployability,update,update,5231,"ctedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::objectmodel::DDGNode::updateIfDirty ; (; ); const. Utility method to call update if necessary. This method should be called before reading of writing the value of this node. . sofacoreobjectmodelDDGNode; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:5288,Deployability,update,update,5288,"ctedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::objectmodel::DDGNode::updateIfDirty ; (; ); const. Utility method to call update if necessary. This method should be called before reading of writing the value of this node. . sofacoreobjectmodelDDGNode; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:5574,Deployability,update,updateIfDirty,5574,"ctedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::objectmodel::DDGNode::updateIfDirty ; (; ); const. Utility method to call update if necessary. This method should be called before reading of writing the value of this node. . sofacoreobjectmodelDDGNode; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:5630,Deployability,update,updateIfDirty,5630,"ctedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::objectmodel::DDGNode::updateIfDirty ; (; ); const. Utility method to call update if necessary. This method should be called before reading of writing the value of this node. . sofacoreobjectmodelDDGNode; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:5682,Deployability,update,update,5682,"ctedvirtual . ◆ doAddOutput(). void sofa::core::objectmodel::DDGNode::doAddOutput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelInput(). void sofa::core::objectmodel::DDGNode::doDelInput ; (; DDGNode * ; n). protectedvirtual . ◆ doDelOutput(). void sofa::core::objectmodel::DDGNode::doDelOutput ; (; DDGNode * ; n). protectedvirtual . ◆ getInputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getInputs ; (; ). Get the list of inputs for this DDGNode. . ◆ getOutputs(). const DDGNode::DDGLinkContainer & sofa::core::objectmodel::DDGNode::getOutputs ; (; ). Get the list of outputs for this DDGNode. . ◆ isDirty(). bool sofa::core::objectmodel::DDGNode::isDirty ; (; ); const. inline . Returns true if the DDGNode needs to be updated. . ◆ notifyEndEdit(). void sofa::core::objectmodel::DDGNode::notifyEndEdit ; (; ). virtual . Notify links that the DGNode has been modified. ; Reimplemented in sofa::gui::qt::ObjectStateListener. ◆ setDirtyOutputs(). void sofa::core::objectmodel::DDGNode::setDirtyOutputs ; (; ). virtual . Indicate the outputs needs to be updated. This method must be called after changing the value of this node. . ◆ setDirtyValue(). void sofa::core::objectmodel::DDGNode::setDirtyValue ; (; ). virtual . Indicate the value needs to be updated. ; Reimplemented in sofa::core::DataTrackerFunctor< FunctorType >. ◆ update(). virtual void sofa::core::objectmodel::DDGNode::update ; (; ). pure virtual . Update this value. ; Implemented in sofa::gui::qt::ObjectStateListener, sofa::core::topology::TopologyHandler, sofa::core::objectmodel::BaseData, sofa::core::DataTrackerFunctor< FunctorType >, sofa::core::DataTrackerCallback, and sofa::core::DataEngine. ◆ updateIfDirty(). void sofa::core::objectmodel::DDGNode::updateIfDirty ; (; ); const. Utility method to call update if necessary. This method should be called before reading of writing the value of this node. . sofacoreobjectmodelDDGNode; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:366,Integrability,depend,dependencies,366,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:395,Integrability,depend,dependency,395,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:698,Integrability,depend,dependencies,698,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:727,Integrability,depend,dependency,727,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html:8459,Deployability,update,update,8459,"odel::Data< void * >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const void * &value)sofa::core::objectmodel::Data< void * >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< void * >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< void * >; ValueType typedefsofa::core::objectmodel::Data< void * >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< void * >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html:8518,Deployability,update,updateIfDirty,8518,"odel::Data< void * >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const void * &value)sofa::core::objectmodel::Data< void * >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< void * >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< void * >; ValueType typedefsofa::core::objectmodel::Data< void * >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< void * >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html:8573,Deployability,update,updateValueFromLink,8573,"odel::Data< void * >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const void * &value)sofa::core::objectmodel::Data< void * >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< void * >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< void * >; ValueType typedefsofa::core::objectmodel::Data< void * >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< void * >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::EmptyData Member List . This is the complete list of members for sofa::core::objectmodel::EmptyData, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; BaseData(const BaseInitData &init)sofa::core::objectmodel::BaseDataexplicit; BaseData(const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, DataFlags flags=FLAG_DEFAULT)sofa::core::objectmodel::BaseData; BaseData(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; BaseData(const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::BaseData; beginEdit()sofa::core::objectmodel::Data< void * >inlinevirtual; beginEditVoidPtr()sofa::core::objectmodel::BaseData; beginWriteOnly()sofa::core::objectmodel::Data< void * >inlinevirtual; canBeLinked() constsofa::core::objectmodel::BaseDatainlinevirtual; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; copyValueFrom(const Data< void * > *data)sofa::core::objectmodel::Data< void * >; sofa::core::objectmodel::BaseData::copyValueFrom(const BaseData *data)sofa::core::objectmodel::BaseData; Data(const BaseData::BaseInitData &init)sofa::core::objectmodel::Data< void * >inlineexplicit; Data(const InitData &init)sofa::core::objectmodel::Data< void * >inlineexplicit; Data(const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< void * >inline; Data(const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< void * >inline; Data(const void * &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Data< void * >inline; Da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:5943,Deployability,update,update,5943,"nkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:6115,Deployability,update,updateValueFromLink,6115," ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:8476,Deployability,update,updated,8476,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:8560,Deployability,update,updated,8560,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:8648,Deployability,update,updated,8648," the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:8890,Deployability,update,updateIfDirty,8890, More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const Bas,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:8938,Deployability,update,update,8938, More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const Bas,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:9943,Deployability,update,update,9943,"ty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . sofacoreobjectmodelEmptyData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:674,Integrability,message,message,674,"﻿. SOFA API: sofa::core::objectmodel::EmptyData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::core::objectmodel::EmptyData Class Reference . #include <Data.h>. Inheritance diagram for sofa::core::objectmodel::EmptyData:. [legend]. Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< void * >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< void * >; void * m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< void * >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:4550,Integrability,message,message,4550," bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:4649,Integrability,message,message,4649,"ore...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:353,Modifiability,inherit,inherited,353,"﻿. SOFA API: sofa::core::objectmodel::EmptyData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::core::objectmodel::EmptyData Class Reference . #include <Data.h>. Inheritance diagram for sofa::core::objectmodel::EmptyData:. [legend]. Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< void * >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< void * >; void * m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< void * >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:595,Modifiability,inherit,inherited,595,"﻿. SOFA API: sofa::core::objectmodel::EmptyData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::core::objectmodel::EmptyData Class Reference . #include <Data.h>. Inheritance diagram for sofa::core::objectmodel::EmptyData:. [legend]. Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< void * >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< void * >; void * m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< void * >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:1416,Modifiability,inherit,inherited,1416,"n. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::string ownerClass {""""};  Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< void * >; void * m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< void * >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; void printValue (std::ostream &out) const override;  General case for printing default value. More...;  ; std::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:1559,Modifiability,inherit,inherited,1559," Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< void * >; void * m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< void * >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; void printValue (std::ostream &out) const override;  General case for printing default value. More...;  ; std::string getValueString () const override;  General case for printing value. More...;  ; std::string getDefaultValueString () const override;  General case for printing default value. More...;  ; std::string getValueTypeString () const override;  Get the name of the typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:1690,Modifiability,inherit,inherited,1690," Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< void * >; void * m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< void * >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; void printValue (std::ostream &out) const override;  General case for printing default value. More...;  ; std::string getValueString () const override;  General case for printing value. More...;  ; std::string getDefaultValueString () const override;  General case for printing default value. More...;  ; std::string getValueTypeString () const override;  Get the name of the typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:1907,Modifiability,variab,variable,1907," Owner class. More...;  ; std::string group {""""};  group More...;  ; std::string widget {""""};  widget More...;  ; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ; DataFlags m_dataFlags;  Flags indicating the purpose and behaviour of this Data. More...;  ; Base * m_owner {nullptr};  Return the Base component owning this Data. More...;  ; std::string m_name;  Data name within the Base component. More...;  ; bool m_hasDefaultValue = false;  True if this Data has a default value. More...;  ; DataLink< BaseData > parentData;  Parent Data. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< void * >; void * m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Public Member Functions inherited from sofa::core::objectmodel::Data< void * >;  Data (const Data &)=delete;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const override;  Get info about the value type of the associated variable. More...;  ; bool read (const std::string &s) override;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading strings. More...;  ; bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; void printValue (std::ostream &out) const override;  General case for printing default value. More...;  ; std::string getValueString () const override;  General case for printing value. More...;  ; std::string getDefaultValueString () const override;  General case for printing default value. More...;  ; std::string getValueTypeString () const override;  Get the name of the typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:3660,Modifiability,inherit,inherited,3660,"ValueFrom (const Data< void * > *data);  ; virtual void * * beginEdit ();  ; virtual void * * beginWriteOnly ();  ; virtual void endEdit ();  ; void setValue (const void * &value);  ; const void * & getValue () const;  ; BaseData * getNewInstance () override;  ;  Data (const BaseData::BaseInitData &init);  ;  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; vo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:7760,Modifiability,inherit,inherited,7760,"inked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAutoLink (bool b);  Set whether this data should be autolinked when using the src="""" syntax. More...;  ; void setRequired (bool b);  Set whether the Data has to be set by the user for the owner component to be valid. More...;  ; bool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty fla",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:9082,Modifiability,inherit,inherited,9082,"ainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputs",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:9252,Modifiability,inherit,inherited,9252,"ainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputs",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:9591,Modifiability,inherit,inherited,9591,"ty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . sofacoreobjectmodelEmptyData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:9833,Modifiability,inherit,inherited,9833,"ty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . sofacoreobjectmodelEmptyData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:10046,Modifiability,inherit,inherited,10046,"ty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . sofacoreobjectmodelEmptyData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:4223,Security,access,access,4223,"  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:4355,Security,access,access,4355,"td::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_event-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Event Member List . This is the complete list of members for sofa::core::objectmodel::Event, including all inherited members. Event()sofa::core::objectmodel::Event; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; GetClassName()sofa::core::objectmodel::Eventinlinestatic; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_event.html:2328,Availability,avail,available,2328,"tatic const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Attribute details. ◆ m_handled. bool sofa::core::objectmodel::Event::m_handled. protected . ◆ s_lastEventTypeIndex. size_t sofa::core::objectmodel::Event::s_lastEventTypeIndex = 0. staticprotected . storing the last given id . Constructor details. ◆ Event(). sofa::core::objectmodel::Event::Event ; (; ). ◆ ~Event(). sofa::core::objectmodel::Event::~Event ; (; ). virtual . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::Event::GetClassName ; (; ). inlinestatic . Returnsthe name of the event type. As the method is static the name can be retrieved without instantiation. Must be reimplemented in each subclasse . ◆ getClassName(). virtual const char* sofa::core::objectmodel::Event::getClassName ; (; ); const. inlinevirtual . Returnsthe class name from an instance. Do not override directly. Instead, add the SOFA_EVENT_H in your class definition . ◆ getEventTypeCount(). static size_t sofa::core::objectmodel::Event::getEventTypeCount ; (; ). inlinestatic . Returnsthe total number of events available in SOFA . ◆ getEventTypeIndex(). virtual size_t sofa::core::objectmodel::Event::getEventTypeIndex ; (; ); const. pure virtual . Returnsunique type index for fast Event type comparison with unique indices (see function 'checkEventType') ; Warningthis mechanism will only work for the last derivated type (and not for eventual intermediaries) e.g. for C derivated from B derivated from A, checkEventType will returns true only for C* but false for B* or A* Should be implemented by using macros SOFA_EVENT_H / SOFA_EVENT_CPP . ◆ isHandled(). bool sofa::core::objectmodel::Event::isHandled ; (; ); const. Returns true of the event has been handled. . ◆ setHandled(). void sofa::core::objectmodel::Event::setHandled ; (; ). Tag the event as handled, i.e. the event needs not be propagated further. . sofacoreobjectmodelEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::GUIEvent Member List . This is the complete list of members for sofa::core::objectmodel::GUIEvent, including all inherited members. Event()sofa::core::objectmodel::Event; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; GetClassName()sofa::core::objectmodel::GUIEventinlinestatic; getControlID(void) constsofa::core::objectmodel::GUIEventinline; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getValue(void) constsofa::core::objectmodel::GUIEventinline; getValueName(void) constsofa::core::objectmodel::GUIEventinline; GUIEvent(const char *controlID, const char *valueName, const char *value)sofa::core::objectmodel::GUIEvent; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~GUIEvent() overridesofa::core::objectmodel::GUIEvent. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html:921,Modifiability,inherit,inherited,921,"﻿. SOFA API: sofa::core::objectmodel::GUIEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::GUIEvent Class Reference . #include <GUIEvent.h>; This event notifies about GUI interaction. ; More... Inheritance diagram for sofa::core::objectmodel::GUIEvent:. [legend]; Detailed Description; This event notifies about GUI interaction. . Public Member Functions;  GUIEvent (const char *controlID, const char *valueName, const char *value);  Constructor. More...;  ;  ~GUIEvent () override;  Destructor. More...;  ; const std::string getControlID (void) const;  Get the emitter control ID. More...;  ; const std::string getValueName (void) const;  Get the value name. More...;  ; const std::string getValue (void) const;  Get the value. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ GUIEvent(). sofa::core::objectmodel::GUIEvent::GUIEvent ; (; const char * ; controlID, . const char * ; valueName, . const char * ; value . ). Constructor. . ◆ ~GUIEvent(). sofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html:1393,Modifiability,inherit,inherited,1393,"ent:. [legend]; Detailed Description; This event notifies about GUI interaction. . Public Member Functions;  GUIEvent (const char *controlID, const char *valueName, const char *value);  Constructor. More...;  ;  ~GUIEvent () override;  Destructor. More...;  ; const std::string getControlID (void) const;  Get the emitter control ID. More...;  ; const std::string getValueName (void) const;  Get the value name. More...;  ; const std::string getValue (void) const;  Get the value. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ GUIEvent(). sofa::core::objectmodel::GUIEvent::GUIEvent ; (; const char * ; controlID, . const char * ; valueName, . const char * ; value . ). Constructor. . ◆ ~GUIEvent(). sofa::core::objectmodel::GUIEvent::~GUIEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::GUIEvent::GetClassName ; (; ). inlinestatic . ◆ getControlID(). const std::string sofa::core::objectmodel::GUIEvent::getControlID ; (; void ; ); const. inline . Get the emitter control ID. . ◆ getValue(). const std::string sofa::core::objectmodel::GUIEvent:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html:1571,Modifiability,inherit,inherited,1571,"More...;  ; const std::string getControlID (void) const;  Get the emitter control ID. More...;  ; const std::string getValueName (void) const;  Get the value name. More...;  ; const std::string getValue (void) const;  Get the value. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ GUIEvent(). sofa::core::objectmodel::GUIEvent::GUIEvent ; (; const char * ; controlID, . const char * ; valueName, . const char * ; value . ). Constructor. . ◆ ~GUIEvent(). sofa::core::objectmodel::GUIEvent::~GUIEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::GUIEvent::GetClassName ; (; ). inlinestatic . ◆ getControlID(). const std::string sofa::core::objectmodel::GUIEvent::getControlID ; (; void ; ); const. inline . Get the emitter control ID. . ◆ getValue(). const std::string sofa::core::objectmodel::GUIEvent::getValue ; (; void ; ); const. inline . Get the value. . ◆ getValueName(). const std::string sofa::core::objectmodel::GUIEvent::getValueName ; (; void ; ); const. inline . Get the value name. . sofacoreobjectmodelGUIEvent; Generated on Mon Nov 11 2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html:1666,Modifiability,inherit,inherited,1666,"More...;  ; const std::string getControlID (void) const;  Get the emitter control ID. More...;  ; const std::string getValueName (void) const;  Get the value name. More...;  ; const std::string getValue (void) const;  Get the value. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ GUIEvent(). sofa::core::objectmodel::GUIEvent::GUIEvent ; (; const char * ; controlID, . const char * ; valueName, . const char * ; value . ). Constructor. . ◆ ~GUIEvent(). sofa::core::objectmodel::GUIEvent::~GUIEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::GUIEvent::GetClassName ; (; ). inlinestatic . ◆ getControlID(). const std::string sofa::core::objectmodel::GUIEvent::getControlID ; (; void ; ); const. inline . Get the emitter control ID. . ◆ getValue(). const std::string sofa::core::objectmodel::GUIEvent::getValue ; (; void ; ); const. inline . Get the value. . ◆ getValueName(). const std::string sofa::core::objectmodel::GUIEvent::getValueName ; (; void ; ); const. inline . Get the value name. . sofacoreobjectmodelGUIEvent; Generated on Mon Nov 11 2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_g_u_i_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HapticDeviceEvent Member List . This is the complete list of members for sofa::core::objectmodel::HapticDeviceEvent, including all inherited members. Button1StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; Button2StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; Button3StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; Button4StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; Button5StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; Button6StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; Button7StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; Button8StateMask enum valuesofa::core::objectmodel::HapticDeviceEvent; ButtonsStateMask enum namesofa::core::objectmodel::HapticDeviceEvent; Event()sofa::core::objectmodel::Event; getButton(const int id=0) constsofa::core::objectmodel::HapticDeviceEventinline; getButtonState() constsofa::core::objectmodel::HapticDeviceEventinline; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; GetClassName()sofa::core::objectmodel::HapticDeviceEventinlinestatic; getDeviceId() constsofa::core::objectmodel::HapticDeviceEventinline; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getOrientation(void) constsofa::core::objectmodel::HapticDeviceEventinline; getPosition(void) constsofa::core::objectmodel::HapticDeviceEventinline; getPosX(void) constsofa::core::objectmodel::HapticDeviceEventinline; getPosY(void) constsofa::core::objectmodel::HapticDeviceEventinline; getPosZ(void) constsofa::core::objectmodel::HapticDeviceEventinline; HapticDeviceEvent(const unsigned int id, const sofa::type::Vec3 &position, const sofa::type::Quat< SReal > &orientation, const unsigned char button)sofa::core::objectmodel::HapticDeviceEvent; isHandled",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html:1408,Modifiability,inherit,inherited,1408,"end]; Detailed Description; This event notifies about haptic device interaction. . Public Member Functions;  HapticDeviceEvent (const unsigned int id, const sofa::type::Vec3 &position, const sofa::type::Quat< SReal > &orientation, const unsigned char button);  Constructor. More...;  ;  ~HapticDeviceEvent () override;  Destructor. More...;  ; SReal getPosX (void) const;  Get the device X coordinate. More...;  ; SReal getPosY (void) const;  Get the device Y coordinate. More...;  ; SReal getPosZ (void) const;  Get the device Z coordinate. More...;  ; sofa::type::Vec3 getPosition (void) const;  Get the device coordinates. More...;  ; sofa::type::Quat< SReal > getOrientation (void) const;  Get the device orientation. More...;  ; unsigned char getButtonState () const;  Get the device button state. More...;  ; bool getButton (const int id=0) const;  ; unsigned int getDeviceId () const;  Get the device Id. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ HapticDeviceEvent(). sofa::core::objectmodel::HapticDeviceEvent::HapticDeviceEvent ; (; const unsigned int ; id, . const sofa::type::Vec3 & ; position, . con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html:1880,Modifiability,inherit,inherited,1880,"id) const;  Get the device Y coordinate. More...;  ; SReal getPosZ (void) const;  Get the device Z coordinate. More...;  ; sofa::type::Vec3 getPosition (void) const;  Get the device coordinates. More...;  ; sofa::type::Quat< SReal > getOrientation (void) const;  Get the device orientation. More...;  ; unsigned char getButtonState () const;  Get the device button state. More...;  ; bool getButton (const int id=0) const;  ; unsigned int getDeviceId () const;  Get the device Id. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ HapticDeviceEvent(). sofa::core::objectmodel::HapticDeviceEvent::HapticDeviceEvent ; (; const unsigned int ; id, . const sofa::type::Vec3 & ; position, . const sofa::type::Quat< SReal > & ; orientation, . const unsigned char ; button . ). Constructor. . ◆ ~HapticDeviceEvent(). sofa::core::objectmodel::HapticDeviceEvent::~HapticDeviceEvent ; (; ). override . Destructor. . Function details. ◆ getButton(). bool sofa::core::objectmodel::HapticDeviceEvent::getButton ; (; const int ; id = 0); const. inline . ◆ getButtonState(). unsigned char sofa::core::objectmodel::HapticDeviceEvent::ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html:2058,Modifiability,inherit,inherited,2058,"(void) const;  Get the device orientation. More...;  ; unsigned char getButtonState () const;  Get the device button state. More...;  ; bool getButton (const int id=0) const;  ; unsigned int getDeviceId () const;  Get the device Id. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ HapticDeviceEvent(). sofa::core::objectmodel::HapticDeviceEvent::HapticDeviceEvent ; (; const unsigned int ; id, . const sofa::type::Vec3 & ; position, . const sofa::type::Quat< SReal > & ; orientation, . const unsigned char ; button . ). Constructor. . ◆ ~HapticDeviceEvent(). sofa::core::objectmodel::HapticDeviceEvent::~HapticDeviceEvent ; (; ). override . Destructor. . Function details. ◆ getButton(). bool sofa::core::objectmodel::HapticDeviceEvent::getButton ; (; const int ; id = 0); const. inline . ◆ getButtonState(). unsigned char sofa::core::objectmodel::HapticDeviceEvent::getButtonState ; (; ); const. inline . Get the device button state. . ◆ GetClassName(). static const char* sofa::core::objectmodel::HapticDeviceEvent::GetClassName ; (; ). inlinestatic . ◆ getDeviceId(). unsigned int sofa::core::objectmodel::HapticDev",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html:2153,Modifiability,inherit,inherited,2153,"(void) const;  Get the device orientation. More...;  ; unsigned char getButtonState () const;  Get the device button state. More...;  ; bool getButton (const int id=0) const;  ; unsigned int getDeviceId () const;  Get the device Id. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ HapticDeviceEvent(). sofa::core::objectmodel::HapticDeviceEvent::HapticDeviceEvent ; (; const unsigned int ; id, . const sofa::type::Vec3 & ; position, . const sofa::type::Quat< SReal > & ; orientation, . const unsigned char ; button . ). Constructor. . ◆ ~HapticDeviceEvent(). sofa::core::objectmodel::HapticDeviceEvent::~HapticDeviceEvent ; (; ). override . Destructor. . Function details. ◆ getButton(). bool sofa::core::objectmodel::HapticDeviceEvent::getButton ; (; const int ; id = 0); const. inline . ◆ getButtonState(). unsigned char sofa::core::objectmodel::HapticDeviceEvent::getButtonState ; (; ); const. inline . Get the device button state. . ◆ GetClassName(). static const char* sofa::core::objectmodel::HapticDeviceEvent::GetClassName ; (; ). inlinestatic . ◆ getDeviceId(). unsigned int sofa::core::objectmodel::HapticDev",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_haptic_device_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_data_type_info-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasDataTypeInfo< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasDataTypeInfo< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasDataTypeInfo< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_data_type_info-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_data_type_info-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_class_name-members.html:276,Modifiability,inherit,inherited,276,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasDeprecatedClassName< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasDeprecatedClassName< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasDeprecatedClassName< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_class_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_class_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_short_name-members.html:276,Modifiability,inherit,inherited,276,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasDeprecatedShortName< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasDeprecatedShortName< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasDeprecatedShortName< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_short_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_short_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_template_name-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasDeprecatedTemplateName< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasDeprecatedTemplateName< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasDeprecatedTemplateName< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_template_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_deprecated_template_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_custom_class_name-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasGetCustomClassName< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasGetCustomClassName< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasGetCustomClassName< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_custom_class_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_custom_class_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_custom_template_name-members.html:280,Modifiability,inherit,inherited,280,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasGetCustomTemplateName< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasGetCustomTemplateName< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasGetCustomTemplateName< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_custom_template_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_custom_template_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_default_template_name-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasGetDefaultTemplateName< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasGetDefaultTemplateName< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasGetDefaultTemplateName< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_default_template_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_get_default_template_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_name-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::HasName< T > Member List . This is the complete list of members for sofa::core::objectmodel::HasName< T >, including all inherited members. value enum valuesofa::core::objectmodel::HasName< T >. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_has_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::IdleEvent Member List . This is the complete list of members for sofa::core::objectmodel::IdleEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::core::objectmodel::IdleEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; IdleEvent()sofa::core::objectmodel::IdleEvent; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~IdleEvent() overridesofa::core::objectmodel::IdleEvent. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html:671,Modifiability,inherit,inherited,671,"﻿. SOFA API: sofa::core::objectmodel::IdleEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::IdleEvent Class Reference . #include <IdleEvent.h>; This event is propagated along the objects hierarchy at regular interval. ; More... Inheritance diagram for sofa::core::objectmodel::IdleEvent:. [legend]; Detailed Description; This event is propagated along the objects hierarchy at regular interval. ; AuthorDamien Marchal . Public Member Functions;  IdleEvent ();  ;  ~IdleEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ IdleEvent(). sofa::core::objectmodel::IdleEvent::IdleEvent ; (; ). ◆ ~IdleEvent(). sofa::core::objectmodel::IdleEvent::~IdleEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::IdleEvent::GetClassName ; (; ). inlinestatic . sofacoreobjectmodelIdleEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html:1143,Modifiability,inherit,inherited,1143,"﻿. SOFA API: sofa::core::objectmodel::IdleEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::IdleEvent Class Reference . #include <IdleEvent.h>; This event is propagated along the objects hierarchy at regular interval. ; More... Inheritance diagram for sofa::core::objectmodel::IdleEvent:. [legend]; Detailed Description; This event is propagated along the objects hierarchy at regular interval. ; AuthorDamien Marchal . Public Member Functions;  IdleEvent ();  ;  ~IdleEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ IdleEvent(). sofa::core::objectmodel::IdleEvent::IdleEvent ; (; ). ◆ ~IdleEvent(). sofa::core::objectmodel::IdleEvent::~IdleEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::IdleEvent::GetClassName ; (; ). inlinestatic . sofacoreobjectmodelIdleEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html:1321,Modifiability,inherit,inherited,1321,"﻿. SOFA API: sofa::core::objectmodel::IdleEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::IdleEvent Class Reference . #include <IdleEvent.h>; This event is propagated along the objects hierarchy at regular interval. ; More... Inheritance diagram for sofa::core::objectmodel::IdleEvent:. [legend]; Detailed Description; This event is propagated along the objects hierarchy at regular interval. ; AuthorDamien Marchal . Public Member Functions;  IdleEvent ();  ;  ~IdleEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ IdleEvent(). sofa::core::objectmodel::IdleEvent::IdleEvent ; (; ). ◆ ~IdleEvent(). sofa::core::objectmodel::IdleEvent::~IdleEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::IdleEvent::GetClassName ; (; ). inlinestatic . sofacoreobjectmodelIdleEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html:1416,Modifiability,inherit,inherited,1416,"﻿. SOFA API: sofa::core::objectmodel::IdleEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::IdleEvent Class Reference . #include <IdleEvent.h>; This event is propagated along the objects hierarchy at regular interval. ; More... Inheritance diagram for sofa::core::objectmodel::IdleEvent:. [legend]; Detailed Description; This event is propagated along the objects hierarchy at regular interval. ; AuthorDamien Marchal . Public Member Functions;  IdleEvent ();  ;  ~IdleEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ IdleEvent(). sofa::core::objectmodel::IdleEvent::IdleEvent ; (; ). ◆ ~IdleEvent(). sofa::core::objectmodel::IdleEvent::~IdleEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::IdleEvent::GetClassName ; (; ). inlinestatic . sofacoreobjectmodelIdleEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_idle_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::JoystickEvent Member List . This is the complete list of members for sofa::core::objectmodel::JoystickEvent, including all inherited members. addAxisEvent(AxisEvent *)sofa::core::objectmodel::JoystickEvent; addHatEvent(HatEvent *)sofa::core::objectmodel::JoystickEvent; axisEventssofa::core::objectmodel::JoystickEventprotected; buttonEventsofa::core::objectmodel::JoystickEventprotected; Event()sofa::core::objectmodel::Event; getAxisEvent(const int) constsofa::core::objectmodel::JoystickEvent; getAxisEvents(void) constsofa::core::objectmodel::JoystickEvent; getAxisEventsSize(void) constsofa::core::objectmodel::JoystickEvent; getButton(unsigned int) constsofa::core::objectmodel::JoystickEvent; getButtonEvent(void) constsofa::core::objectmodel::JoystickEvent; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; GetClassName()sofa::core::objectmodel::JoystickEventinlinestatic; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getHatEvent(const int) constsofa::core::objectmodel::JoystickEvent; getHatEvents(void) constsofa::core::objectmodel::JoystickEvent; getHatEventsSize(void) constsofa::core::objectmodel::JoystickEvent; hatEventssofa::core::objectmodel::JoystickEventprotected; isHandled() constsofa::core::objectmodel::Event; JoystickEvent()sofa::core::objectmodel::JoystickEvent; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setButtonEvent(ButtonEvent *)sofa::core::objectmodel::JoystickEvent; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~JoystickEvent() overridesofa::core::objectmodel::JoystickEvent. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html:1213,Modifiability,inherit,inherited,1213,"679a9147. Open source framework for multi-physics simuation. Classes |; List of all members . sofa::core::objectmodel::JoystickEvent Class Reference . #include <JoystickEvent.h>; JoystickEvent Class. ; More... Inheritance diagram for sofa::core::objectmodel::JoystickEvent:. [legend]; Detailed Description; JoystickEvent Class. . Classes; class  AxisEvent;  Implements an event that notifies about axis positions (like analog controls of a joystick). The axis position is normalized so values are always in the range [-1, 1]. More...;  ; class  ButtonEvent;  Implements the button event for joysticks. More...;  ; class  HatEvent;  Implements an event notifying changes about a directionnal hat on a device (like a joystick). More...;  . Public Member Functions; Axis; const AxisEvent * getAxisEvent (const int) const;  ; const std::vector< AxisEvent * > & getAxisEvents (void) const;  ; unsigned int getAxisEventsSize (void) const;  ; void addAxisEvent (AxisEvent *);  ; Button; ButtonEvent * getButtonEvent (void) const;  ; bool getButton (unsigned int) const;  ; void setButtonEvent (ButtonEvent *);  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Hat; std::vector< AxisEvent * > axisEvents;  State of the Analogic Pad. More...;  ; ButtonEvent * buttonEvent;  State of the Joystick Buttons. More...;  ; std::vector< HatEvent * > hatEvents;  State of the directional cross. More...;  ; const HatEvent * getHatEvent (const int) const;  ; const std::vector< HatEvent * > & getHatEvents (void) const;  ; unsigned int getHatEventsSize (void) const;  ; void addHatEvent (HatEvent *);  ;  JoystickEvent ();  default constructor. More...;  ;  ~JoystickEvent",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html:2221,Modifiability,inherit,inherited,2221,"setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Hat; std::vector< AxisEvent * > axisEvents;  State of the Analogic Pad. More...;  ; ButtonEvent * buttonEvent;  State of the Joystick Buttons. More...;  ; std::vector< HatEvent * > hatEvents;  State of the directional cross. More...;  ; const HatEvent * getHatEvent (const int) const;  ; const std::vector< HatEvent * > & getHatEvents (void) const;  ; unsigned int getHatEventsSize (void) const;  ; void addHatEvent (HatEvent *);  ;  JoystickEvent ();  default constructor. More...;  ;  ~JoystickEvent () override;  default destructor. More...;  ; static const char * GetClassName ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Attribute details. ◆ axisEvents. std::vector< AxisEvent* > sofa::core::objectmodel::JoystickEvent::axisEvents. protected . State of the Analogic Pad. . ◆ buttonEvent. ButtonEvent* sofa::core::objectmodel::JoystickEvent::buttonEvent. protected . State of the Joystick Buttons. . ◆ hatEvents. std::vector< HatEvent* > sofa::core::objectmodel::JoystickEvent::hatEvents. protected . State of the directional cross. . Constructor details. ◆ JoystickEvent(). sofa::core::objectmodel::JoystickEvent::JoystickEvent ; (; ). default constructor. . ◆ ~JoystickEvent(). sofa::core::objectmodel::JoystickEvent::~JoystickEvent ; (; ). override . default destructor. . Function details. ◆ addAxisEvent(). void sofa::c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html:2316,Modifiability,inherit,inherited,2316,"setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Hat; std::vector< AxisEvent * > axisEvents;  State of the Analogic Pad. More...;  ; ButtonEvent * buttonEvent;  State of the Joystick Buttons. More...;  ; std::vector< HatEvent * > hatEvents;  State of the directional cross. More...;  ; const HatEvent * getHatEvent (const int) const;  ; const std::vector< HatEvent * > & getHatEvents (void) const;  ; unsigned int getHatEventsSize (void) const;  ; void addHatEvent (HatEvent *);  ;  JoystickEvent ();  default constructor. More...;  ;  ~JoystickEvent () override;  default destructor. More...;  ; static const char * GetClassName ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Attribute details. ◆ axisEvents. std::vector< AxisEvent* > sofa::core::objectmodel::JoystickEvent::axisEvents. protected . State of the Analogic Pad. . ◆ buttonEvent. ButtonEvent* sofa::core::objectmodel::JoystickEvent::buttonEvent. protected . State of the Joystick Buttons. . ◆ hatEvents. std::vector< HatEvent* > sofa::core::objectmodel::JoystickEvent::hatEvents. protected . State of the directional cross. . Constructor details. ◆ JoystickEvent(). sofa::core::objectmodel::JoystickEvent::JoystickEvent ; (; ). default constructor. . ◆ ~JoystickEvent(). sofa::core::objectmodel::JoystickEvent::~JoystickEvent ; (; ). override . default destructor. . Function details. ◆ addAxisEvent(). void sofa::c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html:2474,Modifiability,inherit,inherited,2474, () const;  ; virtual size_t getEventTypeIndex () const =0;  . Hat; std::vector< AxisEvent * > axisEvents;  State of the Analogic Pad. More...;  ; ButtonEvent * buttonEvent;  State of the Joystick Buttons. More...;  ; std::vector< HatEvent * > hatEvents;  State of the directional cross. More...;  ; const HatEvent * getHatEvent (const int) const;  ; const std::vector< HatEvent * > & getHatEvents (void) const;  ; unsigned int getHatEventsSize (void) const;  ; void addHatEvent (HatEvent *);  ;  JoystickEvent ();  default constructor. More...;  ;  ~JoystickEvent () override;  default destructor. More...;  ; static const char * GetClassName ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Attribute details. ◆ axisEvents. std::vector< AxisEvent* > sofa::core::objectmodel::JoystickEvent::axisEvents. protected . State of the Analogic Pad. . ◆ buttonEvent. ButtonEvent* sofa::core::objectmodel::JoystickEvent::buttonEvent. protected . State of the Joystick Buttons. . ◆ hatEvents. std::vector< HatEvent* > sofa::core::objectmodel::JoystickEvent::hatEvents. protected . State of the directional cross. . Constructor details. ◆ JoystickEvent(). sofa::core::objectmodel::JoystickEvent::JoystickEvent ; (; ). default constructor. . ◆ ~JoystickEvent(). sofa::core::objectmodel::JoystickEvent::~JoystickEvent ; (; ). override . default destructor. . Function details. ◆ addAxisEvent(). void sofa::core::objectmodel::JoystickEvent::addAxisEvent ; (; JoystickEvent::AxisEvent * ; aEvent). ◆ addHatEvent(). void sofa::core::objectmodel::JoystickEvent::addHatEvent ; (; JoystickEvent::HatEvent * ; hEvent). ◆ getAxisEv,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_axis_event-members.html:270,Modifiability,inherit,inherited,270,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::JoystickEvent::AxisEvent Member List . This is the complete list of members for sofa::core::objectmodel::JoystickEvent::AxisEvent, including all inherited members. AxisEvent(const int, const float)sofa::core::objectmodel::JoystickEvent::AxisEvent; getClassName() constsofa::core::objectmodel::JoystickEvent::AxisEventinlinevirtual; getIndex() constsofa::core::objectmodel::JoystickEvent::AxisEvent; getValue() constsofa::core::objectmodel::JoystickEvent::AxisEvent; ~AxisEvent()sofa::core::objectmodel::JoystickEvent::AxisEventvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_axis_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_axis_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_button_event-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::JoystickEvent::ButtonEvent Member List . This is the complete list of members for sofa::core::objectmodel::JoystickEvent::ButtonEvent, including all inherited members. ButtonEvent(const int buttonStates=0)sofa::core::objectmodel::JoystickEvent::ButtonEvent; getButton(const int) constsofa::core::objectmodel::JoystickEvent::ButtonEvent; getClassName() constsofa::core::objectmodel::JoystickEvent::ButtonEventinlinevirtual; setButtons(const int)sofa::core::objectmodel::JoystickEvent::ButtonEvent; ~ButtonEvent()sofa::core::objectmodel::JoystickEvent::ButtonEventvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_button_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_button_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_hat_event-members.html:268,Modifiability,inherit,inherited,268,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::JoystickEvent::HatEvent Member List . This is the complete list of members for sofa::core::objectmodel::JoystickEvent::HatEvent, including all inherited members. CENTERED enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; DOWN enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; DOWN_LEFT enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; DOWN_RIGHT enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; getClassName() constsofa::core::objectmodel::JoystickEvent::HatEventinlinevirtual; getIndex() constsofa::core::objectmodel::JoystickEvent::HatEvent; getState() constsofa::core::objectmodel::JoystickEvent::HatEvent; HatEvent(const int, const State)sofa::core::objectmodel::JoystickEvent::HatEvent; LEFT enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; RIGHT enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; State enum namesofa::core::objectmodel::JoystickEvent::HatEvent; UP enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; UP_LEFT enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; UP_RIGHT enum valuesofa::core::objectmodel::JoystickEvent::HatEvent; ~HatEvent()sofa::core::objectmodel::JoystickEvent::HatEventvirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_hat_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_joystick_event_1_1_hat_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::KeypressedEvent Member List . This is the complete list of members for sofa::core::objectmodel::KeypressedEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::core::objectmodel::KeypressedEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getKey() constsofa::core::objectmodel::KeypressedEvent; isHandled() constsofa::core::objectmodel::Event; KeypressedEvent(char)sofa::core::objectmodel::KeypressedEvent; m_charsofa::core::objectmodel::KeypressedEventprotected; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~KeypressedEvent() overridesofa::core::objectmodel::KeypressedEvent. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html:724,Modifiability,inherit,inherited,724,"﻿. SOFA API: sofa::core::objectmodel::KeypressedEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeypressedEvent Class Reference . #include <KeypressedEvent.h>; This event is propagated along the objects when a key on the keyboard is pressed. ; More... Inheritance diagram for sofa::core::objectmodel::KeypressedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is pressed. ; AuthorFrancois Faure . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeypressedEvent (char);  Constructor. More...;  ;  ~KeypressedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key pressed. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeypressedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeypressedEvent(). sofa::core::objectmodel::KeypressedEvent::KeypressedEvent",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html:1006,Modifiability,inherit,inherited,1006,"ss Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeypressedEvent Class Reference . #include <KeypressedEvent.h>; This event is propagated along the objects when a key on the keyboard is pressed. ; More... Inheritance diagram for sofa::core::objectmodel::KeypressedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is pressed. ; AuthorFrancois Faure . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeypressedEvent (char);  Constructor. More...;  ;  ~KeypressedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key pressed. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeypressedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeypressedEvent(). sofa::core::objectmodel::KeypressedEvent::KeypressedEvent ; (; char ; c). Constructor. . ◆ ~KeypressedEvent(). so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html:1478,Modifiability,inherit,inherited,1478,"pressedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is pressed. ; AuthorFrancois Faure . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeypressedEvent (char);  Constructor. More...;  ;  ~KeypressedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key pressed. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeypressedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeypressedEvent(). sofa::core::objectmodel::KeypressedEvent::KeypressedEvent ; (; char ; c). Constructor. . ◆ ~KeypressedEvent(). sofa::core::objectmodel::KeypressedEvent::~KeypressedEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::KeypressedEvent::GetClassName ; (; ). inlinestatic . ◆ getKey(). char sofa::core::objectmodel::KeypressedEvent::getKey ; (; ); const. Return the key pressed. . sofacoreobjectmodelKeypressedEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html:1663,Modifiability,inherit,inherited,1663,"pressedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is pressed. ; AuthorFrancois Faure . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeypressedEvent (char);  Constructor. More...;  ;  ~KeypressedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key pressed. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeypressedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeypressedEvent(). sofa::core::objectmodel::KeypressedEvent::KeypressedEvent ; (; char ; c). Constructor. . ◆ ~KeypressedEvent(). sofa::core::objectmodel::KeypressedEvent::~KeypressedEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::KeypressedEvent::GetClassName ; (; ). inlinestatic . ◆ getKey(). char sofa::core::objectmodel::KeypressedEvent::getKey ; (; ); const. Return the key pressed. . sofacoreobjectmodelKeypressedEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keypressed_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::KeyreleasedEvent Member List . This is the complete list of members for sofa::core::objectmodel::KeyreleasedEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::core::objectmodel::KeyreleasedEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getKey() constsofa::core::objectmodel::KeyreleasedEvent; isHandled() constsofa::core::objectmodel::Event; KeyreleasedEvent(char)sofa::core::objectmodel::KeyreleasedEvent; m_charsofa::core::objectmodel::KeyreleasedEventprotected; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~KeyreleasedEvent() overridesofa::core::objectmodel::KeyreleasedEvent. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:417,Deployability,release,released,417,"﻿. SOFA API: sofa::core::objectmodel::KeyreleasedEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeyreleasedEvent Class Reference . #include <KeyreleasedEvent.h>; This event is propagated along the objects when a key on the keyboard is released. ; More... Inheritance diagram for sofa::core::objectmodel::KeyreleasedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:610,Deployability,release,released,610,"﻿. SOFA API: sofa::core::objectmodel::KeyreleasedEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeyreleasedEvent Class Reference . #include <KeyreleasedEvent.h>; This event is propagated along the objects when a key on the keyboard is released. ; More... Inheritance diagram for sofa::core::objectmodel::KeyreleasedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:976,Deployability,release,released,976,"﻿. SOFA API: sofa::core::objectmodel::KeyreleasedEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeyreleasedEvent Class Reference . #include <KeyreleasedEvent.h>; This event is propagated along the objects when a key on the keyboard is released. ; More... Inheritance diagram for sofa::core::objectmodel::KeyreleasedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:2402,Deployability,release,released,2402,"; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEvent::KeyreleasedEvent ; (; char ; c). Constructor. . ◆ ~KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEvent::~KeyreleasedEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::KeyreleasedEvent::GetClassName ; (; ). inlinestatic . ◆ getKey(). char sofa::core::objectmodel::KeyreleasedEvent::getKey ; (; ); const. Return the key released. . sofacoreobjectmodelKeyreleasedEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:738,Modifiability,inherit,inherited,738,"﻿. SOFA API: sofa::core::objectmodel::KeyreleasedEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeyreleasedEvent Class Reference . #include <KeyreleasedEvent.h>; This event is propagated along the objects when a key on the keyboard is released. ; More... Inheritance diagram for sofa::core::objectmodel::KeyreleasedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:1023,Modifiability,inherit,inherited,1023,"SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeyreleasedEvent Class Reference . #include <KeyreleasedEvent.h>; This event is propagated along the objects when a key on the keyboard is released. ; More... Inheritance diagram for sofa::core::objectmodel::KeyreleasedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEvent::KeyreleasedEvent ; (; char ; c). Constructor. . ◆ ~KeyreleasedEvent(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:1495,Modifiability,inherit,inherited,1495,"[legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEvent::KeyreleasedEvent ; (; char ; c). Constructor. . ◆ ~KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEvent::~KeyreleasedEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::KeyreleasedEvent::GetClassName ; (; ). inlinestatic . ◆ getKey(). char sofa::core::objectmodel::KeyreleasedEvent::getKey ; (; ); const. Return the key released. . sofacoreobjectmodelKeyreleasedEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:1680,Modifiability,inherit,inherited,1680,"; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEvent::KeyreleasedEvent ; (; char ; c). Constructor. . ◆ ~KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEvent::~KeyreleasedEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::KeyreleasedEvent::GetClassName ; (; ). inlinestatic . ◆ getKey(). char sofa::core::objectmodel::KeyreleasedEvent::getKey ; (; ); const. Return the key released. . sofacoreobjectmodelKeyreleasedEvent; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html:479,Usability,clear,clear,479,"﻿. SOFA API: sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Class Template Reference . #include <Link.h>. Static Public Member Functions; static void resize (T &c, size_t newsize);  ; static void clear (T &c);  ; static std::size_t add (T &c, TDestPtr v);  ; static std::size_t find (const T &c, TDestPtr v);  ; static void remove (T &c, std::size_t index);  . Function details. ◆ add(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::add ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ clear(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::clear ; (; T & ; c). inlinestatic . ◆ find(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::find ; (; const T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ remove(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::remove ; (; T & ; c, . std::size_t ; index . ). inlinestatic . ◆ resize(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::resize ; (; T & ; c, . size_t ; newsize . ). inlinestatic . sofacoreobjectmodelLinkTraitsContainer< TDestType, TDestPtr, TValueType, false >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html:898,Usability,clear,clear,898,"﻿. SOFA API: sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Class Template Reference . #include <Link.h>. Static Public Member Functions; static void resize (T &c, size_t newsize);  ; static void clear (T &c);  ; static std::size_t add (T &c, TDestPtr v);  ; static std::size_t find (const T &c, TDestPtr v);  ; static void remove (T &c, std::size_t index);  . Function details. ◆ add(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::add ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ clear(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::clear ; (; T & ; c). inlinestatic . ◆ find(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::find ; (; const T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ remove(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::remove ; (; T & ; c, . std::size_t ; index . ). inlinestatic . ◆ resize(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::resize ; (; T & ; c, . size_t ; newsize . ). inlinestatic . sofacoreobjectmodelLinkTraitsContainer< TDestType, TDestPtr, TValueType, false >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html:1072,Usability,clear,clear,1072,"﻿. SOFA API: sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Class Template Reference . #include <Link.h>. Static Public Member Functions; static void resize (T &c, size_t newsize);  ; static void clear (T &c);  ; static std::size_t add (T &c, TDestPtr v);  ; static std::size_t find (const T &c, TDestPtr v);  ; static void remove (T &c, std::size_t index);  . Function details. ◆ add(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::add ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ clear(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::clear ; (; T & ; c). inlinestatic . ◆ find(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::find ; (; const T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ remove(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::remove ; (; T & ; c, . std::size_t ; index . ). inlinestatic . ◆ resize(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >::resize ; (; T & ; c, . size_t ; newsize . ). inlinestatic . sofacoreobjectmodelLinkTraitsContainer< TDestType, TDestPtr, TValueType, false >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html:431,Usability,clear,clear,431,"﻿. SOFA API: sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Class Template Reference . #include <Link.h>. Static Public Member Functions; static void clear (T &c);  ; static std::size_t add (T &c, TDestPtr v);  ; static std::size_t addBegin (T &c, TDestPtr v);  ; static std::size_t find (const T &c, TDestPtr v);  ; static void remove (T &c, std::size_t index);  . Function details. ◆ add(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::add ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ addBegin(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::addBegin ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ clear(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::clear ; (; T & ; c). inlinestatic . ◆ find(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::find ; (; const T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ remove(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::remove ; (; T & ; c, . std::size_t ; index . ). inlinestatic . sofacoreobjectmodelLinkTraitsContainer< TDestType, TDestPtr, TValueType, true >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html:1143,Usability,clear,clear,1143,"﻿. SOFA API: sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Class Template Reference . #include <Link.h>. Static Public Member Functions; static void clear (T &c);  ; static std::size_t add (T &c, TDestPtr v);  ; static std::size_t addBegin (T &c, TDestPtr v);  ; static std::size_t find (const T &c, TDestPtr v);  ; static void remove (T &c, std::size_t index);  . Function details. ◆ add(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::add ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ addBegin(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::addBegin ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ clear(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::clear ; (; T & ; c). inlinestatic . ◆ find(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::find ; (; const T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ remove(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::remove ; (; T & ; c, . std::size_t ; index . ). inlinestatic . sofacoreobjectmodelLinkTraitsContainer< TDestType, TDestPtr, TValueType, true >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html:1316,Usability,clear,clear,1316,"﻿. SOFA API: sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Class Template Reference . #include <Link.h>. Static Public Member Functions; static void clear (T &c);  ; static std::size_t add (T &c, TDestPtr v);  ; static std::size_t addBegin (T &c, TDestPtr v);  ; static std::size_t find (const T &c, TDestPtr v);  ; static void remove (T &c, std::size_t index);  . Function details. ◆ add(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::add ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ addBegin(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::addBegin ; (; T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ clear(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::clear ; (; T & ; c). inlinestatic . ◆ find(). template<class TDestType , class TDestPtr , class TValueType > . static std::size_t sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::find ; (; const T & ; c, . TDestPtr ; v . ). inlinestatic . ◆ remove(). template<class TDestType , class TDestPtr , class TValueType > . static void sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >::remove ; (; T & ; c, . std::size_t ; index . ). inlinestatic . sofacoreobjectmodelLinkTraitsContainer< TDestType, TDestPtr, TValueType, true >; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_01_t_value_type_00_01true_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_32d6d50c3570276461072c49bb55b5e8.html:342,Modifiability,inherit,inherited,342,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >, including all inherited members. add(T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; addBegin(T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; clear(T &c)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; find(const T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; remove(T &c, std::size_t index)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; T typedefsofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_32d6d50c3570276461072c49bb55b5e8.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_32d6d50c3570276461072c49bb55b5e8.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_32d6d50c3570276461072c49bb55b5e8.html:606,Usability,clear,clear,606,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >, including all inherited members. add(T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; addBegin(T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; clear(T &c)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; find(const T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; remove(T &c, std::size_t index)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >inlinestatic; T typedefsofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_32d6d50c3570276461072c49bb55b5e8.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_32d6d50c3570276461072c49bb55b5e8.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_d676823968d82043c559156e041c5978.html:344,Modifiability,inherit,inherited,344,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >, including all inherited members. add(T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; clear(T &c)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; find(const T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; remove(T &c, std::size_t index)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; resize(T &c, size_t newsize)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; T typedefsofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_d676823968d82043c559156e041c5978.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_d676823968d82043c559156e041c5978.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_d676823968d82043c559156e041c5978.html:484,Usability,clear,clear,484,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >, including all inherited members. add(T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; clear(T &c)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; find(const T &c, TDestPtr v)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; remove(T &c, std::size_t index)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; resize(T &c, size_t newsize)sofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >inlinestatic; T typedefsofa::core::objectmodel::LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_d676823968d82043c559156e041c5978.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_container_3_01_t_dest_type_00_01_t_dest_ptr_00_d676823968d82043c559156e041c5978.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_dest_ptr_3_01_t_dest_type_00_01false_01_4-members.html:296,Modifiability,inherit,inherited,296,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsDestPtr< TDestType, false > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsDestPtr< TDestType, false >, including all inherited members. get(T p)sofa::core::objectmodel::LinkTraitsDestPtr< TDestType, false >inlinestatic; T typedefsofa::core::objectmodel::LinkTraitsDestPtr< TDestType, false >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_dest_ptr_3_01_t_dest_type_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_dest_ptr_3_01_t_dest_type_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_dest_ptr_3_01_t_dest_type_00_01true_01_4-members.html:294,Modifiability,inherit,inherited,294,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsDestPtr< TDestType, true > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsDestPtr< TDestType, true >, including all inherited members. get(const T &p)sofa::core::objectmodel::LinkTraitsDestPtr< TDestType, true >inlinestatic; T typedefsofa::core::objectmodel::LinkTraitsDestPtr< TDestType, true >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_dest_ptr_3_01_t_dest_type_00_01true_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_dest_ptr_3_01_t_dest_type_00_01true_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_00d3c2ea0645d755b27aa8f467b6a99f01.html:344,Modifiability,inherit,inherited,344,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, false > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >, including all inherited members. get(const T &v)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >inlinestatic; path(const T &, std::string &)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >inlinestatic; set(T &v, const TDestPtr &ptr)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >inlinestatic; setPath(T &, const std::string &)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >inlinestatic; T typedefsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_00d3c2ea0645d755b27aa8f467b6a99f01.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_00d3c2ea0645d755b27aa8f467b6a99f01.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_00f6aeddd0847050d8fee1d6f1ed15d52d.html:342,Modifiability,inherit,inherited,342,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true > Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >, including all inherited members. get(const T &v)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >inlinestatic; path(const T &v, std::string &str)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >inlinestatic; set(T &v, const TDestPtr &ptr)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >inlinestatic; setPath(T &v, const std::string &name)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >inlinestatic; TraitsDestPtr typedefsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_00f6aeddd0847050d8fee1d6f1ed15d52d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_00f6aeddd0847050d8fee1d6f1ed15d52d.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::MouseEvent Member List . This is the complete list of members for sofa::core::objectmodel::MouseEvent, including all inherited members. AnyExtraButtonPressed enum valuesofa::core::objectmodel::MouseEvent; AnyExtraButtonReleased enum valuesofa::core::objectmodel::MouseEvent; Event()sofa::core::objectmodel::Event; GetClassName()sofa::core::objectmodel::MouseEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getPosX(void) constsofa::core::objectmodel::MouseEventinline; getPosY(void) constsofa::core::objectmodel::MouseEventinline; getState(void) constsofa::core::objectmodel::MouseEventinline; getWheelDelta(void) constsofa::core::objectmodel::MouseEventinline; isHandled() constsofa::core::objectmodel::Event; LeftPressed enum valuesofa::core::objectmodel::MouseEvent; LeftReleased enum valuesofa::core::objectmodel::MouseEvent; m_handledsofa::core::objectmodel::Eventprotected; MiddlePressed enum valuesofa::core::objectmodel::MouseEvent; MiddleReleased enum valuesofa::core::objectmodel::MouseEvent; MouseEvent(State state, int wheelDelta=0)sofa::core::objectmodel::MouseEvent; MouseEvent(State state, int posX, int posY)sofa::core::objectmodel::MouseEvent; Move enum valuesofa::core::objectmodel::MouseEvent; Reset enum valuesofa::core::objectmodel::MouseEvent; RightPressed enum valuesofa::core::objectmodel::MouseEvent; RightReleased enum valuesofa::core::objectmodel::MouseEvent; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; State enum namesofa::core::objectmodel::MouseEvent; Wheel enum valuesofa::core::objectmodel::MouseEvent; ~Event()sofa::core::objectmodel::Eventvirtual; ~MouseEvent() overridesofa::core::objectmodel::MouseEven",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html:752,Modifiability,inherit,inherited,752,"﻿. SOFA API: sofa::core::objectmodel::MouseEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::MouseEvent Class Reference . #include <MouseEvent.h>; MouseEvent Class. ; More... Inheritance diagram for sofa::core::objectmodel::MouseEvent:. [legend]; Detailed Description; MouseEvent Class. ; Implements an Event that notifies about a Mouse Interaction. . Public Member Functions;  MouseEvent (State state, int wheelDelta=0);  Wheel Mouse Event constructor. More...;  ;  MouseEvent (State state, int posX, int posY);  Default constructor. More...;  ;  ~MouseEvent () override;  Default destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Accessors; int getPosX (void) const;  ; int getPosY (void) const;  ; int getWheelDelta (void) const;  ; State getState (void) const;  ; static const char * GetClassName ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Constructor details. ◆ MouseEvent() [1/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; wheelDelta = 0 . ). Wheel Mouse Event constructor. . ◆ MouseEvent() [2/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; posX",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html:1348,Modifiability,inherit,inherited,1348,"t that notifies about a Mouse Interaction. . Public Member Functions;  MouseEvent (State state, int wheelDelta=0);  Wheel Mouse Event constructor. More...;  ;  MouseEvent (State state, int posX, int posY);  Default constructor. More...;  ;  ~MouseEvent () override;  Default destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Accessors; int getPosX (void) const;  ; int getPosY (void) const;  ; int getWheelDelta (void) const;  ; State getState (void) const;  ; static const char * GetClassName ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Constructor details. ◆ MouseEvent() [1/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; wheelDelta = 0 . ). Wheel Mouse Event constructor. . ◆ MouseEvent() [2/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; posX, . int ; posY . ). Default constructor. . ◆ ~MouseEvent(). sofa::core::objectmodel::MouseEvent::~MouseEvent ; (; ). override . Default destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::MouseEvent::GetClassName ; (; ). inlinestatic . ◆ getPosX(). int sofa::core::objectmodel::MouseEvent::getPosX ; (; void ; ); const. inline . ◆ getPosY(). int sofa::core::objectmodel::MouseEvent::get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html:1443,Modifiability,inherit,inherited,1443,"t that notifies about a Mouse Interaction. . Public Member Functions;  MouseEvent (State state, int wheelDelta=0);  Wheel Mouse Event constructor. More...;  ;  MouseEvent (State state, int posX, int posY);  Default constructor. More...;  ;  ~MouseEvent () override;  Default destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Accessors; int getPosX (void) const;  ; int getPosY (void) const;  ; int getWheelDelta (void) const;  ; State getState (void) const;  ; static const char * GetClassName ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Constructor details. ◆ MouseEvent() [1/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; wheelDelta = 0 . ). Wheel Mouse Event constructor. . ◆ MouseEvent() [2/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; posX, . int ; posY . ). Default constructor. . ◆ ~MouseEvent(). sofa::core::objectmodel::MouseEvent::~MouseEvent ; (; ). override . Default destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::MouseEvent::GetClassName ; (; ). inlinestatic . ◆ getPosX(). int sofa::core::objectmodel::MouseEvent::getPosX ; (; void ; ); const. inline . ◆ getPosY(). int sofa::core::objectmodel::MouseEvent::get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html:1601,Modifiability,inherit,inherited,1601,"nstructor. More...;  ;  ~MouseEvent () override;  Default destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Accessors; int getPosX (void) const;  ; int getPosY (void) const;  ; int getWheelDelta (void) const;  ; State getState (void) const;  ; static const char * GetClassName ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Constructor details. ◆ MouseEvent() [1/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; wheelDelta = 0 . ). Wheel Mouse Event constructor. . ◆ MouseEvent() [2/2]. sofa::core::objectmodel::MouseEvent::MouseEvent ; (; State ; state, . int ; posX, . int ; posY . ). Default constructor. . ◆ ~MouseEvent(). sofa::core::objectmodel::MouseEvent::~MouseEvent ; (; ). override . Default destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::MouseEvent::GetClassName ; (; ). inlinestatic . ◆ getPosX(). int sofa::core::objectmodel::MouseEvent::getPosX ; (; void ; ); const. inline . ◆ getPosY(). int sofa::core::objectmodel::MouseEvent::getPosY ; (; void ; ); const. inline . ◆ getState(). State sofa::core::objectmodel::MouseEvent::getState ; (; void ; ); const. inline . ◆ getWheelDelta(). int sofa::core::objectmodel::MouseEvent::getWheelDelta ; (; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_mouse_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html:9128,Deployability,update,updateCounter,9128,"line; setFlag(LinkFlagsEnum flag, bool b)sofa::core::objectmodel::BaseLinkinline; setHelp(const std::string &val)sofa::core::objectmodel::BaseLinkinline; setLinkedBase(Base *link)sofa::core::objectmodel::BaseLink; setName(const std::string &name)sofa::core::objectmodel::BaseLinkinline; setOwner(OwnerType *owner)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; sofa::core::objectmodel::BaseLink::setOwner(Base *owner)sofa::core::objectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; setValidator(ValidatorFn fn)sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >static; storePath() constsofa::core::objectmodel::BaseLinkinline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; TraitsContainer typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; TraitsDestPtr typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; TraitsValueType typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; ValueType typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~MultiLink()sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html:9193,Deployability,update,updateLinks,9193,"line; setFlag(LinkFlagsEnum flag, bool b)sofa::core::objectmodel::BaseLinkinline; setHelp(const std::string &val)sofa::core::objectmodel::BaseLinkinline; setLinkedBase(Base *link)sofa::core::objectmodel::BaseLink; setName(const std::string &name)sofa::core::objectmodel::BaseLinkinline; setOwner(OwnerType *owner)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; sofa::core::objectmodel::BaseLink::setOwner(Base *owner)sofa::core::objectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; setValidator(ValidatorFn fn)sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >static; storePath() constsofa::core::objectmodel::BaseLinkinline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; TraitsContainer typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; TraitsDestPtr typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; TraitsValueType typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; ValueType typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~MultiLink()sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html:306,Modifiability,inherit,inherited,306,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags > Member List . This is the complete list of members for sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >, including all inherited members. ActiveFlagssofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >static; add(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; add(DestPtr v, const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; sofa::core::objectmodel::BaseLink::add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; addBegin(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; added(DestPtr val, std::size_t index)sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inlineprotectedvirtual; addPath(const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; begin() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; clear()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; const_iterator typedefsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; const_reverse_iterator typedefsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; Container typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html:1422,Usability,clear,clear,1422,"tatic; add(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; add(DestPtr v, const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; sofa::core::objectmodel::BaseLink::add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; addBegin(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; added(DestPtr val, std::size_t index)sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inlineprotectedvirtual; addPath(const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; begin() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; clear()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; const_iterator typedefsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; const_reverse_iterator typedefsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; Container typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateStringData(BaseData *data)sofa::core::objectmodel::BaseLinkstatic; CreateStringPath(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; DestPtr typedefsofa::core::objectmodel::MultiLink< TOwnerType, TD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:3834,Deployability,update,updateLinks,3834,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:4920,Deployability,update,updateCounter,4920,"ze_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; static constexpr unsigned ActiveFlags;  ; static constexpr bool IsStrongLink;  ; static constexpr bool IsMultiLink;  ; static constexpr bool StorePath;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:2949,Integrability,message,message,2949,"ed from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  . Public Member Functions;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:3019,Integrability,message,message,3019,"tor end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:951,Modifiability,inherit,inherited,951," Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags > Class Template Reference . #include <Link.h>; Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) ; More... Inheritance diagram for sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >:. [legend]; Detailed Description; template<class TOwnerType, class TDestType, unsigned TFlags>; class sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) . Protected Attributes; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; OwnerType * m_owner;  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  . Public Member Functions;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator ren",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:1124,Modifiability,inherit,inherited,1124," Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags > Class Template Reference . #include <Link.h>; Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) ; More... Inheritance diagram for sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >:. [legend]; Detailed Description; template<class TOwnerType, class TDestType, unsigned TFlags>; class sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) . Protected Attributes; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; OwnerType * m_owner;  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  . Public Member Functions;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator ren",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:1672,Modifiability,inherit,inherited,1672,"ed from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  . Public Member Functions;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:2652,Modifiability,inherit,inherited,2652,"ed from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  . Public Member Functions;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:3936,Modifiability,variab,variable,3936,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:4038,Modifiability,variab,variable,4038,"g &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:4149,Modifiability,variab,variable,4149,"More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; stati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:4682,Modifiability,inherit,inherited,4682,"ze_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; static constexpr unsigned ActiveFlags;  ; static constexpr bool IsStrongLink;  ; static constexpr bool IsMultiLink;  ; static constexpr bool StorePath;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:4865,Modifiability,inherit,inherited,4865,"ze_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; static constexpr unsigned ActiveFlags;  ; static constexpr bool IsStrongLink;  ; static constexpr bool IsMultiLink;  ; static constexpr bool StorePath;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:4997,Modifiability,inherit,inherited,4997,"k. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; static constexpr unsigned ActiveFlags;  ; static constexpr bool IsStrongLink;  ; static constexpr bool IsMultiLink;  ; static constexpr bool StorePath;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  . Attribute details. ◆ m_validator. template<class TOwnerType , class TDestType , unsigned TFlags> . ValidatorFn sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >::m_validator. protected . Constructor details. ◆ MultiLink() [1/3]. template<class TOwnerType , class TDestType , unsigned TFlags> . sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >::MultiLink ; (; ). inline . ◆ MultiLink() [2/3]. template<class TOwnerType , class TDestType , unsigned TFlags> . sofa::core::objectmodel::MultiLink<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:5289,Modifiability,inherit,inherited,5289,"k. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; static constexpr unsigned ActiveFlags;  ; static constexpr bool IsStrongLink;  ; static constexpr bool IsMultiLink;  ; static constexpr bool StorePath;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  . Attribute details. ◆ m_validator. template<class TOwnerType , class TDestType , unsigned TFlags> . ValidatorFn sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >::m_validator. protected . Constructor details. ◆ MultiLink() [1/3]. template<class TOwnerType , class TDestType , unsigned TFlags> . sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >::MultiLink ; (; ). inline . ◆ MultiLink() [2/3]. template<class TOwnerType , class TDestType , unsigned TFlags> . sofa::core::objectmodel::MultiLink<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:2106,Usability,clear,clear,2106,"ed from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  . Public Member Functions;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:3628,Usability,clear,clear,3628,"ted from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Prot",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_new-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::New< T > Member List . This is the complete list of members for sofa::core::objectmodel::New< T >, including all inherited members. New(Args &&... args)sofa::core::objectmodel::New< T >inline. Generated on Mon Nov 11 2024 03:16:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_new-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_new-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html:4450,Deployability,update,update,4450,"ccessor< Data< T >>() constsofa::core::objectmodel::RenamedData< T >inline; operator sofa::helper::WriteOnlyAccessor< Data< T >>() constsofa::core::objectmodel::RenamedData< T >inline; operator&()sofa::core::objectmodel::RenamedData< T >inline; operator=(const T &value)sofa::core::objectmodel::RenamedData< T >inline; printValue(std::ostream &os) constsofa::core::objectmodel::RenamedData< T >inline; read(const std::string &value)sofa::core::objectmodel::RenamedData< T >inline; RenamedData()sofa::core::objectmodel::RenamedData< T >inline; setAutoLink(bool b)sofa::core::objectmodel::RenamedData< T >inline; setDisplayed(bool b)sofa::core::objectmodel::RenamedData< T >inline; setFlag(BaseData::DataFlagsEnum flag, bool b)sofa::core::objectmodel::RenamedData< T >inline; setGroup(const std::string &val)sofa::core::objectmodel::RenamedData< T >inline; setHelp(const std::string &val)sofa::core::objectmodel::RenamedData< T >inline; setName(const std::string &name)sofa::core::objectmodel::RenamedData< T >inline; setOriginalData(Data< T > *data)sofa::core::objectmodel::RenamedData< T >inline; setOwner(Base *o)sofa::core::objectmodel::RenamedData< T >inline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::RenamedData< T >inline; setParent(const std::string &path)sofa::core::objectmodel::RenamedData< T >inline; setPersistent(bool b)sofa::core::objectmodel::RenamedData< T >inline; setReadOnly(bool b)sofa::core::objectmodel::RenamedData< T >inline; setRequired(bool b)sofa::core::objectmodel::RenamedData< T >inline; setValue(const T &value)sofa::core::objectmodel::RenamedData< T >inline; setWidget(const char *val)sofa::core::objectmodel::RenamedData< T >inline; unset()sofa::core::objectmodel::RenamedData< T >inline; update()sofa::core::objectmodel::RenamedData< T >inline; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::RenamedData< T >inline; validParent(const BaseData *parent)sofa::core::objectmodel::RenamedData< T >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html:4507,Deployability,update,updateValueFromLink,4507,"ccessor< Data< T >>() constsofa::core::objectmodel::RenamedData< T >inline; operator sofa::helper::WriteOnlyAccessor< Data< T >>() constsofa::core::objectmodel::RenamedData< T >inline; operator&()sofa::core::objectmodel::RenamedData< T >inline; operator=(const T &value)sofa::core::objectmodel::RenamedData< T >inline; printValue(std::ostream &os) constsofa::core::objectmodel::RenamedData< T >inline; read(const std::string &value)sofa::core::objectmodel::RenamedData< T >inline; RenamedData()sofa::core::objectmodel::RenamedData< T >inline; setAutoLink(bool b)sofa::core::objectmodel::RenamedData< T >inline; setDisplayed(bool b)sofa::core::objectmodel::RenamedData< T >inline; setFlag(BaseData::DataFlagsEnum flag, bool b)sofa::core::objectmodel::RenamedData< T >inline; setGroup(const std::string &val)sofa::core::objectmodel::RenamedData< T >inline; setHelp(const std::string &val)sofa::core::objectmodel::RenamedData< T >inline; setName(const std::string &name)sofa::core::objectmodel::RenamedData< T >inline; setOriginalData(Data< T > *data)sofa::core::objectmodel::RenamedData< T >inline; setOwner(Base *o)sofa::core::objectmodel::RenamedData< T >inline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::RenamedData< T >inline; setParent(const std::string &path)sofa::core::objectmodel::RenamedData< T >inline; setPersistent(bool b)sofa::core::objectmodel::RenamedData< T >inline; setReadOnly(bool b)sofa::core::objectmodel::RenamedData< T >inline; setRequired(bool b)sofa::core::objectmodel::RenamedData< T >inline; setValue(const T &value)sofa::core::objectmodel::RenamedData< T >inline; setWidget(const char *val)sofa::core::objectmodel::RenamedData< T >inline; unset()sofa::core::objectmodel::RenamedData< T >inline; update()sofa::core::objectmodel::RenamedData< T >inline; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::RenamedData< T >inline; validParent(const BaseData *parent)sofa::core::objectmodel::RenamedData< T >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::RenamedData< T > Member List . This is the complete list of members for sofa::core::objectmodel::RenamedData< T >, including all inherited members. beginEdit()sofa::core::objectmodel::RenamedData< T >inline; beginEditVoidPtr()sofa::core::objectmodel::RenamedData< T >inline; beginWriteOnly()sofa::core::objectmodel::RenamedData< T >inline; canBeLinked() constsofa::core::objectmodel::RenamedData< T >inline; copyValueFrom(const BaseData *data)sofa::core::objectmodel::RenamedData< T >inline; copyValueFrom(const Data< T > *data)sofa::core::objectmodel::RenamedData< T >inline; endEdit()sofa::core::objectmodel::RenamedData< T >inline; endEditVoidPtr()sofa::core::objectmodel::RenamedData< T >inline; forceSet()sofa::core::objectmodel::RenamedData< T >inline; getCounter() constsofa::core::objectmodel::RenamedData< T >inline; getData() constsofa::core::objectmodel::RenamedData< T >inline; getDefaultValueString() constsofa::core::objectmodel::RenamedData< T >inline; getFlag(BaseData::DataFlagsEnum flag) constsofa::core::objectmodel::RenamedData< T >inline; getGroup() constsofa::core::objectmodel::RenamedData< T >inline; getHelp() constsofa::core::objectmodel::RenamedData< T >inline; getLinkPath() constsofa::core::objectmodel::RenamedData< T >inline; getName() constsofa::core::objectmodel::RenamedData< T >inline; getOwner() constsofa::core::objectmodel::RenamedData< T >inline; getParent() constsofa::core::objectmodel::RenamedData< T >inline; getValue() constsofa::core::objectmodel::RenamedData< T >inline; getValueString() constsofa::core::objectmodel::RenamedData< T >inline; getValueTypeInfo() constsofa::core::objectmodel::RenamedData< T >inline; getValueTypeString() constsofa::core::objectmodel::RenamedData< T >inline; getValueVoidPtr() constsofa::core::objectmodel::RenamedData< T >inline; getWidget() constsofa::core::objectmodel::RenamedData< T >inline; ha",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:2341,Deployability,update,update,2341,"helper::WriteOnlyAccessor< Data< T >> () const;  ; bool read (const std::string &value);  ; void printValue (std::ostream &os) const;  ; std::string getValueString () const;  ; std::string getDefaultValueString () const;  ; std::string getValueTypeString () const;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const;  ; const void * getValueVoidPtr () const;  ; void * beginEditVoidPtr ();  ; void endEditVoidPtr ();  ; const std::string & getHelp () const;  ; void setHelp (const std::string &val);  ; const std::string & getGroup () const;  ; void setGroup (const std::string &val);  ; const std::string & getWidget () const;  ; void setWidget (const char *val);  ; void setFlag (BaseData::DataFlagsEnum flag, bool b);  ; bool getFlag (BaseData::DataFlagsEnum flag) const;  ; bool isDisplayed () const;  ; bool isReadOnly () const;  ; bool isPersistent () const;  ; bool isAutoLink () const;  ; bool isRequired () const;  ; void setDisplayed (bool b);  ; void setReadOnly (bool b);  ; void setPersistent (bool b);  ; void setAutoLink (bool b);  ; void setRequired (bool b);  ; std::string getLinkPath () const;  ; bool canBeLinked () const;  ; Base * getOwner () const;  ; void setOwner (Base *o);  ; BaseData * getData () const;  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  ; bool isSet () const;  ; void unset ();  ; void forceSet ();  ; int getCounter () const;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  ; bool setParent (const std::string &path);  ; bool validParent (const BaseData *parent);  ; BaseData * getParent () const;  ; void update ();  ; bool copyValueFrom (const BaseData *data);  ; bool updateValueFromLink (const BaseData *data);  ; T * beginEdit ();  ; T * beginWriteOnly ();  ; void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ; void operator= (const T &value);  ; bool copyValueFrom (const Data< T > *data);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:2406,Deployability,update,updateValueFromLink,2406,"helper::WriteOnlyAccessor< Data< T >> () const;  ; bool read (const std::string &value);  ; void printValue (std::ostream &os) const;  ; std::string getValueString () const;  ; std::string getDefaultValueString () const;  ; std::string getValueTypeString () const;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const;  ; const void * getValueVoidPtr () const;  ; void * beginEditVoidPtr ();  ; void endEditVoidPtr ();  ; const std::string & getHelp () const;  ; void setHelp (const std::string &val);  ; const std::string & getGroup () const;  ; void setGroup (const std::string &val);  ; const std::string & getWidget () const;  ; void setWidget (const char *val);  ; void setFlag (BaseData::DataFlagsEnum flag, bool b);  ; bool getFlag (BaseData::DataFlagsEnum flag) const;  ; bool isDisplayed () const;  ; bool isReadOnly () const;  ; bool isPersistent () const;  ; bool isAutoLink () const;  ; bool isRequired () const;  ; void setDisplayed (bool b);  ; void setReadOnly (bool b);  ; void setPersistent (bool b);  ; void setAutoLink (bool b);  ; void setRequired (bool b);  ; std::string getLinkPath () const;  ; bool canBeLinked () const;  ; Base * getOwner () const;  ; void setOwner (Base *o);  ; BaseData * getData () const;  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  ; bool isSet () const;  ; void unset ();  ; void forceSet ();  ; int getCounter () const;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  ; bool setParent (const std::string &path);  ; bool validParent (const BaseData *parent);  ; BaseData * getParent () const;  ; void update ();  ; bool copyValueFrom (const BaseData *data);  ; bool updateValueFromLink (const BaseData *data);  ; T * beginEdit ();  ; T * beginWriteOnly ();  ; void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ; void operator= (const T &value);  ; bool copyValueFrom (const Data< T > *data);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:10644,Deployability,update,update,10644,"id sofa::core::objectmodel::RenamedData< T >::setName ; (; const std::string & ; name). inline . ◆ setOriginalData(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOriginalData ; (; Data< T > * ; data). inline . ◆ setOwner(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOwner ; (; Base * ; o). inline . ◆ setParent() [1/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; BaseData * ; parent, . const std::string & ; path = std::string() . ). inline . ◆ setParent() [2/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; const std::string & ; path). inline . ◆ setPersistent(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setPersistent ; (; bool ; b). inline . ◆ setReadOnly(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setReadOnly ; (; bool ; b). inline . ◆ setRequired(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setRequired ; (; bool ; b). inline . ◆ setValue(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setValue ; (; const T & ; value). inline . ◆ setWidget(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setWidget ; (; const char * ; val). inline . ◆ unset(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::unset ; (; ). inline . ◆ update(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::update ; (; ). inline . ◆ updateValueFromLink(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::updateValueFromLink ; (; const BaseData * ; data). inline . ◆ validParent(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::validParent ; (; const BaseData * ; parent). inline . sofacoreobjectmodelRenamedData; Generated on Mon Nov 11 2024 03:16:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:10730,Deployability,update,update,10730,"id sofa::core::objectmodel::RenamedData< T >::setName ; (; const std::string & ; name). inline . ◆ setOriginalData(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOriginalData ; (; Data< T > * ; data). inline . ◆ setOwner(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOwner ; (; Base * ; o). inline . ◆ setParent() [1/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; BaseData * ; parent, . const std::string & ; path = std::string() . ). inline . ◆ setParent() [2/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; const std::string & ; path). inline . ◆ setPersistent(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setPersistent ; (; bool ; b). inline . ◆ setReadOnly(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setReadOnly ; (; bool ; b). inline . ◆ setRequired(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setRequired ; (; bool ; b). inline . ◆ setValue(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setValue ; (; const T & ; value). inline . ◆ setWidget(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setWidget ; (; const char * ; val). inline . ◆ unset(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::unset ; (; ). inline . ◆ update(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::update ; (; ). inline . ◆ updateValueFromLink(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::updateValueFromLink ; (; const BaseData * ; data). inline . ◆ validParent(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::validParent ; (; const BaseData * ; parent). inline . sofacoreobjectmodelRenamedData; Generated on Mon Nov 11 2024 03:16:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:10756,Deployability,update,updateValueFromLink,10756,"id sofa::core::objectmodel::RenamedData< T >::setName ; (; const std::string & ; name). inline . ◆ setOriginalData(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOriginalData ; (; Data< T > * ; data). inline . ◆ setOwner(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOwner ; (; Base * ; o). inline . ◆ setParent() [1/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; BaseData * ; parent, . const std::string & ; path = std::string() . ). inline . ◆ setParent() [2/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; const std::string & ; path). inline . ◆ setPersistent(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setPersistent ; (; bool ; b). inline . ◆ setReadOnly(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setReadOnly ; (; bool ; b). inline . ◆ setRequired(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setRequired ; (; bool ; b). inline . ◆ setValue(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setValue ; (; const T & ; value). inline . ◆ setWidget(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setWidget ; (; const char * ; val). inline . ◆ unset(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::unset ; (; ). inline . ◆ update(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::update ; (; ). inline . ◆ updateValueFromLink(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::updateValueFromLink ; (; const BaseData * ; data). inline . ◆ validParent(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::validParent ; (; const BaseData * ; parent). inline . sofacoreobjectmodelRenamedData; Generated on Mon Nov 11 2024 03:16:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:10855,Deployability,update,updateValueFromLink,10855,"id sofa::core::objectmodel::RenamedData< T >::setName ; (; const std::string & ; name). inline . ◆ setOriginalData(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOriginalData ; (; Data< T > * ; data). inline . ◆ setOwner(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOwner ; (; Base * ; o). inline . ◆ setParent() [1/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; BaseData * ; parent, . const std::string & ; path = std::string() . ). inline . ◆ setParent() [2/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; const std::string & ; path). inline . ◆ setPersistent(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setPersistent ; (; bool ; b). inline . ◆ setReadOnly(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setReadOnly ; (; bool ; b). inline . ◆ setRequired(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setRequired ; (; bool ; b). inline . ◆ setValue(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setValue ; (; const T & ; value). inline . ◆ setWidget(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setWidget ; (; const char * ; val). inline . ◆ unset(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::unset ; (; ). inline . ◆ update(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::update ; (; ). inline . ◆ updateValueFromLink(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::updateValueFromLink ; (; const BaseData * ; data). inline . ◆ validParent(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::validParent ; (; const BaseData * ; parent). inline . sofacoreobjectmodelRenamedData; Generated on Mon Nov 11 2024 03:16:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::ScriptEvent Member List . This is the complete list of members for sofa::core::objectmodel::ScriptEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::core::objectmodel::ScriptEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventName(void) constsofa::core::objectmodel::ScriptEventinline; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; getSender(void) constsofa::core::objectmodel::ScriptEvent; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; ScriptEvent(sofa::core::sptr< sofa::core::objectmodel::BaseNode > sender, const char *eventName)sofa::core::objectmodel::ScriptEvent; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~ScriptEvent() overridesofa::core::objectmodel::ScriptEvent. Generated on Mon Nov 11 2024 03:16:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html:335,Integrability,message,message,335,"﻿. SOFA API: sofa::core::objectmodel::ScriptEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::ScriptEvent Class Reference . #include <ScriptEvent.h>; Generic Event class to send a message through the simulation graph. ; More... Inheritance diagram for sofa::core::objectmodel::ScriptEvent:. [legend]; Detailed Description; Generic Event class to send a message through the simulation graph. . Public Member Functions;  ScriptEvent (sofa::core::sptr< sofa::core::objectmodel::BaseNode > sender, const char *eventName);  Constructor. More...;  ;  ~ScriptEvent () override;  Destructor. More...;  ; const sofa::core::sptr< sofa::core::objectmodel::BaseNode > getSender (void) const;  Get the sender name. More...;  ; const std::string & getEventName (void) const;  Get the event name. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ ScriptEvent(). sofa::core::objectmodel::ScriptEvent::ScriptEvent ; (; sofa::core::sptr< sofa::core::objectmodel::BaseNode > ; sender,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html:508,Integrability,message,message,508,"﻿. SOFA API: sofa::core::objectmodel::ScriptEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::ScriptEvent Class Reference . #include <ScriptEvent.h>; Generic Event class to send a message through the simulation graph. ; More... Inheritance diagram for sofa::core::objectmodel::ScriptEvent:. [legend]; Detailed Description; Generic Event class to send a message through the simulation graph. . Public Member Functions;  ScriptEvent (sofa::core::sptr< sofa::core::objectmodel::BaseNode > sender, const char *eventName);  Constructor. More...;  ;  ~ScriptEvent () override;  Destructor. More...;  ; const sofa::core::sptr< sofa::core::objectmodel::BaseNode > getSender (void) const;  Get the sender name. More...;  ; const std::string & getEventName (void) const;  Get the event name. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ ScriptEvent(). sofa::core::objectmodel::ScriptEvent::ScriptEvent ; (; sofa::core::sptr< sofa::core::objectmodel::BaseNode > ; sender,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html:974,Modifiability,inherit,inherited,974,"objectmodel::ScriptEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::ScriptEvent Class Reference . #include <ScriptEvent.h>; Generic Event class to send a message through the simulation graph. ; More... Inheritance diagram for sofa::core::objectmodel::ScriptEvent:. [legend]; Detailed Description; Generic Event class to send a message through the simulation graph. . Public Member Functions;  ScriptEvent (sofa::core::sptr< sofa::core::objectmodel::BaseNode > sender, const char *eventName);  Constructor. More...;  ;  ~ScriptEvent () override;  Destructor. More...;  ; const sofa::core::sptr< sofa::core::objectmodel::BaseNode > getSender (void) const;  Get the sender name. More...;  ; const std::string & getEventName (void) const;  Get the event name. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ ScriptEvent(). sofa::core::objectmodel::ScriptEvent::ScriptEvent ; (; sofa::core::sptr< sofa::core::objectmodel::BaseNode > ; sender, . const char * ; eventN",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html:1446,Modifiability,inherit,inherited,1446,"Detailed Description; Generic Event class to send a message through the simulation graph. . Public Member Functions;  ScriptEvent (sofa::core::sptr< sofa::core::objectmodel::BaseNode > sender, const char *eventName);  Constructor. More...;  ;  ~ScriptEvent () override;  Destructor. More...;  ; const sofa::core::sptr< sofa::core::objectmodel::BaseNode > getSender (void) const;  Get the sender name. More...;  ; const std::string & getEventName (void) const;  Get the event name. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ ScriptEvent(). sofa::core::objectmodel::ScriptEvent::ScriptEvent ; (; sofa::core::sptr< sofa::core::objectmodel::BaseNode > ; sender, . const char * ; eventName . ). Constructor. . ◆ ~ScriptEvent(). sofa::core::objectmodel::ScriptEvent::~ScriptEvent ; (; ). override . Destructor. . Function details. ◆ GetClassName(). static const char* sofa::core::objectmodel::ScriptEvent::GetClassName ; (; ). inlinestatic . ◆ getEventName(). const std::string& sofa::core::objectmodel::ScriptEvent::getEventName ; (; void ; ); const. inline . Get the event name. . ◆ getSender(). const sofa::core::sp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_script_event.html
