quality_attribute,sentence,keyword,source,author,repo,version,id,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words,attribute_desc,prompt,true_positive,reasoning,arch_prompt,related_to_architecture,related_to_architecture_reasoning
Availability,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md:762,download,762,docs/dev/ci.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md,1,['down'],['download'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: # CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses testing tools and methods for plotting and comparing test results in different environments using fixtures. It mentions Azure pipelines and tools like check_same_image and image_comparer to view plots from failed tests. The focus is on ensuring that failing tests can be easily viewed and compared, which relates to availability by preventing issues where tests might fail due to environment differences or inconsistencies. By providing a consistent way to view and analyze test results, the system's readiness for production is enhanced, contributing to higher availability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses how to view and compare plots from failed tests in Azure pipelines, including setup for consistent plotting environments. While this relates to software development practices and tooling, it primarily focuses on testing procedures rather than the high-level architectural considerations or patterns."
Availability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1113,available,1113,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses preprocessing steps in an analysis pipeline such as filtering genes, normalization, and batch effect correction. These are related to data processing to ensure accurate and reliable data handling, which contributes to system availability by reducing failures and ensuring consistent performance.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data preprocessing steps such as filtering genes, normalizing data, and applying PCA in a bioinformatics pipeline. While these are important steps in data processing, they do not relate to software architecture concepts or principles. Instead, the focus is on computational methods applied to biological data."
Availability,"### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; ",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md:159,available,159,docs/release-notes/0.3.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses the availability and functionality of the [anndata] package, mentioning that it's available as a separate package and results from PAGA are simplified. This relates to the system being ready for use when required.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses methods and package information in a data analysis library, specifically mentioning AnnData's concatenate method and packaging details. This focuses on implementation specifics rather than architectural considerations."
Availability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",mask,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:575,mask,575,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['mask'],['mask'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes new features and performance improvements in scanpy, including enhanced functionality like Dask support for workflows, updated clustering tutorials, and aggregation functions. These updates relate to increasing the system's capability and efficiency, which aligns with availability by ensuring reliable performance and minimizing downtime through improved processing capabilities. The mention of 'mask' observations could also contribute to fault tolerance as it allows handling missing or problematic data without disrupting the workflow. Therefore, this content accurately reflects the quality attribute of Availability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates, features, and performance improvements in a software tool called scanpy, including changes to its functions, documentation, and workflows. While this pertains to software development and functionality, it does not explicitly touch on architectural concepts such as patterns, styles, or high-level system structure."
Availability,"### 1.7.0 {small}`2021-02-03`. ```{rubric} Features; ```. - Add new 10x Visium datasets to {func}`~scanpy.datasets.visium_sge` {pr}`1473` {smaller}`G Palla`; - Enable download of source image for 10x visium datasets in {func}`~scanpy.datasets.visium_sge` {pr}`1506` {smaller}`H Spitzer`; - Refactor of {func}`scanpy.pl.spatial`. Better support for plotting without an image, as well as directly providing images {pr}`1512` {smaller}`G Palla`; - Dict input for {func}`scanpy.queries.enrich` {pr}`1488` {smaller}`G Eraslan`; - {func}`~scanpy.get.rank_genes_groups_df` can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo`",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:167,download,167,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['down'],['download'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.7.0 {small}`2021-02-03`. ```{rubric} Features; ```. - Add new 10x Visium datasets to {func}`~scanpy.datasets.visium_sge` {pr}`1473` {smaller}`G Palla`; - Enable download of source image for 10x visium datasets in {func}`~scanpy.datasets.visium_sge` {pr}`1506` {smaller}`H Spitzer`; - Refactor of {func}`scanpy.pl.spatial`. Better support for plotting without an image, as well as directly providing images {pr}`1512` {smaller}`G Palla`; - Dict input for {func}`scanpy.queries.enrich` {pr}`1488` {smaller}`G Eraslan`; - {func}`~scanpy.get.rank_genes_groups_df` can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo`

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes updates and new features added to scanpy, an open-source software for single-cell analysis. The changes include adding new datasets, enabling downloads, refactoring code modules, integrating external tools like Scrublet and Scanorama, and improving visualization capabilities. These are technical developments aimed at enhancing the functionality and usability of the software, which relates to its availability in terms of reliability and readiness for use. The updates ensure that users have access to newer features and tools, reducing potential downtime or issues with versioning. Therefore, this content aligns well with the quality attribute of Availability by focusing on enhancements that make the system more robust and user-friendly.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.7.0 {small}`2021-02-03`. ```{rubric} Features; ```. - Add new 10x Visium datasets to {func}`~scanpy.datasets.visium_sge` {pr}`1473` {smaller}`G Palla`; - Enable download of source image for 10x visium datasets in {func}`~scanpy.datasets.visium_sge` {pr}`1506` {smaller}`H Spitzer`; - Refactor of {func}`scanpy.pl.spatial`. Better support for plotting without an image, as well as directly providing images {pr}`1512` {smaller}`G Palla`; - Dict input for {func}`scanpy.queries.enrich` {pr}`1488` {smaller}`G Eraslan`; - {func}`~scanpy.get.rank_genes_groups_df` can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo`
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses feature additions, bug fixes, and code refactoring in a software package. It includes updates to specific functions and their parameters, integration with external tools, and new plotting methods. While these changes affect the usability and functionality of the software, they are primarily implementation details rather than architectural decisions or discussions about system structure."
Availability,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:556,down,556,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['down'],['down'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to run tests for a project using pytest, which is related to ensuring code reliability and functionality (quality attribute: availability). The description mentions the importance of a test suite in confirming that the code works before release, which ties into the system's readiness and performance. While the content focuses heavily on testing practices, it indirectly supports the overall quality attribute by ensuring that software functions as intended, thus contributing to its availability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices and tools, which are aspects of software development but not directly about software architecture. It includes details on running tests with pytest, writing test cases, and TDD. These are implementation-level concerns rather than architectural ones."
Availability,"` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:4043,download,4043,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,2,"['down', 'error']","['download', 'error']","The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is a list of bug fixes and improvements in the codebase. It mentions things like fixed bugs where score_genes would error if one gene was passed, fixed log1p inplace on integer dense arrays, and removed pending deprecation warnings from numpy. This relates to system reliability and fault tolerance as it ensures that functions are working correctly even under unexpected conditions, which aligns with the Availability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code fixes, bug resolutions, and updates to specific functions in a software library. It involves changes such as fixing bugs in `score_genes`, refactoring documentation for `rank_genes_groups`, updating dependencies like `cugraph` API usage, and resolving issues related to data processing and integration with external libraries like `anndata`. These are implementation-level details and specific function updates rather than discussions about software architecture concepts."
Availability,"ic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variable_genes` using `flavor='pearson_residuals'` now uses numba for variance computation and is faster {pr}`2612` {smaller}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller",mask,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:1266,mask,1266,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['mask'],['mask'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variable_genes` using `flavor='pearson_residuals'` now uses numba for variance computation and is faster {pr}`2612` {smaller}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and new features in an analytics tool, including improved functionality through performance optimizations (e.g., neighbor search and clustering), enhanced support for certain algorithms (e.g., KNN libraries via transformer argument), and updates to specific functions supporting masking observations. While availability isn't explicitly mentioned, the focus is on system readiness and reliability by improving processing capabilities and fault handling, which aligns with the broader concept of availability in software engineering.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variable_genes` using `flavor='pearson_residuals'` now uses numba for variance computation and is faster {pr}`2612` {smaller}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and new features in a software package (scanpy), including function moves, parameter additions, and performance improvements. While these are implementation details and not high-level architectural considerations, they do indicate changes in the internal structure of the codebase, possibly reflecting underlying design decisions. However, without explicit discussion of architectural concepts or patterns, it is not directly related to software architecture."
Availability,"iden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a un",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1477,error,1477,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['error'],['error'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: iden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a un

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation instructions for software, which relates to the system's readiness (availability) and troubleshooting issues that affect its performance. The instructions include steps to clone repositories, install packages using pip and conda, and handle potential installation errors. These steps are essential for ensuring that the system can be used as required, thereby addressing availability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: iden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a un
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses installation and setup instructions for a software package, including dependency management, package installation via pip or conda, and troubleshooting for installation issues. It covers environment setup, versioning, and specific technical details related to installing and configuring the package on different operating systems (Windows, MacOS). While it addresses some system-level considerations such as virtual environments and package managers, these are not discussions of software architecture concepts but rather procedural instructions for installation and deployment."
Deployability," Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1020,installations,1020,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['installations'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content:  Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation and setup instructions for software, including using package managers like Conda and pip, and mentions deployment considerations for dependencies such as igraph. While it is installation guidance rather than directly discussing deployability aspects like automation or rollback, the overall context pertains to ensuring software can be deployed predictably. Therefore, it aligns with Deployability by focusing on deployment methods and ensuring smooth installations which are key factors in deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses installation instructions for various packages and tools such as Anaconda, Conda, pip, and Docker. It also includes steps to clone repositories and install dependencies. While this involves setup procedures, it does not delve into architectural concepts or patterns. The focus is on software installation and package management rather than the design or structure of software systems."
Deployability," very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-nam",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1791,install,1791,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content:  very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-nam

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes how to set up deployments using GitHub's CLI and manual steps for cloning repositories, which directly relates to deployability by ensuring smooth deployment processes are established. The use of pre-commit hooks and guidelines for creating branches and pull requests also contribute to maintainable and deployable code practices. These actions support the quality attribute of Deployability by automating checks and streamlining the deployment workflow.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-nam
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses specific command-line operations for cloning and managing repositories, code preparation steps such as installing pre-commit hooks, and instructions for creating branches and pull requests. These are operational and procedural tasks that are part of software development practices but do not delve into architectural concepts or high-level system design."
Deployability,"# Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:123,installed,123,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,3,"['install', 'update']","['install', 'installed', 'updated']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The given content discusses documentation practices and procedures for building and updating the project's documentation. It includes instructions on how to install dependencies, build the docs using specific commands, and how to handle caching issues. While deployment isn't directly mentioned, the ability to deploy and maintain documentation smoothly is a part of overall deployability. The process described ensures that documentation can be reliably generated and accessed by users, which supports deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses documentation processes, including building and updating documentation for a project, which is more about the technical writing and project structure rather than software architecture. It covers steps like installing dependencies, running make commands, clearing caches, and adding notes to release documents. These are related to software development practices but do not address architectural concepts such as patterns, design decisions, or system structures."
Deployability,"# External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md:291,integrate,291,docs/external/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md,1,['integrat'],['integrate'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to import and use external tools with scanpy, which relates to deploying tools into an operational environment. It guides users on where to find compatible tools and how to integrate them, ensuring that deployment can be done effectively. This aligns well with the Deployability attribute, as it involves making sure tools are ready for deployment with minimal effort and proper integration.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses the structure of scanpy.external tools and how to import them, but it does not delve into high-level architectural concepts or patterns. It focuses more on tool integration rather than system architecture."
Deployability,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:58,installation,58,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,9,['install'],"['install', 'install-instructions', 'installation', 'installing', 'installs']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation instructions for Anaconda and PyPI, deployment methods such as using GitHub and pip, and mentions Docker. These all pertain to how software can be deployed and installed, which aligns with Deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses software installation and dependency management, including how to install Python packages using conda or pip. It also provides instructions for development environments, cloning repositories, and using Docker. While these are important aspects of software development, they primarily focus on the toolchain and setup rather than the high-level architecture or design decisions. The mention of virtual environments, package managers, and specific library installations relates more to implementation details and deployment considerations rather than architectural principles."
Deployability,"# Making a release. First, check out {doc}`versioning` to see which kind of release you want to make.; That page also explains concepts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:11,release,11,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,21,"['patch', 'release']","['patch', 'release', 'releases']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Making a release. First, check out {doc}`versioning` to see which kind of release you want to make.; That page also explains concepts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes the process for making and announcing releases, including creating release notes and milestones. This directly relates to deployability as it covers how software is released into an operational environment with clear steps. The attribute description mentions deployment automation, speed, and granularity, which are addressed through the processes outlined here. The content is a true positive because it aligns with the deployability quality attribute by detailing release management practices that ensure smooth deployment.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Making a release. First, check out {doc}`versioning` to see which kind of release you want to make.; That page also explains concepts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses versioning and release processes, which are more related to software development practices rather than software architecture. There's no mention of architectural patterns, trade-offs, or high-level system structure."
Deployability,"## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and c",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1622,release,1622,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and c

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses release processes, including creating release notes, tagging releases, and announcing them. This directly relates to deployability as it involves preparing for deployment and managing releases effectively.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and c
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses release processes, build configurations, and package distribution steps. These are more about software development workflows and packaging rather than architectural concepts."
Deployability,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md:119,integration,119,docs/external/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes preprocessing steps including data integration, sample demultiplexing, and imputation methods in scanpy.external.pp. While deployment aspects are not explicitly discussed here, these preprocessing steps contribute to the overall deployability by ensuring proper data handling and integration prior to deployment. The mention of limitations under debate might imply that careful consideration is needed for deployment strategies. Thus, this content indirectly relates to deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses data integration, imputation techniques, and specific processing steps in a scientific pipeline. While these are important aspects of software development, they relate more to data handling and computational methods rather than the high-level architecture or design decisions."
Deployability,"### 0.2.9 {small}`2017-10-25`. ```{rubric} Initial release of the new trajectory inference method [PAGA](https://github.com/theislab/paga); ```. - {func}`~scanpy.tl.paga` computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_compare` plot this graph next an embedding {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_path` plots a heatmap through a node sequence in the PAGA graph {smaller}`A Wolf`; ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.9.md:51,release,51,docs/release-notes/0.2.9.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.9.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 0.2.9 {small}`2017-10-25`. ```{rubric} Initial release of the new trajectory inference method [PAGA](https://github.com/theislab/paga); ```. - {func}`~scanpy.tl.paga` computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_compare` plot this graph next an embedding {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_path` plots a heatmap through a node sequence in the PAGA graph {smaller}`A Wolf`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses the release and deployment of a new method called PAGA. It mentions functions used to compute and plot the PAGA graph, which are part of an abstracted neighborhood graph. This indicates that there was a deployment process involved with automation aspects, as these functions automate the computation and visualization of the PAGA method. The reference to 'deployment granularity' could be related to how the PAGA method is implemented in scanpy, possibly allowing for modular or fine-grained deployment steps. Therefore, this content aligns well with deployability as it involves releasing a new method with automated deployment processes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 0.2.9 {small}`2017-10-25`. ```{rubric} Initial release of the new trajectory inference method [PAGA](https://github.com/theislab/paga); ```. - {func}`~scanpy.tl.paga` computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_compare` plot this graph next an embedding {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_path` plots a heatmap through a node sequence in the PAGA graph {smaller}`A Wolf`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses the release of a new method called PAGA and its functions in scanpy, which relates to computational methods rather than software architecture. It mentions functions for computing and visualizing graphs, but this is more about algorithm implementation details rather than high-level design or structure."
Deployability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:425,updated,425,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['update'],['updated'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content describes new features and performance improvements in an open-source software package called 'scanpy'. These updates include enhanced support for out-of-core workflows using Dask, improved documentation, and updated clustering tutorials. It mentions moving functions from external to internal modules and supporting new functionalities such as masking observations. The content also talks about performance optimizations and feature enhancements, which are part of the overall functionality and usability of scanpy. While it does include some logs (e.g., PR numbers), most of the text is focused on describing new features and improvements that would enhance deployability by making the software more efficient, scalable, and user-friendly, thereby aiding in its deployment into an operational environment.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses feature additions and performance improvements in a software package, including moving functions between modules, optimizing certain processes, and enhancing documentation. While these are implementation-level details, they don't address the high-level structure or architectural decisions of a system."
Deployability,"### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md:49,updates,49,docs/release-notes/1.3.3.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses updates to preprocessing backend code and related functions. These updates include changes in compression settings for data writing, which aim to improve performance and reduce disk space usage. This aligns with deployability as it relates to deployment speed (performance gains) and automation (improved handling of writes), contributing to efficient and predictable deployments.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code-level details, such as function and method modifications, performance optimizations, and changes in data handling. While these are important aspects of software development, they focus more on implementation specifics rather than the high-level structure or architectural considerations."
Deployability,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:43,release,43,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,5,"['integrat', 'release', 'update']","['integration', 'integration-scanorama', 'release', 'updates']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses new functionality, performance improvements, and code design aspects in detail. These are all relevant to deployability as they relate to how well the software can be rolled out into production with predictability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses new functionalities, performance improvements, and code updates in a data analysis library. While it mentions updates to specific functions and their optimizations, there's no explicit discussion of software architecture concepts such as patterns, styles, or high-level system structure."
Deployability,"### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:36,release,36,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and features added to plotting functions in scanpy such as dotplot, matrixplot, etc. It mentions new parameters like 'groupby' and 'swap_axes', allows embedding plots using the 'ax' parameter, and returns dictionaries for further manipulation. These improvements relate to making the software more deployable by providing easier and more flexible ways to integrate and modify plots in the application. The mention of deployment granularity is less direct, but the automation aspects through new parameters and functions contribute to deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and features in specific plotting functions, which are implementation details rather than discussing software architecture concepts."
Deployability,"'elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); Array of dim (number of samples) that stores the subgroup id ('0',; '1', ...) for each cell. The groups typically correspond to; 'progenitor cells', 'undecided cells' or 'branches' of a process.; ```; ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:6235,updates,6235,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: 'elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); Array of dim (number of samples) that stores the subgroup id ('0',; '1', ...) for each cell. The groups typically correspond to; 'progenitor cells', 'undecided cells' or 'branches' of a process.; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content refers to deployment options and rollback capabilities, which aligns with the Deployability attribute's focus on deployment automation, speed, and granularity.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: 'elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); Array of dim (number of samples) that stores the subgroup id ('0',; '1', ...) for each cell. The groups typically correspond to; 'progenitor cells', 'undecided cells' or 'branches' of a process.; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"This content appears to be discussing data manipulation and normalization in an AnnData object, which is more related to data processing rather than software architecture. It does not mention any architectural patterns, trade-offs, or system structure."
Deployability,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:241,release,241,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses contributing guidelines for software development, which includes procedures that should be followed when making contributions to the project. This relates to how deployable the software is because it outlines steps that ensure smooth deployment processes, such as automated testing and continuous integration practices which are part of deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses guidelines for contributing to a software project, including setting up code, testing, documentation, CI/CD, versioning, and releases. These are primarily about development practices rather than the architectural aspects of the system."
Deployability,(release-notes)=. # Release notes. ## Version 1.10. ```{include} /release-notes/1.10.3.md; ```. ```{include} /release-notes/1.10.2.md; ```. ```{include} /release-notes/1.10.1.md; ```. ```{include} /release-notes/1.10.0.md; ```. ## Version 1.9. ```{include} /release-notes/1.9.8.md; ```. ```{include} /release-notes/1.9.7.md; ```. ```{include} /release-notes/1.9.6.md; ```. ```{include} /release-notes/1.9.5.md; ```. ```{include} /release-notes/1.9.4.md; ```. ```{include} /release-notes/1.9.3.md; ```. ```{include} /release-notes/1.9.2.md; ```. ```{include} /release-notes/1.9.1.md; ```. ```{include} /release-notes/1.9.0.md; ```. ## Version 1.8. ```{include} /release-notes/1.8.2.md; ```. ```{include} /release-notes/1.8.1.md; ```. ```{include} /release-notes/1.8.0.md; ```. ## Version 1.7. ```{include} /release-notes/1.7.2.md; ```. ```{include} /release-notes/1.7.1.md; ```. ```{include} /release-notes/1.7.0.md; ```. ## Version 1.6. ```{include} 1.6.0.md; ```. ## Version 1.5. ```{include} 1.5.1.md; ```. ```{include} 1.5.0.md; ```. ## Version 1.4. ```{include} 1.4.6.md; ```. ```{include} 1.4.5.md; ```. ```{include} 1.4.4.md; ```. ```{include} 1.4.3.md; ```. ```{include} 1.4.2.md; ```. ```{include} 1.4.1.md; ```. ## Version 1.3. ```{include} 1.3.8.md; ```. ```{include} 1.3.7.md; ```. ```{include} 1.3.6.md; ```. ```{include} 1.3.5.md; ```. ```{include} 1.3.4.md; ```. ```{include} 1.3.3.md; ```. ```{include} 1.3.1.md; ```. ## Version 1.2. ```{include} 1.2.1.md; ```. ```{include} 1.2.0.md; ```. ## Version 1.1. ```{include} 1.1.0.md; ```. ## Version 1.0. ```{include} 1.0.0.md; ```. ## Version 0.4. ```{include} 0.4.4.md; ```. ```{include} 0.4.3.md; ```. ```{include} 0.4.2.md; ```. ```{include} 0.4.0.md; ```. ## Version 0.3. ```{include} 0.3.2.md; ```. ```{include} 0.3.0.md; ```. ## Version 0.2. ```{include} 0.2.9.md; ```. ```{include} 0.2.1.md; ```. ## Version 0.1. ```{include} 0.1.0.md; ```; ,release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/index.md:1,release-notes,1,docs/release-notes/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/index.md,20,['release'],['release-notes'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: (release-notes)=. # Release notes. ## Version 1.10. ```{include} /release-notes/1.10.3.md; ```. ```{include} /release-notes/1.10.2.md; ```. ```{include} /release-notes/1.10.1.md; ```. ```{include} /release-notes/1.10.0.md; ```. ## Version 1.9. ```{include} /release-notes/1.9.8.md; ```. ```{include} /release-notes/1.9.7.md; ```. ```{include} /release-notes/1.9.6.md; ```. ```{include} /release-notes/1.9.5.md; ```. ```{include} /release-notes/1.9.4.md; ```. ```{include} /release-notes/1.9.3.md; ```. ```{include} /release-notes/1.9.2.md; ```. ```{include} /release-notes/1.9.1.md; ```. ```{include} /release-notes/1.9.0.md; ```. ## Version 1.8. ```{include} /release-notes/1.8.2.md; ```. ```{include} /release-notes/1.8.1.md; ```. ```{include} /release-notes/1.8.0.md; ```. ## Version 1.7. ```{include} /release-notes/1.7.2.md; ```. ```{include} /release-notes/1.7.1.md; ```. ```{include} /release-notes/1.7.0.md; ```. ## Version 1.6. ```{include} 1.6.0.md; ```. ## Version 1.5. ```{include} 1.5.1.md; ```. ```{include} 1.5.0.md; ```. ## Version 1.4. ```{include} 1.4.6.md; ```. ```{include} 1.4.5.md; ```. ```{include} 1.4.4.md; ```. ```{include} 1.4.3.md; ```. ```{include} 1.4.2.md; ```. ```{include} 1.4.1.md; ```. ## Version 1.3. ```{include} 1.3.8.md; ```. ```{include} 1.3.7.md; ```. ```{include} 1.3.6.md; ```. ```{include} 1.3.5.md; ```. ```{include} 1.3.4.md; ```. ```{include} 1.3.3.md; ```. ```{include} 1.3.1.md; ```. ## Version 1.2. ```{include} 1.2.1.md; ```. ```{include} 1.2.0.md; ```. ## Version 1.1. ```{include} 1.1.0.md; ```. ## Version 1.0. ```{include} 1.0.0.md; ```. ## Version 0.4. ```{include} 0.4.4.md; ```. ```{include} 0.4.3.md; ```. ```{include} 0.4.2.md; ```. ```{include} 0.4.0.md; ```. ## Version 0.3. ```{include} 0.3.2.md; ```. ```{include} 0.3.0.md; ```. ## Version 0.2. ```{include} 0.2.9.md; ```. ```{include} 0.2.1.md; ```. ## Version 0.1. ```{include} 0.1.0.md; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is solely a list of release notes and version numbers, which are typically used to document software changes, updates, and bug fixes. This aligns with deployability as it ensures that the software can be rolled out predictably and efficiently, supporting a smooth deployment process.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (release-notes)=. # Release notes. ## Version 1.10. ```{include} /release-notes/1.10.3.md; ```. ```{include} /release-notes/1.10.2.md; ```. ```{include} /release-notes/1.10.1.md; ```. ```{include} /release-notes/1.10.0.md; ```. ## Version 1.9. ```{include} /release-notes/1.9.8.md; ```. ```{include} /release-notes/1.9.7.md; ```. ```{include} /release-notes/1.9.6.md; ```. ```{include} /release-notes/1.9.5.md; ```. ```{include} /release-notes/1.9.4.md; ```. ```{include} /release-notes/1.9.3.md; ```. ```{include} /release-notes/1.9.2.md; ```. ```{include} /release-notes/1.9.1.md; ```. ```{include} /release-notes/1.9.0.md; ```. ## Version 1.8. ```{include} /release-notes/1.8.2.md; ```. ```{include} /release-notes/1.8.1.md; ```. ```{include} /release-notes/1.8.0.md; ```. ## Version 1.7. ```{include} /release-notes/1.7.2.md; ```. ```{include} /release-notes/1.7.1.md; ```. ```{include} /release-notes/1.7.0.md; ```. ## Version 1.6. ```{include} 1.6.0.md; ```. ## Version 1.5. ```{include} 1.5.1.md; ```. ```{include} 1.5.0.md; ```. ## Version 1.4. ```{include} 1.4.6.md; ```. ```{include} 1.4.5.md; ```. ```{include} 1.4.4.md; ```. ```{include} 1.4.3.md; ```. ```{include} 1.4.2.md; ```. ```{include} 1.4.1.md; ```. ## Version 1.3. ```{include} 1.3.8.md; ```. ```{include} 1.3.7.md; ```. ```{include} 1.3.6.md; ```. ```{include} 1.3.5.md; ```. ```{include} 1.3.4.md; ```. ```{include} 1.3.3.md; ```. ```{include} 1.3.1.md; ```. ## Version 1.2. ```{include} 1.2.1.md; ```. ```{include} 1.2.0.md; ```. ## Version 1.1. ```{include} 1.1.0.md; ```. ## Version 1.0. ```{include} 1.0.0.md; ```. ## Version 0.4. ```{include} 0.4.4.md; ```. ```{include} 0.4.3.md; ```. ```{include} 0.4.2.md; ```. ```{include} 0.4.0.md; ```. ## Version 0.3. ```{include} 0.3.2.md; ```. ```{include} 0.3.0.md; ```. ## Version 0.2. ```{include} 0.2.9.md; ```. ```{include} 0.2.1.md; ```. ## Version 0.1. ```{include} 0.1.0.md; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content consists of release notes for various software versions. It includes version-specific changes, bug fixes, and updates. While these notes are important for software development, they primarily focus on the functional aspects of releases rather than discussing architectural concepts, patterns, or structural decisions."
Deployability,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:208,release,208,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,3,"['install', 'release']","['install', 'release']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses how to run tests and write new ones using pytest, which relates to having a maintainable test suite for deployment purposes. Deployability is about being able to deploy software predictably, and having a good test suite helps ensure that the software works as expected before deployment.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including how to run and write tests using pytest. While important for software development, this falls under code quality and testing rather than software architecture."
Deployability,. ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md:162,integrated,162,docs/api/experimental.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md,1,['integrat'],['integrated'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: . ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses experimental methods and new features under development in Scanpy, which are not yet integrated into the core. This relates to deployment aspects because it highlights the capability of adding new features through experimentation, ensuring that these can be rolled back if necessary. The mention of normalization and PCA processing steps in the methods suggests a structured approach to ensure smooth deployment when these features are integrated.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: . ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses new methods in experimental analysis for scanpy, such as normalize_pearson_residuals and highly_variable_genes. These seem to be about algorithmic implementations rather than architectural decisions or system-level designs."
Deployability,"Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igrap",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:2348,install,2348,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,2,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igrap

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes various steps for installing software components using specific package managers and tools like Docker, Miniconda, and homebrew. It also addresses common installation issues and provides solutions. This aligns with deployability as it ensures that the software can be reliably deployed in different environments with minimal effort and proper setup.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igrap
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content focuses primarily on installation and configuration instructions for various tools and libraries such as Docker, Miniconda, and igraph. It discusses troubleshooting specific errors like 'Permission denied' and provides steps to install software packages using pip, conda, and homebrew. While these are operational aspects of software development, they do not touch upon architectural concepts or decisions. Instead, it's more about ensuring that necessary tools are installed and configured correctly, which is part of the setup and foundational skills in software development rather than architecture."
Deployability,"Hub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes jus",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1746,install,1746,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: Hub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes jus

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes steps for installing software using various package managers like pip and conda, which are related to deployment in that they enable efficient installation and management of dependencies in an operational environment.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: Hub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes jus
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content provided discusses installation and setup procedures for software packages, including clone commands, virtual environment setups, and dependency management. While these are important aspects of software development, they primarily focus on the implementation and configuration rather than the architectural design or principles."
Deployability,"a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;",configurat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1794,configuration,1794,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['configurat'],['configuration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses deployment processes such as creating release notes, tagging branches, and announcing releases. These activities are directly related to the Deployability quality attribute since they involve efficient and structured deployment practices. The mention of backporting fixes and version control management aligns with ensuring that deployments are predictable and can be rolled back if necessary. Thus, it accurately reflects the Deployability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses versioning, release processes, and build configuration steps. While it mentions creating a new branch for releases, this is more about project organization rather than architectural decisions or patterns."
Deployability,"a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub is also pretty good about prompting you to open PRs for recently pushed branches. We'll try and get back to you soon!. (dev-environments)=. ## Development environments. It's recommended to do development work in an isolated environment.; There are number of ways to do this, including conda environments, virtual environments, and virtual machines. We think the easiest is probably conda environments. Simply create a new environment with a supported version of python and make a {ref}`development install <dev-install-instructions>` of `scanpy`.; ",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:3431,install,3431,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,2,['install'],"['install', 'install-instructions']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub is also pretty good about prompting you to open PRs for recently pushed branches. We'll try and get back to you soon!. (dev-environments)=. ## Development environments. It's recommended to do development work in an isolated environment.; There are number of ways to do this, including conda environments, virtual environments, and virtual machines. We think the easiest is probably conda environments. Simply create a new environment with a supported version of python and make a {ref}`development install <dev-install-instructions>` of `scanpy`.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses setting up pre-commit hooks for code style checks and creating branches for feature development, which are related to deployment considerations such as automation and workflow management. While not directly about deploying software into an operational environment, these practices contribute indirectly to deployability by maintaining code quality and ensuring smooth deployments.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub is also pretty good about prompting you to open PRs for recently pushed branches. We'll try and get back to you soon!. (dev-environments)=. ## Development environments. It's recommended to do development work in an isolated environment.; There are number of ways to do this, including conda environments, virtual environments, and virtual machines. We think the easiest is probably conda environments. Simply create a new environment with a supported version of python and make a {ref}`development install <dev-install-instructions>` of `scanpy`.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses git operations, pre-commit hooks, and development processes. It covers creating branches, pushing to remote repositories, setting up development environments, and installing pre-commit. These are all related to software development practices but do not touch upon architectural concepts or patterns."
Deployability,"ally making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```.",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1192,release,1192,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ally making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```.

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes steps for creating and managing releases, which are related to deployability as deployment involves releasing software into an operational environment. Steps include creating release tags, setting pre-releases, managing milestones, announcing releases, etc. These directly tie into the key aspects of deployability, such as automation, deployment speed, and deployment granularity through proper tagging and process management.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ally making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```.
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content primarily discusses release management processes, version control, and build automation steps. While these are important aspects of software development, they do not involve discussions of architectural patterns, decisions, or high-level system structure. Instead, the focus is on the mechanics of releasing software, including tagging versions, creating release notes, and debugging build issues."
Deployability,"cs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:1034,release,1034,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,2,['release'],"['release', 'release-notes']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: cs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content seems to be related to documentation and building process for the software. It includes instructions on installing dependencies for documentation, building documentation using Makefile commands, and clearing caches. This aligns with deployability in that it ensures that the documentation can be built and deployed correctly, which is part of making the software deployable.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: cs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses documentation building, dependencies, and instructions for creating and updating documentation for a project. It includes steps such as installing packages, running make commands, and clearing caches. While it touches on the structure of the documentation (e.g., where to find files like `docs/api.md`), it does not address architectural concepts or high-level design decisions. Instead, it focuses on implementation-specific tasks related to documentation generation and versioning."
Deployability,"d type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packa",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1357,release,1357,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,2,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: d type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packa

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is about creating and managing software releases, including tagging versions, setting pre-releases, and updating milestones. These are all aspects related to deployability because they deal with how releases are deployed and managed in an operational environment. The steps described ensure that deployments can be done predictably and efficiently, which aligns with the key aspects of deployability such as automation, deployment speed, and deployment granularity.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: d type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packa
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses version control, release management, and build processes, which are administrative or operational aspects of software development rather than architectural concerns. It does not delve into design patterns, system structure, scalability, or other architecture-related topics."
Deployability,"en] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1645,install,1645,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: en] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses instructions for installing and setting up software in various environments like development, Docker, troubleshooting installation issues, and installing Miniconda. These instructions are related to making the software deployable by providing clear steps on how to install and configure dependencies, which contributes to the deployability of the software. The key aspects mentioned in the attribute description include automation, deployment speed, and deployment granularity, and while the content does not directly mention these, it does provide configuration steps that support these aspects indirectly.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: en] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content provided discusses installation instructions, environment setup, and dependency management for a software project. While these are important aspects of software development, they primarily focus on operational and technical details rather than the high-level architectural concepts or patterns. The information is more about how to set up and run the software, including using virtual environments, Docker, and specific package installations. There is no mention of architectural styles, design decisions, trade-offs, or system structure that would be considered part of software architecture."
Deployability,"epts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # Lis",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1152,release,1152,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: epts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # Lis

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses releasing software via GitHub's process, including creating new tags and managing release notes. Deployability involves being able to deploy with predictable effort. Creating releases is directly related to deployment, so it aligns well with deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: epts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # Lis
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses release management and build processes, which are aspects of software development and deployment but not directly related to software architecture concepts. There's no mention of architectural patterns, styles, or high-level system structure."
Deployability,"equire prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `setti",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:1711,updates,1711,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: equire prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `setti

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses updates to a software tool or process related to deployment considerations such as installing dependencies (numba), changes in functionality (connectivity measures using gauss kernel), name changes in annotations, and code syntax changes (group_by vs groupby). These are all aspects of deployability because they relate to the ability to install, configure, and deploy software reliably. The mention of UMAP and PCA updates might not directly relate but could be part of the deployment process or analysis that affects deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: equire prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `setti
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and changes in specific functions and algorithms within a software package (scanpy), including parameter changes, function renamings, and version upgrades. While these are important technical details, they focus on implementation-specific aspects rather than the high-level structure or architectural decisions of a system."
Deployability,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",deploy,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:3608,deploying,3608,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['deploy'],['deploying'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes information about bug fixes, reproducibility improvements, and changes in deployment tools (flit) which are related to making software deployable with predictable time and effort. Additionally, it mentions fixes for potential deployment issues like handling raw data properly and the use of raw=False for certain functions. The mention of using flit for building and deploying the package also relates to deployment capabilities as it's a tool that aids in packaging and deployment. Therefore, this content aligns with Deployability as it addresses improvements that facilitate easier and more reliable deployment processes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses issues related to software development, such as bug fixes and feature implementations. It includes details about specific functions and their behaviors, which fall under code-level implementation rather than architectural concerns."
Deployability,"g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5517,updates,5517,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses return types and formatting in the context of a function's documentation. It mentions different scenarios like prose returns, tuple returns, and mixed cases, providing examples for each type. This directly relates to deployability as it covers how functions can be documented with clear returns sections, aiding in the deployment process by ensuring others understand function outputs.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data structures and their specifications, which are more about implementation details rather than architectural concerns."
Deployability,"h as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1492,released,1492,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['released'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: h as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publ

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses release management procedures such as creating new release notes, tagging development branches, and handling bug fixes through specific commands and workflows. These activities directly relate to ensuring that software can be deployed predictably and efficiently, which aligns with Deployability. The mention of automation (e.g., using a bot for backporting) also supports the key aspect of deployment automation.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: h as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publ
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses software release management, build processes, and packaging, which are more about the executional aspects of software development rather than the architectural design or structure."
Deployability,"hon 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1071,install,1071,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: hon 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content in question discusses installation methods for software packages such as Conda and pip, which are related to deployment practices. It also covers using Docker for deployment and troubleshooting installation issues, all of which are aspects of deployability including automation and deployment speed.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: hon 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",True,"The content provides instructions for installing and configuring software packages, which relates to managing dependencies and environments in a software system."
Deployability,"ng [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push;",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1831,install,1831,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ng [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push;

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses setting up deployment processes such as forking repositories and using pre-commit hooks. These are related to making the software deployable by ensuring proper setup and automated checks, which aligns with Deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ng [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push;
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses code-level operations such as cloning repositories, setting up remotes, using version control tools like Git, and installing pre-commit hooks. These are typical tasks in software development that involve specific implementation details rather than architectural concepts or principles. There's no mention of high-level design decisions, patterns, scalability concerns, or system structure interactions."
Deployability,"of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.s",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1559,install,1559,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.s

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation and setup instructions for software, including using pip, Docker, troubleshooting installation issues, installing Miniconda, etc. Deployability refers to the ability to deploy software into an operational environment with predictable time and effort. The content includes information on how to install the software in different environments (e.g., editable installs via pip, conda, Docker) which supports deploying the software efficiently. It also covers potential issues during deployment, like permission errors and installing dependencies correctly. Therefore, the content is related to deployability as it addresses deployment procedures and ensures smooth installation/deployment processes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.s
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses installation instructions, dependencies, and development setup, which are implementation details rather than architectural considerations."
Deployability,"on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [minico",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:2197,installing,2197,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['installing'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [minico

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses installation and configuration steps for various tools like Docker, troubleshooting issues with permissions, and installing Miniconda. While deployment isn't explicitly mentioned, these steps are related to deploying software in an operational environment through automated means (Docker) and ensuring smooth installations, which contributes to deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [minico
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses Docker installation, troubleshooting with specific commands and tools, installing Miniconda, handling permissions in pip installations, and instructions for installing dependencies like igraph. While these are operational steps relevant to software development and installation procedures, they do not delve into architectural principles, patterns, or high-level system design. Instead, the focus is on setup and tooling for code execution rather than the structure or organization of software systems."
Deployability,"ote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub ",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1937,install,1937,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes setting up a development environment by cloning a repository and adding it as a remote. It also talks about creating branches for feature development and using pre-commit hooks. These steps are related to ensuring that software can be deployed predictably, especially through automation of certain processes like branch creation and code checks. The use of pre-commit ensures consistent coding standards which is part of deployability by reducing errors during deployment. The content focuses on setup and process automation which aligns with Deployability as described.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code setup and version control procedures, such as cloning repositories, adding remotes, setting up git branches, and using pre-commit hooks. These are primarily about development practices and tools rather than the high-level architectural design or system structure."
Deployability,"releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the p",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1570,release,1570,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the p

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content is about setting up and managing releases, which directly relates to deployability as it involves creating release notes, tagging branches, announcing releases, etc. This supports the software's ability to be deployed predictably with clear steps for rollbacks and updates.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the p
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses software release processes, packaging, and deployment steps, which are more about software development practices rather than architectural concepts or systems."
Deployability,"s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1774,integration,1774,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided lists several new features and updates related to Scanpy's functionality, including integration with external tools like Scrublet and Scanorama. These enhancements improve the ease of deployment by providing additional functionalities and integrations that can be utilized by users in their workflows. Specifically, the addition of new plotting methods and tools supports automated deployment through more efficient processing and visualization. The mention of `deployability` is thus evident as these updates streamline the deployment process.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses feature additions, bug fixes, and integration of external tools in a software package. It details specific functions, their updates, and new functionalities but does not delve into architectural concepts or decisions. The focus is on implementation and tool usage rather than the structure or design of the software architecture."
Deployability,"y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1819,installing,1819,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,2,['install'],"['install', 'installing']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes installation and setup instructions for various tools like pip, conda, Docker, etc., which are related to deployment considerations. It includes guidance on how to install dependencies, use virtual environments, and deploy software using containerization. These aspects directly tie into Deployability as they address the ease, automation, and repeatability of deploying software in different environments.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",True,"The content provides instructions on setting up development environments, which involves architectural considerations such as dependency management and installation workflows."
Deployability,"~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:2991,installation,2991,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['install'],['installation'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"I need to evaluate whether the provided content accurately reflects the Deployability quality attribute. The content includes mentions of external tools being added to an ecosystem page, updates and fixes for various functions, support for new features like leiden clustering, deprecations of old functions, parameter updates for larger data handling, speed improvements in function read operations, bug fixes including issues with specific functions, and improved documentation. These activities seem related to improving deployment capabilities by enhancing the software's deployability through better automation, increased deployment speed, and robustness via bug fixes and documentation. The content doesn't mention anything about rollback mechanisms but does focus on aspects like automation (adding tools) and deployment speed, which are key aspects of deployability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses software tool updates, documentation changes, bug fixes, and performance improvements in a data analysis pipeline. While it involves code modifications and optimizations, there's no explicit mention of software architecture concepts like patterns, styles, or structural decisions."
Energy Efficiency,"### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:103,efficient,103,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['efficient'],['efficient'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: ### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and changes in Scanpy, including optimizations for speed and memory usage (preprocessing, clustering, visualization), installation requirements (numba instead of cython), API changes (new functions for graph computations), and backwards compatibility issues. These focus on resource optimization and efficiency improvements, which align with the Energy Efficiency quality attribute as they involve minimizing energy consumption through efficient resource use. The content also mentions UMAP's faster processing compared to tSNE, further supporting energy efficiency by reducing computational time and resources.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and changes in a software package (Scanpy) including API changes, function delegations, and preprocessing optimizations. While these changes affect how the software operates and interacts with other modules, they are more about implementation details and functional updates rather than discussing the overall architecture or design of the system. The focus is on specific functions and their modifications, which fall under code-level developments rather than architectural considerations."
Energy Efficiency,"### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; ",adapt,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md:587,adapt,587,docs/release-notes/1.4.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md,1,['adapt'],['adapt'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: ### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes references to function updates, code design changes, and bug fixes within scanpy. This aligns with the description of Energy Efficiency as optimizing resource use through efficient updates and maintaining system performance.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses specific functions and code implementations in scanpy, such as self-assembling manifolds and trajectory inference tools. It mentions code design and bug fixes related to UMAP updates, compatibility with matplotlib versions, and PAGA fixes. While these are important aspects of software development, they primarily focus on implementation details rather than architectural concepts or decisions."
Energy Efficiency,"anpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` i",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:1424,efficiently,1424,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['efficient'],['efficiently'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: anpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` i

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes scanpy, which is a Python tool for single-cell analysis. It involves preprocessing, visualization, clustering, etc., and mentions its scalability with datasets over one million cells. The description aligns with resource optimization as it efficiently handles large data sets, implying lower energy consumption in processing. It also discusses contribution guidelines and community support, which relates to resource allocation and monitoring in development processes. Therefore, the content accurately reflects the quality attribute of Energy Efficiency.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: anpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` i
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses tools for single-cell gene expression data analysis, including preprocessing, visualization, clustering, trajectory inference and differential expression testing. While it mentions contributions like efficient handling of large datasets, this relates more to implementation details and functionality rather than architectural concerns."
Energy Efficiency,"b/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://n",power,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:1028,powered,1028,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['power'],['powered'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: b/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://n

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content is about Scanpy, which is a Python tool for single-cell gene expression analysis. It includes preprocessing, visualization, clustering, and other functionalities. The description emphasizes efficiency in handling large datasets, such as those with over one million cells, achieved through optimized resource use. This aligns well with the quality attribute of Energy Efficiency, as it discusses optimizing resource utilization and minimizing energy consumption during data processing. Additionally, the content includes links to documentation and contribution guidelines, but the primary focus is on the tool's functionality in handling large datasets efficiently, which directly relates to energy efficiency by implying optimized resource allocation and performance.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: b/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://n
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses the usage and functionality of a Python-based tool for single-cell gene expression analysis. It mentions preprocessing, visualization, clustering, trajectory inference, and differential expression testing. The description focuses on the toolkit's features and how it operates on datasets rather than detailing any software architecture principles or patterns."
Integrability," gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1609,integration,1609,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content:  gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses various software integrations and updates to functionality in scanpy, including adding new tools like Scrublet, Scanorama, and scirpy. These updates enhance the system's ability to integrate with other systems and components, aligning with the Integrability quality attribute which focuses on combining systems and reducing technical risks through compatibility. The content also mentions improvements in user interfaces for better usability when integrating, suggesting an alignment with integrability. Therefore, this is a true positive.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses feature additions and bug fixes in a software tool, including implementation details of various functions and their parameters. While this is relevant to software development, it does not touch upon architectural concepts or principles such as patterns, styles, trade-offs, or system structure."
Integrability,"# External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md:291,integrate,291,docs/external/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md,2,"['integrat', 'wrap']","['integrate', 'wrappers']","The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: # External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to integrate external tools with scanpy by importing wrappers and provides links to relevant ecosystems. This directly relates to the ease of combining systems, which is what Integrability measures.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses tool submissions and imports within a specific framework, which are more about implementation details rather than architectural concerns."
Integrability,"# Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru",interface,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:377,interface,377,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['interface'],['interface'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: # Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses setting up Git for working with a codebase and includes instructions on forking and cloning repositories, which relates to integrating external systems (e.g., collaboration tools) into the project. This aligns with the concept of integrability as it involves the process of combining systems through proper setup and configuration.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses Git operations and pre-commit hooks, which are related to software development practices but do not touch upon any architectural concepts or principles. It deals with version control and automation tools, which are more about implementation details and processes rather than the overall system architecture."
Integrability,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md:119,integration,119,docs/external/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses data integration, sample demultiplexing, and imputation techniques in scanpy.external. These are all aspects related to integrating and combining systems or components. The mention of imputation (filling missing data) also ties into system compatibility as it ensures data integrity before integration. Therefore, the content accurately reflects the integrability quality attribute by covering key integration processes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data integration, sample demultiplexing, imputation techniques, and specific methods like DCA and Magic. While these relate to data processing steps in an application, they are implementation details rather than architectural concerns."
Integrability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1053,integration,1053,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses preprocessing steps such as filtering highly-variable genes and batch-effect correction, which are important aspects of data integration. The use of functions like pp.regress_out for batch correction aligns with the need to integrate data effectively. However, integrability also involves ensuring interfaces are compatible, which isn't directly addressed here but is part of broader data integration practices.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data preprocessing steps such as filtering genes, normalizing data, applying PCA, and regression for batch effect correction. These are implementation details about data handling in a bioinformatics tool rather than discussions of software architecture."
Integrability,## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md:56,integration-scanorama,56,docs/tutorials/spatial/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md,1,['integrat'],['integration-scanorama'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content refers to 'integration-scanorama' which likely relates to integration aspects of a system, aligning with the Integrability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",True,"The content mentions 'spatial' which could relate to spatial aspects in software architecture, possibly discussing system layout or distribution."
Integrability,"## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md:828,integration,828,docs/api/tools.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various tools and functionalities provided by scanpy such as PCA, t-SNE, UMAP, clustering methods like Leiden and Louvain, data integration with 'ingest', marker gene analysis, gene scoring, and simulations. These are all related to the ability of the system to integrate different modules, preprocess data, analyze clusters, and perform various analyses that contribute to the overall integrability of the software. The tools mentioned help in effectively combining different components and ensuring compatibility, which aligns with the quality attribute of Integrability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses various computational tools and their functionalities, such as PCA, t-SNE, UMAP, clustering algorithms (Leiden, Louvain), data integration, marker genes, gene scoring, and simulations. These are methods for processing and analyzing biological data, particularly in the context of genomics or cell biology. While these tools are used in software development, the content focuses on the usage and implementation details rather than discussing high-level architectural concepts, patterns, or system structures."
Integrability,"### 1.3.4 {small}`2018-11-24`. - {func}`~scanpy.tl.leiden` wraps the recent graph clustering package by {cite:t}`Traag2019` {smaller}`K Polanski`; - {func}`~scanpy.external.pp.bbknn` wraps the recent batch correction package {cite:p}`Polanski2019` {smaller}`K Polanski`; - {func}`~scanpy.pp.calculate_qc_metrics` caculates a number of quality control metrics, similar to `calculateQCMetrics` from *Scater* {cite:p}`McCarthy2017` {smaller}`I Virshup`; ",wrap,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.4.md:59,wraps,59,docs/release-notes/1.3.4.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.4.md,2,['wrap'],['wraps'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.3.4 {small}`2018-11-24`. - {func}`~scanpy.tl.leiden` wraps the recent graph clustering package by {cite:t}`Traag2019` {smaller}`K Polanski`; - {func}`~scanpy.external.pp.bbknn` wraps the recent batch correction package {cite:p}`Polanski2019` {smaller}`K Polanski`; - {func}`~scanpy.pp.calculate_qc_metrics` caculates a number of quality control metrics, similar to `calculateQCMetrics` from *Scater* {cite:p}`McCarthy2017` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses specific functions and packages in scanpy related to data processing and quality control metrics. This involves integrating external tools and packages, which relates to how well the system can be integrated with other components. The complexity of these integrations includes both functional aspects (e.g., wrapping external packages) and technical risks (e.g., compatibility issues). Therefore, this content is directly related to the integrability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.3.4 {small}`2018-11-24`. - {func}`~scanpy.tl.leiden` wraps the recent graph clustering package by {cite:t}`Traag2019` {smaller}`K Polanski`; - {func}`~scanpy.external.pp.bbknn` wraps the recent batch correction package {cite:p}`Polanski2019` {smaller}`K Polanski`; - {func}`~scanpy.pp.calculate_qc_metrics` caculates a number of quality control metrics, similar to `calculateQCMetrics` from *Scater* {cite:p}`McCarthy2017` {smaller}`I Virshup`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses specific functions and packages in a software context, such as data processing and quality control metrics. It mentions wrapping recent tools and packages, but there's no mention of architectural patterns, styles, or high-level system structures. Instead, it focuses on implementation details like package usage and function names."
Integrability,"### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md:157,integrated,157,docs/release-notes/1.3.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md,1,['integrat'],['integrated'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses integrating new features and existing tools (e.g., plotting gallery, tutorials, manifold viewers, cellxgene, UCSF browser) which relates to how well components can be combined. The cost and risks of integration are not explicitly mentioned, but the focus is on successful integrations and compatibility. Therefore, it's a true positive.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and features in software tools like cellxgene, single-cell browser, and integration of tutorials, but does not delve into architectural principles or patterns. It focuses on code design elements such as specific function replacements and data handling between different tools."
Integrability,### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md:649,integrate,649,docs/release-notes/1.8.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md,1,['integrat'],['integrate'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content includes updates to conda installation instructions and adds PASTE tool to the ecosystem, which indicates efforts towards integrating new tools and systems, contributing to integrability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses bug fixes and feature additions in the software, including specific code elements like functions and attributes, as well as compatibility with certain versions. While this involves understanding how different components interact (e.g., fixing issues related to integration with other tools like UMAP), it is more focused on functional updates rather than architectural concepts or principles."
Integrability,", 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); ",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5605,depending,5605,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['depend'],['depending'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: , 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses return types and structures in function documentation, specifically about how functions return data, whether through prose or tuple formats. It mentions different ways to structure returns based on complexity, such as using dictionaries, tuples, or updating objects like AnnData. This is related to integrability because it's about how systems can be integrated with each other by ensuring compatible interfaces and structures, which involves understanding and managing the return types and data structures that one system might expect from another. Therefore, this content aligns with the quality attribute of integrability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: , 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses function parameters, return types, and documentation structure for a specific function in a codebase, which are implementation details rather than architectural concerns. It does not address any high-level system structure, interactions, or architectural patterns."
Integrability,. ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md:162,integrated,162,docs/api/experimental.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md,1,['integrat'],['integrated'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: . ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses new methods in experimental.pp that are not yet integrated into Scanpy core, which relates to integrability as it concerns combining systems or components. The mention of methods and their status indicates integration challenges, aligning with the attribute's focus on integration complexity and compatibility.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: . ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",True,"The content discusses new methods under development in an experimental module, which could relate to how these methods are structured and integrated into the system. This implies considerations around system design and architecture."
Integrability,"` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w",message,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:4126,message,4126,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['message'],['message'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes multiple instances of bug fixes and improvements to specific functions in an application. This suggests that the integration with other systems or components has been enhanced, which aligns with the quality attribute of Integrability. The mention of 'bugfixes' indicates issues that might have hindered integration, and their resolution contributes positively to integrability by reducing technical risks.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses bug fixes, feature updates, and improvements in a software application. These are implementation details rather than architectural considerations. There's no mention of high-level design, patterns, or structural concerns."
Integrability,"etween spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time inform",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:2866,integrates,2866,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integrates'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: etween spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time inform

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses integrating various tools and data types (e.g., Bento, MUON, MuData, scirpy, dandelion, Swan, scvi-tools, CellRank) to perform multimodal analyses. The descriptions mention combining different datasets and using Python libraries for analysis, which relates to the concept of integrability as it involves integrating systems or components. However, the connection is not directly about system integration but more about data integration in specific biological domains.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: etween spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time inform
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses tools and libraries for data analysis, particularly in the fields of genomics and transcriptomics. While it mentions various Python packages and their functionalities, there is no explicit discussion of software architecture concepts such as patterns, styles, or high-level system structure. Instead, the focus is on specific tools' features and functionalities."
Integrability,"mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:5352,dependencies,5352,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['depend'],['dependencies'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes both bug fixes and new features added to the software. This aligns with the idea that integrability involves making systems compatible and easily integrated. Bug fixes often involve resolving compatibility issues, which ties into the integration aspect of the system. The addition of new tutorials and improved documentation also supports better integrability by helping users understand how to use the system effectively with other tools or components.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses bug fixes, code updates, and testing procedures in scanpy. While these are important aspects of software development, they do not delve into architectural concepts or principles such as patterns, styles, trade-offs, or system structure."
Integrability,"oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:1722,integrate,1722,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integrate'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various tools and resources related to genomics data analysis, including RNA velocity tools like scVelo and spatial transcriptomics tools like squidpy. It also mentions computational methods for integrating multimodal data (MUON and MuData) and adaptive immune receptor repertoire analysis tools. These descriptions focus on the integration capabilities of these tools in genomics data analysis, such as combining different datasets or modalities. The attribute description emphasizes the ease of combining systems or components, including technical risks and interface compatibility. While the content provides information about specific tools that likely relate to integrability, it does not directly discuss the technical aspects of how these integrations are achieved, nor does it quantify integration costs or risks. However, given the context, it is reasonable to infer that discussing such tools is related to their integrability in data analysis workflows.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses various tools and computational methods in bioinformatics, such as scVelo, squidpy, PASTE, bento, MUON, MuData, scirpy, and dandelion. These are all related to data analysis and computation, particularly in the context of spatial transcriptomics, omics data, and single-cell omics analysis. While these tools might involve software architecture details, the content provided focuses on their usage, functionality, and integration rather than discussing the underlying architectural principles or patterns."
Integrability,"s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1774,integration,1774,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses updates and features in scanpy such as new functionalities for integration with other tools and components, including Scrublet, Scanorama, scirpy, scvi-tools, and others. This aligns with the concept of integrability, which involves combining systems or components seamlessly. The description mentions technical enhancements that facilitate integration, supporting compatibility and reducing integration costs. Therefore, this content accurately reflects the quality attribute of integrability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and features in a software tool, including new functions, integrations with external tools, and API updates. While these changes might involve considerations like scalability or maintainability, the text focuses more on implementation details and specific tool updates rather than high-level architectural principles or patterns."
Integrability,"sics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each",message,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2437,message,2437,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,2,['message'],['message'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: sics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses Test Driven Development and pytest fixtures, which are about writing tests before implementation to ensure integrability. It also talks about testing different aspects of a function, including error handling and parameterization. This contributes to ensuring that the system can be integrated with other components when it's developed. Therefore, this content is relevant to Integrability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: sics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, specifically Test-Driven Development and pytest fixtures. These are aspects of software development methodology and implementation details rather than architectural concepts or high-level system design."
Modifiability," bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; ",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:2756,config,2756,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['config'],['config'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content:  bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses version control and release processes, such as creating bugfix releases, tagging branches, and uploading to TestPyPI. These activities are related to software modifiability because they involve adapting the system by adding or modifying features and adjusting to new environments. For example, when a bug is fixed and released, it demonstrates the ease with which changes can be made and propagated through the system. Therefore, this content aligns with the quality attribute of Modifiability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses release processes, build configurations, and versioning strategies. While it touches on tagging and creating branches for releases, these are more about software development practices rather than architectural considerations."
Modifiability," observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:1409,variables,1409,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content:  observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to manipulate and utilize an AnnData object in Scanpy, including functions like sc.pl.umap for plotting and options for returning copies versus modifying data in place. This involves understanding and adjusting system components (e.g., the AnnData class) which is related to modifiability as it deals with adapting the system by modifying its features or structures.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data handling and data analysis using specific software tools like scanpy, including details about how these tools operate (e.g., in-place modifications, plotting functions), data structures used (AnnData class), and file operations. While it touches on the structure of data objects, this is more related to data manipulation and analysis rather than software architecture. Software architecture concerns involve high-level design decisions, patterns, and system-wide interactions which are not directly addressed here."
Modifiability,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt:12,variable,12,src/scanpy/sim_models/toggleswitch.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt,3,"['coupling', 'variab']","['coupling', 'variable']","The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,The content provided includes variable assignments and coupling information which are relevant to understanding modifiability through factors like coupling and cohesion. The presence of these details aligns with the description of modifiability as it involves assessing changes in the system.,"
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",True,"The content discusses boolean update rules and coupling lists, which relate to how different components interact and influence each other in a system. This suggests an architectural concern about integration and behavior."
Modifiability,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt:126,variable,126,src/scanpy/sim_models/krumsiek11.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt,3,"['coupling', 'variab']","['coupling', 'variable']","The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: # See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content includes a series of variable update rules and coupling information, which are detailed in the attribute description of Modifiability as factors that influence how changes can be made to the system. The update rules specify how variables interact, affecting modifiability, and the coupling list details dependencies between components, both of which align with the concept of Modifiability. Therefore, this content accurately reflects the quality attribute of Modifiability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content appears to be focused on biological models and gene regulatory networks, using specific variable update rules and coupling relationships. While it mentions variables and their interactions, these are part of a mathematical or biological model rather than software architecture."
Modifiability,"# Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:447,variables,447,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,2,"['config', 'variab']","['configuration', 'variables']","The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: # Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content is about using Scanpy for data analysis and manipulating AnnData objects, which includes modifying data by adding/removing features (like importing modules) and adapting to new environments (like plotting functions). It discusses how tools like `sc.tl.umap` modify the data in place or return copies. This directly relates to modifiability as it explains how easily the system can be adapted and modified, including through configuration options and in-place operations. The content doesn't contain logs but instead technical instructions relevant to the quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses the usage of Scanpy, a data analysis tool for genomics, including its workflow and usage principles. While it touches on aspects of data storage (AnnData class) and pipeline operations (inplace modifications), these are implementation details rather than architectural concerns. There is no discussion of high-level system structure, interactions, dependencies, or constraints that would fall under software architecture."
Modifiability,"## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md:469,configurations,469,docs/api/plotting.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md,1,['config'],['configurations'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses plotting functions and visualization tools in ScanPy, which allows for adapting the system by adding, removing, or modifying features through configuration settings and parameters. The ability to modify visual parameters and customize plots contributes to the modifiability of the system as described.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content describes a plotting module with various visualization functions and preprocessing tools. It mentions that for each tool (like PCA or embeddings), there are corresponding plotting functions. However, this discussion focuses on the functionality of the plotting library rather than the underlying system architecture. The terms used are more related to data visualization techniques and methods rather than architectural concepts such as patterns, styles, decisions, trade-offs, or system structure."
Modifiability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:134,variable,134,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['variab'],['variable'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses preprocessing steps like filtering genes and normalizing data, which are modifications to the system's functionality to improve performance. These adjustments align with modifiability by allowing the system to adapt to different conditions.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data preprocessing steps such as filtering genes, calculating QC metrics, and batch effect correction. It mentions specific functions and recipes used in these processes. While this involves functional aspects of data processing, it does not delve into the higher-level architectural considerations or design decisions. The focus is on data transformation rather than system structure, interactions, or architectural patterns."
Modifiability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:597,variables,597,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses new features, performance improvements, and documentation updates which relate to modifiability as it involves adding new features and adapting the system through code changes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and features in a software package, including performance improvements and new functions. While this relates to software development, it doesn't explicitly address architectural concepts such as patterns, styles, or system structure."
Modifiability,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md:1242,layers,1242,docs/release-notes/1.4.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and changes to the scanpy tool, including new functionality and code design elements such as layer support for scatter plots and fixes in functions. These describe modifications and enhancements made to the system, which aligns with Modifiability by allowing the system to be adapted through added features and improved functionalities.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and new features in a software tool, including command-line interface changes, function additions, and performance improvements. While these are implementation details rather than architectural decisions or patterns."
Modifiability,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md:155,variables,155,docs/release-notes/1.4.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes updates and changes made to specific functions in the software, including new features and bug fixes, which relates to modifiability as it involves modifications and enhancements.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses functional updates, bug fixes, and code design changes in specific parts of a software product. It includes details about new functionality added to functions like ~scanpy.pp.combat and ~scanpy.tl.rank_genes_groups, as well as bug fixes in t-tests and UMAP implementations. These are implementation-level changes rather than discussions about architectural patterns or system structure."
Modifiability,"### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; ",adapt,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md:587,adapt,587,docs/release-notes/1.4.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md,1,['adapt'],['adapt'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes updates and modifications to various functions and modules in the software project. These include new functionality implementations, code design changes, bug fixes, and compatibility adjustments. Modifiability refers to the ease with which the system can be adapted by making such changes. The mention of specific functions like `violin`, `ingest`, compatibility with newer versions of libraries, and fixes for existing features all indicate that modifications are being made, which aligns with the concept of modifiability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses functionality, code design, and bug fixes within specific modules or components of a software system. It details changes in code implementation, such as updates to functions, integrations with external libraries, compatibility issues, and bug resolutions. These aspects fall under software development practices rather than architectural concerns. Software architecture typically involves high-level design decisions about the structure of a system, its components, scalability, performance, etc., which are not directly addressed here."
Modifiability,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md:426,configuring,426,docs/api/settings.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md,1,['config'],['configuring'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: (settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses configuration settings and their purposes within a software system. It includes details about setting parameters like autoshow, figure directories, logging verbosity, and print versions. This context pertains to how easily one can adjust system settings without altering the core functionality. The ability to modify these settings is indicative of modifiability, which allows users to adapt the system to their needs by changing or adding configurations. Therefore, this content accurately reflects the quality attribute of modifiability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses settings and configuration options for a library, including default directories and logging levels. While these are important implementation details, they do not touch upon architectural concepts or patterns."
Modifiability,"- {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:1700,variables,1700,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: - {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"Based on the provided context and analysis, the content discusses various software features, bug fixes, updates, and new functionalities in the scanpy library. These include modifications such as allowing users to filter genes with specific criteria, improvements in data processing functions, and enhancements in visualization tools. The descriptions of these changes align with the concept of modifiability as they demonstrate how the system can be adapted or adjusted through updates and feature additions. Therefore, the content accurately reflects the quality attribute of modifiability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: - {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses specific functions and their updates in a software package, such as 'scanpy' including normalization, filtering, dimensionality reduction techniques. These are implementation details about data processing steps rather than discussions of architectural principles, patterns, or system-level structures."
Modifiability,"a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1794,configuration,1794,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['config'],['configuration'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses version control, release processes, and build steps which are related to modifiability because it involves changing versions, backporting fixes, and updating release milestones. Modifiability refers to how easily a system can be adapted, which includes changes like updating versions (e.g., from 1.7.0 to 1.8.0.dev0) and managing feature additions/removals through proper processes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses release processes, versioning, tagging, and build steps. While these are important aspects of software development, they are more about the packaging and deployment phases rather than the high-level architectural design or patterns."
Modifiability,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:4055,layers,4055,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is mainly bug fixes and development process changes such as switching to flit for building the package and adopting pre-commit for style checks. These activities are related to software modifiability as they involve adapting the system by making changes, such as adding new features or modifying existing ones, which is part of assessing how easily the system can be adapted.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses issues with package development, such as bug fixes, version control, and deployment processes. These are aspects of software development rather than architectural concerns."
Modifiability,"g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5505,layers,5505,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses return types and descriptions for functions, which relates to how systems can be modified by adding, removing, or modifying features. This aligns with modifiability as it involves adjustments in code structure and functionality.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content provided discusses data processing and normalization in an AnnData object, including how normalized copies are returned or updates made to the original object based on the 'inplace' parameter. While this is relevant to data handling and function behavior, it does not directly relate to software architecture concepts such as patterns, styles, trade-offs, or system structure."
Modifiability,"hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:4622,variables,4622,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices like reducing test data size and using fixtures for caching common computations, which relates to modifiability by ensuring tests can be easily adjusted or modified when needed. The mention of caching in fixtures supports modifiability as changes to tests are manageable and consistent.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including test optimization and setup, which are aspects of software development but not directly related to software architecture. It focuses on testing frameworks, fixtures, and plotting comparisons, which fall under code quality and testing methodologies rather than the high-level design and structure of a system."
Modifiability,"ize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:1817,variables,1817,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,2,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses updates and features in scanpy regarding normalization, dimensionality reduction, and embedding plots, which relate to the modifiability as it deals with system adaptability by allowing modifications such as adding new functions and features.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses feature implementations, functional updates, and code modifications in an analytics framework. It includes details about specific functions, their parameters, pull requests, and contributors. While it touches upon aspects like dimensionality reduction with PCA, which could relate to data processing strategies, the focus is on function implementations rather than architectural design or high-level system structure."
Modifiability,"le` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like in matrixplots). - {func}`~scanpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:2511,variable,2511,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['variab'],['variable'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: le` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like in matrixplots). - {func}`~scanpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses modifications and additions to the system, such as new features (e.g., CellRank addition), new parameters, bug fixes, and style changes which align with modifiability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: le` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like in matrixplots). - {func}`~scanpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses functionality, features, and modifications of a software tool (e.g., scanpy). It includes details about parameters, plotting options, new styles added, bug fixes, and feature additions. While it touches on some aspects of the system's structure or configuration (like parameter passing and concantenation), these are implementation-level details rather than architectural concerns. There is no discussion of high-level design decisions, patterns, trade-offs, or structural elements that would be considered part of software architecture."
Modifiability,"old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; ",refactor,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:5006,refactoring,5006,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['refactor'],['refactoring'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content is a list of code changes and bug fixes, which are all related to modifying and adapting the system. Each entry mentions specific pull requests with details like 'smaller' and changes made by various contributors. This indicates that the system's modifiability has been addressed through these adjustments. Therefore, the content aligns well with the Modifiability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content provided lists various bug fixes and updates to a software project, including changes to functions, data structures, and error handling. While this content is relevant to software development in general, it does not explicitly discuss software architecture concepts such as architectural patterns, system structure, or high-level design decisions. Instead, it focuses on specific coding details like function calls, array operations, and bug fixes."
Modifiability,"ound [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for com",extend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2853,extended,2853,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['extend'],['extended'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ound [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for com

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices and strategies, including how to structure tests, handle edge cases, optimize methods, cache computations, and improve test performance. These are aspects related to modifiability because they involve making the system adaptable by ensuring comprehensive testing, which can be easily modified or adjusted if needed. The mention of caching in test fixtures also aligns with efficient modifications.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ound [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for com
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content provided discusses testing strategies, including various test cases and performance considerations. While it touches upon aspects of code behavior and optimization, it does not delve into architectural concepts such as patterns, structures, or high-level system design. Instead, the focus is on ensuring tests are accurate and efficient, which relates more to software development practices rather than architecture."
Modifiability,"release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Erasl",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:1163,layers,1163,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Erasl

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes new features and improvements in an analytics tool, including support for spatial data, integration with external tools like scVI, performance optimizations, and code design enhancements. These changes aim to make the system more adaptable by adding functionality, improving efficiency, and refining the interface. The mention of 'modifiability' is not directly present, but the focus on adding features, integrating new components, and optimizing processes suggests an underlying capability to modify and adapt the system as needed. Therefore, this content aligns with the modifiability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Erasl
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses functionality, features, and code updates in an open-source project (Scanpy). It includes details about new functionalities, performance improvements, and integration with external tools. While these are important aspects of software development, they primarily focus on the implementation and usage rather than the architectural design or patterns."
Modifiability,"tension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they ar",parameteriz,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1789,parameterize,1789,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['parameteriz'],['parameterize'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: tension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they ar

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses testing practices such as parallel test execution and handling warnings, which are related to maintainability and modifiability because effective testing frameworks and configurations enable easier modification of the system in response to new requirements or issues.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: tension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they ar
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices and tools, such as pytest-xdist for parallel test execution and using fixtures and parameterization in tests. It also provides guidance on writing tests, including example test cases and recommendations for test-driven development. While this is useful information for software development, it does not address any specific concepts or principles related to software architecture, such as architectural patterns, system structure, scalability, or maintainability. Instead, it focuses on testing methodology and practices."
Performance," contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2807,cache,2807,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['cache'],['cache'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content:  contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various Scanpy functions and changes related to graph visualization, clustering methods, and performance optimizations such as UMAP implementation and connectivity measurements. These areas include improving computational efficiency and resource management under varying conditions, aligning with the definition of Performance which focuses on meeting timing requirements and optimizing resource use. The mention of specific functions like `~scanpy.tl.rank_genes_groups` and performance considerations in data processing support the link to performance quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses technical aspects of software development, such as specific functions and tools in data analysis pipelines, configuration settings, caching mechanisms, and visualization techniques. While these are important implementation details, they do not directly address or discuss software architecture concepts like patterns, styles, trade-offs, or high-level system structure."
Performance," fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:6778,performance,6778,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content:  fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content details various fixes and updates in scanpy, including performance-related optimizations such as testing against Python 3.12 and compatibility with newer versions of dependencies. These changes aim to improve overall system performance by ensuring efficient resource utilization and proper timing under different loads. Thus, the content aligns well with the Performance quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code fixes, dependency updates, deprecation policies, and testing practices. While these are important aspects of software development, they relate more to implementation details rather than architectural concepts or decisions."
Performance,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:383,perform,383,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['perform'],['perform'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various preprocessing steps in Scanpy such as filtering genes, normalizing data, and using PCA for dimensionality reduction. These are part of the system's ability to handle data efficiently, which relates to performance. However, some of the text refers to logs without additional context, but since it also covers preprocessing optimizations, it doesn't solely focus on logs. The overall content is more about optimizing resource utilization through effective processing steps.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data preprocessing steps such as filtering genes, normalizing data, and batch effect correction. These are implementation details related to processing biological data rather than software architecture."
Performance,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:85,performance,85,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,2,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses performance improvements in scanpy such as enhanced dask support, better neighbor search and clustering optimizations, and new functions supporting efficient computations. These are directly related to the system's capacity to handle tasks efficiently under varying loads, which aligns with the definition of Performance.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and new features in scanpy, including performance improvements, documentation enhancements, and specific functions and their changes. While it mentions moving functions between modules (e.g., {func}~scanpy.pp.scrublet) and supporting parameters like 'mask' which could relate to certain design patterns or data handling in the codebase, these are implementation details rather than discussions about software architecture. The content focuses on functional updates and internal optimizations rather than high-level architectural considerations."
Performance,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md:77,performance,77,docs/release-notes/1.10.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,The content includes changes related to performance improvements such as optimizing resource usage and speeding up computations under varying loads. The fixed instructions and documentations also indirectly support system's capacity to handle resources effectively.,"
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content describes various code improvements, including performance optimizations and documentation updates. While these are important aspects of software development, they do not discuss architectural concepts such as patterns, styles, or high-level system structure."
Performance,"### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md:511,performance,511,docs/release-notes/1.3.3.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses changes in code design related to performance improvements, specifically mentioning resource optimization and load handling.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code-specific updates, such as changes in compression settings and performance optimizations within specific functions and methods of anndata. This focuses on implementation details rather than high-level architectural considerations."
Performance,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md:295,performs,295,docs/release-notes/1.4.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md,1,['perform'],['performs'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes updates to functionality including new features and bug fixes in specific software components like scanpy. It mentions performance improvements such as using UMAP dependencies correctly and optimizing resource utilization through batch processing adjustments. These changes align with enhancing the system's capacity to handle tasks efficiently under varying conditions, fitting the definition of Performance.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code updates, new features, and bug fixes in specific functions of a software tool. It includes details about function behaviors, parameter options, and changes made to those functions. While this is relevant to software development, it focuses on implementation-level changes rather than architectural considerations such as design patterns, system structure, or high-level system interactions."
Performance,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",load,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:652,load,652,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['load'],['load'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various new features and updates in the 1.5.0 release of the system, including support for spatial data, integration with single-cell data, new functions like scanpy.pp.scale, and improvements to PCA processing. The section labeled under 'Performance' mentions that scanpy.tl.score_genes has an efficient implementation for sparse matrices and that scanpy.pp.pca uses implicit centering for improved performance on large datasets. These enhancements align with the quality attribute of Performance, as they involve optimizing resource utilization and reducing blocked time through more efficient processing. Therefore, the content accurately reflects the intended quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses new functionalities, performance improvements, and code details such as functions and their implementations, but does not address high-level architectural concepts or design decisions. It focuses more on specific features, function updates, and technical aspects of processing data rather than the overall system architecture."
Performance,"erer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without cente",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:1574,performance,1574,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: erer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without cente

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses various updates and changes in Scanpy functions, including performance improvements for sparse matrices using efficient implicit centering in PCA. This directly relates to the Performance quality attribute as it involves optimizing resource utilization under varying load conditions, leading to improved efficiency and reduced blocked time.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: erer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without cente
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses technical details of software functions, data processing, and bug fixes, but does not touch upon architectural concepts or decisions. It focuses on specific implementation aspects like function updates, performance improvements, and code design changes."
Performance,"serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2785,cache,2785,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['cache'],['cache'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various aspects of data visualization using UMAP and other tools like tSNE, which are related to performance in terms of computational speed and efficiency, especially under high load conditions. UMAP's efficiency is highlighted as it directly embeds single-cell graphs faster than tSNE. This aligns with the definition of performance focusing on managing resource contention and optimizing resource utilization.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data visualization techniques, specifically UMAP and tSNE, implementation details in a software package (scanpy), configuration settings, and usage examples. It does not touch upon high-level architectural concepts or patterns."
Performance,"suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated",optimiz,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2932,optimizing,2932,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['optimiz'],['optimizing'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses performance testing and optimization tips for test suite efficiency and accuracy. This aligns with the definition of Performance as the system's capacity to meet its timing requirements, effectively managing resource contention.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including test case ideas and performance considerations. While testing is a crucial part of software development, it does not directly involve architectural concepts or decisions. Instead, it focuses on ensuring code functionality and performance through effective testing strategies."
Performance,"the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; ",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2830,cachedir,2830,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['cache'],['cachedir'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses various ScanPy functionalities related to data analysis and visualization, such as using UMAP for connectivity measurements and performing marker gene finding through logistic regression. It also touches on optimizations like downsampling counts and graph abstraction techniques. While these topics are more about the system's efficiency in processing and visualizing data rather than its overall performance under load, they indirectly contribute to performance by improving resource utilization and reducing blocked time in data handling. Therefore, this content aligns with the concept of performance as it pertains to efficient and effective data processing and visualization.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses technical aspects such as function calls, specific algorithms (like UMAP and Louvain), data structures (graph abstraction), and configuration settings. While these are important implementation details, they do not touch on higher-level architectural concepts, patterns, or decisions."
Safety,"{issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smalle",detect,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:2716,detection,2716,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['detect'],['detection'],"The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Safety
Attribute Description: The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.
Content: {issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smalle

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content described focuses on bug fixes and improvements in documentation and functionality, such as fixing type errors and enhancing user guides. These changes are directly related to system reliability and robustness, which falls under the safety attribute since they prevent potential issues that could lead to harm. The context here pertains to error handling, reproducibility, and documentation clarity, all of which contribute to a safer and more reliable system.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: {issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smalle
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content provided discusses various software development processes, including bug fixes, documentation improvements, and changes to deployment tools like flit. While these are important aspects of software development, they do not directly pertain to software architecture concepts such as architectural patterns, design decisions, or system structure."
Testability," argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivale",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1619,tests,1619,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivale

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses pytest usage, including running tests in parallel with specific arguments and tips for writing tests, which directly relates to testability by enabling efficient testing and facilitating the creation of test cases. This aligns with the quality attribute of Testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivale
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses pytest usage for testing, including running tests in parallel with specific arguments and recommendations for writing tests using pytest fixtures. While it touches upon testing practices which can relate to software architecture indirectly (e.g., test coverage, test design), the content itself is focused on test execution and implementation details rather than discussing high-level architectural concepts or patterns."
Testability," examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `",assert,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2286,assert,2286,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['assert'],['assert'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses writing tests and provides guidance on using pytest fixtures and test parameters. This is directly related to making software functionality easier to validate through testing, aligning with Testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",True,"The content discusses testing practices and test-driven development, which are aspects of software architecture and design. While it's about implementation details, the emphasis is on ensuring code quality through testing, which relates to overall system design and architecture."
Testability," fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:6195,tested,6195,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,2,['test'],"['tested', 'testing']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content consists of various software updates and fixes in scanpy, including changes to functions, deprecated features, and new test implementations. These are all related to improving the quality attributes such as maintainability, reliability, and testability. By addressing bugs and deprecations, the code becomes easier to test and validate, thus enhancing testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content focuses on software development activities such as fixing bugs, improving compatibility with dependencies, testing environments, handling deprecations, and code optimizations. These are all implementation-level details rather than discussions of architectural principles or high-level system design."
Testability," occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2393,logistic,2393,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['log'],['logistic'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses updates and features in scanpy, including changes like PCA implementation upgrades and new tools such as UMAP for data visualization. These updates enhance the functionality and usability of the software, indirectly contributing to testability by providing better tools for testing and validation. The mention of test cases and oracles aligns with the attribute's focus on facilitating the creation of such tools. Therefore, this content accurately reflects the quality attribute of Testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code usage, functions, and updates in specific tools (e.g., scanpy), which are implementation details rather than architectural concerns. It covers feature changes, function parameters, and usage examples, without delving into higher-level design aspects or system structure."
Testability," suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arg",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1084,test,1084,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arg

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices, including the use of pytest and strategies for running tests efficiently. This aligns with Testability, as it involves making software easier to test through structured testing frameworks and efficient execution.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content:  suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arg
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including how to run and prioritize tests using pytest. It provides instructions on test execution and optimization but does not delve into software architecture concepts or high-level system design. Instead, it focuses on implementation-level details such as test suite setup and test running strategies."
Testability,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md:18,tests,18,docs/dev/ci.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md,9,['test'],"['test', 'testing', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses how to view test plots from failed tests in Azure pipelines, which involves using tools like `check_same_image` and `image_comparer`. This helps in verifying the consistency of results across different environments by comparing images and finding diffs. The use of fixtures and navigation through pipeline views supports testability by making it easier to observe and control the system's behavior during testing.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing tools and methods, specifically how to view plots from failed tests in Azure pipelines. It mentions fixture functions (`check_same_image` and `image_comparer`) that upload plots for viewing. While this relates to the execution and visualization of tests, it does not directly discuss software architecture concepts such as patterns, design decisions, or system structure. Instead, it focuses on testing processes and tools."
Testability,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt:103,logical,103,src/scanpy/sim_models/toggleswitch.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt,1,['log'],['logical'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided involves configurations for a model such as variable assignments and rules, which relates to testability through controlling system states and creating test cases.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content describes boolean update rules and coupling lists, which are more about system dynamics or algorithms rather than software architecture."
Testability,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:969,test,969,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation methods for a software package called scanpy, including using pip and conda, as well as troubleshooting common issues such as installing dependencies like igraph. It also covers how to clone repositories, use editable installs, and mentions Docker usage. This is all related to setting up the development environment and ensuring that the software can be installed and tested correctly. Testability refers to the ease of validating functionality through testing, which includes proper installation and setup steps so that tests can be run effectively. The content does not directly discuss testing itself but rather the prerequisites for testing. However, without proper installation and dependency management, testability would be impaired. Therefore, the content indirectly supports testability by ensuring the software is installable and set up correctly.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily focuses on installation instructions for various Python packages and tools, such as using conda, pip, and Docker to install scanpy. While it involves dependency management and setup procedures, these are typical operational tasks rather than architectural considerations. There's no discussion of high-level design, patterns, or system structure; instead, it's about how to obtain and set up the software environment."
Testability,# Scanpy Benchmarks. This directory contains code for benchmarking Scanpy using [asv][]. The functionality is checked using the [`benchmark.yml`][] workflow.; Benchmarks are run using the [benchmark bot][]. [asv]: https://asv.readthedocs.io/; [`benchmark.yml`]: ../.github/workflows/benchmark.yml; [benchmark bot]: https://github.com/apps/scverse-benchmark; ,benchmark,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/benchmarks/README.md:54,benchmarking,54,benchmarks/README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/benchmarks/README.md,7,['benchmark'],"['benchmark', 'benchmarking']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # Scanpy Benchmarks. This directory contains code for benchmarking Scanpy using [asv][]. The functionality is checked using the [`benchmark.yml`][] workflow.; Benchmarks are run using the [benchmark bot][]. [asv]: https://asv.readthedocs.io/; [`benchmark.yml`]: ../.github/workflows/benchmark.yml; [benchmark bot]: https://github.com/apps/scverse-benchmark; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses benchmarking Scanpy using ASV (Automated System Verification) through a workflow file and a bot. This involves running tests to validate functionality, which aligns with Testability as it relates to testing and validation processes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Scanpy Benchmarks. This directory contains code for benchmarking Scanpy using [asv][]. The functionality is checked using the [`benchmark.yml`][] workflow.; Benchmarks are run using the [benchmark bot][]. [asv]: https://asv.readthedocs.io/; [`benchmark.yml`]: ../.github/workflows/benchmark.yml; [benchmark bot]: https://github.com/apps/scverse-benchmark; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses benchmarking Scanpy, which involves running performance tests and functional checks. While this may touch on system-level testing, it does not explicitly discuss architectural concepts or patterns. Instead, it focuses on the execution of predefined workflows for verification purposes."
Testability,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt:217,logical,217,src/scanpy/sim_models/krumsiek11.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt,1,['log'],['logical'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is a series of equations and logical expressions related to gene regulatory network modeling. It includes variable definitions and update rules that define how each variable interacts with others. This aligns with the concept of testability as it demonstrates the creation of test cases based on these rules, allowing for validation of the system's behavior.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content appears to be a series of Boolean update rules and coupling relationships described in a model, likely biological or gene regulatory. It defines variables with specific logical expressions and their dependencies. This is more about the model's dynamics rather than software architecture principles."
Testability,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:201,testing,201,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses contributing to an open-source project and provides guidelines for contributors, including sections like testing. This aligns with aspects of testability as it involves setting up environments and processes that facilitate testing and validation.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses guidelines for contributing to an open-source project, including sections like 'getting-set-up', 'testing', 'documentation', etc. It refers to other project's contribution guidelines but does not delve into software architecture concepts or high-level system design. Instead, it focuses on the process of contributing code and documentation, which are more related to development practices rather than architectural concerns."
Testability,"(e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as pos",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3672,tests,3672,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as pos

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing strategies such as optimizing methods to match gold standards, caching test setups, reducing data size for independent behavior checks, and using fixtures for plotting tests. These points relate to ensuring tests are accurate and efficient, which ties into the quality attribute of Testability by validating functionality through controlled testing and facilitating test case creation.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as pos
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, such as test setup, performance, and test result comparison. It includes details about using pytest fixtures, caching computations, reducing data size for tests, and comparing plotting results with reference images. While these are important aspects of software development, they relate more to testing methodologies rather than the overall architecture of a system."
Testability,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1,tests,1,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,11,['test'],"['test', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses running tests using pytest and provides instructions on how to set up and run tests, which directly relates to testability by ensuring that software functionality can be validated through testing.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses test practices and tools, such as pytest, and provides instructions for running and writing tests. While testing is a fundamental part of software development, it does not explicitly address software architecture concepts or principles."
Testability,", the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the refe",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3904,test,3904,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: , the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the refe

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses optimizing methods for performance and ensuring test accuracy, which relates to the overall system's testability as it ensures that tests are reliable and function correctly. It also talks about caching test data and reducing computation in tests, which helps in making the software more testable. The mention of using fixtures like `image_comparer` for comparing plots aids in verifying outputs, contributing to testability. Additionally, the reference images stored for comparison directly tie into ensuring that the system behaves as expected, thus aligning with Testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: , the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the refe
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including performance considerations and test optimization techniques such as reducing data size and caching test setups. While these are important aspects of software development, they relate more to code quality and testing methodologies rather than the high-level architectural design or patterns."
Testability,". It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more i",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2043,tests,2043,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: . It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more i

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses test writing and best practices for contributing code, including using existing test suites, recommended tools like pytest fixtures, and examples of what to test. This aligns with Testability as it involves creating and validating tests which ensure software functionality. The mention of performance in the end may be a false positive but the majority of the content is directly related to testing practices.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: . It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more i
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including test writing, parameterization, and test case ideas. It provides guidance on using pytest fixtures and decorators but does not touch upon architectural concepts such as patterns or system design."
Testability,"[pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1272,tests,1272,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses pytest usage for testing, including commands to run tests, tips on reducing test execution time, handling warnings, and advice on writing and parameterizing tests. All of this directly relates to making software functionality easily validated through testing, which aligns with the Testability quality attribute. The mention of pytest as a tool for testing is central to testability. Additionally, it provides practical steps for ensuring that tests can be run efficiently, facilitating fault detection by controlling and observing the system's state, thereby supporting the reduction of complexity in testing processes.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content primarily discusses testing practices and how to run tests using pytest, including tips for optimizing test runs and writing tests. While it touches on software development practices, there's no explicit mention of architectural concepts or high-level system design."
Testability,"a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an err",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1209,test,1209,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an err

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up and running tests using pytest, which directly relates to testability. It provides instructions on how to execute tests and suggests ways to optimize test runs, such as selective execution and parallel processing. These actions contribute to the ease of testing software functionality, aligning with Testability's aim to enable fault detection through controlled system states.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an err
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, test suite setup, and how to run tests using pytest. While this relates to software development in general, it does not touch upon architectural concepts, patterns, or high-level system structure. It is focused on the implementation and execution of tests rather than the design or architecture of the software system."
Testability,"assed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3180,test,3180,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: assed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testability by checking for error handling, ensuring independence of arguments, optimizing methods, and improving test setup through fixtures and reducing data size. It also touches on testing performance and plotting comparisons, all of which relate to making software more testable.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: assed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices and setup, including test fixtures and performance considerations, which are aspects of software development but not directly related to software architecture. It focuses on how tests should be structured, optimized, and validated rather than discussing the overall system structure or design."
Testability,"docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3225,tests,3225,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses testing practices such as input validation, error messages, function boundaries, and test optimizations, which are aspects of Testability. It includes checking that functions behave correctly under various inputs, ensuring fault detection through proper testing, and optimizing tests for performance without compromising accuracy. These activities align with the description of Testability, making it a true positive.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including how to structure tests, optimize methods, and handle performance considerations. While these are important aspects of software development, they primarily focus on implementation details and testing strategies rather than the high-level architectural concerns such as system design, patterns, or structural decisions."
Testability,"e bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3543,test-data,3543,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test-data'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: e bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses aspects of testing and test optimization, such as reducing setup time through caching, optimizing method results against gold standards, and testing plot outputs. These points relate to the ease of validation (testability) by ensuring tests accurately reflect expected outcomes and maintain consistency. The focus on accurate testing aligns with the Testability quality attribute which aims for comprehensive and reliable validation of software functionality.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: e bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including performance considerations and test suite optimizations. While important for software development, these topics fall under code quality and testing rather than software architecture."
Testability,"en tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tes",assert,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2298,assertions-about-expected-exceptions,2298,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['assert'],['assertions-about-expected-exceptions'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: en tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tes

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices such as writing tests before coding, using Test Driven Development, parameterizing tests with pytest fixtures, and provides guidance on what to test. These all relate directly to ensuring the software's functionality can be validated through testing, thereby aligning with the quality attribute of Testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: en tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tes
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content focuses on testing practices and how to write tests using pytest, including fixtures and parameterization. While testing is a software engineering practice that can be applied across different architectures, it does not explicitly discuss architectural concepts or principles such as patterns, styles, trade-offs, or system structures."
Testability,"er}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller}`I Gold`; * {func}`scanpy.pp.highly_variable_genes` has new flavor `seurat_v3_paper` that is in its implementation consistent with the paper description in Stuart et al 2018. {pr}`2792` {smaller}`E Roellin`; * {func}`scanpy.datasets.blobs` now accepts a `random_state` argument {pr}`2683` {smaller}`E Roellin`; * {func}`scanpy.pp.pca` and {func}`scanpy.pp.regress_out` now accept a layer argument {pr}`2588` {smaller}`S Dicks`; * {func}`scanpy.pp.subsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmon",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:3142,test,3142,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: er}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller}`I Gold`; * {func}`scanpy.pp.highly_variable_genes` has new flavor `seurat_v3_paper` that is in its implementation consistent with the paper description in Stuart et al 2018. {pr}`2792` {smaller}`E Roellin`; * {func}`scanpy.datasets.blobs` now accepts a `random_state` argument {pr}`2683` {smaller}`E Roellin`; * {func}`scanpy.pp.pca` and {func}`scanpy.pp.regress_out` now accept a layer argument {pr}`2588` {smaller}`S Dicks`; * {func}`scanpy.pp.subsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmon

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is a series of updates and changes to various functions and features in the software. It mentions things like new implementations, added arguments, and other improvements. This seems to relate to the testability attribute because it’s about making sure the software can be tested thoroughly, possibly by improving how functions are implemented or ensuring parameters are set correctly for testing.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: er}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller}`I Gold`; * {func}`scanpy.pp.highly_variable_genes` has new flavor `seurat_v3_paper` that is in its implementation consistent with the paper description in Stuart et al 2018. {pr}`2792` {smaller}`E Roellin`; * {func}`scanpy.datasets.blobs` now accepts a `random_state` argument {pr}`2683` {smaller}`E Roellin`; * {func}`scanpy.pp.pca` and {func}`scanpy.pp.regress_out` now accept a layer argument {pr}`2588` {smaller}`S Dicks`; * {func}`scanpy.pp.subsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmon
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and changes in specific functions of a software package, including feature additions, bug fixes, and performance improvements. It details parameter handling and implementation specifics rather than addressing high-level design or architectural considerations."
Testability,"hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:4098,tests,4098,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,6,['test'],"['test', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses optimizing test performance and includes specific instructions on using pytest's arguments for timing, caching tests, handling plotting comparisons, and managing reference images. These activities are directly related to making software more testable by ensuring efficient and consistent testing processes, which aligns with the Testability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including test optimization and fixture strategies, which are aspects of software development but not directly related to software architecture concepts. It focuses on ensuring test reliability and performance rather than the design or structure of the system."
Testability,"ifferent input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3582,testing,3582,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ifferent input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses testability by addressing different input values generating equivalent outputs and optimizing methods to match gold standards. It also talks about performance in testing, including using fixtures and reducing data size for better test efficiency. There's no irrelevant log content. The discussions relate directly to the ease of validation through testing and fault detection.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ifferent input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including performance optimization and test setup considerations. While important in software development, these topics focus more on implementation details and testing strategies rather than architectural principles or system design."
Testability,"message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots c",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3432,test,3432,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,2,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots c

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses optimizing methods and ensuring outputs match expectations through testing, which aligns with testability by validating functionality and facilitating test creation.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots c
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, including test optimization, performance considerations in test execution, and fixture sharing for consistent test data. While these topics are important in software development, they relate more to the implementation and execution of tests rather than the overall architecture of a system."
Testability,"mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:5295,test,5295,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,2,['test'],"['test', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content describes various updates and bug fixes in the software, such as improving documentation, fixing functions to handle newer versions of dependencies, addressing warnings, and ensuring compatibility with certain libraries. These activities are directly related to the Testability quality attribute because they involve testing against minimum versions of dependencies (minimizing complexity), fixing issues that cause test failures or warnings, and improving documentation which supports testing efforts. The content does not appear to be purely logging but includes implementation details that enhance testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content describes various bug fixes, code improvements, and updates to a software project. While these are important aspects of software development, they primarily focus on implementation details rather than architectural concepts or decisions. The mentions include fixing specific functions, handling dependencies, and resolving warnings, which are more about code-level maintenance and testing than the overall structure or design of the system."
Testability,"n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check t",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1967,test,1967,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check t

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses test writing, including tips and best practices for creating tests using pytest fixtures and parameterization. This aligns with Testability as it focuses on enabling testing through structured test cases and ensuring code can be validated effectively.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check t
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses writing tests and test suites, including pytest fixtures and parameterization. While testing is an important part of software development, it does not directly relate to software architecture concepts such as patterns or high-level system design."
Testability,"ngs can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standa",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2010,test,2010,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ngs can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standa

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses test writing practices, including using pytest fixtures and parameterization, which are directly related to testability. It also includes guidance on what aspects of a function should be tested, such as error handling, input validation, output bounds, etc., all of which contribute to the ease of testing (testability). Therefore, this content accurately reflects the Testability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ngs can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standa
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses test writing, including pytest fixtures and parameterization, which are aspects of software development but not specifically related to software architecture. It does not touch upon architectural patterns, styles, or high-level system structure."
Testability,"now the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1171,tests,1171,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: now the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up and running tests using pytest, which relates to testability by enabling validation of software functionality through testing.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: now the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",True,"The content discusses how to set up and run tests using pytest, which relates to software testing practices and quality assurance, a key aspect of software architecture."
Testability,"ns).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is als",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3312,tests,3312,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ns).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is als

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content includes test-related questions and guidance on testing practices, such as error messages, bounds, input values, optimization checks, and performance considerations. These align with aspects of Testability, which involves ensuring software can be tested effectively.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ns).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is als
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices and code quality, such as adding error messages, bounds, and optimizing methods. While important for software development, these topics are more focused on implementation details rather than the high-level structure or architectural decisions of a system."
Testability,"re there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to releva",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3085,testing,3085,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,2,['test'],"['test', 'testing']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: re there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to releva

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses various testing-related topics such as checking for errors in function outputs, optimizing methods by comparing results with gold standards, and improving test performance and setup. These all relate to ensuring that software functionality can be tested effectively (testability). The mention of pytest.raises suggests error handling during testing which is part of testability. Also, the guidance on reducing computational data size if not dependent on size and using fixtures or specific tools like image_comparer for plotting tests contributes to making the system more testable by addressing potential complexities in testing certain behaviors.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: re there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to releva
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses testing practices, including how to structure tests, caching fixtures, optimizing test runs, and using specific testing tools like pytest. These are aspects of software development process but do not specifically address software architecture concepts or principles."
Testability,"s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1317,tests,1317,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up tests using pytest, offers tips to optimize test runs, and provides guidance on writing tests, including parameterization and TDD. These are directly related to testability as they describe how to structure and execute tests, thereby aiding in the validation of software functionality. Therefore, it accurately reflects the quality attribute of Testability.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses testing practices, pytest configuration, and tips for writing and running tests. While it touches upon software development practices, there's no explicit mention of architectural concepts or principles such as patterns, styles, or high-level system structures."
Testability,"ssibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If yo",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1042,test,1042,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ssibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If yo

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses how to run and manage tests for an open source package, including setting up test environments, using pytest, and structuring test cases. These all relate directly to the concept of Testability because they describe how functionality can be validated through testing methods.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ssibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If yo
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses test implementation and best practices for testing, which are aspects of software development but not directly related to software architecture. It covers how to run tests using pytest, tips for running subsets or parallel tests, writing tests with fixtures and parameters, and what to test. There's no mention of architectural concepts, patterns, trade-offs, or high-level system structure."
Testability,"sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1760,tests,1760,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses running tests in parallel using pytest-xdist and pytest arguments, which directly relates to testability by enabling efficient testing. The guide also covers writing tests and test cases, ensuring that code can be validated through testing, aligning with the Testability attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses pytest usage for parallel test execution, including configuration settings and testing practices. While this relates to software development and testing processes, it does not explicitly address software architecture concepts or high-level system design."
Testability,"t,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1418,testing,1418,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: t,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses using pytest to run tests, provides tips on how to optimize test runs, and mentions best practices for writing and parameterizing tests. All of these are directly related to Testability as they involve making software functionality easier to validate through testing methods.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: t,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The provided content discusses test execution strategies such as running subsets of tests, parallel testing, and handling warnings. It also includes guidance on writing tests using pytest and best practices for testing, including parameterization and test coverage ideas. While these are important aspects of software development, they primarily focus on testing practices rather than the higher-level architectural concerns or design decisions."
Testability,"{func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - F",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:2535,logging,2535,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - F

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses changes to specific functions in scanpy, including bug fixes and new features. It mentions issues like {pr}`1965`, {pr}`2075`, etc., which are likely problem reports related to the functionality of these functions. The context involves improving testability by ensuring that the software can be tested more effectively through updates to its testing tools and processes. By addressing bugs and enhancing usability, these changes contribute to making the system easier to test, thus aligning with the Testability quality attribute.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - F
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses updates and bug fixes in a software package, including new features and functionality. While these changes may involve some architectural considerations, they primarily focus on implementation details such as function updates, argument handling, and specific algorithmic enhancements. There is no explicit discussion of high-level system structure, architectural patterns, or major design decisions. The content is more about the evolution of the software's capabilities rather than its overall architecture."
Usability,"# Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:145,guides,145,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['guid'],['guides'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: # Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up and using Git for code management, including steps like forking repositories, cloning, and using pre-commit for automated checks. This directly relates to how users can efficiently use our tools (Git) to manage their work, supporting error recovery by providing clear instructions on resolving common issues (e.g., setting up remotes), and ensuring user satisfaction through streamlined workflows and helpful documentation. It addresses ease of learning with detailed instructions, adaptability to different Git setups (GitHub CLI vs manual steps), and overall usability in collaboration and code management.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: # Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses version control practices, including git operations like forking and cloning, setting up pre-commit hooks for code styling checks. While these are important aspects of software development, they primarily relate to tools and processes rather than architectural concepts or patterns."
Usability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1079,simple,1079,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['simpl'],['simple'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses preprocessing steps such as filtering genes and performing normalization, which are part of data processing necessary for ensuring effective data handling, contributing to usability by providing clean and reliable data inputs for downstream analyses.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data preprocessing steps such as filtering genes, normalizing data, and performing PCA. While these are important aspects of data analysis, they relate to the implementation and processing of data rather than the high-level architectural considerations or patterns."
Usability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:524,guide,524,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes new features and performance improvements in scanpy, which are related to usability by enhancing user efficiency and task completion.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content describes updates and new features in scanpy, such as performance improvements, documentation, and functionality enhancements. While these may impact how software is structured or designed, they primarily focus on specific functions and tools within the software rather than discussing architectural principles or patterns. The changes mentioned are more about implementation details and feature additions rather than addressing broader architectural concerns or patterns."
Usability,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:14,guide,14,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,5,['guid'],"['guide', 'guidelines', 'guides']","The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses guidelines for contributing to scanpy, including sections like code, testing, documentation, etc., which are related to how users can effectively use and contribute to the project. It mentions that parts of the guidelines have been adapted from pandas and MDAnalysis, which also relate to user experience and effective usage. This aligns with the usability attribute as it provides information that helps users efficiently contribute, reducing learning time and increasing satisfaction.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses contributing guidelines for a project, including sections like 'getting-set-up' and 'testing'. While these may relate to software development practices, they do not explicitly discuss architectural concepts, patterns, or high-level system structure. Instead, it focuses on procedural contributions and setup instructions."
Usability,", and the CZI distribute datasets related to COVID-19 via anndata's `h5ad` files: [covid19cellatlas.org](https://www.covid19cellatlas.org/). It wasn't anticipated that the [initial idea](https://falexwolf.de/blog/2017-12-23-anndata-indexing-views-HDF5-backing/) of sharing and backing an on-disk representation of `AnnData` would become so widely adopted. Curious? Read up more on the [format](https://anndata.readthedocs.io/en/latest/fileformat-prose.html). ### Scanpy featured in Nature Biotechnoloogy {small}`2020-02-01`. [Single-cell RNA-seq analysis software providers scramble to offer solutions](https://www.nature.com/articles/s41587-020-0449-8) mentions Scanpy along with Seurat as the two major open source software packages for single-cell analysis \[[pdf](https://rdcu.be/b2M5l)\]. ### Scanpy has been selected an ""Essential open source software for science"" by CZI {small}`2019-11-14`. Scanpy has been selected an [essential open source software for science] by; CZI among [32 projects], along with giants such as Scipy, Numpy, Pandas,; Matplotlib, scikit-learn, scikit-image/plotly, pip, jupyterhub/binder,; Bioconda, Seurat, Bioconductor, and others. ### Nature Biotechnology: A comparison of single-cell trajectory inference methods {small}`2019-04-01`. [Nature Biotechnology](https://www.nature.com/articles/s41587-019-0071-9) reviews more than 70 TI tools and ranks PAGA as the best graph-based trajectory inference method, and overall, among the top 3. ### Science “Breakthrough of the Year 2018” {small}`2018-12-01`. The Science “Breakthrough of the Year 2018”, [Development cell by cell](https://vis.sciencemag.org/breakthrough2018/finalists/#cell-development), mentions the first application of PAGA {cite:p}`Plass2018` among 5 papers. [32 projects]: https://chanzuckerberg.com/eoss/proposals/; [essential open source software for science]: https://chanzuckerberg.com/newsroom/chan-zuckerberg-initiative-awards-5-million-for-open-source-software-projects-essential-to-science/; ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md:3637,learn,3637,docs/news.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md,1,['learn'],['learn'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: , and the CZI distribute datasets related to COVID-19 via anndata's `h5ad` files: [covid19cellatlas.org](https://www.covid19cellatlas.org/). It wasn't anticipated that the [initial idea](https://falexwolf.de/blog/2017-12-23-anndata-indexing-views-HDF5-backing/) of sharing and backing an on-disk representation of `AnnData` would become so widely adopted. Curious? Read up more on the [format](https://anndata.readthedocs.io/en/latest/fileformat-prose.html). ### Scanpy featured in Nature Biotechnoloogy {small}`2020-02-01`. [Single-cell RNA-seq analysis software providers scramble to offer solutions](https://www.nature.com/articles/s41587-020-0449-8) mentions Scanpy along with Seurat as the two major open source software packages for single-cell analysis \[[pdf](https://rdcu.be/b2M5l)\]. ### Scanpy has been selected an ""Essential open source software for science"" by CZI {small}`2019-11-14`. Scanpy has been selected an [essential open source software for science] by; CZI among [32 projects], along with giants such as Scipy, Numpy, Pandas,; Matplotlib, scikit-learn, scikit-image/plotly, pip, jupyterhub/binder,; Bioconda, Seurat, Bioconductor, and others. ### Nature Biotechnology: A comparison of single-cell trajectory inference methods {small}`2019-04-01`. [Nature Biotechnology](https://www.nature.com/articles/s41587-019-0071-9) reviews more than 70 TI tools and ranks PAGA as the best graph-based trajectory inference method, and overall, among the top 3. ### Science “Breakthrough of the Year 2018” {small}`2018-12-01`. The Science “Breakthrough of the Year 2018”, [Development cell by cell](https://vis.sciencemag.org/breakthrough2018/finalists/#cell-development), mentions the first application of PAGA {cite:p}`Plass2018` among 5 papers. [32 projects]: https://chanzuckerberg.com/eoss/proposals/; [essential open source software for science]: https://chanzuckerberg.com/newsroom/chan-zuckerberg-initiative-awards-5-million-for-open-source-software-projects-essential-to-science/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses the distribution of datasets related to COVID-19 via anndata's h5ad files and mentions the adoption of sharing an on-disk representation of AnnData, which was initially not anticipated. It also talks about Scanpy being featured in Nature Biotechnology and awarded by CZI as essential open-source software. These points focus on the impact and recognition of tools related to single-cell analysis, which ties into usability through ease of learning and efficient usage by users who might be non-experts or those new to the field. The content provides information about software distribution, usage trends, and tool evaluations, all of which contribute to the overall usability of these tools for their intended users.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: , and the CZI distribute datasets related to COVID-19 via anndata's `h5ad` files: [covid19cellatlas.org](https://www.covid19cellatlas.org/). It wasn't anticipated that the [initial idea](https://falexwolf.de/blog/2017-12-23-anndata-indexing-views-HDF5-backing/) of sharing and backing an on-disk representation of `AnnData` would become so widely adopted. Curious? Read up more on the [format](https://anndata.readthedocs.io/en/latest/fileformat-prose.html). ### Scanpy featured in Nature Biotechnoloogy {small}`2020-02-01`. [Single-cell RNA-seq analysis software providers scramble to offer solutions](https://www.nature.com/articles/s41587-020-0449-8) mentions Scanpy along with Seurat as the two major open source software packages for single-cell analysis \[[pdf](https://rdcu.be/b2M5l)\]. ### Scanpy has been selected an ""Essential open source software for science"" by CZI {small}`2019-11-14`. Scanpy has been selected an [essential open source software for science] by; CZI among [32 projects], along with giants such as Scipy, Numpy, Pandas,; Matplotlib, scikit-learn, scikit-image/plotly, pip, jupyterhub/binder,; Bioconda, Seurat, Bioconductor, and others. ### Nature Biotechnology: A comparison of single-cell trajectory inference methods {small}`2019-04-01`. [Nature Biotechnology](https://www.nature.com/articles/s41587-019-0071-9) reviews more than 70 TI tools and ranks PAGA as the best graph-based trajectory inference method, and overall, among the top 3. ### Science “Breakthrough of the Year 2018” {small}`2018-12-01`. The Science “Breakthrough of the Year 2018”, [Development cell by cell](https://vis.sciencemag.org/breakthrough2018/finalists/#cell-development), mentions the first application of PAGA {cite:p}`Plass2018` among 5 papers. [32 projects]: https://chanzuckerberg.com/eoss/proposals/; [essential open source software for science]: https://chanzuckerberg.com/newsroom/chan-zuckerberg-initiative-awards-5-million-for-open-source-software-projects-essential-to-science/; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses datasets, data formats (h5ad), software tools (Scanpy, Seurat) used in single-cell analysis, and mentions awards and reviews, but it does not explicitly talk about software architecture concepts or principles. It focuses on the usage and adoption of these tools rather than their underlying architectural design."
Usability,"/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pa",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5346,simple,5346,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['simpl'],['simple'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: /collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pa

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses return sections in function documentation, including how to format returns based on whether they're prose, tuples, or a mix. It mentions using specific classes and type annotations, which relates to the usability by ensuring that functions are easy to understand and use effectively, supporting user needs in code documentation.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: /collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pa
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses data structures and type annotations in Python, which are aspects of software development but do not touch upon architectural concepts. It focuses on how different containers (like lists, sets, dicts) can be used and their type annotations. This is more about implementation details rather than the high-level structure or design of a system."
Usability,"Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; ",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md:860,guide,860,CONTRIBUTING.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses contributing to Scanpy by suggesting how users can efficiently report issues and share minimal examples, which supports usability by helping contributors save time and improve the issue reporting process.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content is about contributing to an open-source project, including how to file issues and provide examples. It mentions environment information but does not discuss any architectural concepts or patterns. The focus is on contribution processes rather than the structure or design of software."
Usability,"s for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier `git diff`s).; - Check that the docs look like what you expect them too! It's easy to forget to add a reference to function, be sure it got added and looks right. Look at [sc.tl.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scan",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:2058,guide,2058,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: s for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier `git diff`s).; - Check that the docs look like what you expect them too! It's easy to forget to add a reference to function, be sure it got added and looks right. Look at [sc.tl.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scan

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses documentation practices such as updating release notes and adding new functions to the documentation site, which relates to usability by ensuring that users can effectively use the software through proper documentation.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: s for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier `git diff`s).; - Check that the docs look like what you expect them too! It's easy to forget to add a reference to function, be sure it got added and looks right. Look at [sc.tl.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scan
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses documentation practices, including adding new functions to documentation, updating tutorials and submodules, formatting docstrings with specific style guidelines. While these are important aspects of software development, they relate more to code maintenance and documentation rather than the high-level architectural design or principles."
Usability,"t of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Descript",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:4950,simple,4950,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['simpl'],['simple'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: t of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Descript

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to document function parameters and returns in code documentation, specifically mentioning the use of type annotations for better usability. It guides users on how to structure their docstrings, which aids in making software more user-friendly by reducing confusion and improving efficiency. The content aligns with usability as it enhances user understanding and task efficiency through clear documentation.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: t of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Descript
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses code parameters, return types, and docstring conventions for a function, which are implementation details rather than architectural concepts. It does not address system structure, patterns, or high-level design decisions."
Usability,tation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; [github]: https://github.com/scverse/scanpy; ,guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md:1254,guide,1254,docs/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md,3,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: tation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; [github]: https://github.com/scverse/scanpy; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes sections such as installation instructions, tutorials, API references, discussion forums, and GitHub information. These are all resources that help users to effectively utilize scanpy, enhancing usability by providing necessary support for learning and using the tool efficiently.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: tation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; [github]: https://github.com/scverse/scanpy; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content provided discusses installation, tutorials, API reference, and community resources related to scanpy. It does not address any software architecture concepts such as patterns, styles, or structural decisions."
Usability,"zation of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns.; ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:5003,learns,5003,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['learn'],['learns'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: zation of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses various tools and methods related to transcriptomics analysis, including data integration, differential expression, feature selection, and annotation/enrichment analyses. These are all aspects that contribute to the effective use of data and help users (such as researchers) in their tasks. By providing these resources, it supports usability by enhancing efficiency and effectiveness in data analysis. Therefore, this content aligns with the usability quality attribute as it directly relates to user ability to complete their tasks effectively through better tools and methods.","
You are an expert in software architecture and software engineering. You have the necessary expertise to evaluate whether a given piece of content is related to software architecture.

Evaluate whether the content explicitly discusses or relates to software architecture concepts, principles, or concerns. Your goal is to determine if the content is relevant to software architecture.

Data:

Content: zation of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns.; 
Instructions:

1. Analyze the content and determine whether it is discussing software architecture, including but not limited to:
    * Architectural patterns or styles (e.g., microservices, monolith, event-driven architecture).
    * Architectural decisions, trade-offs, or quality attributes (e.g., scalability, maintainability, performance).
    * High-level system structure, interactions, dependencies, or constraints.
2. If the content clearly pertains to software architecture, mark it as `related_to_architecture: true`.
3. If the content is general software development, code-level details, logs, or unrelated to architecture, mark it as `related_to_architecture: false`.
4. If the content includes partial architectural relevance but is mostly about implementation details, analyze whether the relevant part is strong enough to classify it as `related_to_architecture: true`.
5. Provide `related_to_architecture_reasoning` explaining why the content is classified as related on unrelated.
",False,"The content discusses various tools and libraries for analyzing transcriptomes, such as scvi-tools, CellRank, diffxpy, scanaroma, scGen/trVAE, triku, CIARA, decoupler, and Cube. These are all domain-specific analysis tools, not software architecture concepts or practices. They focus on biological data processing rather than system design, architectural patterns, or high-level system structures."
