id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:2147,Availability,down,downsample,2147,"Path(). protected abstract ImageServerBuilder.ServerBuilder<T>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected void; finalize(). Attempt to close the server. T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. protected Map<RegionRequest,T>; getCache(). Get the internal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). Tru",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:2292,Availability,avail,available,2292,"Path(). protected abstract ImageServerBuilder.ServerBuilder<T>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected void; finalize(). Attempt to close the server. T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. protected Map<RegionRequest,T>; getCache(). Get the internal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). Tru",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:2780,Availability,down,downsamples,2780,"ternal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.l",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:4491,Availability,avail,available,4491,"of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5594,Availability,down,downsample,5594,"sampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface Imag",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5739,Availability,avail,available,5739,"sampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface Imag",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6367,Availability,down,downsamples,6367,"icating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help cle",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:8463,Availability,avail,available,8463,"class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:11797,Availability,avail,available,11797," analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For exampl",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:12660,Availability,error,errors,12660,"dImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Specified by:; getTileRequestManager in interface ImageServer<T>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:3021,Energy Efficiency,efficient,efficiently,3021,"mbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImage",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:3250,Energy Efficiency,green,green,3250," - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface Ima",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6781,Energy Efficiency,green,green,6781,"cified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:12351,Energy Efficiency,efficient,efficiently,12351,"dImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Specified by:; getTileRequestManager in interface ImageServer<T>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:3769,Integrability,interface,interface,3769," the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilde",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:4121,Integrability,interface,interface,4121,"olean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a Serve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:4249,Integrability,interface,interface,4249,"green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5097,Integrability,interface,interface,5097,"from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Num",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5421,Integrability,interface,interface,5421,"e any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this ma",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5562,Integrability,interface,interface,5562,"sampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface Imag",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5795,Integrability,interface,interface,5795,"r.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), f",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5980,Integrability,interface,interface,5980,"der. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageSer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6090,Integrability,interface,interface,6090,"pied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB im",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6241,Integrability,interface,interface,6241,"servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Thro",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6589,Integrability,interface,interface,6589,"the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameter",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6724,Integrability,interface,interface,6724,"cified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6864,Integrability,interface,interface,6864," 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6971,Integrability,interface,interface,6971," by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:7159,Integrability,interface,interface,7159,"s equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untruste",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:7556,Integrability,interface,interface,7556,"erredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the serve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:8344,Integrability,interface,interface,8344,"class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:8910,Integrability,interface,interface,8910,"ated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9026,Integrability,interface,interface,9026,"that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9123,Integrability,interface,interface,9123," be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9218,Integrability,interface,interface,9218," BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata().",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9317,Integrability,interface,interface,9317,"d by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from inte",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9412,Integrability,interface,interface,9412,"e if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Spe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9496,Integrability,interface,interface,9496," protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssocia",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9589,Integrability,interface,interface,9589,"eturned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from inte",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9671,Integrability,interface,interface,9671,".getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9770,Integrability,interface,interface,9770,"st required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full Image",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9864,Integrability,interface,interface,9864,"teID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interf",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:9979,Integrability,interface,interface,9979," getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociated",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:10142,Integrability,interface,interface,10142,"Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interfa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:10316,Integrability,interface,interface,10316,"ied by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description copied from interface: ImageServer; Number of channels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(in",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:10437,Integrability,interface,interface,10437,"hannels (3 for RGB). Specified by:; nChannels in interface ImageServer<T>; Returns:. nZSlices; public int nZSlices(); Description copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:10583,Integrability,interface,interface,10583,"escription copied from interface: ImageServer; Number of slices in a z-stack. Specified by:; nZSlices in interface ImageServer<T>; Returns:. nTimepoints; public int nTimepoints(); Description copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; p",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:10860,Integrability,interface,interface,10860,"n interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:11033,Integrability,interface,interface,11033," associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution ima",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:11143,Integrability,interface,interface,11143,"erver<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTile",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:11331,Integrability,interface,interface,11331,"mageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:11437,Integrability,interface,interface,11437,"r<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests c",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:11654,Integrability,interface,interface,11654,"e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:12068,Integrability,interface,interface,12068,"dImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Specified by:; getTileRequestManager in interface ImageServer<T>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:12249,Integrability,interface,interface,12249,"dImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Specified by:; getTileRequestManager in interface ImageServer<T>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:12923,Integrability,interface,interface,12923,"dImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Specified by:; getDefaultThumbnail in interface ImageServer<T>; Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; public TileRequestManager getTileRequestManager(); Description copied from interface: ImageServer; Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Specified by:; getTileRequestManager in interface ImageServer<T>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:691,Modifiability,extend,extends,691,". AbstractImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class AbstractImageServer<T>. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, ImageServer<T>. Direct Known Subclasses:; AbstractTileableImageServer, ImageJServer, TransformingImageServer. public abstract class AbstractImageServer<T>; extends Object; implements ImageServer<T>; Abstract implementation of ImageServer providing some common functionality. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractImageServer(Class<T> imageClass);  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected abstract String; createID(). Create a unique ID for the server, which can be returned as the default value of getPath(). protected abstract ImageServerBuilder.ServerBuilder<T>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected void; finalize(). Attempt to close the server. T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. protected Map<RegionRequest,T>; getCache(). Get the internal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefault",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:3635,Modifiability,inherit,inherited,3635,"() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight)",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:3754,Modifiability,inherit,inherited,3754," the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilde",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:1793,Performance,cache,cache,1793," common functionality. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractImageServer(Class<T> imageClass);  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected abstract String; createID(). Create a unique ID for the server, which can be returned as the default value of getPath(). protected abstract ImageServerBuilder.ServerBuilder<T>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected void; finalize(). Attempt to close the server. T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. protected Map<RegionRequest,T>; getCache(). Get the internal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsam",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:1842,Performance,cache,cached,1842,"rs. Modifier; Constructor; Description; protected ; AbstractImageServer(Class<T> imageClass);  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected abstract String; createID(). Create a unique ID for the server, which can be returned as the default value of getPath(). protected abstract ImageServerBuilder.ServerBuilder<T>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected void; finalize(). Attempt to close the server. T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. protected Map<RegionRequest,T>; getCache(). Get the internal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:1888,Performance,cache,cached,1888,"rs. Modifier; Constructor; Description; protected ; AbstractImageServer(Class<T> imageClass);  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected abstract String; createID(). Create a unique ID for the server, which can be returned as the default value of getPath(). protected abstract ImageServerBuilder.ServerBuilder<T>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected void; finalize(). Attempt to close the server. T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. protected Map<RegionRequest,T>; getCache(). Get the internal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:4355,Performance,cache,cache,4355,"s(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation r",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:4413,Performance,cache,cached,4413,"of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:4476,Performance,cache,cached,4476,"of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:7754,Performance,cache,cached,7754,"True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whene",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:7800,Performance,cache,cached,7800,"True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whene",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:7941,Performance,cache,cached,7941,"interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). ge",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:8006,Performance,perform,performance,8006,"interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). ge",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:8426,Performance,cache,cached,8426,"class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:8448,Performance,cache,cached,8448,"class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! The cached tile is returned directly (with no defensive copying) for performance.; This means that it must not be modified by the code that requests it.; If there is any chance the tile may be modified (or passed to untrusted code), then make sure to ; make a defensive copy, e.g. using BufferedImageTools.duplicate(java.awt.image.BufferedImage) ; if using a buffered image. Specified by:; getCachedTile in interface ImageServer<T>; Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. createID; protected abstract String createID(); Create a unique ID for the server, which can be returned as the default value of getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever getPath() is first required. Returns:. getPath; public String getPath(); Default implementation lazily calls createID() on demand. Specified by:; getPath in interface ImageServer<T>; Returns:; See Also:. createID(). getWidth; public int getWidth(); Description copied from interface: ImageServer; Width of the full-resolution image in pixels. Specified by:; getWidth in interface ImageServer<T>; Returns:. getHeight; public int getHeight(); Description copied from interface: ImageServer; Height of the full-resolution image in pixels. Specified by:; getHeight in interface ImageServer<T>; Returns:. nChannels; public int nChannels(); Description ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:3699,Security,hash,hashCode,3699,"e of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.S",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5268,Usability,simpl,simpler,5268,"lass in interface ImageServer<T>; Returns:. getCache; protected Map<RegionRequest,T> getCache(); Get the internal cache. This may be useful to check for the existence of a cached tile any time ; when speed is of the essence, and if no cached tile is available a request will not be made. Returns:. getThumbnailDownsampleFactor; protected double getThumbnailDownsampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:10712,Usability,simpl,simply,10712,"ription copied from interface: ImageServer; Number of time points in a time series. Specified by:; nTimepoints in interface ImageServer<T>; Returns:. getMetadata; public ImageServerMetadata getMetadata(); Description copied from interface: ImageServer; Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Specified by:; getMetadata in interface ImageServer<T>; Returns:; See Also:. ImageServer.getOriginalMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Description copied from interface: ImageServer; Set the metadata to use, e.g. to change the pixel size in microns. Specified by:; setMetadata in interface ImageServer<T>; Parameters:; metadata - . getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<T>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public T getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<T>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getChannel; public ImageChannel getChannel(int channel); Description copied from interface: ImageServer; Request information for one channel (0-based index). Specified by:; getChannel in interface ImageServer<T>; Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getDefaultThumbnail; public T getDefaultThumbnail(int z,; int t); throws IOException; Description copied from interface: ImageServer; Get the default thumbnail for a specified z-slice and timepoint.; ; This ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:5225,Availability,down,downsample,5225,"hrows IOException; Read a single image tile. Parameters:; tileRequest - ; Returns:; Throws:; IOException. getTile; protected BufferedImage getTile(TileRequest tileRequest); throws IOException; Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. Parameters:; tileRequest - ; Returns:; Throws:; IOException. createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Parameters:; width - ; height - ; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int,",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:5739,Availability,down,downsampling,5739,"d BufferedImage createDefaultRGBImage(int width,; int height); Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Parameters:; width - ; height - ; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). allowSmoothInterpolation; protected boolean allowSmoothInterpolation(); Returns true if this server is permitted to use smooth interpolation when resizing.; The default implementation returns true if the channel type is not ImageServerMetadata.ChannelType.CLASSIFICATION. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:1174,Energy Efficiency,efficient,efficiently,1174,"ested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class AbstractTileableImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. Direct Known Subclasses:; BioFormatsImageServer, LabeledImageServer, OpenslideImageServer, PathHierarchyImageServer, PixelClassificationImageServer, RenderedImageServer, SparseImageServer, WrappedBufferedImageServer. public abstract class AbstractTileableImageServer; extends AbstractImageServer<BufferedImage>; Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles.; ; The actual request is then handled by assembling the tiles, resizing as required.; This makes it possible to cache tiles and reuse them more efficiently, and often requires less effort ; to implement a new ImageServer. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTileableImageServer();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected boolean; allowSmoothInterpolation(). Returns true if this server is permitted to use smooth interpolation when resizing. protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. protected BufferedImage; getEmptyTile(int width,; int height);  ; protected BufferedImage; getEmptyTile(int width,; int height,; boolean doCache). Create an empty tile for this server, using the default color model. protected BufferedImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the c",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:3097,Integrability,interface,interface,3097,"edImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. protected abstract BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion. Constructor Details. AbstractTileableImageServer; protected AbstractTileableImageServer(). Method Details. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height); throws IOException. Throws:; IOException. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height,; boolean doCache); throws IOException; Create an empty tile for this server, using the default color model. Parameters:; width - ; height - ; doCache - ; Returns:; Throws:; IOException. getDefaultColorModel; protected ColorModel getDefaultColorModel(); throws IOException; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; shou",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:5023,Integrability,interface,interface,5023,"act the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Returns:; Throws:; IOException. readTile; protected abstract BufferedImage readTile(TileRequest tileRequest); throws IOException; Read a single image tile. Parameters:; tileRequest - ; Returns:; Throws:; IOException. getTile; protected BufferedImage getTile(TileRequest tileRequest); throws IOException; Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. Parameters:; tileRequest - ; Returns:; Throws:; IOException. createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Parameters:; width - ; height - ; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:887,Modifiability,extend,extends,887,". AbstractTileableImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class AbstractTileableImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. Direct Known Subclasses:; BioFormatsImageServer, LabeledImageServer, OpenslideImageServer, PathHierarchyImageServer, PixelClassificationImageServer, RenderedImageServer, SparseImageServer, WrappedBufferedImageServer. public abstract class AbstractTileableImageServer; extends AbstractImageServer<BufferedImage>; Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles.; ; The actual request is then handled by assembling the tiles, resizing as required.; This makes it possible to cache tiles and reuse them more efficiently, and often requires less effort ; to implement a new ImageServer. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTileableImageServer();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected boolean; allowSmoothInterpolation(). Returns true if this server is permitted to use smooth interpolation when resizing. protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. protected BufferedImage; getEmptyTile(int width,; int height);  ; protected BufferedImage; getEmptyTile(int width,; int height,; boolean doC",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:2454,Modifiability,inherit,inherited,2454,"thods. Modifier and Type; Method; Description; protected boolean; allowSmoothInterpolation(). Returns true if this server is permitted to use smooth interpolation when resizing. protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. protected BufferedImage; getEmptyTile(int width,; int height);  ; protected BufferedImage; getEmptyTile(int width,; int height,; boolean doCache). Create an empty tile for this server, using the default color model. protected BufferedImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. protected abstract BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion. Constructor Details. AbstractTileableImageServer; protected AbstractTileableImageServer(). Method Details. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height); throws IOException. Throws",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:2963,Modifiability,inherit,inherited,2963,"dth,; int height,; boolean doCache). Create an empty tile for this server, using the default color model. protected BufferedImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. protected abstract BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion. Constructor Details. AbstractTileableImageServer; protected AbstractTileableImageServer(). Method Details. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height); throws IOException. Throws:; IOException. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height,; boolean doCache); throws IOException; Create an empty tile for this server, using the default color model. Parameters:; width - ; height - ; doCache - ; Returns:; Throws:; IOException. getDefaultColorModel; protected ColorModel getDefaultColorModel(); throws IOException; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:3082,Modifiability,inherit,inherited,3082,"edImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. protected abstract BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion. Constructor Details. AbstractTileableImageServer; protected AbstractTileableImageServer(). Method Details. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height); throws IOException. Throws:; IOException. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height,; boolean doCache); throws IOException; Create an empty tile for this server, using the default color model. Parameters:; width - ; height - ; doCache - ; Returns:; Throws:; IOException. getDefaultColorModel; protected ColorModel getDefaultColorModel(); throws IOException; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; shou",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:5365,Modifiability,extend,extends,5365,"eally from the cache, but otherwise read it and ; then add it to the cache. Parameters:; tileRequest - ; Returns:; Throws:; IOException. createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Parameters:; width - ; height - ; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). allowSmoothInterpolation; protected boolean allowSmoothInterpolation(); Returns true if this server is permitted to",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:1142,Performance,cache,cache,1142,"ested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class AbstractTileableImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. Direct Known Subclasses:; BioFormatsImageServer, LabeledImageServer, OpenslideImageServer, PathHierarchyImageServer, PixelClassificationImageServer, RenderedImageServer, SparseImageServer, WrappedBufferedImageServer. public abstract class AbstractTileableImageServer; extends AbstractImageServer<BufferedImage>; Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles.; ; The actual request is then handled by assembling the tiles, resizing as required.; This makes it possible to cache tiles and reuse them more efficiently, and often requires less effort ; to implement a new ImageServer. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTileableImageServer();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected boolean; allowSmoothInterpolation(). Returns true if this server is permitted to use smooth interpolation when resizing. protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. protected BufferedImage; getEmptyTile(int width,; int height);  ; protected BufferedImage; getEmptyTile(int width,; int height,; boolean doCache). Create an empty tile for this server, using the default color model. protected BufferedImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the c",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:2182,Performance,cache,cache,2182,"nd often requires less effort ; to implement a new ImageServer. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTileableImageServer();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected boolean; allowSmoothInterpolation(). Returns true if this server is permitted to use smooth interpolation when resizing. protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. protected BufferedImage; getEmptyTile(int width,; int height);  ; protected BufferedImage; getEmptyTile(int width,; int height,; boolean doCache). Create an empty tile for this server, using the default color model. protected BufferedImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. protected abstract BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, g",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:2236,Performance,cache,cache,2236,"nd often requires less effort ; to implement a new ImageServer. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTileableImageServer();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected boolean; allowSmoothInterpolation(). Returns true if this server is permitted to use smooth interpolation when resizing. protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. protected BufferedImage; getEmptyTile(int width,; int height);  ; protected BufferedImage; getEmptyTile(int width,; int height,; boolean doCache). Create an empty tile for this server, using the default color model. protected BufferedImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. protected abstract BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, g",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:4469,Performance,cache,cache,4469,"ght); throws IOException. Throws:; IOException. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height,; boolean doCache); throws IOException; Create an empty tile for this server, using the default color model. Parameters:; width - ; height - ; doCache - ; Returns:; Throws:; IOException. getDefaultColorModel; protected ColorModel getDefaultColorModel(); throws IOException; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Returns:; Throws:; IOException. readTile; protected abstract BufferedImage readTile(TileRequest tileRequest); throws IOException; Read a single image tile. Parameters:; tileRequest - ; Returns:; Throws:; IOException. getTile; protected BufferedImage getTile(TileRequest tileRequest); throws IOException; Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. Parameters:; tileRequest - ; Returns:; Throws:; IOException. createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Parameters:; width - ; height - ; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:4523,Performance,cache,cache,4523,"ght); throws IOException. Throws:; IOException. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height,; boolean doCache); throws IOException; Create an empty tile for this server, using the default color model. Parameters:; width - ; height - ; doCache - ; Returns:; Throws:; IOException. getDefaultColorModel; protected ColorModel getDefaultColorModel(); throws IOException; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Returns:; Throws:; IOException. readTile; protected abstract BufferedImage readTile(TileRequest tileRequest); throws IOException; Read a single image tile. Parameters:; tileRequest - ; Returns:; Throws:; IOException. getTile; protected BufferedImage getTile(TileRequest tileRequest); throws IOException; Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. Parameters:; tileRequest - ; Returns:; Throws:; IOException. createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Parameters:; width - ; height - ; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:5914,Safety,avoid,avoid,5914,"d BufferedImage createDefaultRGBImage(int width,; int height); Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Parameters:; width - ; height - ; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). allowSmoothInterpolation; protected boolean allowSmoothInterpolation(); Returns true if this server is permitted to use smooth interpolation when resizing.; The default implementation returns true if the channel type is not ImageServerMetadata.ChannelType.CLASSIFICATION. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html:3027,Security,hash,hashCode,3027,"this server, using the default color model. protected BufferedImage; getTile(TileRequest tileRequest). Get a tile for the request - ideally from the cache, but otherwise read it and ; then add it to the cache. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. protected abstract BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion. Constructor Details. AbstractTileableImageServer; protected AbstractTileableImageServer(). Method Details. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height); throws IOException. Throws:; IOException. getEmptyTile; protected BufferedImage getEmptyTile(int width,; int height,; boolean doCache); throws IOException; Create an empty tile for this server, using the default color model. Parameters:; width - ; height - ; doCache - ; Returns:; Throws:; IOException. getDefaultColorModel; protected ColorModel getDefaultColorModel(); throws IOException; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractTileableImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:3815,Availability,down,downsample,3815,"AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransformException. Throws:; NoninvertibleTransformException. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:4329,Availability,down,downsampling,4329,"() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getTransform; public AffineTransform getTransform(); Get the affine transform for this server. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the o",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:2686,Integrability,interface,interface,2686,"bing the type of server, for example the name of the library used (Openslide, Bioformats...). AffineTransform; getTransform(). Get the affine transform for this server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransformException. Throws:; NoninvertibleTransformException. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified Reg",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:3613,Integrability,interface,interface,3613," equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransformException. Throws:; NoninvertibleTransformException. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:4651,Integrability,interface,interface,4651,"l units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getTransform; public AffineTransform getTransform(); Get the affine transform for this server. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library use",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:5269,Integrability,interface,interface,5269,"nable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getTransform; public AffineTransform getTransform(); Get the affine transform for this server. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImag",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:5425,Integrability,interface,interface,5425,"ixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getTransform; public AffineTransform getTransform(); Get the affine transform for this server. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:5662,Integrability,interface,interface,5662,"ixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getTransform; public AffineTransform getTransform(); Get the affine transform for this server. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:723,Modifiability,extend,extends,723,". AffineTransformImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class AffineTransformImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.TransformingImageServer<BufferedImage>; qupath.lib.images.servers.AffineTransformImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class AffineTransformImageServer; extends TransformingImageServer<BufferedImage>; ImageServer that dynamically applies an AffineTransform to an existing ImageServer.; ; Warning! This is incomplete and will be changed/removed in the future. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform);  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). AffineTransform; getTransform(). Get the affine transform for this server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.im",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:1967,Modifiability,inherit,inherited,1967,"nstructors. Modifier; Constructor; Description; protected ; AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform);  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). AffineTransform; getTransform(). Get the affine transform for this server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransfor",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:2074,Modifiability,inherit,inherited,2074,"Image> server,; AffineTransform transform);  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). AffineTransform; getTransform(). Get the affine transform for this server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransformException. Throws:; NoninvertibleTransformException. Method Details. createID; protected String createID()",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:2552,Modifiability,inherit,inherited,2552,"OriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). AffineTransform; getTransform(). Get the affine transform for this server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransformException. Throws:; NoninvertibleTransformException. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:2671,Modifiability,inherit,inherited,2671,"bing the type of server, for example the name of the library used (Openslide, Bioformats...). AffineTransform; getTransform(). Get the affine transform for this server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransformException. Throws:; NoninvertibleTransformException. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified Reg",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:3955,Modifiability,extend,extends,3955,"s. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBuffer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:4504,Safety,avoid,avoid,4504,"equest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getTransform; public AffineTransform getTransform(); Get the affine transform for this server. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html:2616,Security,hash,hashCode,2616,"tion of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). AffineTransform; getTransform(). Get the affine transform for this server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. AffineTransformImageServer; protected AffineTransformImageServer(ImageServer<BufferedImage> server,; AffineTransform transform); throws NoninvertibleTransformException. Throws:; NoninvertibleTransformException. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface:",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AffineTransformImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:3149,Availability,down,downsample,3149," from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:3663,Availability,down,downsampling,3663,"erBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:2279,Integrability,interface,interface,2279,"ead during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:2947,Integrability,interface,interface,2947,", getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:3985,Integrability,interface,interface,3985,"dinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:4498,Integrability,interface,interface,4498,"dinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:4654,Integrability,interface,interface,4654,"dinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:4891,Integrability,interface,interface,4891,"dinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:735,Modifiability,extend,extends,735,". ChannelTransformFeatureServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ChannelTransformFeatureServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.TransformingImageServer<BufferedImage>; qupath.lib.images.servers.ChannelTransformFeatureServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class ChannelTransformFeatureServer; extends TransformingImageServer<BufferedImage>; A TransformingImageServer that applies color transforms to generate channels. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). protected ColorModel; getColorModel();  ; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsamp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:1560,Modifiability,inherit,inherited,1560,"lib.images.servers.ChannelTransformFeatureServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class ChannelTransformFeatureServer; extends TransformingImageServer<BufferedImage>; A TransformingImageServer that applies color transforms to generate channels. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). protected ColorModel; getColorModel();  ; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:1667,Modifiability,inherit,inherited,1667,"ufferedImage>. public class ChannelTransformFeatureServer; extends TransformingImageServer<BufferedImage>; A TransformingImageServer that applies color transforms to generate channels. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). protected ColorModel; getColorModel();  ; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<Bu",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:2145,Modifiability,inherit,inherited,2145,"ilders). protected ColorModel; getColorModel();  ; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downs",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:2264,Modifiability,inherit,inherited,2264,"ead during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:3289,Modifiability,extend,extends,3289,", readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBuffer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:3838,Safety,avoid,avoid,3838,"equest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html:2209,Security,hash,hashCode,2209,"Metadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getColorModel; protected ColorModel getColorModel(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specifi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ChannelTransformFeatureServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransform.html:471,Integrability,interface,interface,471,". ColorTransforms.ColorTransform (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ColorTransforms.ColorTransform. Enclosing class:; ColorTransforms. public static interface ColorTransforms.ColorTransform; Interface defining a color transform that can extract a float values from a BufferedImage.; ; The simplest example of this is to extract a single channel (band) from an image. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; float[]; extractChannel(ImageServer<BufferedImage> server,; BufferedImage img,; float[] pixels). Extract a (row-wise) array containing the pixels extracted from a BufferedImage. String; getName(). Get a displayable name for the transform. boolean; supportsImage(ImageServer<BufferedImage> server). Query whether this transform can be applied to the specified image. Method Details. extractChannel; float[] extractChannel(ImageServer<BufferedImage> server,; BufferedImage img,; float[] pixels); Extract a (row-wise) array containing the pixels extracted from a BufferedImage. Parameters:; server - the server from which the image was read; can be necessary for some transforms (e.g. to request color deconvolution stains); img - the image; pixels - optional preallocated array; will be used if it is long enough to hold the transformed pixels; Returns:. supportsImage; boolean supportsImage(ImageServer<BufferedImage> server); Query whether this transform can be applied to the specified image.; Reasons why it may not be include the type or channel number being incompatible. Parameters:; server - ; Returns:. getName; String getName(); Get a displayable name for the transform. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransform.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransform.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransform.html:611,Usability,simpl,simplest,611,". ColorTransforms.ColorTransform (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ColorTransforms.ColorTransform. Enclosing class:; ColorTransforms. public static interface ColorTransforms.ColorTransform; Interface defining a color transform that can extract a float values from a BufferedImage.; ; The simplest example of this is to extract a single channel (band) from an image. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; float[]; extractChannel(ImageServer<BufferedImage> server,; BufferedImage img,; float[] pixels). Extract a (row-wise) array containing the pixels extracted from a BufferedImage. String; getName(). Get a displayable name for the transform. boolean; supportsImage(ImageServer<BufferedImage> server). Query whether this transform can be applied to the specified image. Method Details. extractChannel; float[] extractChannel(ImageServer<BufferedImage> server,; BufferedImage img,; float[] pixels); Extract a (row-wise) array containing the pixels extracted from a BufferedImage. Parameters:; server - the server from which the image was read; can be necessary for some transforms (e.g. to request color deconvolution stains); img - the image; pixels - optional preallocated array; will be used if it is long enough to hold the transformed pixels; Returns:. supportsImage; boolean supportsImage(ImageServer<BufferedImage> server); Query whether this transform can be applied to the specified image.; Reasons why it may not be include the type or channel number being incompatible. Parameters:; server - ; Returns:. getName; String getName(); Get a displayable name for the transform. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransform.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransform.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html:686,Modifiability,extend,extends,686,". ColorTransforms.ColorTransformTypeAdapter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ColorTransforms.ColorTransformTypeAdapter. java.lang.Object; com.google.gson.TypeAdapter<ColorTransforms.ColorTransform>; qupath.lib.images.servers.ColorTransforms.ColorTransformTypeAdapter. Enclosing class:; ColorTransforms. public static class ColorTransforms.ColorTransformTypeAdapter; extends TypeAdapter<ColorTransforms.ColorTransform>; TypeAdapter to support serializing a ColorTransforms.ColorTransform. Constructor Summary; Constructors. Constructor; Description; ColorTransformTypeAdapter();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ColorTransforms.ColorTransform; read(JsonReader in);  ; void; write(JsonWriter out,; ColorTransforms.ColorTransform value);  . Methods inherited from class com.google.gson.TypeAdapter; fromJson, fromJson, fromJsonTree, nullSafe, toJson, toJson, toJsonTree. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransformTypeAdapter; public ColorTransformTypeAdapter(). Method Details. write; public void write(JsonWriter out,; ColorTransforms.ColorTransform value); throws IOException. Specified by:; write in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. read; public ColorTransforms.ColorTransform read(JsonReader in); throws IOException. Specified by:; read in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html:1137,Modifiability,inherit,inherited,1137,". ColorTransforms.ColorTransformTypeAdapter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ColorTransforms.ColorTransformTypeAdapter. java.lang.Object; com.google.gson.TypeAdapter<ColorTransforms.ColorTransform>; qupath.lib.images.servers.ColorTransforms.ColorTransformTypeAdapter. Enclosing class:; ColorTransforms. public static class ColorTransforms.ColorTransformTypeAdapter; extends TypeAdapter<ColorTransforms.ColorTransform>; TypeAdapter to support serializing a ColorTransforms.ColorTransform. Constructor Summary; Constructors. Constructor; Description; ColorTransformTypeAdapter();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ColorTransforms.ColorTransform; read(JsonReader in);  ; void; write(JsonWriter out,; ColorTransforms.ColorTransform value);  . Methods inherited from class com.google.gson.TypeAdapter; fromJson, fromJson, fromJsonTree, nullSafe, toJson, toJson, toJsonTree. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransformTypeAdapter; public ColorTransformTypeAdapter(). Method Details. write; public void write(JsonWriter out,; ColorTransforms.ColorTransform value); throws IOException. Specified by:; write in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. read; public ColorTransforms.ColorTransform read(JsonReader in); throws IOException. Specified by:; read in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html:1267,Modifiability,inherit,inherited,1267,". ColorTransforms.ColorTransformTypeAdapter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ColorTransforms.ColorTransformTypeAdapter. java.lang.Object; com.google.gson.TypeAdapter<ColorTransforms.ColorTransform>; qupath.lib.images.servers.ColorTransforms.ColorTransformTypeAdapter. Enclosing class:; ColorTransforms. public static class ColorTransforms.ColorTransformTypeAdapter; extends TypeAdapter<ColorTransforms.ColorTransform>; TypeAdapter to support serializing a ColorTransforms.ColorTransform. Constructor Summary; Constructors. Constructor; Description; ColorTransformTypeAdapter();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ColorTransforms.ColorTransform; read(JsonReader in);  ; void; write(JsonWriter out,; ColorTransforms.ColorTransform value);  . Methods inherited from class com.google.gson.TypeAdapter; fromJson, fromJson, fromJsonTree, nullSafe, toJson, toJson, toJsonTree. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransformTypeAdapter; public ColorTransformTypeAdapter(). Method Details. write; public void write(JsonWriter out,; ColorTransforms.ColorTransform value); throws IOException. Specified by:; write in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. read; public ColorTransforms.ColorTransform read(JsonReader in); throws IOException. Specified by:; read in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html:1341,Security,hash,hashCode,1341,". ColorTransforms.ColorTransformTypeAdapter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ColorTransforms.ColorTransformTypeAdapter. java.lang.Object; com.google.gson.TypeAdapter<ColorTransforms.ColorTransform>; qupath.lib.images.servers.ColorTransforms.ColorTransformTypeAdapter. Enclosing class:; ColorTransforms. public static class ColorTransforms.ColorTransformTypeAdapter; extends TypeAdapter<ColorTransforms.ColorTransform>; TypeAdapter to support serializing a ColorTransforms.ColorTransform. Constructor Summary; Constructors. Constructor; Description; ColorTransformTypeAdapter();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ColorTransforms.ColorTransform; read(JsonReader in);  ; void; write(JsonWriter out,; ColorTransforms.ColorTransform value);  . Methods inherited from class com.google.gson.TypeAdapter; fromJson, fromJson, fromJsonTree, nullSafe, toJson, toJson, toJsonTree. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransformTypeAdapter; public ColorTransformTypeAdapter(). Method Details. write; public void write(JsonWriter out,; ColorTransforms.ColorTransform value); throws IOException. Specified by:; write in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. read; public ColorTransforms.ColorTransform read(JsonReader in); throws IOException. Specified by:; read in class TypeAdapter<ColorTransforms.ColorTransform>; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.ColorTransformTypeAdapter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html:3369,Energy Efficiency,adapt,adapted,3369,"ransform(). Create a ColorTransform that calculates the maximum of all channels. static ColorTransforms.ColorTransform; createMeanChannelTransform(). Create a ColorTransform that calculates the mean of all channels. static ColorTransforms.ColorTransform; createMinimumChannelTransform(). Create a ColorTransform that calculates the minimum of all channels. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransforms; public ColorTransforms(). Method Details. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(int channel); Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). Parameters:; channel - ; Returns:. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(String channelName); Create ColorTransform to extract a channel based on its name. Parameters:; channelName - ; Returns:. createMeanChannelTransform; public static ColorTransforms.ColorTransform createMeanChannelTransform(); Create a ColorTransform that calculates the mean of all channels. Returns:. createColorDeconvolvedChannel; public static ColorTransforms.ColorTransform createColorDeconvolvedChannel(ColorDeconvolutionStains stains,; int stainNumber); Create a ColorTransform that applies color deconvolution. Parameters:; stains - the stains (this will be 'fixed', and not adapted for each image); stainNumber - number of the stain (1, 2 or 3); Returns:. createMaximumChannelTransform; public static ColorTransforms.ColorTransform createMaximumChannelTransform(); Create a ColorTransform that calculates the maximum of all channels. Returns:. createMinimumChannelTransform; public static ColorTransforms.ColorTransform createMinimumChannelTransform(); Create a ColorTransform that calculates the minimum of all channels. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html:771,Integrability,interface,interface,771,". ColorTransforms (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ColorTransforms. java.lang.Object; qupath.lib.images.servers.ColorTransforms. public class ColorTransforms; extends Object; Color transforms that may be used to extract single-channel images from BufferedImages.; These are JSON-serializable, and therefore can be used with pixel classifiers. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. static class ; ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. Constructor Summary; Constructors. Constructor; Description; ColorTransforms();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorTransforms.ColorTransform; createChannelExtractor(int channel). Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). static ColorTransforms.ColorTransform; createChannelExtractor(String channelName). Create ColorTransform to extract a channel based on its name. static ColorTransforms.ColorTransform; createColorDeconvolvedChannel(ColorDeconvolutionStains stains,; int stainNumber). Create a ColorTransform that applies color deconvolution. static ColorTransforms.ColorTransform; createMaximumChannelTransform(). Create a ColorTransform that calculates the maximum of all channels. static ColorTransforms.ColorTransform; createMeanChannelTransform(). Create a ColorTransform ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html:479,Modifiability,extend,extends,479,". ColorTransforms (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ColorTransforms. java.lang.Object; qupath.lib.images.servers.ColorTransforms. public class ColorTransforms; extends Object; Color transforms that may be used to extract single-channel images from BufferedImages.; These are JSON-serializable, and therefore can be used with pixel classifiers. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. static class ; ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. Constructor Summary; Constructors. Constructor; Description; ColorTransforms();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorTransforms.ColorTransform; createChannelExtractor(int channel). Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). static ColorTransforms.ColorTransform; createChannelExtractor(String channelName). Create ColorTransform to extract a channel based on its name. static ColorTransforms.ColorTransform; createColorDeconvolvedChannel(ColorDeconvolutionStains stains,; int stainNumber). Create a ColorTransform that applies color deconvolution. static ColorTransforms.ColorTransform; createMaximumChannelTransform(). Create a ColorTransform that calculates the maximum of all channels. static ColorTransforms.ColorTransform; createMeanChannelTransform(). Create a ColorTransform ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html:2192,Modifiability,inherit,inherited,2192,"; Description; static ColorTransforms.ColorTransform; createChannelExtractor(int channel). Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). static ColorTransforms.ColorTransform; createChannelExtractor(String channelName). Create ColorTransform to extract a channel based on its name. static ColorTransforms.ColorTransform; createColorDeconvolvedChannel(ColorDeconvolutionStains stains,; int stainNumber). Create a ColorTransform that applies color deconvolution. static ColorTransforms.ColorTransform; createMaximumChannelTransform(). Create a ColorTransform that calculates the maximum of all channels. static ColorTransforms.ColorTransform; createMeanChannelTransform(). Create a ColorTransform that calculates the mean of all channels. static ColorTransforms.ColorTransform; createMinimumChannelTransform(). Create a ColorTransform that calculates the minimum of all channels. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransforms; public ColorTransforms(). Method Details. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(int channel); Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). Parameters:; channel - ; Returns:. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(String channelName); Create ColorTransform to extract a channel based on its name. Parameters:; channelName - ; Returns:. createMeanChannelTransform; public static ColorTransforms.ColorTransform createMeanChannelTransform(); Create a ColorTransform that calculates the mean of all channels. Returns:. createColorDeconvolvedChannel; public static ColorTransforms.ColorTransform createColorDeconvolvedChannel(ColorD",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html:3369,Modifiability,adapt,adapted,3369,"ransform(). Create a ColorTransform that calculates the maximum of all channels. static ColorTransforms.ColorTransform; createMeanChannelTransform(). Create a ColorTransform that calculates the mean of all channels. static ColorTransforms.ColorTransform; createMinimumChannelTransform(). Create a ColorTransform that calculates the minimum of all channels. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransforms; public ColorTransforms(). Method Details. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(int channel); Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). Parameters:; channel - ; Returns:. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(String channelName); Create ColorTransform to extract a channel based on its name. Parameters:; channelName - ; Returns:. createMeanChannelTransform; public static ColorTransforms.ColorTransform createMeanChannelTransform(); Create a ColorTransform that calculates the mean of all channels. Returns:. createColorDeconvolvedChannel; public static ColorTransforms.ColorTransform createColorDeconvolvedChannel(ColorDeconvolutionStains stains,; int stainNumber); Create a ColorTransform that applies color deconvolution. Parameters:; stains - the stains (this will be 'fixed', and not adapted for each image); stainNumber - number of the stain (1, 2 or 3); Returns:. createMaximumChannelTransform; public static ColorTransforms.ColorTransform createMaximumChannelTransform(); Create a ColorTransform that calculates the maximum of all channels. Returns:. createMinimumChannelTransform; public static ColorTransforms.ColorTransform createMinimumChannelTransform(); Create a ColorTransform that calculates the minimum of all channels. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html:2266,Security,hash,hashCode,2266,"ctor(int channel). Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). static ColorTransforms.ColorTransform; createChannelExtractor(String channelName). Create ColorTransform to extract a channel based on its name. static ColorTransforms.ColorTransform; createColorDeconvolvedChannel(ColorDeconvolutionStains stains,; int stainNumber). Create a ColorTransform that applies color deconvolution. static ColorTransforms.ColorTransform; createMaximumChannelTransform(). Create a ColorTransform that calculates the maximum of all channels. static ColorTransforms.ColorTransform; createMeanChannelTransform(). Create a ColorTransform that calculates the mean of all channels. static ColorTransforms.ColorTransform; createMinimumChannelTransform(). Create a ColorTransform that calculates the minimum of all channels. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransforms; public ColorTransforms(). Method Details. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(int channel); Create ColorTransform to extract a channel based on its number (0-based index, although result of ColorTransforms.ColorTransform.getName() is 1-based). Parameters:; channel - ; Returns:. createChannelExtractor; public static ColorTransforms.ColorTransform createChannelExtractor(String channelName); Create ColorTransform to extract a channel based on its name. Parameters:; channelName - ; Returns:. createMeanChannelTransform; public static ColorTransforms.ColorTransform createMeanChannelTransform(); Create a ColorTransform that calculates the mean of all channels. Returns:. createColorDeconvolvedChannel; public static ColorTransforms.ColorTransform createColorDeconvolvedChannel(ColorDeconvolutionStains stains,; int stainNumber); Create a ColorTransform th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ColorTransforms.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:3991,Availability,down,downsample,3991,"n); Create an ImageServer that represents a cropped region of another (larger) server. Parameters:; server - the 'base' server to be cropped; region - the region within the 'base' server that should be cropped. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:4505,Availability,down,downsampling,4505,"() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getCropRegion; public ImageRegion getCropRegion(); Get the region being cropped, in terms of the bounding box within the base ImageServer. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description c",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:2763,Integrability,interface,interface,2763,"ead during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. CroppedImageServer; public CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region); Create an ImageServer that represents a cropped region of another (larger) server. Parameters:; server - the 'base' server to be cropped; region - the region within the 'base' server that should be cropped. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOExcept",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:3789,Integrability,interface,interface,3789,"qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. CroppedImageServer; public CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region); Create an ImageServer that represents a cropped region of another (larger) server. Parameters:; server - the 'base' server to be cropped; region - the region within the 'base' server that should be cropped. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:4827,Integrability,interface,interface,4827,"l units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getCropRegion; public ImageRegion getCropRegion(); Get the region being cropped, in terms of the bounding box within the base ImageServer. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of ser",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:5489,Integrability,interface,interface,5489,"ize, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getCropRegion; public ImageRegion getCropRegion(); Get the region being cropped, in terms of the bounding box within the base ImageServer. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImag",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:5645,Integrability,interface,interface,5645,"; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getCropRegion; public ImageRegion getCropRegion(); Get the region being cropped, in terms of the bounding box within the base ImageServer. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:5882,Integrability,interface,interface,5882,"; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getCropRegion; public ImageRegion getCropRegion(); Get the region being cropped, in terms of the bounding box within the base ImageServer. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:691,Modifiability,extend,extends,691,". CroppedImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class CroppedImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.TransformingImageServer<BufferedImage>; qupath.lib.images.servers.CroppedImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class CroppedImageServer; extends TransformingImageServer<BufferedImage>; ImageServer that treats a particular sub-region of another ImageServer as a full image, ; i.e. it performs dynamic cropping, without a need to export the cropped region separately. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region). Create an ImageServer that represents a cropped region of another (larger) server. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageRegion; getCropRegion(). Get the region being cropped, in terms of the bounding box within the base ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image reg",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:2044,Modifiability,inherit,inherited,2044,"rver,; ImageRegion region). Create an ImageServer that represents a cropped region of another (larger) server. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageRegion; getCropRegion(). Get the region being cropped, in terms of the bounding box within the base ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. CroppedImageServer; public CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region); Create an ImageServer that represents a cropped region",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:2151,Modifiability,inherit,inherited,2151,"er. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageRegion; getCropRegion(). Get the region being cropped, in terms of the bounding box within the base ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. CroppedImageServer; public CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region); Create an ImageServer that represents a cropped region of another (larger) server. Parameters:; server - the 'base' server to be cropped; region - the region wit",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:2629,Modifiability,inherit,inherited,2629,"s of the bounding box within the base ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. CroppedImageServer; public CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region); Create an ImageServer that represents a cropped region of another (larger) server. Parameters:; server - the 'base' server to be cropped; region - the region within the 'base' server that should be cropped. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class Abstrac",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:2748,Modifiability,inherit,inherited,2748,"ead during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. CroppedImageServer; public CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region); Create an ImageServer that represents a cropped region of another (larger) server. Parameters:; server - the 'base' server to be cropped; region - the region within the 'base' server that should be cropped. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOExcept",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:4131,Modifiability,extend,extends,4131,"s. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBuffer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:837,Performance,perform,performs,837,". CroppedImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class CroppedImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.TransformingImageServer<BufferedImage>; qupath.lib.images.servers.CroppedImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class CroppedImageServer; extends TransformingImageServer<BufferedImage>; ImageServer that treats a particular sub-region of another ImageServer as a full image, ; i.e. it performs dynamic cropping, without a need to export the cropped region separately. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region). Create an ImageServer that represents a cropped region of another (larger) server. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageRegion; getCropRegion(). Get the region being cropped, in terms of the bounding box within the base ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image reg",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:4680,Safety,avoid,avoid,4680,"equest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getCropRegion; public ImageRegion getCropRegion(); Get the region being cropped, in terms of the bounding box within the base ImageServer. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class Tran",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html:2693,Security,hash,hashCode,2693,"Metadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. CroppedImageServer; public CroppedImageServer(ImageServer<BufferedImage> server,; ImageRegion region); Create an ImageServer that represents a cropped region of another (larger) server. Parameters:; server - the 'base' server to be cropped; region - the region within the 'base' server that should be cropped. Method Details. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public Buff",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/CroppedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:951,Integrability,interface,interface,951,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:475,Modifiability,extend,extends,475,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:1440,Modifiability,inherit,inherited,1440,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:624,Performance,perform,performing,624,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:1794,Performance,cache,cached,1794,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:1823,Safety,avoid,avoid,1823,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:1514,Security,hash,hashCode,1514,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html:712,Usability,usab,usable,712,". FileFormatInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class FileFormatInfo. java.lang.Object; qupath.lib.images.servers.FileFormatInfo. public class FileFormatInfo; extends Object; Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data.; ; In particular, it attempts to extract some usable information from TIFF images using ImageIO to help ; a reader determine whether or not it should attempt to read the image. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Constructor Summary; Constructors. Constructor; Description; FileFormatInfo();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static FileFormatInfo.ImageCheckType; checkType(URI uri). Check the type of an image for a specified URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. FileFormatInfo; public FileFormatInfo(). Method Details. checkType; public static FileFormatInfo.ImageCheckType checkType(URI uri); Check the type of an image for a specified URI.; ; This will return a cached value if possible, to avoid applying (potentially costly) checks too often. Parameters:; uri - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html:864,Availability,avail,available,864,". FileFormatInfo.ImageCheckType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface FileFormatInfo.ImageCheckType. Enclosing class:; FileFormatInfo. public static interface FileFormatInfo.ImageCheckType; Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get the image description, as stored in a TIFF, or null if no description is available. File; getFile(). Get a File object representing the local image file - or null if no file could be found. long; getLargestImageHeight(). Get the height of the largest image, if known. long; getLargestImageWidth(). Get the width of the largest image, if known. boolean; isBigTiff(). Returns true if URI is for a local file known/expected to be a BigTIFF image. boolean; isNotRGB(). Returns true if we can say with reasonable confidence that the image is not RGB. boolean; isTiff(). Returns true if URI is for a local file known/expected to be a TIFF image. boolean; isURL(). Return true if URI has a scheme beginning with http. int; nImages(). Return an estimate of the number of images if known, or -1 if unknown. int; nImagesLargest(). Return the number of images with the largest image size, if known, or -1 if unknown. Method Details. isURL; boolean isURL(); Return true if URI has a scheme beginning with http. Returns:. isTiff; boolean isTiff(); Returns true if URI is for a local file known/expected to be a TIFF image. Returns:. isBigTiff; boolean isBigTiff(); Returns true if URI is for a local file known/expected to ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html:2149,Availability,avail,available,2149,"he width of the largest image, if known. boolean; isBigTiff(). Returns true if URI is for a local file known/expected to be a BigTIFF image. boolean; isNotRGB(). Returns true if we can say with reasonable confidence that the image is not RGB. boolean; isTiff(). Returns true if URI is for a local file known/expected to be a TIFF image. boolean; isURL(). Return true if URI has a scheme beginning with http. int; nImages(). Return an estimate of the number of images if known, or -1 if unknown. int; nImagesLargest(). Return the number of images with the largest image size, if known, or -1 if unknown. Method Details. isURL; boolean isURL(); Return true if URI has a scheme beginning with http. Returns:. isTiff; boolean isTiff(); Returns true if URI is for a local file known/expected to be a TIFF image. Returns:. isBigTiff; boolean isBigTiff(); Returns true if URI is for a local file known/expected to be a BigTIFF image. Returns:. getDescription; String getDescription(); Get the image description, as stored in a TIFF, or null if no description is available. Returns:. getFile; File getFile(); Get a File object representing the local image file - or null if no file could be found. Returns:. nImages; int nImages(); Return an estimate of the number of images if known, or -1 if unknown.; ; Note that the maximum value returned may be less than the total number of images, if scanning the full ; file risks being prohibitively expensive (this has been found to be the case with some non-standard TIFF ; images). Returns:. nImagesLargest; int nImagesLargest(); Return the number of images with the largest image size, if known, or -1 if unknown.; ; This can be used to help distinguish images that contain multiple images where each image is really ; another z-slice, channel or time point - rather than a macro or label, for example. Returns:. isNotRGB; boolean isNotRGB(); Returns true if we can say with reasonable confidence that the image is not RGB.; ; This information can be used to prev",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html:468,Integrability,interface,interface,468,". FileFormatInfo.ImageCheckType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface FileFormatInfo.ImageCheckType. Enclosing class:; FileFormatInfo. public static interface FileFormatInfo.ImageCheckType; Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get the image description, as stored in a TIFF, or null if no description is available. File; getFile(). Get a File object representing the local image file - or null if no file could be found. long; getLargestImageHeight(). Get the height of the largest image, if known. long; getLargestImageWidth(). Get the width of the largest image, if known. boolean; isBigTiff(). Returns true if URI is for a local file known/expected to be a BigTIFF image. boolean; isNotRGB(). Returns true if we can say with reasonable confidence that the image is not RGB. boolean; isTiff(). Returns true if URI is for a local file known/expected to be a TIFF image. boolean; isURL(). Return true if URI has a scheme beginning with http. int; nImages(). Return an estimate of the number of images if known, or -1 if unknown. int; nImagesLargest(). Return the number of images with the largest image size, if known, or -1 if unknown. Method Details. isURL; boolean isURL(); Return true if URI has a scheme beginning with http. Returns:. isTiff; boolean isTiff(); Returns true if URI is for a local file known/expected to be a TIFF image. Returns:. isBigTiff; boolean isBigTiff(); Returns true if URI is for a local file known/expected to ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html:2502,Safety,risk,risks,2502,". int; nImages(). Return an estimate of the number of images if known, or -1 if unknown. int; nImagesLargest(). Return the number of images with the largest image size, if known, or -1 if unknown. Method Details. isURL; boolean isURL(); Return true if URI has a scheme beginning with http. Returns:. isTiff; boolean isTiff(); Returns true if URI is for a local file known/expected to be a TIFF image. Returns:. isBigTiff; boolean isBigTiff(); Returns true if URI is for a local file known/expected to be a BigTIFF image. Returns:. getDescription; String getDescription(); Get the image description, as stored in a TIFF, or null if no description is available. Returns:. getFile; File getFile(); Get a File object representing the local image file - or null if no file could be found. Returns:. nImages; int nImages(); Return an estimate of the number of images if known, or -1 if unknown.; ; Note that the maximum value returned may be less than the total number of images, if scanning the full ; file risks being prohibitively expensive (this has been found to be the case with some non-standard TIFF ; images). Returns:. nImagesLargest; int nImagesLargest(); Return the number of images with the largest image size, if known, or -1 if unknown.; ; This can be used to help distinguish images that contain multiple images where each image is really ; another z-slice, channel or time point - rather than a macro or label, for example. Returns:. isNotRGB; boolean isNotRGB(); Returns true if we can say with reasonable confidence that the image is not RGB.; ; This information can be used to prevent readers that only support RGB images from trying to read this one.; However, note that it is permissible to return false in cases where the RGB status of the image is unclear. Returns:. getLargestImageWidth; long getLargestImageWidth(); Get the width of the largest image, if known. Returns:; the width of the largest image, or -1 if this is not known. getLargestImageHeight; long getLargestImageHeigh",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/FileFormatInfo.ImageCheckType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html:591,Integrability,interface,interface,591,". GeneratingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface GeneratingImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable, ImageServer<T>. All Known Implementing Classes:; LabeledImageServer, PathHierarchyImageServer, RenderedImageServer. public interface GeneratingImageServer<T>; extends ImageServer<T>; Marker interface to indicate that this ImageServer generates tiles on request. Author:; Pete Bankhead. Method Summary. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getOriginalMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getServerType, getTileRequestManager, getURIs, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html:658,Integrability,interface,interface,658,". GeneratingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface GeneratingImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable, ImageServer<T>. All Known Implementing Classes:; LabeledImageServer, PathHierarchyImageServer, RenderedImageServer. public interface GeneratingImageServer<T>; extends ImageServer<T>; Marker interface to indicate that this ImageServer generates tiles on request. Author:; Pete Bankhead. Method Summary. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getOriginalMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getServerType, getTileRequestManager, getURIs, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html:793,Integrability,interface,interface,793,". GeneratingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface GeneratingImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable, ImageServer<T>. All Known Implementing Classes:; LabeledImageServer, PathHierarchyImageServer, RenderedImageServer. public interface GeneratingImageServer<T>; extends ImageServer<T>; Marker interface to indicate that this ImageServer generates tiles on request. Author:; Pete Bankhead. Method Summary. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getOriginalMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getServerType, getTileRequestManager, getURIs, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html:858,Integrability,interface,interface,858,". GeneratingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface GeneratingImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable, ImageServer<T>. All Known Implementing Classes:; LabeledImageServer, PathHierarchyImageServer, RenderedImageServer. public interface GeneratingImageServer<T>; extends ImageServer<T>; Marker interface to indicate that this ImageServer generates tiles on request. Author:; Pete Bankhead. Method Summary. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getOriginalMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getServerType, getTileRequestManager, getURIs, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html:627,Modifiability,extend,extends,627,". GeneratingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface GeneratingImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable, ImageServer<T>. All Known Implementing Classes:; LabeledImageServer, PathHierarchyImageServer, RenderedImageServer. public interface GeneratingImageServer<T>; extends ImageServer<T>; Marker interface to indicate that this ImageServer generates tiles on request. Author:; Pete Bankhead. Method Summary. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getOriginalMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getServerType, getTileRequestManager, getURIs, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html:778,Modifiability,inherit,inherited,778,". GeneratingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface GeneratingImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable, ImageServer<T>. All Known Implementing Classes:; LabeledImageServer, PathHierarchyImageServer, RenderedImageServer. public interface GeneratingImageServer<T>; extends ImageServer<T>; Marker interface to indicate that this ImageServer generates tiles on request. Author:; Pete Bankhead. Method Summary. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getOriginalMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getServerType, getTileRequestManager, getURIs, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html:843,Modifiability,inherit,inherited,843,". GeneratingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface GeneratingImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable, ImageServer<T>. All Known Implementing Classes:; LabeledImageServer, PathHierarchyImageServer, RenderedImageServer. public interface GeneratingImageServer<T>; extends ImageServer<T>; Marker interface to indicate that this ImageServer generates tiles on request. Author:; Pete Bankhead. Method Summary. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getOriginalMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getServerType, getTileRequestManager, getURIs, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/GeneratingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:4004,Availability,avail,available,4004,"el for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may differ in future releases, and it is not guaranteed that all colors ; will be unique. If the colors must be exactly reproducible then it is better to specify them rather than to; depend on this method. Parameters:; channel - ; Returns:. getDefaultRGBChannels; public static List<ImageChannel> getDefaultRGBChannels(); Get default channel list for RGB images. Returns:. getDefaultChannelList; public static List<ImageChannel> getDefaultChannelList(int nChannels); Get default channel list for an image with a specified number of channels.; This is useful whenever no further channel name or color information is available. Parameters:; nChannels - ; Returns:. isTransparent; public boolean isTransparent(); Check if the color is 'transparent'; this is used for background/ignored channels. Returns:. getName; public String getName(); Name of the output channel. Returns:. getColor; public Integer getColor(); Color used to display the output channel. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:3410,Deployability,release,releases,3410,"en channel for RGB images. BLUE; public static final ImageChannel BLUE; Default blue channel for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may differ in future releases, and it is not guaranteed that all colors ; will be unique. If the colors must be exactly reproducible then it is better to specify them rather than to; depend on this method. Parameters:; channel - ; Returns:. getDefaultRGBChannels; public static List<ImageChannel> getDefaultRGBChannels(); Get default channel list for RGB images. Returns:. getDefaultChannelList; public static List<ImageChannel> getDefaultChannelList(int nChannels); Get default channel list for an image with a specified number of channels.; This is useful whenever no further channel name or color information is available. Parameters:; nChannels - ; Returns:. isTransparent; public boolean isTransparent(); Check if the color is 'transparent'; this is used for background/ignored channels. Returns:. getName; public String getName(); Name of the output channel. Returns:. getColor; public Integer getColor(); Color used to display the output channel. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in clas",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:736,Energy Efficiency,green,green,736,". ImageChannel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageChannel. java.lang.Object; qupath.lib.images.servers.ImageChannel. public class ImageChannel; extends Object; The name and display color for a single image channel. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final ImageChannel; BLUE. Default blue channel for RGB images. static final ImageChannel; GREEN. Default green channel for RGB images. static final ImageChannel; RED. Default red channel for RGB images. static final Integer; TRANSPARENT. Special color indicating pixel values for a channel indicate levels of transparency. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; static List<ImageChannel>; getChannelList(String... names). Convert an array of channel names into a list of ImageChannel using default colors. Integer; getColor(). Color used to display the output channel. static Integer; getDefaultChannelColor(int channel). Get the default color for a specified channel, for use when no channel colors are already known. static List<ImageChannel>; getDefaultChannelList(int nChannels). Get default channel list for an image with a specified number of channels. static List<ImageChannel>; getDefaultRGBChannels(). Get default channel list for RGB images. static ImageChannel; getInstance(String name,; Integer color). Get a channel instance with the specified name and color. String; getName(). Name of the output channel. int; hashCode();  ; boolean; isTransparent(). Check if the color is 'transparent'; this is used for background/ignored channels. String; toStr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:2410,Energy Efficiency,green,green,2410,"ed channel, for use when no channel colors are already known. static List<ImageChannel>; getDefaultChannelList(int nChannels). Get default channel list for an image with a specified number of channels. static List<ImageChannel>; getDefaultRGBChannels(). Get default channel list for RGB images. static ImageChannel; getInstance(String name,; Integer color). Get a channel instance with the specified name and color. String; getName(). Name of the output channel. int; hashCode();  ; boolean; isTransparent(). Check if the color is 'transparent'; this is used for background/ignored channels. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. TRANSPARENT; public static final Integer TRANSPARENT; Special color indicating pixel values for a channel indicate levels of transparency. RED; public static final ImageChannel RED; Default red channel for RGB images. GREEN; public static final ImageChannel GREEN; Default green channel for RGB images. BLUE; public static final ImageChannel BLUE; Default blue channel for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may diff",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:3572,Integrability,depend,depend,3572,"el for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may differ in future releases, and it is not guaranteed that all colors ; will be unique. If the colors must be exactly reproducible then it is better to specify them rather than to; depend on this method. Parameters:; channel - ; Returns:. getDefaultRGBChannels; public static List<ImageChannel> getDefaultRGBChannels(); Get default channel list for RGB images. Returns:. getDefaultChannelList; public static List<ImageChannel> getDefaultChannelList(int nChannels); Get default channel list for an image with a specified number of channels.; This is useful whenever no further channel name or color information is available. Parameters:; nChannels - ; Returns:. isTransparent; public boolean isTransparent(); Check if the color is 'transparent'; this is used for background/ignored channels. Returns:. getName; public String getName(); Name of the output channel. Returns:. getColor; public Integer getColor(); Color used to display the output channel. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:467,Modifiability,extend,extends,467,". ImageChannel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageChannel. java.lang.Object; qupath.lib.images.servers.ImageChannel. public class ImageChannel; extends Object; The name and display color for a single image channel. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final ImageChannel; BLUE. Default blue channel for RGB images. static final ImageChannel; GREEN. Default green channel for RGB images. static final ImageChannel; RED. Default red channel for RGB images. static final Integer; TRANSPARENT. Special color indicating pixel values for a channel indicate levels of transparency. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; static List<ImageChannel>; getChannelList(String... names). Convert an array of channel names into a list of ImageChannel using default colors. Integer; getColor(). Color used to display the output channel. static Integer; getDefaultChannelColor(int channel). Get the default color for a specified channel, for use when no channel colors are already known. static List<ImageChannel>; getDefaultChannelList(int nChannels). Get default channel list for an image with a specified number of channels. static List<ImageChannel>; getDefaultRGBChannels(). Get default channel list for RGB images. static ImageChannel; getInstance(String name,; Integer color). Get a channel instance with the specified name and color. String; getName(). Name of the output channel. int; hashCode();  ; boolean; isTransparent(). Check if the color is 'transparent'; this is used for background/ignored channels. String; toStr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:2019,Modifiability,inherit,inherited,2019,". Modifier and Type; Method; Description; boolean; equals(Object obj);  ; static List<ImageChannel>; getChannelList(String... names). Convert an array of channel names into a list of ImageChannel using default colors. Integer; getColor(). Color used to display the output channel. static Integer; getDefaultChannelColor(int channel). Get the default color for a specified channel, for use when no channel colors are already known. static List<ImageChannel>; getDefaultChannelList(int nChannels). Get default channel list for an image with a specified number of channels. static List<ImageChannel>; getDefaultRGBChannels(). Get default channel list for RGB images. static ImageChannel; getInstance(String name,; Integer color). Get a channel instance with the specified name and color. String; getName(). Name of the output channel. int; hashCode();  ; boolean; isTransparent(). Check if the color is 'transparent'; this is used for background/ignored channels. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. TRANSPARENT; public static final Integer TRANSPARENT; Special color indicating pixel values for a channel indicate levels of transparency. RED; public static final ImageChannel RED; Default red channel for RGB images. GREEN; public static final ImageChannel GREEN; Default green channel for RGB images. BLUE; public static final ImageChannel BLUE; Default blue channel for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list o",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:1864,Security,hash,hashCode,1864,"r indicating pixel values for a channel indicate levels of transparency. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; static List<ImageChannel>; getChannelList(String... names). Convert an array of channel names into a list of ImageChannel using default colors. Integer; getColor(). Color used to display the output channel. static Integer; getDefaultChannelColor(int channel). Get the default color for a specified channel, for use when no channel colors are already known. static List<ImageChannel>; getDefaultChannelList(int nChannels). Get default channel list for an image with a specified number of channels. static List<ImageChannel>; getDefaultRGBChannels(). Get default channel list for RGB images. static ImageChannel; getInstance(String name,; Integer color). Get a channel instance with the specified name and color. String; getName(). Name of the output channel. int; hashCode();  ; boolean; isTransparent(). Check if the color is 'transparent'; this is used for background/ignored channels. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. TRANSPARENT; public static final Integer TRANSPARENT; Special color indicating pixel values for a channel indicate levels of transparency. RED; public static final ImageChannel RED; Default red channel for RGB images. GREEN; public static final ImageChannel GREEN; Default green channel for RGB images. BLUE; public static final ImageChannel BLUE; Default blue channel for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Con",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:4353,Security,hash,hashCode,4353,"el for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may differ in future releases, and it is not guaranteed that all colors ; will be unique. If the colors must be exactly reproducible then it is better to specify them rather than to; depend on this method. Parameters:; channel - ; Returns:. getDefaultRGBChannels; public static List<ImageChannel> getDefaultRGBChannels(); Get default channel list for RGB images. Returns:. getDefaultChannelList; public static List<ImageChannel> getDefaultChannelList(int nChannels); Get default channel list for an image with a specified number of channels.; This is useful whenever no further channel name or color information is available. Parameters:; nChannels - ; Returns:. isTransparent; public boolean isTransparent(); Check if the color is 'transparent'; this is used for background/ignored channels. Returns:. getName; public String getName(); Name of the output channel. Returns:. getColor; public Integer getColor(); Color used to display the output channel. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:4374,Security,hash,hashCode,4374,"el for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may differ in future releases, and it is not guaranteed that all colors ; will be unique. If the colors must be exactly reproducible then it is better to specify them rather than to; depend on this method. Parameters:; channel - ; Returns:. getDefaultRGBChannels; public static List<ImageChannel> getDefaultRGBChannels(); Get default channel list for RGB images. Returns:. getDefaultChannelList; public static List<ImageChannel> getDefaultChannelList(int nChannels); Get default channel list for an image with a specified number of channels.; This is useful whenever no further channel name or color information is available. Parameters:; nChannels - ; Returns:. isTransparent; public boolean isTransparent(); Check if the color is 'transparent'; this is used for background/ignored channels. Returns:. getName; public String getName(); Name of the output channel. Returns:. getColor; public Integer getColor(); Color used to display the output channel. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:4398,Security,hash,hashCode,4398,"el for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may differ in future releases, and it is not guaranteed that all colors ; will be unique. If the colors must be exactly reproducible then it is better to specify them rather than to; depend on this method. Parameters:; channel - ; Returns:. getDefaultRGBChannels; public static List<ImageChannel> getDefaultRGBChannels(); Get default channel list for RGB images. Returns:. getDefaultChannelList; public static List<ImageChannel> getDefaultChannelList(int nChannels); Get default channel list for an image with a specified number of channels.; This is useful whenever no further channel name or color information is available. Parameters:; nChannels - ; Returns:. isTransparent; public boolean isTransparent(); Check if the color is 'transparent'; this is used for background/ignored channels. Returns:. getName; public String getName(); Name of the output channel. Returns:. getColor; public Integer getColor(); Color used to display the output channel. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:2615,Availability,down,downsample,2615," try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. default ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metadata. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Get an array of downsample factors supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a Tile",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:2760,Availability,avail,available,2760," try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. default ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metadata. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Get an array of downsample factors supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a Tile",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:3455,Availability,down,downsample,3455,"tThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metadata. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Get an array of downsample factors supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:4462,Availability,down,downsample,4462," supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:4606,Availability,down,downsample,4606,"ts...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:6004,Availability,down,downsample,6004,"se. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:6280,Availability,down,downsample,6280," some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:6425,Availability,avail,available,6425," some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7698,Availability,avail,available,7698," image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions f",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:8742,Availability,down,downsample,8742,"precated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:9256,Availability,down,downsampling,9256,"recated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample fa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:9877,Availability,down,downsample,9877," (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All ch",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10136,Availability,down,downsample,10136," range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding bo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10203,Availability,down,downsample,10203," ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). get",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10216,Availability,down,downsample,10216," ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). get",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10654,Availability,down,downsample,10654,"0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). getServerType; String getServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10908,Availability,down,downsample,10908,"th,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). getServerType; String getServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name);",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10975,Availability,down,downsample,10975," ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). getServerType; String getServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name); Get the image for a given associated image name. Parameters:; name - ; Returns:; See Also:. getAssociatedImageList(). isEmptyRegion; boolean isEmptyRegion(RegionRequest request); Test whether a region is empty",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10988,Availability,down,downsample,10988," ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). getServerType; String getServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name); Get the image for a given associated image name. Parameters:; name - ; Returns:; See Also:. getAssociatedImageList(). isEmptyRegion; boolean isEmptyRegion(RegionRequest request); Test whether a region is empty",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:14192,Availability,avail,available,14192,"d index). Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getMetadata; ImageServerMetadata getMetadata(); Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Returns:; See Also:. getOriginalMetadata(). setMetadata; void setMetadata(ImageServerMetadata metadata); throws IllegalArgumentException; Set the metadata to use, e.g. to change the pixel size in microns. Parameters:; metadata - ; Throws:; IllegalArgumentException - if the metadata is incompatible (e.g. different image path, different bit-depth). getOriginalMetadata; ImageServerMetadata getOriginalMetadata(); Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. getMetadata(). getDefaultThumbnail; T getDefaultThumbnail(int z,; int t); throws IOException; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; TileRequestManager getTileRequestManager(); Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Returns:. getImageClass; Class<T> getImageCl",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:14936,Availability,error,errors,14936," in microns. Parameters:; metadata - ; Throws:; IllegalArgumentException - if the metadata is incompatible (e.g. different image path, different bit-depth). getOriginalMetadata; ImageServerMetadata getOriginalMetadata(); Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. getMetadata(). getDefaultThumbnail; T getDefaultThumbnail(int z,; int t); throws IOException; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; TileRequestManager getTileRequestManager(); Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Returns:. getImageClass; Class<T> getImageClass(); Get the class of the image representation returned by this ImageServer. Returns:. getBuilder; default ImageServerBuilder.ServerBuilder<T> getBuilder(); Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:1579,Deployability,update,updated,1579,"sses:; AbstractImageServer, AbstractTileableImageServer, AffineTransformImageServer, BioFormatsImageServer, ChannelDisplayTransformServer, ChannelTransformFeatureServer, CroppedImageServer, ImageJServer, LabeledImageServer, OpenslideImageServer, PathHierarchyImageServer, PixelClassificationImageServer, RearrangeRGBImageServer, RenderedImageServer, RotatedImageServer, SparseImageServer, TransformingImageServer, WrappedBufferedImageServer. public interface ImageServer<T>; extends AutoCloseable; Generic ImageServer, able to return pixels and metadata.; ; The idea behind making this generic was that it could be used on various platforms and with different UIs, e.g. Swing, JavaFX, ; or with different kinds of image reader.; In practice, the generic parameter is almost always BufferedImage.; ; Important! The readBufferedImage(RegionRequest) method was replaced by readRegion(RegionRequest) in ; v0.4.0. Implementing classes need only to worry about overriding readRegion(RegionRequest) - and legacy implementations ; should be updated to override the new method rather than the old one.; Default implementations of both methods exist to try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. default ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7979,Deployability,release,release,7979,". Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some impleme",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:8081,Deployability,update,updated,8081,". Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some impleme",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:3756,Energy Efficiency,efficient,efficiently,3756,"he lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metadata. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Get an array of downsample factors supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoin",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:4078,Energy Efficiency,green,green,4078,". Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metadata. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Get an array of downsample factors supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:6819,Energy Efficiency,green,green,6819," Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOE",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:14627,Energy Efficiency,efficient,efficiently,14627,"ntException; Set the metadata to use, e.g. to change the pixel size in microns. Parameters:; metadata - ; Throws:; IllegalArgumentException - if the metadata is incompatible (e.g. different image path, different bit-depth). getOriginalMetadata; ImageServerMetadata getOriginalMetadata(); Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. getMetadata(). getDefaultThumbnail; T getDefaultThumbnail(int z,; int t); throws IOException; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; TileRequestManager getTileRequestManager(); Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Returns:. getImageClass; Class<T> getImageClass(); Get the class of the image representation returned by this ImageServer. Returns:. getBuilder; default ImageServerBuilder.ServerBuilder<T> getBuilder(); Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:995,Integrability,interface,interface,995," disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable. All Known Subinterfaces:; GeneratingImageServer<T>, ImageDataServer<T>. All Known Implementing Classes:; AbstractImageServer, AbstractTileableImageServer, AffineTransformImageServer, BioFormatsImageServer, ChannelDisplayTransformServer, ChannelTransformFeatureServer, CroppedImageServer, ImageJServer, LabeledImageServer, OpenslideImageServer, PathHierarchyImageServer, PixelClassificationImageServer, RearrangeRGBImageServer, RenderedImageServer, RotatedImageServer, SparseImageServer, TransformingImageServer, WrappedBufferedImageServer. public interface ImageServer<T>; extends AutoCloseable; Generic ImageServer, able to return pixels and metadata.; ; The idea behind making this generic was that it could be used on various platforms and with different UIs, e.g. Swing, JavaFX, ; or with different kinds of image reader.; In practice, the generic parameter is almost always BufferedImage.; ; Important! The readBufferedImage(RegionRequest) method was replaced by readRegion(RegionRequest) in ; v0.4.0. Implementing classes need only to worry about overriding readRegion(RegionRequest) - and legacy implementations ; should be updated to override the new method rather than the old one.; Default implementations of both methods exist to try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associate",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:4948,Integrability,interface,interface,4948,"boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDowns",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:5759,Integrability,depend,depend,5759,"d timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:1021,Modifiability,extend,extends,1021," disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServer<T>. Type Parameters:; T - . All Superinterfaces:; AutoCloseable. All Known Subinterfaces:; GeneratingImageServer<T>, ImageDataServer<T>. All Known Implementing Classes:; AbstractImageServer, AbstractTileableImageServer, AffineTransformImageServer, BioFormatsImageServer, ChannelDisplayTransformServer, ChannelTransformFeatureServer, CroppedImageServer, ImageJServer, LabeledImageServer, OpenslideImageServer, PathHierarchyImageServer, PixelClassificationImageServer, RearrangeRGBImageServer, RenderedImageServer, RotatedImageServer, SparseImageServer, TransformingImageServer, WrappedBufferedImageServer. public interface ImageServer<T>; extends AutoCloseable; Generic ImageServer, able to return pixels and metadata.; ; The idea behind making this generic was that it could be used on various platforms and with different UIs, e.g. Swing, JavaFX, ; or with different kinds of image reader.; In practice, the generic parameter is almost always BufferedImage.; ; Important! The readBufferedImage(RegionRequest) method was replaced by readRegion(RegionRequest) in ; v0.4.0. Implementing classes need only to worry about overriding readRegion(RegionRequest) - and legacy implementations ; should be updated to override the new method rather than the old one.; Default implementations of both methods exist to try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associate",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:4933,Modifiability,inherit,inherited,4933,"boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDowns",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:8882,Modifiability,extend,extends,8882," future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:2310,Performance,cache,cached,2310,"edImage.; ; Important! The readBufferedImage(RegionRequest) method was replaced by readRegion(RegionRequest) in ; v0.4.0. Implementing classes need only to worry about overriding readRegion(RegionRequest) - and legacy implementations ; should be updated to override the new method rather than the old one.; Default implementations of both methods exist to try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. default ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metad",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:2356,Performance,cache,cached,2356,"edImage.; ; Important! The readBufferedImage(RegionRequest) method was replaced by readRegion(RegionRequest) in ; v0.4.0. Implementing classes need only to worry about overriding readRegion(RegionRequest) - and legacy implementations ; should be updated to override the new method rather than the old one.; Default implementations of both methods exist to try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. default ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metad",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7231,Performance,cache,cached,7231,"ble getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is dep",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7277,Performance,cache,cached,7277,"ble getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is dep",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7523,Performance,cache,cache,7523,", should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7533,Performance,perform,performance,7533,", should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7661,Performance,cache,cached,7661," image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions f",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7683,Performance,cache,cached,7683," image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions f",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:12439,Performance,queue,queue,12439,"etServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name); Get the image for a given associated image name. Parameters:; name - ; Returns:; See Also:. getAssociatedImageList(). isEmptyRegion; boolean isEmptyRegion(RegionRequest request); Test whether a region is empty, i.e. it contains nothing to be painted (e.g. the server paints objects; but there are no objects present in the region) and readBufferedImage(RegionRequest region) would return null.; ; This makes it possible to avoid a (potentially more expensive) request to readRegion(RegionRequest),; or to add it to a request queue, if we know there will be nothing to show for it.; ; Note: if this method returns true, it is safe to assume readBufferedImage would return null.; However, even if the method returns false it is possible that the region is still empty -; the purpose of this method is to assist performance, and it should return quickly.; Therefore if the calculations needed to identify if the region is empty are too onerous, it may conservatively return false. Parameters:; request - ; Returns:. getPixelType; PixelType getPixelType(); The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Returns:. getChannel; ImageChannel getChannel(int channel); Request information for one channel (0-based index). Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getMetadata; ImageServerMetadata getMetadata(); Get essential metadata associated with the ImageServer as a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:12723,Performance,perform,performance,12723," Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name); Get the image for a given associated image name. Parameters:; name - ; Returns:; See Also:. getAssociatedImageList(). isEmptyRegion; boolean isEmptyRegion(RegionRequest request); Test whether a region is empty, i.e. it contains nothing to be painted (e.g. the server paints objects; but there are no objects present in the region) and readBufferedImage(RegionRequest region) would return null.; ; This makes it possible to avoid a (potentially more expensive) request to readRegion(RegionRequest),; or to add it to a request queue, if we know there will be nothing to show for it.; ; Note: if this method returns true, it is safe to assume readBufferedImage would return null.; However, even if the method returns false it is possible that the region is still empty -; the purpose of this method is to assist performance, and it should return quickly.; Therefore if the calculations needed to identify if the region is empty are too onerous, it may conservatively return false. Parameters:; request - ; Returns:. getPixelType; PixelType getPixelType(); The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Returns:. getChannel; ImageChannel getChannel(int channel); Request information for one channel (0-based index). Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getMetadata; ImageServerMetadata getMetadata(); Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Returns:; See Also:. getOriginalMetadata(). setMetadata; void setMetadata(ImageServerMetadata metadata); throws IllegalArgumentException; Set the metadata to use, e.g. to change the pixel size in microns. Parameters:; metadata ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:9431,Safety,avoid,avoid,9431,"eption. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(double, int, int, int, int, int, int); readRegion(double, int, int, int, int); readBufferedImage(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the t",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:12337,Safety,avoid,avoid,12337,"etServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name); Get the image for a given associated image name. Parameters:; name - ; Returns:; See Also:. getAssociatedImageList(). isEmptyRegion; boolean isEmptyRegion(RegionRequest request); Test whether a region is empty, i.e. it contains nothing to be painted (e.g. the server paints objects; but there are no objects present in the region) and readBufferedImage(RegionRequest region) would return null.; ; This makes it possible to avoid a (potentially more expensive) request to readRegion(RegionRequest),; or to add it to a request queue, if we know there will be nothing to show for it.; ; Note: if this method returns true, it is safe to assume readBufferedImage would return null.; However, even if the method returns false it is possible that the region is still empty -; the purpose of this method is to assist performance, and it should return quickly.; Therefore if the calculations needed to identify if the region is empty are too onerous, it may conservatively return false. Parameters:; request - ; Returns:. getPixelType; PixelType getPixelType(); The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Returns:. getChannel; ImageChannel getChannel(int channel); Request information for one channel (0-based index). Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getMetadata; ImageServerMetadata getMetadata(); Get essential metadata associated with the ImageServer as a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:12539,Safety,safe,safe,12539,"ciatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name); Get the image for a given associated image name. Parameters:; name - ; Returns:; See Also:. getAssociatedImageList(). isEmptyRegion; boolean isEmptyRegion(RegionRequest request); Test whether a region is empty, i.e. it contains nothing to be painted (e.g. the server paints objects; but there are no objects present in the region) and readBufferedImage(RegionRequest region) would return null.; ; This makes it possible to avoid a (potentially more expensive) request to readRegion(RegionRequest),; or to add it to a request queue, if we know there will be nothing to show for it.; ; Note: if this method returns true, it is safe to assume readBufferedImage would return null.; However, even if the method returns false it is possible that the region is still empty -; the purpose of this method is to assist performance, and it should return quickly.; Therefore if the calculations needed to identify if the region is empty are too onerous, it may conservatively return false. Parameters:; request - ; Returns:. getPixelType; PixelType getPixelType(); The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Returns:. getChannel; ImageChannel getChannel(int channel); Request information for one channel (0-based index). Parameters:; channel - ; Returns:; See Also:. ImageServerMetadata.getChannels(). getMetadata; ImageServerMetadata getMetadata(); Get essential metadata associated with the ImageServer as a distinct object. This may be edited by the user. Returns:; See Also:. getOriginalMetadata(). setMetadata; void setMetadata(ImageServerMetada",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:5587,Usability,simpl,simplest,5587,",; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int ge",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:5879,Usability,simpl,simple,5879,"ageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:11703,Usability,simpl,simply,11703," image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). getServerType; String getServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name); Get the image for a given associated image name. Parameters:; name - ; Returns:; See Also:. getAssociatedImageList(). isEmptyRegion; boolean isEmptyRegion(RegionRequest request); Test whether a region is empty, i.e. it contains nothing to be painted (e.g. the server paints objects; but there are no objects present in the region) and readBufferedImage(RegionRequest region) would return null.; ; This makes it possible to avoid a (potentially more expensive) request to readRegion(RegionRequest),; or to add it to a request queue, if we know there will be nothing to show for it.; ; Note: if this method returns true, it is safe to assume readBufferedImage would return null.; However, even if the method returns false it is possible that the region is still empty -; the purpose of this method is to assist performance, and it",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:15509,Usability,simpl,simpler,15509," in microns. Parameters:; metadata - ; Throws:; IllegalArgumentException - if the metadata is incompatible (e.g. different image path, different bit-depth). getOriginalMetadata; ImageServerMetadata getOriginalMetadata(); Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. getMetadata(). getDefaultThumbnail; T getDefaultThumbnail(int z,; int t); throws IOException; Get the default thumbnail for a specified z-slice and timepoint.; ; This should be the lowest resolution image that is available in the case of the multiresolution ; image, or else the full image. For large datasets, it may be used to determine basic statistics or ; histograms without requiring every pixel to be visited in the full resolution image. Parameters:; z - ; t - ; Returns:; Throws:; IOException. getTileRequestManager; TileRequestManager getTileRequestManager(); Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer.; ; This is useful because managing arbitrary RegionRequests can result in inefficiencies if a request ; straddles multiple tiles unnecessarily. Also, it can be used to help ensure consistency whenever ; requesting regions at different resolutions, where rounding errors might otherwise occur.; ; Note that the TileRequestManager is not guaranteed to remain the same for the lifecycle of the server. ; For example, if the image metadata is changed then a new manager may be constructed. Returns:. getImageClass; Class<T> getImageClass(); Get the class of the image representation returned by this ImageServer. Returns:. getBuilder; default ImageServerBuilder.ServerBuilder<T> getBuilder(); Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1457,Deployability,update,updateURIs,1457,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:702,Integrability,interface,interface,702,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1378,Integrability,interface,interface,1378,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1727,Integrability,interface,interface,1727,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1830,Integrability,interface,interface,1830,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:811,Modifiability,extend,extends,811,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1224,Modifiability,inherit,inherited,1224,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1363,Modifiability,inherit,inherited,1363,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1298,Security,hash,hashCode,1298,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:2071,Deployability,update,updateURIs,2071,"Instance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:2095,Deployability,update,updateMap,2095,"Instance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:3842,Deployability,update,updateURIs,3842,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:3859,Deployability,update,updateURIs,3859,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:3914,Deployability,update,updateURIs,3914,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:3938,Deployability,update,updateMap,3938,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:4216,Deployability,update,updateMap,4216,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:713,Integrability,interface,interface,713,". ImageServerBuilder.DefaultImageServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.DefaultImageServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>; qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.DefaultImageServerBuilder<T>; extends ImageServerBuilder.AbstractServerBuilder<T>; Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashC",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:3641,Integrability,interface,interface,3641,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:3974,Integrability,interface,interface,3974,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:817,Modifiability,extend,extends,817,". ImageServerBuilder.DefaultImageServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.DefaultImageServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>; qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.DefaultImageServerBuilder<T>; extends ImageServerBuilder.AbstractServerBuilder<T>; Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashC",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:1270,Modifiability,extend,extends,1270,"; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.DefaultImageServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>; qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.DefaultImageServerBuilder<T>; extends ImageServerBuilder.AbstractServerBuilder<T>; Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherite",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:1533,Modifiability,extend,extends,1533,"ers.ImageServerBuilder.DefaultImageServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.DefaultImageServerBuilder<T>; extends ImageServerBuilder.AbstractServerBuilder<T>; Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metada",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:2157,Modifiability,inherit,inherited,2157,"geServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:2274,Modifiability,inherit,inherited,2274,"eServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:2487,Modifiability,extend,extends,2487,"teInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:2939,Modifiability,extend,extends,2939," list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); D",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:1996,Security,hash,hashCode,1996,"geServerBuilder. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:4369,Security,hash,hashCode,4369,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:4390,Security,hash,hashCode,4390,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:4414,Security,hash,hashCode,4414,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html:559,Integrability,interface,interface,559,". ImageServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; BioFormatsServerBuilder, ImageJServerBuilder, JsonImageServerBuilder, OpenslideServerBuilder. public interface ImageServerBuilder<T>; Helper class for creating ImageServers from a given URI and optional argument list. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static class ; ImageServerBuilder.AbstractServerBuilder<T>. Abstract ServerBuilder implementation that handles metadata. static class ; ImageServerBuilder.DefaultImageServerBuilder<T>. Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. static interface ; ImageServerBuilder.ServerBuilder<T>. Interface that defines a class encapsulating all that is required to build an ImageServer. static class ; ImageServerBuilder.UriImageSupport<T>. Helper class to summarize which ImageServers can be build by a particular ImageServerBuilder ; for a given URI, and a level of confidence. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; ImageServer<T>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<T>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<T>; getImageType(). Returns the base class for the images supported by",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html:1141,Integrability,interface,interface,1141,"ex; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; BioFormatsServerBuilder, ImageJServerBuilder, JsonImageServerBuilder, OpenslideServerBuilder. public interface ImageServerBuilder<T>; Helper class for creating ImageServers from a given URI and optional argument list. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static class ; ImageServerBuilder.AbstractServerBuilder<T>. Abstract ServerBuilder implementation that handles metadata. static class ; ImageServerBuilder.DefaultImageServerBuilder<T>. Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. static interface ; ImageServerBuilder.ServerBuilder<T>. Interface that defines a class encapsulating all that is required to build an ImageServer. static class ; ImageServerBuilder.UriImageSupport<T>. Helper class to summarize which ImageServers can be build by a particular ImageServerBuilder ; for a given URI, and a level of confidence. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; ImageServer<T>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<T>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<T>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. default boolean; matchClassName(String... classNames",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html:3434,Usability,simpl,simple,3434,"pport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<T>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. default boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Method Details. checkImageSupport; ImageServerBuilder.UriImageSupport<T> checkImageSupport(URI uri,; String... args); throws IOException; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. buildServer; ImageServer<T> buildServer(URI uri,; String... args); throws Exception; Attempt to create ImageServer<T> from the specified path. Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; String getName(); Get a human-readable name for the kind of ImageServer this builds. Returns:. getDescription; String getDescription(); Get a short, human-readable description for display in a GUI. Returns:. getImageType; Class<T> getImageType(); Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Returns:. matchClassName; default boolean matchClassName(String... classNames); Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html:3515,Usability,intuit,intuitive,3515,"pport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<T>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. default boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Method Details. checkImageSupport; ImageServerBuilder.UriImageSupport<T> checkImageSupport(URI uri,; String... args); throws IOException; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. buildServer; ImageServer<T> buildServer(URI uri,; String... args); throws Exception; Attempt to create ImageServer<T> from the specified path. Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; String getName(); Get a human-readable name for the kind of ImageServer this builds. Returns:. getDescription; String getDescription(); Get a short, human-readable description for display in a GUI. Returns:. getImageType; Class<T> getImageType(); Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Returns:. matchClassName; default boolean matchClassName(String... classNames); Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1207,Deployability,update,updateURIs,1207,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1231,Deployability,update,updateMap,1231,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1573,Deployability,update,updateURIs,1573,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1590,Deployability,update,updateURIs,1590,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1638,Deployability,update,updateURIs,1638,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1662,Deployability,update,updateMap,1662,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1871,Deployability,update,updateMap,1871,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:584,Integrability,interface,interface,584,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:633,Integrability,interface,interface,633,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:546,Integrability,interface,interface,546,". ImageServerBuilder.UriImageSupport (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.UriImageSupport<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.UriImageSupport<T>. Type Parameters:; T - . Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.UriImageSupport<T>; extends Object; Helper class to summarize which ImageServers can be build by a particular ImageServerBuilder ; for a given URI, and a level of confidence.; This may be used to select which ImageServerBuilder is used to open the image(s). Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values an",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:640,Modifiability,extend,extends,640,". ImageServerBuilder.UriImageSupport (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.UriImageSupport<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.UriImageSupport<T>. Type Parameters:; T - . Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.UriImageSupport<T>; extends Object; Helper class to summarize which ImageServers can be build by a particular ImageServerBuilder ; for a given URI, and a level of confidence.; This may be used to select which ImageServerBuilder is used to open the image(s). Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values an",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:1066,Modifiability,extend,extends,1066,"   ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.UriImageSupport<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.UriImageSupport<T>. Type Parameters:; T - . Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.UriImageSupport<T>; extends Object; Helper class to summarize which ImageServers can be build by a particular ImageServerBuilder ; for a given URI, and a level of confidence.; This may be used to select which ImageServerBuilder is used to open the image(s). Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; to",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:1377,Modifiability,extend,extends,1377,"erBuilder.UriImageSupport<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.UriImageSupport<T>. Type Parameters:; T - . Enclosing interface:; ImageServerBuilder<T>. public static class ImageServerBuilder.UriImageSupport<T>; extends Object; Helper class to summarize which ImageServers can be build by a particular ImageServerBuilder ; for a given URI, and a level of confidence.; This may be used to select which ImageServerBuilder is used to open the image(s). Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:1750,Modifiability,extend,extends,1750," a level of confidence.; This may be used to select which ImageServerBuilder is used to open the image(s). Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:2115,Modifiability,inherit,inherited,2115,"ortLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; suppo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:2422,Modifiability,extend,extends,2422,"ServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read bas",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:2851,Modifiability,extend,extends,2851,"vel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read based on the specified URI. ; For a 'simple' file that contains a single image, a singleton list should be returned. Returns:. getSupportLevel; public float getSupportLevel(); Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance.; ; The support level should be a value between ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:3191,Modifiability,extend,extends,3191,"ait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read based on the specified URI. ; For a 'simple' file that contains a single image, a singleton list should be returned. Returns:. getSupportLevel; public float getSupportLevel(); Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance.; ; The support level should be a value between 0 and 4. The following is a guide to its interpretation:; ; 4 - 'ideal' support, e.g. the image was written by the library behind the ImageServer; 3 - good support; 2 - unknown support, i.e. worth a try; 1 - partial/poor support, i.e. there are known limitations and all higher-scoring possibilities should be tried first; 0 - no support. The use of f",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:2071,Performance,perform,performance,2071,"escription; static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageSe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:3814,Performance,perform,performance,3814,"ort for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read based on the specified URI. ; For a 'simple' file that contains a single image, a singleton list should be returned. Returns:. getSupportLevel; public float getSupportLevel(); Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance.; ; The support level should be a value between 0 and 4. The following is a guide to its interpretation:; ; 4 - 'ideal' support, e.g. the image was written by the library behind the ImageServer; 3 - good support; 2 - unknown support, i.e. worth a try; 1 - partial/poor support, i.e. there are known limitations and all higher-scoring possibilities should be tried first; 0 - no support. The use of floating point enables subclasses to make more subtle evaluations of performance, e.g. if an ImageServer; is particularly strong for RGB images, but falls short of guaranteeing ideal performance.; ; In practice, this is used to rank potential builders so that the 'best' ones; are tried first for new image paths, and those with 0 support may be ignored. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:4293,Performance,perform,performance,4293,"ort for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read based on the specified URI. ; For a 'simple' file that contains a single image, a singleton list should be returned. Returns:. getSupportLevel; public float getSupportLevel(); Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance.; ; The support level should be a value between 0 and 4. The following is a guide to its interpretation:; ; 4 - 'ideal' support, e.g. the image was written by the library behind the ImageServer; 3 - good support; 2 - unknown support, i.e. worth a try; 1 - partial/poor support, i.e. there are known limitations and all higher-scoring possibilities should be tried first; 0 - no support. The use of floating point enables subclasses to make more subtle evaluations of performance, e.g. if an ImageServer; is particularly strong for RGB images, but falls short of guaranteeing ideal performance.; ; In practice, this is used to rank potential builders so that the 'best' ones; are tried first for new image paths, and those with 0 support may be ignored. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:4407,Performance,perform,performance,4407,"ort for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read based on the specified URI. ; For a 'simple' file that contains a single image, a singleton list should be returned. Returns:. getSupportLevel; public float getSupportLevel(); Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance.; ; The support level should be a value between 0 and 4. The following is a guide to its interpretation:; ; 4 - 'ideal' support, e.g. the image was written by the library behind the ImageServer; 3 - good support; 2 - unknown support, i.e. worth a try; 1 - partial/poor support, i.e. there are known limitations and all higher-scoring possibilities should be tried first; 0 - no support. The use of floating point enables subclasses to make more subtle evaluations of performance, e.g. if an ImageServer; is particularly strong for RGB images, but falls short of guaranteeing ideal performance.; ; In practice, this is used to rank potential builders so that the 'best' ones; are tried first for new image paths, and those with 0 support may be ignored. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:2189,Security,hash,hashCode,2189,"). Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. static <T> ImageServerBuilder.UriImageSupport<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder). Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. List<ImageServerBuilder.ServerBuilder<T>>; getBuilders(). Get a list of ServerBuilders, one for each image that can be read based on the specified URI. Class<? extends ImageServerBuilder<T>>; getProviderClass(). Get the class of the associated ImageServerBuilder. float; getSupportLevel(). Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; Collection<ImageServerBuilder.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:3484,Usability,simpl,simple,3484,"r.ServerBuilder<T>> builders); Create a ImageServerBuilder.UriImageSupport for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read based on the specified URI. ; For a 'simple' file that contains a single image, a singleton list should be returned. Returns:. getSupportLevel; public float getSupportLevel(); Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance.; ; The support level should be a value between 0 and 4. The following is a guide to its interpretation:; ; 4 - 'ideal' support, e.g. the image was written by the library behind the ImageServer; 3 - good support; 2 - unknown support, i.e. worth a try; 1 - partial/poor support, i.e. there are known limitations and all higher-scoring possibilities should be tried first; 0 - no support. The use of floating point enables subclasses to make more subtle evaluations of performance, e.g. if an ImageServer; is particularly strong for RGB images, but falls short of guaranteeing ideal performance.; ; In practice, this is used to rank potential builders so that the 'best' ones; are tried first fo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html:3902,Usability,guid,guide,3902,"ort for (possibly multiple) images that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builders - ; Returns:. createInstance; public static <T>; ImageServerBuilder.UriImageSupport<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; float supportLevel,; ImageServerBuilder.ServerBuilder<T> builder); Create a ImageServerBuilder.UriImageSupport for a single image that can be read from a single URI. Type Parameters:; T - ; Parameters:; providerClass - ; supportLevel - ; builder - ; Returns:. getProviderClass; public Class<? extends ImageServerBuilder<T>> getProviderClass(); Get the class of the associated ImageServerBuilder. Returns:. getBuilders; public List<ImageServerBuilder.ServerBuilder<T>> getBuilders(); Get a list of ServerBuilders, one for each image that can be read based on the specified URI. ; For a 'simple' file that contains a single image, a singleton list should be returned. Returns:. getSupportLevel; public float getSupportLevel(); Estimated 'support level' for a given file path, where support level is a summary of the likelihood that; pixel values and metadata will be returned correctly and in a way that achieves good performance.; ; The support level should be a value between 0 and 4. The following is a guide to its interpretation:; ; 4 - 'ideal' support, e.g. the image was written by the library behind the ImageServer; 3 - good support; 2 - unknown support, i.e. worth a try; 1 - partial/poor support, i.e. there are known limitations and all higher-scoring possibilities should be tried first; 0 - no support. The use of floating point enables subclasses to make more subtle evaluations of performance, e.g. if an ImageServer; is particularly strong for RGB images, but falls short of guaranteeing ideal performance.; ; In practice, this is used to rank potential builders so that the 'best' ones; are tried first for new image paths, and those with 0 support may be ignored. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.UriImageSupport.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:2005,Availability,down,downsamples,2005,"w ImageServerMetadata object that takes an existing metadata object as a starting point, ; but allows individual properties to be overridden. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; build(). Build an ImageServerMetadata. ImageServerMetadata.Builder; channels(Collection<ImageChannel> channels). Specify the image channels. ImageServerMetadata.Builder; channelType(ImageServerMetadata.ChannelType type). Specify the interpretation of channels. ImageServerMetadata.Builder; classificationLabels(Map<Integer,PathClass> classificationLabels). Specify the interpretation of classification labels. ImageServerMetadata.Builder; height(int height). Specify the full-resolution image height. ImageServerMetadata.Builder; levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels). Specify resolution levels, where the largest image should come first. ImageServerMetadata.Builder; levelsFromDownsamples(double... downsamples). Specify downsample values for pyramidal levels. ImageServerMetadata.Builder; magnification(double magnification). Specify a magnification value for the highest-resolution image. ImageServerMetadata.Builder; maxValue(Number val). Specify the maximum value supported by this image. ImageServerMetadata.Builder; minValue(Number val). Specify the minimum value supported by this image. ImageServerMetadata.Builder; name(String name). Specify the image name. ImageServerMetadata.Builder; pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel sizes, in microns. ImageServerMetadata.Builder; pixelType(PixelType pixelType). Specify the bit-depth of the image. ImageServerMetadata.Builder; preferredTileSize(int tileWidth,; int tileHeight). Specify the preferred tile height and width. ImageServerMetadata.Builder; rgb(boolean isRGB). Specify that the image stores pixels in (A)RGB form. ImageServerMetadata.Builder; sizeT(int sizeT). Specify the number of time po",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:2027,Availability,down,downsample,2027,"at takes an existing metadata object as a starting point, ; but allows individual properties to be overridden. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; build(). Build an ImageServerMetadata. ImageServerMetadata.Builder; channels(Collection<ImageChannel> channels). Specify the image channels. ImageServerMetadata.Builder; channelType(ImageServerMetadata.ChannelType type). Specify the interpretation of channels. ImageServerMetadata.Builder; classificationLabels(Map<Integer,PathClass> classificationLabels). Specify the interpretation of classification labels. ImageServerMetadata.Builder; height(int height). Specify the full-resolution image height. ImageServerMetadata.Builder; levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels). Specify resolution levels, where the largest image should come first. ImageServerMetadata.Builder; levelsFromDownsamples(double... downsamples). Specify downsample values for pyramidal levels. ImageServerMetadata.Builder; magnification(double magnification). Specify a magnification value for the highest-resolution image. ImageServerMetadata.Builder; maxValue(Number val). Specify the maximum value supported by this image. ImageServerMetadata.Builder; minValue(Number val). Specify the minimum value supported by this image. ImageServerMetadata.Builder; name(String name). Specify the image name. ImageServerMetadata.Builder; pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel sizes, in microns. ImageServerMetadata.Builder; pixelType(PixelType pixelType). Specify the bit-depth of the image. ImageServerMetadata.Builder; preferredTileSize(int tileWidth,; int tileHeight). Specify the preferred tile height and width. ImageServerMetadata.Builder; rgb(boolean isRGB). Specify that the image stores pixels in (A)RGB form. ImageServerMetadata.Builder; sizeT(int sizeT). Specify the number of time points. ImageServerMetadata.Build",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:6239,Availability,down,downsamples,6239," Specify the interpretation of channels. If this is ImageServerMetadata.ChannelType.CLASSIFICATION it will also ; set the channels to be the default for this kind of server, i.e. a single channel with ImageServerMetadata.DEFAULT_CLASSIFICATION_LABELS_CHANNEL. Parameters:; type - ; Returns:. classificationLabels; public ImageServerMetadata.Builder classificationLabels(Map<Integer,PathClass> classificationLabels); Specify the interpretation of classification labels. Only relevant for ImageServerMetadata.ChannelType.CLASSIFICATION. Parameters:; classificationLabels - ; Returns:. rgb; public ImageServerMetadata.Builder rgb(boolean isRGB); Specify that the image stores pixels in (A)RGB form. Parameters:; isRGB - ; Returns:. pixelType; public ImageServerMetadata.Builder pixelType(PixelType pixelType); Specify the bit-depth of the image. Parameters:; pixelType - ; Returns:. levelsFromDownsamples; public ImageServerMetadata.Builder levelsFromDownsamples(double... downsamples); Specify downsample values for pyramidal levels.; The appropriate image sizes will be computed based upon these. Parameters:; downsamples - ; Returns:; See Also:. levels(Collection). levels; public ImageServerMetadata.Builder levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels); Specify resolution levels, where the largest image should come first.; ; Normally level[0].width == width && level[0].height == height, but this is not ; strictly required; for example, it is permissible for the server to supply only resolutions lower than ; the full image if these ought to be upsampled elsewhere.; ; In other words, the width and height encode the size of the image as it should be ; interpreted, while the levels refer to the size of the rasters actually available here. Parameters:; levels - ; Returns:. sizeZ; public ImageServerMetadata.Builder sizeZ(int sizeZ); Specify the number of z-slices. Parameters:; sizeZ - ; Returns:. sizeT; public ImageServerMetadata.Builder sizeT(int sizeT); Specify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:6261,Availability,down,downsample,6261," Specify the interpretation of channels. If this is ImageServerMetadata.ChannelType.CLASSIFICATION it will also ; set the channels to be the default for this kind of server, i.e. a single channel with ImageServerMetadata.DEFAULT_CLASSIFICATION_LABELS_CHANNEL. Parameters:; type - ; Returns:. classificationLabels; public ImageServerMetadata.Builder classificationLabels(Map<Integer,PathClass> classificationLabels); Specify the interpretation of classification labels. Only relevant for ImageServerMetadata.ChannelType.CLASSIFICATION. Parameters:; classificationLabels - ; Returns:. rgb; public ImageServerMetadata.Builder rgb(boolean isRGB); Specify that the image stores pixels in (A)RGB form. Parameters:; isRGB - ; Returns:. pixelType; public ImageServerMetadata.Builder pixelType(PixelType pixelType); Specify the bit-depth of the image. Parameters:; pixelType - ; Returns:. levelsFromDownsamples; public ImageServerMetadata.Builder levelsFromDownsamples(double... downsamples); Specify downsample values for pyramidal levels.; The appropriate image sizes will be computed based upon these. Parameters:; downsamples - ; Returns:; See Also:. levels(Collection). levels; public ImageServerMetadata.Builder levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels); Specify resolution levels, where the largest image should come first.; ; Normally level[0].width == width && level[0].height == height, but this is not ; strictly required; for example, it is permissible for the server to supply only resolutions lower than ; the full image if these ought to be upsampled elsewhere.; ; In other words, the width and height encode the size of the image as it should be ; interpreted, while the levels refer to the size of the rasters actually available here. Parameters:; levels - ; Returns:. sizeZ; public ImageServerMetadata.Builder sizeZ(int sizeZ); Specify the number of z-slices. Parameters:; sizeZ - ; Returns:. sizeT; public ImageServerMetadata.Builder sizeT(int sizeT); Specify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:6378,Availability,down,downsamples,6378,"e channels to be the default for this kind of server, i.e. a single channel with ImageServerMetadata.DEFAULT_CLASSIFICATION_LABELS_CHANNEL. Parameters:; type - ; Returns:. classificationLabels; public ImageServerMetadata.Builder classificationLabels(Map<Integer,PathClass> classificationLabels); Specify the interpretation of classification labels. Only relevant for ImageServerMetadata.ChannelType.CLASSIFICATION. Parameters:; classificationLabels - ; Returns:. rgb; public ImageServerMetadata.Builder rgb(boolean isRGB); Specify that the image stores pixels in (A)RGB form. Parameters:; isRGB - ; Returns:. pixelType; public ImageServerMetadata.Builder pixelType(PixelType pixelType); Specify the bit-depth of the image. Parameters:; pixelType - ; Returns:. levelsFromDownsamples; public ImageServerMetadata.Builder levelsFromDownsamples(double... downsamples); Specify downsample values for pyramidal levels.; The appropriate image sizes will be computed based upon these. Parameters:; downsamples - ; Returns:; See Also:. levels(Collection). levels; public ImageServerMetadata.Builder levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels); Specify resolution levels, where the largest image should come first.; ; Normally level[0].width == width && level[0].height == height, but this is not ; strictly required; for example, it is permissible for the server to supply only resolutions lower than ; the full image if these ought to be upsampled elsewhere.; ; In other words, the width and height encode the size of the image as it should be ; interpreted, while the levels refer to the size of the rasters actually available here. Parameters:; levels - ; Returns:. sizeZ; public ImageServerMetadata.Builder sizeZ(int sizeZ); Specify the number of z-slices. Parameters:; sizeZ - ; Returns:. sizeT; public ImageServerMetadata.Builder sizeT(int sizeT); Specify the number of time points. Parameters:; sizeT - ; Returns:. pixelSizeMicrons; public ImageServerMetadata.Builder pixelSizeMi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:7022,Availability,avail,available,7022,"in (A)RGB form. Parameters:; isRGB - ; Returns:. pixelType; public ImageServerMetadata.Builder pixelType(PixelType pixelType); Specify the bit-depth of the image. Parameters:; pixelType - ; Returns:. levelsFromDownsamples; public ImageServerMetadata.Builder levelsFromDownsamples(double... downsamples); Specify downsample values for pyramidal levels.; The appropriate image sizes will be computed based upon these. Parameters:; downsamples - ; Returns:; See Also:. levels(Collection). levels; public ImageServerMetadata.Builder levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels); Specify resolution levels, where the largest image should come first.; ; Normally level[0].width == width && level[0].height == height, but this is not ; strictly required; for example, it is permissible for the server to supply only resolutions lower than ; the full image if these ought to be upsampled elsewhere.; ; In other words, the width and height encode the size of the image as it should be ; interpreted, while the levels refer to the size of the rasters actually available here. Parameters:; levels - ; Returns:. sizeZ; public ImageServerMetadata.Builder sizeZ(int sizeZ); Specify the number of z-slices. Parameters:; sizeZ - ; Returns:. sizeT; public ImageServerMetadata.Builder sizeT(int sizeT); Specify the number of time points. Parameters:; sizeT - ; Returns:. pixelSizeMicrons; public ImageServerMetadata.Builder pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons); Specify the pixel sizes, in microns. Parameters:; pixelWidthMicrons - ; pixelHeightMicrons - ; Returns:. zSpacingMicrons; public ImageServerMetadata.Builder zSpacingMicrons(Number zSpacingMicrons); Specify the spacing between z-slices, in microns. Parameters:; zSpacingMicrons - ; Returns:. timepoints; public ImageServerMetadata.Builder timepoints(TimeUnit timeUnit,; double... timepoints); Specify the time unit and individual time points. Parameters:; timeUnit - ; timepoints - time points, define",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:573,Modifiability,extend,extends,573,". ImageServerMetadata.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.Builder. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.Builder. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.Builder; extends Object; Builder to create a new ImageServerMetadata object. Constructor Summary; Constructors. Constructor; Description; Builder(). Minimal builder for a new ImageServerMetadata; further properties must be set. Builder(Class<? extends ImageServer<?>> serverClass,; String path,; int width,; int height). Builder for a new ImageServerMetadata; further properties must be set. Builder(ImageServerMetadata metadata). Builder for a new ImageServerMetadata object that takes an existing metadata object as a starting point, ; but allows individual properties to be overridden. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; build(). Build an ImageServerMetadata. ImageServerMetadata.Builder; channels(Collection<ImageChannel> channels). Specify the image channels. ImageServerMetadata.Builder; channelType(ImageServerMetadata.ChannelType type). Specify the interpretation of channels. ImageServerMetadata.Builder; classificationLabels(Map<Integer,PathClass> classificationLabels). Specify the interpretation of classification labels. ImageServerMetadata.Builder; height(int height). Specify the full-resolution image height. ImageServerMetadata.Builder; levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels). Specify resolution levels, where the largest image should come first. ImageServerMetadata.Builder; levelsFromDownsamples(double",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:808,Modifiability,extend,extends,808,". ImageServerMetadata.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.Builder. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.Builder. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.Builder; extends Object; Builder to create a new ImageServerMetadata object. Constructor Summary; Constructors. Constructor; Description; Builder(). Minimal builder for a new ImageServerMetadata; further properties must be set. Builder(Class<? extends ImageServer<?>> serverClass,; String path,; int width,; int height). Builder for a new ImageServerMetadata; further properties must be set. Builder(ImageServerMetadata metadata). Builder for a new ImageServerMetadata object that takes an existing metadata object as a starting point, ; but allows individual properties to be overridden. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; build(). Build an ImageServerMetadata. ImageServerMetadata.Builder; channels(Collection<ImageChannel> channels). Specify the image channels. ImageServerMetadata.Builder; channelType(ImageServerMetadata.ChannelType type). Specify the interpretation of channels. ImageServerMetadata.Builder; classificationLabels(Map<Integer,PathClass> classificationLabels). Specify the interpretation of classification labels. ImageServerMetadata.Builder; height(int height). Specify the full-resolution image height. ImageServerMetadata.Builder; levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels). Specify resolution levels, where the largest image should come first. ImageServerMetadata.Builder; levelsFromDownsamples(double",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:3445,Modifiability,inherit,inherited,3445,"ify the image name. ImageServerMetadata.Builder; pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel sizes, in microns. ImageServerMetadata.Builder; pixelType(PixelType pixelType). Specify the bit-depth of the image. ImageServerMetadata.Builder; preferredTileSize(int tileWidth,; int tileHeight). Specify the preferred tile height and width. ImageServerMetadata.Builder; rgb(boolean isRGB). Specify that the image stores pixels in (A)RGB form. ImageServerMetadata.Builder; sizeT(int sizeT). Specify the number of time points. ImageServerMetadata.Builder; sizeZ(int sizeZ). Specify the number of z-slices. ImageServerMetadata.Builder; timepoints(TimeUnit timeUnit,; double... timepoints). Specify the time unit and individual time points. ImageServerMetadata.Builder; width(int width). Specify the full-resolution image width. ImageServerMetadata.Builder; zSpacingMicrons(Number zSpacingMicrons). Specify the spacing between z-slices, in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageServerMetadata metadata); Builder for a new ImageServerMetadata object that takes an existing metadata object as a starting point, ; but allows individual properties to be overridden.; ; The existing metadata will be duplicated, therefore later changes in one metadata object will not be ; reflected in the other. Parameters:; metadata - . Builder; public Builder(); Minimal builder for a new ImageServerMetadata; further properties must be set. Builder; public Builder(Class<? extends ImageServer<?>> serverClass,; String path,; int width,; int height); Builder for a new ImageServerMetadata; further properties must be set. Parameters:; serverClass - ; path - ; width - ; height - . Method Details. width; public ImageServerMetadata.Builder width(int width); Specify the full-resolution image width. Parameters:; width - ; Ret",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:4104,Modifiability,extend,extends,4104,"e... timepoints). Specify the time unit and individual time points. ImageServerMetadata.Builder; width(int width). Specify the full-resolution image width. ImageServerMetadata.Builder; zSpacingMicrons(Number zSpacingMicrons). Specify the spacing between z-slices, in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageServerMetadata metadata); Builder for a new ImageServerMetadata object that takes an existing metadata object as a starting point, ; but allows individual properties to be overridden.; ; The existing metadata will be duplicated, therefore later changes in one metadata object will not be ; reflected in the other. Parameters:; metadata - . Builder; public Builder(); Minimal builder for a new ImageServerMetadata; further properties must be set. Builder; public Builder(Class<? extends ImageServer<?>> serverClass,; String path,; int width,; int height); Builder for a new ImageServerMetadata; further properties must be set. Parameters:; serverClass - ; path - ; width - ; height - . Method Details. width; public ImageServerMetadata.Builder width(int width); Specify the full-resolution image width. Parameters:; width - ; Returns:. height; public ImageServerMetadata.Builder height(int height); Specify the full-resolution image height. Parameters:; height - ; Returns:. minValue; public ImageServerMetadata.Builder minValue(Number val); Specify the minimum value supported by this image.; If not provided, this will be taken from the PixelType. Parameters:; val - ; Returns:; See Also:. pixelType(PixelType). maxValue; public ImageServerMetadata.Builder maxValue(Number val); Specify the maximum value supported by this image.; If not provided, this will be taken from the PixelType.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Parameters:; val - ; Returns:; See Also:. pixelType(Pi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:3519,Security,hash,hashCode,3519," pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel sizes, in microns. ImageServerMetadata.Builder; pixelType(PixelType pixelType). Specify the bit-depth of the image. ImageServerMetadata.Builder; preferredTileSize(int tileWidth,; int tileHeight). Specify the preferred tile height and width. ImageServerMetadata.Builder; rgb(boolean isRGB). Specify that the image stores pixels in (A)RGB form. ImageServerMetadata.Builder; sizeT(int sizeT). Specify the number of time points. ImageServerMetadata.Builder; sizeZ(int sizeZ). Specify the number of z-slices. ImageServerMetadata.Builder; timepoints(TimeUnit timeUnit,; double... timepoints). Specify the time unit and individual time points. ImageServerMetadata.Builder; width(int width). Specify the full-resolution image width. ImageServerMetadata.Builder; zSpacingMicrons(Number zSpacingMicrons). Specify the spacing between z-slices, in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageServerMetadata metadata); Builder for a new ImageServerMetadata object that takes an existing metadata object as a starting point, ; but allows individual properties to be overridden.; ; The existing metadata will be duplicated, therefore later changes in one metadata object will not be ; reflected in the other. Parameters:; metadata - . Builder; public Builder(); Minimal builder for a new ImageServerMetadata; further properties must be set. Builder; public Builder(Class<? extends ImageServer<?>> serverClass,; String path,; int width,; int height); Builder for a new ImageServerMetadata; further properties must be set. Parameters:; serverClass - ; path - ; width - ; height - . Method Details. width; public ImageServerMetadata.Builder width(int width); Specify the full-resolution image width. Parameters:; width - ; Returns:. height; public ImageServerMetadata.Builder height(int height); Sp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html:1052,Integrability,interface,interfaces,1052,"s disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class ImageServerMetadata.ChannelType. java.lang.Object; java.lang.Enum<ImageServerMetadata.ChannelType>; qupath.lib.images.servers.ImageServerMetadata.ChannelType. All Implemented Interfaces:; Serializable, Comparable<ImageServerMetadata.ChannelType>, Constable. Enclosing class:; ImageServerMetadata. public static enum ImageServerMetadata.ChannelType; extends Enum<ImageServerMetadata.ChannelType>; Enum representing possible channel (band) types for an image.; The purpose of this is to support images where channels have different interpretations, ; such as probabilities or classifications. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; CLASSIFICATION. Each channel represents a classification, such as in a labelled image. DEFAULT. Default channel interpretation. DENSITY. Each channel represents a density value, such as in a density map (e.g. FEATURE. Each channel represents a feature for a pixel classifier. MULTICLASS_PROBABILITY. Each channel represents a probability value, where each pixel is potentially part of multiple classes. PROBABILITY. Each channel represents a probability value, where it is assumed that there is only one true class per pixel. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ImageServerMetadata.ChannelType; valueOf(String name). Returns the enum constant of this class with the specified name. static ImageServerMetadata.ChannelType[]; values(). Returns an array co",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html:773,Modifiability,extend,extends,773,". ImageServerMetadata.ChannelType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class ImageServerMetadata.ChannelType. java.lang.Object; java.lang.Enum<ImageServerMetadata.ChannelType>; qupath.lib.images.servers.ImageServerMetadata.ChannelType. All Implemented Interfaces:; Serializable, Comparable<ImageServerMetadata.ChannelType>, Constable. Enclosing class:; ImageServerMetadata. public static enum ImageServerMetadata.ChannelType; extends Enum<ImageServerMetadata.ChannelType>; Enum representing possible channel (band) types for an image.; The purpose of this is to support images where channels have different interpretations, ; such as probabilities or classifications. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; CLASSIFICATION. Each channel represents a classification, such as in a labelled image. DEFAULT. Default channel interpretation. DENSITY. Each channel represents a density value, such as in a density map (e.g. FEATURE. Each channel represents a feature for a pixel classifier. MULTICLASS_PROBABILITY. Each channel represents a probability value, where each pixel is potentially part of multiple classes. PROBABILITY. Each channel represents a probability value, where it is assumed that there is only one true class per pixel. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ImageServerMetadata.ChannelType; valueOf(String name). Returns the enum constant of this class with the specified name. static Im",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html:1063,Modifiability,inherit,inherited,1063,"s disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class ImageServerMetadata.ChannelType. java.lang.Object; java.lang.Enum<ImageServerMetadata.ChannelType>; qupath.lib.images.servers.ImageServerMetadata.ChannelType. All Implemented Interfaces:; Serializable, Comparable<ImageServerMetadata.ChannelType>, Constable. Enclosing class:; ImageServerMetadata. public static enum ImageServerMetadata.ChannelType; extends Enum<ImageServerMetadata.ChannelType>; Enum representing possible channel (band) types for an image.; The purpose of this is to support images where channels have different interpretations, ; such as probabilities or classifications. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; CLASSIFICATION. Each channel represents a classification, such as in a labelled image. DEFAULT. Default channel interpretation. DENSITY. Each channel represents a density value, such as in a density map (e.g. FEATURE. Each channel represents a feature for a pixel classifier. MULTICLASS_PROBABILITY. Each channel represents a probability value, where each pixel is potentially part of multiple classes. PROBABILITY. Each channel represents a probability value, where it is assumed that there is only one true class per pixel. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ImageServerMetadata.ChannelType; valueOf(String name). Returns the enum constant of this class with the specified name. static ImageServerMetadata.ChannelType[]; values(). Returns an array co",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html:1116,Modifiability,extend,extends,1116,"verview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class ImageServerMetadata.ChannelType. java.lang.Object; java.lang.Enum<ImageServerMetadata.ChannelType>; qupath.lib.images.servers.ImageServerMetadata.ChannelType. All Implemented Interfaces:; Serializable, Comparable<ImageServerMetadata.ChannelType>, Constable. Enclosing class:; ImageServerMetadata. public static enum ImageServerMetadata.ChannelType; extends Enum<ImageServerMetadata.ChannelType>; Enum representing possible channel (band) types for an image.; The purpose of this is to support images where channels have different interpretations, ; such as probabilities or classifications. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; CLASSIFICATION. Each channel represents a classification, such as in a labelled image. DEFAULT. Default channel interpretation. DENSITY. Each channel represents a density value, such as in a density map (e.g. FEATURE. Each channel represents a feature for a pixel classifier. MULTICLASS_PROBABILITY. Each channel represents a probability value, where each pixel is potentially part of multiple classes. PROBABILITY. Each channel represents a probability value, where it is assumed that there is only one true class per pixel. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ImageServerMetadata.ChannelType; valueOf(String name). Returns the enum constant of this class with the specified name. static ImageServerMetadata.ChannelType[]; values(). Returns an array containing the constants of this enum class, in; the order",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html:2147,Modifiability,inherit,inherited,2147,"; Enum Constants. Enum Constant; Description; CLASSIFICATION. Each channel represents a classification, such as in a labelled image. DEFAULT. Default channel interpretation. DENSITY. Each channel represents a density value, such as in a density map (e.g. FEATURE. Each channel represents a feature for a pixel classifier. MULTICLASS_PROBABILITY. Each channel represents a probability value, where each pixel is potentially part of multiple classes. PROBABILITY. Each channel represents a probability value, where it is assumed that there is only one true class per pixel. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ImageServerMetadata.ChannelType; valueOf(String name). Returns the enum constant of this class with the specified name. static ImageServerMetadata.ChannelType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. DEFAULT; public static final ImageServerMetadata.ChannelType DEFAULT; Default channel interpretation. This is true for most 'normal' images. FEATURE; public static final ImageServerMetadata.ChannelType FEATURE; Each channel represents a feature for a pixel classifier. PROBABILITY; public static final ImageServerMetadata.ChannelType PROBABILITY; Each channel represents a probability value, where it is assumed that there is only one true class per pixel. MULTICLASS_PROBABILITY; public static final ImageServerMetadata.ChannelType MULTICLASS_PROBABILITY; Each channel represents a probability value, where each pixel is potentially part of multiple classes. CLASSIFICATION; public static final ImageServerMetadata.ChannelType CLASSIFICATION; Eac",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html:2300,Modifiability,inherit,inherited,2300,"nnel interpretation. DENSITY. Each channel represents a density value, such as in a density map (e.g. FEATURE. Each channel represents a feature for a pixel classifier. MULTICLASS_PROBABILITY. Each channel represents a probability value, where each pixel is potentially part of multiple classes. PROBABILITY. Each channel represents a probability value, where it is assumed that there is only one true class per pixel. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ImageServerMetadata.ChannelType; valueOf(String name). Returns the enum constant of this class with the specified name. static ImageServerMetadata.ChannelType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. DEFAULT; public static final ImageServerMetadata.ChannelType DEFAULT; Default channel interpretation. This is true for most 'normal' images. FEATURE; public static final ImageServerMetadata.ChannelType FEATURE; Each channel represents a feature for a pixel classifier. PROBABILITY; public static final ImageServerMetadata.ChannelType PROBABILITY; Each channel represents a probability value, where it is assumed that there is only one true class per pixel. MULTICLASS_PROBABILITY; public static final ImageServerMetadata.ChannelType MULTICLASS_PROBABILITY; Each channel represents a probability value, where each pixel is potentially part of multiple classes. CLASSIFICATION; public static final ImageServerMetadata.ChannelType CLASSIFICATION; Each channel represents a classification, such as in a labelled image. DENSITY; public static final ImageServerMetadata.ChannelType DENSITY; Each channel re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html:2258,Security,hash,hashCode,2258,"esents a classification, such as in a labelled image. DEFAULT. Default channel interpretation. DENSITY. Each channel represents a density value, such as in a density map (e.g. FEATURE. Each channel represents a feature for a pixel classifier. MULTICLASS_PROBABILITY. Each channel represents a probability value, where each pixel is potentially part of multiple classes. PROBABILITY. Each channel represents a probability value, where it is assumed that there is only one true class per pixel. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ImageServerMetadata.ChannelType; valueOf(String name). Returns the enum constant of this class with the specified name. static ImageServerMetadata.ChannelType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. DEFAULT; public static final ImageServerMetadata.ChannelType DEFAULT; Default channel interpretation. This is true for most 'normal' images. FEATURE; public static final ImageServerMetadata.ChannelType FEATURE; Each channel represents a feature for a pixel classifier. PROBABILITY; public static final ImageServerMetadata.ChannelType PROBABILITY; Each channel represents a probability value, where it is assumed that there is only one true class per pixel. MULTICLASS_PROBABILITY; public static final ImageServerMetadata.ChannelType MULTICLASS_PROBABILITY; Each channel represents a probability value, where each pixel is potentially part of multiple classes. CLASSIFICATION; public static final ImageServerMetadata.ChannelType CLASSIFICATION; Each channel represents a classification, such as in a labelled image. DENSITY; pu",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ChannelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:1598,Availability,avail,available,1598,"he metadata needs to be adjusted (e.g. to correct erroneous pixel sizes). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.Builder. Builder to create a new ImageServerMetadata object. static enum ; ImageServerMetadata.ChannelType. Enum representing possible channel (band) types for an image. static class ; ImageServerMetadata.ImageResolutionLevel. Width and height of each resolution in a multi-level image pyramid. Field Summary; Fields. Modifier and Type; Field; Description; static final ImageChannel; DEFAULT_CLASSIFICATION_LABELS_CHANNEL. Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; duplicate(). Duplicate this metatadata. boolean; equals(Object obj);  ; double; getAveragedPixelSize(). Get the averaged pixel size in microns, if available - or Double.NaN otherwise. ImageChannel; getChannel(int n). Get the specified channel. List<ImageChannel>; getChannels(). Get an unmodifiable list of all channels. ImageServerMetadata.ChannelType; getChannelType(). Get the channel type, which can be used to interpret the channels. Map<Integer,PathClass>; getClassificationLabels(). Get map between labels and classification names. double; getDownsampleForLevel(int level). Get the downsample factor for a specific resolution level. int; getHeight(). Get the full-resolution image height. ImageServerMetadata.ImageResolutionLevel; getLevel(int level). Get resolution information for a specified pyramidal level. List<ImageServerMetadata.ImageResolutionLevel>; getLevels(). Get an unmodifiable list containing the resolution levels. double; getMagnification(). Get the magnification value, or Double.NaN if this is unavailable. Number; getMaxValue(). Get the minimum value supported by this image. Number; getMinValue(). Get the m",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:2040,Availability,down,downsample,2040,"in a multi-level image pyramid. Field Summary; Fields. Modifier and Type; Field; Description; static final ImageChannel; DEFAULT_CLASSIFICATION_LABELS_CHANNEL. Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; duplicate(). Duplicate this metatadata. boolean; equals(Object obj);  ; double; getAveragedPixelSize(). Get the averaged pixel size in microns, if available - or Double.NaN otherwise. ImageChannel; getChannel(int n). Get the specified channel. List<ImageChannel>; getChannels(). Get an unmodifiable list of all channels. ImageServerMetadata.ChannelType; getChannelType(). Get the channel type, which can be used to interpret the channels. Map<Integer,PathClass>; getClassificationLabels(). Get map between labels and classification names. double; getDownsampleForLevel(int level). Get the downsample factor for a specific resolution level. int; getHeight(). Get the full-resolution image height. ImageServerMetadata.ImageResolutionLevel; getLevel(int level). Get resolution information for a specified pyramidal level. List<ImageServerMetadata.ImageResolutionLevel>; getLevels(). Get an unmodifiable list containing the resolution levels. double; getMagnification(). Get the magnification value, or Double.NaN if this is unavailable. Number; getMaxValue(). Get the minimum value supported by this image. Number; getMinValue(). Get the minimum value supported by this image. String; getName(). Get the image name. PixelCalibration; getPixelCalibration(). Get a PixelCalibration object representing the pixel size information for this metadata object. double; getPixelHeightMicrons(). Get the pixel height in microns, if available - or Double.NaN otherwise. PixelType; getPixelType(). Returns the bit-depth for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if av",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:2870,Availability,avail,available,2870," to interpret the channels. Map<Integer,PathClass>; getClassificationLabels(). Get map between labels and classification names. double; getDownsampleForLevel(int level). Get the downsample factor for a specific resolution level. int; getHeight(). Get the full-resolution image height. ImageServerMetadata.ImageResolutionLevel; getLevel(int level). Get resolution information for a specified pyramidal level. List<ImageServerMetadata.ImageResolutionLevel>; getLevels(). Get an unmodifiable list containing the resolution levels. double; getMagnification(). Get the magnification value, or Double.NaN if this is unavailable. Number; getMaxValue(). Get the minimum value supported by this image. Number; getMinValue(). Get the minimum value supported by this image. String; getName(). Get the image name. PixelCalibration; getPixelCalibration(). Get a PixelCalibration object representing the pixel size information for this metadata object. double; getPixelHeightMicrons(). Get the pixel height in microns, if available - or Double.NaN otherwise. PixelType; getPixelType(). Returns the bit-depth for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if available - or Double.NaN otherwise. double[]; getPreferredDownsamplesArray(). Request the preferred downsamples from the image metadata. int; getPreferredTileHeight(). Get the preferred tile height, which can be used to optimize pixel requests for large images. int; getPreferredTileWidth(). Get the preferred tile width, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:3059,Availability,avail,available,3059,"actor for a specific resolution level. int; getHeight(). Get the full-resolution image height. ImageServerMetadata.ImageResolutionLevel; getLevel(int level). Get resolution information for a specified pyramidal level. List<ImageServerMetadata.ImageResolutionLevel>; getLevels(). Get an unmodifiable list containing the resolution levels. double; getMagnification(). Get the magnification value, or Double.NaN if this is unavailable. Number; getMaxValue(). Get the minimum value supported by this image. Number; getMinValue(). Get the minimum value supported by this image. String; getName(). Get the image name. PixelCalibration; getPixelCalibration(). Get a PixelCalibration object representing the pixel size information for this metadata object. double; getPixelHeightMicrons(). Get the pixel height in microns, if available - or Double.NaN otherwise. PixelType; getPixelType(). Returns the bit-depth for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if available - or Double.NaN otherwise. double[]; getPreferredDownsamplesArray(). Request the preferred downsamples from the image metadata. int; getPreferredTileHeight(). Get the preferred tile height, which can be used to optimize pixel requests for large images. int; getPreferredTileWidth(). Get the preferred tile width, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is comp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:3160,Availability,down,downsamples,3160,".ImageResolutionLevel; getLevel(int level). Get resolution information for a specified pyramidal level. List<ImageServerMetadata.ImageResolutionLevel>; getLevels(). Get an unmodifiable list containing the resolution levels. double; getMagnification(). Get the magnification value, or Double.NaN if this is unavailable. Number; getMaxValue(). Get the minimum value supported by this image. Number; getMinValue(). Get the minimum value supported by this image. String; getName(). Get the image name. PixelCalibration; getPixelCalibration(). Get a PixelCalibration object representing the pixel size information for this metadata object. double; getPixelHeightMicrons(). Get the pixel height in microns, if available - or Double.NaN otherwise. PixelType; getPixelType(). Returns the bit-depth for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if available - or Double.NaN otherwise. double[]; getPreferredDownsamplesArray(). Request the preferred downsamples from the image metadata. int; getPreferredTileHeight(). Get the preferred tile height, which can be used to optimize pixel requests for large images. int; getPreferredTileWidth(). Get the preferred tile width, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnificati",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:3879,Availability,avail,available,3879,"ilable - or Double.NaN otherwise. PixelType; getPixelType(). Returns the bit-depth for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if available - or Double.NaN otherwise. double[]; getPreferredDownsamplesArray(). Request the preferred downsamples from the image metadata. int; getPreferredTileHeight(). Get the preferred tile height, which can be used to optimize pixel requests for large images. int; getPreferredTileWidth(). Get the preferred tile width, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information is available for the image. String; toString();  ; boolean; zSpacingCalibrated(). Returns true if z-spacing calibration information is available for the image. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. DEFAULT_CLASSIFICATION_LABELS_CHANNEL; public static final ImageChannel DEFAULT_CLASSIFICATION_LABELS_CHANNEL; Default channel to use with images where the channel type is ImageServerMetada",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:4401,Availability,avail,available,4401,"h, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information is available for the image. String; toString();  ; boolean; zSpacingCalibrated(). Returns true if z-spacing calibration information is available for the image. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. DEFAULT_CLASSIFICATION_LABELS_CHANNEL; public static final ImageChannel DEFAULT_CLASSIFICATION_LABELS_CHANNEL; Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Details. getPreferredDownsamplesArray; public double[] getPreferredDownsamplesArray(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy, and so should not be called often; it is generally preferably ; to request downsample values individually. Returns:. getLevels; public List<ImageServerMetadata.ImageResolutionLevel> getLevels(); Get an unmodifiable list containing the resolution levels. Returns:. getWidth; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:4533,Availability,avail,available,4533,"he number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information is available for the image. String; toString();  ; boolean; zSpacingCalibrated(). Returns true if z-spacing calibration information is available for the image. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. DEFAULT_CLASSIFICATION_LABELS_CHANNEL; public static final ImageChannel DEFAULT_CLASSIFICATION_LABELS_CHANNEL; Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Details. getPreferredDownsamplesArray; public double[] getPreferredDownsamplesArray(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy, and so should not be called often; it is generally preferably ; to request downsample values individually. Returns:. getLevels; public List<ImageServerMetadata.ImageResolutionLevel> getLevels(); Get an unmodifiable list containing the resolution levels. Returns:. getWidth; public int getWidth(); Get the full-resolution image width. Returns:. getHeight; public int getHeight(); Get the full-resolution image height. Re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:5020,Availability,down,downsamples,5020,"etadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information is available for the image. String; toString();  ; boolean; zSpacingCalibrated(). Returns true if z-spacing calibration information is available for the image. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. DEFAULT_CLASSIFICATION_LABELS_CHANNEL; public static final ImageChannel DEFAULT_CLASSIFICATION_LABELS_CHANNEL; Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Details. getPreferredDownsamplesArray; public double[] getPreferredDownsamplesArray(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy, and so should not be called often; it is generally preferably ; to request downsample values individually. Returns:. getLevels; public List<ImageServerMetadata.ImageResolutionLevel> getLevels(); Get an unmodifiable list containing the resolution levels. Returns:. getWidth; public int getWidth(); Get the full-resolution image width. Returns:. getHeight; public int getHeight(); Get the full-resolution image height. Returns:. nLevels; public int nLevels(); Get the number of resolution levels. For a non-pyramidal image, this is 1. Returns:. getPixelCalibration; public PixelCalibration getPixelCalibration(); Get a PixelCalibration object representing the pixel size information for this metadata object. Returns:. getDownsampleForLevel; public double getDownsampleForLevel(int level); Get the downsample factor for a specific resolution level. Parameters:; level - ; Returns:. getLevel;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:5174,Availability,down,downsample,5174,"ly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information is available for the image. String; toString();  ; boolean; zSpacingCalibrated(). Returns true if z-spacing calibration information is available for the image. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. DEFAULT_CLASSIFICATION_LABELS_CHANNEL; public static final ImageChannel DEFAULT_CLASSIFICATION_LABELS_CHANNEL; Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Details. getPreferredDownsamplesArray; public double[] getPreferredDownsamplesArray(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy, and so should not be called often; it is generally preferably ; to request downsample values individually. Returns:. getLevels; public List<ImageServerMetadata.ImageResolutionLevel> getLevels(); Get an unmodifiable list containing the resolution levels. Returns:. getWidth; public int getWidth(); Get the full-resolution image width. Returns:. getHeight; public int getHeight(); Get the full-resolution image height. Returns:. nLevels; public int nLevels(); Get the number of resolution levels. For a non-pyramidal image, this is 1. Returns:. getPixelCalibration; public PixelCalibration getPixelCalibration(); Get a PixelCalibration object representing the pixel size information for this metadata object. Returns:. getDownsampleForLevel; public double getDownsampleForLevel(int level); Get the downsample factor for a specific resolution level. Parameters:; level - ; Returns:. getLevel; public ImageServerMetadata.ImageResolutionLevel getLevel(int level); Get resolution information for a specified pyramidal level. Parameters:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:5895,Availability,down,downsample,5895,"nelType.CLASSIFICATION. Method Details. getPreferredDownsamplesArray; public double[] getPreferredDownsamplesArray(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy, and so should not be called often; it is generally preferably ; to request downsample values individually. Returns:. getLevels; public List<ImageServerMetadata.ImageResolutionLevel> getLevels(); Get an unmodifiable list containing the resolution levels. Returns:. getWidth; public int getWidth(); Get the full-resolution image width. Returns:. getHeight; public int getHeight(); Get the full-resolution image height. Returns:. nLevels; public int nLevels(); Get the number of resolution levels. For a non-pyramidal image, this is 1. Returns:. getPixelCalibration; public PixelCalibration getPixelCalibration(); Get a PixelCalibration object representing the pixel size information for this metadata object. Returns:. getDownsampleForLevel; public double getDownsampleForLevel(int level); Get the downsample factor for a specific resolution level. Parameters:; level - ; Returns:. getLevel; public ImageServerMetadata.ImageResolutionLevel getLevel(int level); Get resolution information for a specified pyramidal level. Parameters:; level - ; Returns:. isRGB; public boolean isRGB(); Returns true if the pixels are stored in (A)RGB form. Returns:. getPixelType; public PixelType getPixelType(); Returns the bit-depth for individual pixels in the image. Returns:. getMinValue; public Number getMinValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified. Returns:; See Also:. getPixelType(). getMaxValue; public Number getMaxValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Returns:; See Also:. getPixelType(). pixelSizeC",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:6995,Availability,avail,available,6995,". Parameters:; level - ; Returns:. getLevel; public ImageServerMetadata.ImageResolutionLevel getLevel(int level); Get resolution information for a specified pyramidal level. Parameters:; level - ; Returns:. isRGB; public boolean isRGB(); Returns true if the pixels are stored in (A)RGB form. Returns:. getPixelType; public PixelType getPixelType(); Returns the bit-depth for individual pixels in the image. Returns:. getMinValue; public Number getMinValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified. Returns:; See Also:. getPixelType(). getMaxValue; public Number getMaxValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Returns:; See Also:. getPixelType(). pixelSizeCalibrated; public boolean pixelSizeCalibrated(); Returns true if pixel width and height calibration information is available for the image. Returns:. zSpacingCalibrated; public boolean zSpacingCalibrated(); Returns true if z-spacing calibration information is available for the image. Returns:. getAveragedPixelSize; public double getAveragedPixelSize(); Get the averaged pixel size in microns, if available - or Double.NaN otherwise. Returns:. getPixelWidthMicrons; public double getPixelWidthMicrons(); Get the pixel width in microns, if available - or Double.NaN otherwise. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, if available - or Double.NaN otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Doubl",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:7140,Availability,avail,available,7140,"fied pyramidal level. Parameters:; level - ; Returns:. isRGB; public boolean isRGB(); Returns true if the pixels are stored in (A)RGB form. Returns:. getPixelType; public PixelType getPixelType(); Returns the bit-depth for individual pixels in the image. Returns:. getMinValue; public Number getMinValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified. Returns:; See Also:. getPixelType(). getMaxValue; public Number getMaxValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Returns:; See Also:. getPixelType(). pixelSizeCalibrated; public boolean pixelSizeCalibrated(); Returns true if pixel width and height calibration information is available for the image. Returns:. zSpacingCalibrated; public boolean zSpacingCalibrated(); Returns true if z-spacing calibration information is available for the image. Returns:. getAveragedPixelSize; public double getAveragedPixelSize(); Get the averaged pixel size in microns, if available - or Double.NaN otherwise. Returns:. getPixelWidthMicrons; public double getPixelWidthMicrons(); Get the pixel width in microns, if available - or Double.NaN otherwise. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, if available - or Double.NaN otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. getSizeZ; public int getSizeZ(); Get the number of z-slices. Returns:. getSizeT; public int getS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:7278,Availability,avail,available,7278,"eturns:. getPixelType; public PixelType getPixelType(); Returns the bit-depth for individual pixels in the image. Returns:. getMinValue; public Number getMinValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified. Returns:; See Also:. getPixelType(). getMaxValue; public Number getMaxValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Returns:; See Also:. getPixelType(). pixelSizeCalibrated; public boolean pixelSizeCalibrated(); Returns true if pixel width and height calibration information is available for the image. Returns:. zSpacingCalibrated; public boolean zSpacingCalibrated(); Returns true if z-spacing calibration information is available for the image. Returns:. getAveragedPixelSize; public double getAveragedPixelSize(); Get the averaged pixel size in microns, if available - or Double.NaN otherwise. Returns:. getPixelWidthMicrons; public double getPixelWidthMicrons(); Get the pixel width in microns, if available - or Double.NaN otherwise. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, if available - or Double.NaN otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. getSizeZ; public int getSizeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnificati",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:7420,Availability,avail,available,7420,"mber getMinValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified. Returns:; See Also:. getPixelType(). getMaxValue; public Number getMaxValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Returns:; See Also:. getPixelType(). pixelSizeCalibrated; public boolean pixelSizeCalibrated(); Returns true if pixel width and height calibration information is available for the image. Returns:. zSpacingCalibrated; public boolean zSpacingCalibrated(); Returns true if z-spacing calibration information is available for the image. Returns:. getAveragedPixelSize; public double getAveragedPixelSize(); Get the averaged pixel size in microns, if available - or Double.NaN otherwise. Returns:. getPixelWidthMicrons; public double getPixelWidthMicrons(); Get the pixel width in microns, if available - or Double.NaN otherwise. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, if available - or Double.NaN otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. getSizeZ; public int getSizeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:7565,Availability,avail,available,7565,"fied. Returns:; See Also:. getPixelType(). getMaxValue; public Number getMaxValue(); Get the minimum value supported by this image.; By default, this is the lower bound of the PixelType unless otherwise specified.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Returns:; See Also:. getPixelType(). pixelSizeCalibrated; public boolean pixelSizeCalibrated(); Returns true if pixel width and height calibration information is available for the image. Returns:. zSpacingCalibrated; public boolean zSpacingCalibrated(); Returns true if z-spacing calibration information is available for the image. Returns:. getAveragedPixelSize; public double getAveragedPixelSize(); Get the averaged pixel size in microns, if available - or Double.NaN otherwise. Returns:. getPixelWidthMicrons; public double getPixelWidthMicrons(); Get the pixel width in microns, if available - or Double.NaN otherwise. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, if available - or Double.NaN otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. getSizeZ; public int getSizeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public int getPreferredTileWidth(); Get the preferred tile width, which can be used to optimize pixel requests for large images. Returns:. getPreferredT",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:7701,Availability,avail,available,7701,"lt, this is the lower bound of the PixelType unless otherwise specified.; This purpose of this method is to support other effective bit-depths (e.g. 12-bit, 14-bit). Returns:; See Also:. getPixelType(). pixelSizeCalibrated; public boolean pixelSizeCalibrated(); Returns true if pixel width and height calibration information is available for the image. Returns:. zSpacingCalibrated; public boolean zSpacingCalibrated(); Returns true if z-spacing calibration information is available for the image. Returns:. getAveragedPixelSize; public double getAveragedPixelSize(); Get the averaged pixel size in microns, if available - or Double.NaN otherwise. Returns:. getPixelWidthMicrons; public double getPixelWidthMicrons(); Get the pixel width in microns, if available - or Double.NaN otherwise. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, if available - or Double.NaN otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. getSizeZ; public int getSizeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public int getPreferredTileWidth(); Get the preferred tile width, which can be used to optimize pixel requests for large images. Returns:. getPreferredTileHeight; public int getPreferredTileHeight(); Get the preferred tile height, which can be used to optimize pixel requests for large images",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:495,Modifiability,extend,extends,495,". ImageServerMetadata (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata. public class ImageServerMetadata; extends Object; Class for storing primary ImageServer metadata fields.; ; Can be used when the metadata needs to be adjusted (e.g. to correct erroneous pixel sizes). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.Builder. Builder to create a new ImageServerMetadata object. static enum ; ImageServerMetadata.ChannelType. Enum representing possible channel (band) types for an image. static class ; ImageServerMetadata.ImageResolutionLevel. Width and height of each resolution in a multi-level image pyramid. Field Summary; Fields. Modifier and Type; Field; Description; static final ImageChannel; DEFAULT_CLASSIFICATION_LABELS_CHANNEL. Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; duplicate(). Duplicate this metatadata. boolean; equals(Object obj);  ; double; getAveragedPixelSize(). Get the averaged pixel size in microns, if available - or Double.NaN otherwise. ImageChannel; getChannel(int n). Get the specified channel. List<ImageChannel>; getChannels(). Get an unmodifiable list of all channels. ImageServerMetadata.ChannelType; getChannelType(). Get the channel type, which can be used to interpret the channels. Map<Integer,PathClass>; getClassificationLabels(). Get map between labels and classification names. double; get",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:4566,Modifiability,inherit,inherited,4566,"r of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information is available for the image. String; toString();  ; boolean; zSpacingCalibrated(). Returns true if z-spacing calibration information is available for the image. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. DEFAULT_CLASSIFICATION_LABELS_CHANNEL; public static final ImageChannel DEFAULT_CLASSIFICATION_LABELS_CHANNEL; Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Details. getPreferredDownsamplesArray; public double[] getPreferredDownsamplesArray(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy, and so should not be called often; it is generally preferably ; to request downsample values individually. Returns:. getLevels; public List<ImageServerMetadata.ImageResolutionLevel> getLevels(); Get an unmodifiable list containing the resolution levels. Returns:. getWidth; public int getWidth(); Get the full-resolution image width. Returns:. getHeight; public int getHeight(); Get the full-resolution image height. Returns:. nLevels; public int nLevels(); Get the number of ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:3280,Performance,optimiz,optimize,3280,"<ImageServerMetadata.ImageResolutionLevel>; getLevels(). Get an unmodifiable list containing the resolution levels. double; getMagnification(). Get the magnification value, or Double.NaN if this is unavailable. Number; getMaxValue(). Get the minimum value supported by this image. Number; getMinValue(). Get the minimum value supported by this image. String; getName(). Get the image name. PixelCalibration; getPixelCalibration(). Get a PixelCalibration object representing the pixel size information for this metadata object. double; getPixelHeightMicrons(). Get the pixel height in microns, if available - or Double.NaN otherwise. PixelType; getPixelType(). Returns the bit-depth for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if available - or Double.NaN otherwise. double[]; getPreferredDownsamplesArray(). Request the preferred downsamples from the image metadata. int; getPreferredTileHeight(). Get the preferred tile height, which can be used to optimize pixel requests for large images. int; getPreferredTileWidth(). Get the preferred tile width, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:3403,Performance,optimiz,optimize,3403," getMagnification(). Get the magnification value, or Double.NaN if this is unavailable. Number; getMaxValue(). Get the minimum value supported by this image. Number; getMinValue(). Get the minimum value supported by this image. String; getName(). Get the image name. PixelCalibration; getPixelCalibration(). Get a PixelCalibration object representing the pixel size information for this metadata object. double; getPixelHeightMicrons(). Get the pixel height in microns, if available - or Double.NaN otherwise. PixelType; getPixelType(). Returns the bit-depth for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if available - or Double.NaN otherwise. double[]; getPreferredDownsamplesArray(). Request the preferred downsamples from the image metadata. int; getPreferredTileHeight(). Get the preferred tile height, which can be used to optimize pixel requests for large images. int; getPreferredTileWidth(). Get the preferred tile width, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:8462,Performance,optimiz,optimize,8462,"le - or Double.NaN otherwise. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, if available - or Double.NaN otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. getSizeZ; public int getSizeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public int getPreferredTileWidth(); Get the preferred tile width, which can be used to optimize pixel requests for large images. Returns:. getPreferredTileHeight; public int getPreferredTileHeight(); Get the preferred tile height, which can be used to optimize pixel requests for large images. Returns:. duplicate; public ImageServerMetadata duplicate(); Duplicate this metatadata. Returns:. getName; public String getName(); Get the image name. Returns:. getChannel; public ImageChannel getChannel(int n); Get the specified channel. Parameters:; n - channel index, starting at 0.; Returns:. getChannels; public List<ImageChannel> getChannels(); Get an unmodifiable list of all channels. Returns:. getClassificationLabels; public Map<Integer,PathClass> getClassificationLabels(); Get map between labels and classification names. This is relevant only where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION, ; otherwise it returns an empty map. Returns:. getChannelType; public ImageServerMetadata.ChannelType getChannelType(); Get the",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:8627,Performance,optimiz,optimize,8627," otherwise. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, if available - or Double.NaN otherwise. Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. getSizeZ; public int getSizeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public int getPreferredTileWidth(); Get the preferred tile width, which can be used to optimize pixel requests for large images. Returns:. getPreferredTileHeight; public int getPreferredTileHeight(); Get the preferred tile height, which can be used to optimize pixel requests for large images. Returns:. duplicate; public ImageServerMetadata duplicate(); Duplicate this metatadata. Returns:. getName; public String getName(); Get the image name. Returns:. getChannel; public ImageChannel getChannel(int n); Get the specified channel. Parameters:; n - channel index, starting at 0.; Returns:. getChannels; public List<ImageChannel> getChannels(); Get an unmodifiable list of all channels. Returns:. getClassificationLabels; public Map<Integer,PathClass> getClassificationLabels(); Get map between labels and classification names. This is relevant only where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION, ; otherwise it returns an empty map. Returns:. getChannelType; public ImageServerMetadata.ChannelType getChannelType(); Get the channel type, which can be used to interpret the channels. Returns:. isCompatibleMetadata; public boolean isCompatibleMetadata(ImageServerMetadata metadata); Retur",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:3921,Security,hash,hashCode,3921," for individual pixels in the image. double; getPixelWidthMicrons(). Get the pixel width in microns, if available - or Double.NaN otherwise. double[]; getPreferredDownsamplesArray(). Request the preferred downsamples from the image metadata. int; getPreferredTileHeight(). Get the preferred tile height, which can be used to optimize pixel requests for large images. int; getPreferredTileWidth(). Get the preferred tile width, which can be used to optimize pixel requests for large images. int; getSizeC(). Get the number of image channels. int; getSizeT(). Get the number of time points. int; getSizeZ(). Get the number of z-slices. double; getTimepoint(int ind). Get the time point, defined in getTimeUnit(), or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. int; getWidth(). Get the full-resolution image width. double; getZSpacingMicrons(). Get the z-spacing in microns, if available - or Double.NaN otherwise. int; hashCode();  ; boolean; isCompatibleMetadata(ImageServerMetadata metadata). Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). boolean; isRGB(). Returns true if the pixels are stored in (A)RGB form. int; nLevels(). Get the number of resolution levels. boolean; pixelSizeCalibrated(). Returns true if pixel width and height calibration information is available for the image. String; toString();  ; boolean; zSpacingCalibrated(). Returns true if z-spacing calibration information is available for the image. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. DEFAULT_CLASSIFICATION_LABELS_CHANNEL; public static final ImageChannel DEFAULT_CLASSIFICATION_LABELS_CHANNEL; Default channel to use with images where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION. Method Details. getPreferredDownsamplesArray; public",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:9877,Security,hash,hashCode,9877,"zeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public int getPreferredTileWidth(); Get the preferred tile width, which can be used to optimize pixel requests for large images. Returns:. getPreferredTileHeight; public int getPreferredTileHeight(); Get the preferred tile height, which can be used to optimize pixel requests for large images. Returns:. duplicate; public ImageServerMetadata duplicate(); Duplicate this metatadata. Returns:. getName; public String getName(); Get the image name. Returns:. getChannel; public ImageChannel getChannel(int n); Get the specified channel. Parameters:; n - channel index, starting at 0.; Returns:. getChannels; public List<ImageChannel> getChannels(); Get an unmodifiable list of all channels. Returns:. getClassificationLabels; public Map<Integer,PathClass> getClassificationLabels(); Get map between labels and classification names. This is relevant only where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION, ; otherwise it returns an empty map. Returns:. getChannelType; public ImageServerMetadata.ChannelType getChannelType(); Get the channel type, which can be used to interpret the channels. Returns:. isCompatibleMetadata; public boolean isCompatibleMetadata(ImageServerMetadata metadata); Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). Parameters:; metadata - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:9898,Security,hash,hashCode,9898,"zeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public int getPreferredTileWidth(); Get the preferred tile width, which can be used to optimize pixel requests for large images. Returns:. getPreferredTileHeight; public int getPreferredTileHeight(); Get the preferred tile height, which can be used to optimize pixel requests for large images. Returns:. duplicate; public ImageServerMetadata duplicate(); Duplicate this metatadata. Returns:. getName; public String getName(); Get the image name. Returns:. getChannel; public ImageChannel getChannel(int n); Get the specified channel. Parameters:; n - channel index, starting at 0.; Returns:. getChannels; public List<ImageChannel> getChannels(); Get an unmodifiable list of all channels. Returns:. getClassificationLabels; public Map<Integer,PathClass> getClassificationLabels(); Get map between labels and classification names. This is relevant only where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION, ; otherwise it returns an empty map. Returns:. getChannelType; public ImageServerMetadata.ChannelType getChannelType(); Get the channel type, which can be used to interpret the channels. Returns:. isCompatibleMetadata; public boolean isCompatibleMetadata(ImageServerMetadata metadata); Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). Parameters:; metadata - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html:9922,Security,hash,hashCode,9922,"zeZ(); Get the number of z-slices. Returns:. getSizeT; public int getSizeT(); Get the number of time points. Returns:. getSizeC; public int getSizeC(); Get the number of image channels. Returns:. getMagnification; public double getMagnification(); Get the magnification value, or Double.NaN if this is unavailable. Returns:. getPreferredTileWidth; public int getPreferredTileWidth(); Get the preferred tile width, which can be used to optimize pixel requests for large images. Returns:. getPreferredTileHeight; public int getPreferredTileHeight(); Get the preferred tile height, which can be used to optimize pixel requests for large images. Returns:. duplicate; public ImageServerMetadata duplicate(); Duplicate this metatadata. Returns:. getName; public String getName(); Get the image name. Returns:. getChannel; public ImageChannel getChannel(int n); Get the specified channel. Parameters:; n - channel index, starting at 0.; Returns:. getChannels; public List<ImageChannel> getChannels(); Get an unmodifiable list of all channels. Returns:. getClassificationLabels; public Map<Integer,PathClass> getClassificationLabels(); Get map between labels and classification names. This is relevant only where the channel type is ImageServerMetadata.ChannelType.CLASSIFICATION, ; otherwise it returns an empty map. Returns:. getChannelType; public ImageServerMetadata.ChannelType getChannelType(); Get the channel type, which can be used to interpret the channels. Returns:. isCompatibleMetadata; public boolean isCompatibleMetadata(ImageServerMetadata metadata); Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). Parameters:; metadata - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1322,Availability,down,downsample,1322," ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel.Builder. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Enclosing class:; ImageServerMetadata.ImageResolutionLevel. public static class ImageServerMetadata.ImageResolutionLevel.Builder; extends Object; Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Constructor Summary; Constructors. Constructor; Description; Builder(int fullWidth,; int fullHeight). Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Cons",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1401,Availability,down,downsample,1401,"s ImageServerMetadata.ImageResolutionLevel.Builder. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Enclosing class:; ImageServerMetadata.ImageResolutionLevel. public static class ImageServerMetadata.ImageResolutionLevel.Builder; extends Object; Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Constructor Summary; Constructors. Constructor; Description; Builder(int fullWidth,; int fullHeight). Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLev",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1603,Availability,down,downsample,1603,"data.ImageResolutionLevel. public static class ImageServerMetadata.ImageResolutionLevel.Builder; extends Object; Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Constructor Summary; Constructors. Constructor; Description; Builder(int fullWidth,; int fullHeight). Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsamp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1845,Availability,down,downsample,1845,". Constructor; Description; Builder(int fullWidth,; int fullHeight). Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullRe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1906,Availability,down,downsample,1906,"tor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFu",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:2669,Availability,down,downsample,2669,"ta.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:2730,Availability,down,downsample,2730,"ta.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:2799,Availability,down,downsample,2799,"vel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Paramete",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:3291,Availability,down,downsample,3291,"tify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Parameters:; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(ImageServerMetadata.ImageResolutionLevel level); Add a new level directly. Parameters:; level - ; Returns:. build; public List<ImageServerMetadata.ImageResolutionLevel> build(); Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:3370,Availability,down,downsample,3370,"tify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Parameters:; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(ImageServerMetadata.ImageResolutionLevel level); Add a new level directly. Parameters:; level - ; Returns:. build; public List<ImageServerMetadata.ImageResolutionLevel> build(); Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:3492,Availability,down,downsample,3492,"tify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Parameters:; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(ImageServerMetadata.ImageResolutionLevel level); Add a new level directly. Parameters:; level - ; Returns:. build; public List<ImageServerMetadata.ImageResolutionLevel> build(); Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:3528,Availability,down,downsample,3528,"tify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Parameters:; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(ImageServerMetadata.ImageResolutionLevel level); Add a new level directly. Parameters:; level - ; Returns:. build; public List<ImageServerMetadata.ImageResolutionLevel> build(); Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:3766,Availability,down,downsample,3766,"tify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Parameters:; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(ImageServerMetadata.ImageResolutionLevel level); Add a new level directly. Parameters:; level - ; Returns:. build; public List<ImageServerMetadata.ImageResolutionLevel> build(); Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:678,Modifiability,extend,extends,678,". ImageServerMetadata.ImageResolutionLevel.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel.Builder. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Enclosing class:; ImageServerMetadata.ImageResolutionLevel. public static class ImageServerMetadata.ImageResolutionLevel.Builder; extends Object; Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Constructor Summary; Constructors. Constructor; Description; Builder(int fullWidth,; int fullHeight). Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutio",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:2120,Modifiability,inherit,inherited,2120,"ServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a lar",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:3412,Safety,avoid,avoids,3412,"tify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Parameters:; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(ImageServerMetadata.ImageResolutionLevel level); Add a new level directly. Parameters:; level - ; Returns:. build; public List<ImageServerMetadata.ImageResolutionLevel> build(); Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:2194,Security,hash,hashCode,2194,"dd the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:1122,Availability,down,downsample,1122,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:1486,Availability,down,downsample,1486,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:625,Modifiability,extend,extends,625,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:1313,Modifiability,inherit,inherited,1313,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:1267,Security,hash,hashCode,1267,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:1689,Security,hash,hashCode,1689,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:1710,Security,hash,hashCode,1710,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html:1734,Security,hash,hashCode,1734,". ImageServerMetadata.ImageResolutionLevel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Enclosing class:; ImageServerMetadata. public static class ImageServerMetadata.ImageResolutionLevel; extends Object; Width and height of each resolution in a multi-level image pyramid. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ImageServerMetadata.ImageResolutionLevel.Builder. Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample factor for this level. int; getHeight(). Get the image height at this level. int; getWidth(). Get the image width at this level. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getDownsample; public double getDownsample(); Get the downsample factor for this level. Returns:. getWidth; public int getWidth(); Get the image width at this level. Returns:. getHeight; public int getHeight(); Get the image height at this level. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:1306,Availability,avail,available,1306,"| ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerProvider. java.lang.Object; qupath.lib.images.servers.ImageServerProvider. public class ImageServerProvider; extends Object; Service provider for creating ImageServers from a given path - which may be a file path or URL.; ; This class is responsible for hunting through potential ImageServerBuilders, ranked by support level, to find the first that works. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageServerProvider();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServer<T>; buildServer(String path,; Class<T> cls,; String... args). Attempt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public stat",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:1443,Availability,avail,available,1443," class ImageServerProvider; extends Object; Service provider for creating ImageServers from a given path - which may be a file path or URL.; ; This class is responsible for hunting through potential ImageServerBuilders, ranked by support level, to find the first that works. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageServerProvider();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServer<T>; buildServer(String path,; Class<T> cls,; String... args). Attempt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:3136,Availability,avail,available,3136," class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServerBuilders. Returns:. getInstalledImageServerBuilders; public static <T> List<ImageServerBuilder<T>> getInstalledImageServerBuilders(Class<T> imageClass); Request all available ImageServerBuilders supporting a given image class. Type Parameters:; T - ; Parameters:; imageClass - ; Returns:. legacyPathToURI; public static URI legacyPathToURI(String path); throws IOException; Method to help with converting legacy image paths to URIs.; This is intended for compatibility with data files used in QuPath v0.1.2, where servers ; were represented using paths only (rather than JSON). Parameters:; path - ; Returns:; a URI parsed from a path, if possible; Throws:; IOException. getPreferredUriImageSupport; public static <T>; ImageServerBuilder.UriImageSupport<T> getPreferredUriImageSupport(Class<T> cls,; String path,; String... args); throws IOException; Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. T",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:3322,Availability,avail,available,3322,"ethod Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServerBuilders. Returns:. getInstalledImageServerBuilders; public static <T> List<ImageServerBuilder<T>> getInstalledImageServerBuilders(Class<T> imageClass); Request all available ImageServerBuilders supporting a given image class. Type Parameters:; T - ; Parameters:; imageClass - ; Returns:. legacyPathToURI; public static URI legacyPathToURI(String path); throws IOException; Method to help with converting legacy image paths to URIs.; This is intended for compatibility with data files used in QuPath v0.1.2, where servers ; were represented using paths only (rather than JSON). Parameters:; path - ; Returns:; a URI parsed from a path, if possible; Throws:; IOException. getPreferredUriImageSupport; public static <T>; ImageServerBuilder.UriImageSupport<T> getPreferredUriImageSupport(Class<T> cls,; String path,; String... args); throws IOException; Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. Type Parameters:; T - ; Parameters:; cls - ; path - ; args - ; Returns:; Throws:; IOException. buildServer; public static <T> ImageServer<T> buildServer(String path,; Class<T> cls,; String...",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:495,Modifiability,extend,extends,495,". ImageServerProvider (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerProvider. java.lang.Object; qupath.lib.images.servers.ImageServerProvider. public class ImageServerProvider; extends Object; Service provider for creating ImageServers from a given path - which may be a file path or URL.; ; This class is responsible for hunting through potential ImageServerBuilders, ranked by support level, to find the first that works. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageServerProvider();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServer<T>; buildServer(String path,; Class<T> cls,; String... args). Attempt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuil",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2075,Modifiability,inherit,inherited,2075,"ified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:1174,Performance,cache,cache,1174,"r; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerProvider. java.lang.Object; qupath.lib.images.servers.ImageServerProvider. public class ImageServerProvider; extends Object; Service provider for creating ImageServers from a given path - which may be a file path or URL.; ; This class is responsible for hunting through potential ImageServerBuilders, ranked by support level, to find the first that works. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageServerProvider();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServer<T>; buildServer(String path,; Class<T> cls,; String... args). Attempt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:1858,Performance,cache,cache,1858,"r();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServer<T>; buildServer(String path,; Class<T> cls,; String... args). Attempt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:1889,Performance,cache,cache,1889,". Modifier and Type; Method; Description; static <T> ImageServer<T>; buildServer(String path,; Class<T> cls,; String... args). Attempt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2046,Performance,load,loader,2046,"mpt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuild",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2357,Performance,cache,cache,2357,"ilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServerBuilders. Returns:. getInstalledImageServerBuilders; public static <T> List<ImageServerBuilder<T>> getInstalledImageServerBuilders(Class<T> imageClass); Request all available ImageServerBuilders supporting a gi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2388,Performance,cache,cache,2388,"ilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServerBuilders. Returns:. getInstalledImageServerBuilders; public static <T> List<ImageServerBuilder<T>> getInstalledImageServerBuilders(Class<T> imageClass); Request all available ImageServerBuilders supporting a gi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2478,Performance,cache,cache,2478,"lders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServerBuilders. Returns:. getInstalledImageServerBuilders; public static <T> List<ImageServerBuilder<T>> getInstalledImageServerBuilders(Class<T> imageClass); Request all available ImageServerBuilders supporting a given image class. Type Parameters:; T - ; Parameters:; imageClass - ; Returns:. legacyPathToURI; publi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2577,Performance,cache,cache,2577,"eferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServerBuilders. Returns:. getInstalledImageServerBuilders; public static <T> List<ImageServerBuilder<T>> getInstalledImageServerBuilders(Class<T> imageClass); Request all available ImageServerBuilders supporting a given image class. Type Parameters:; T - ; Parameters:; imageClass - ; Returns:. legacyPathToURI; public static URI legacyPathToURI(String path); throws IOException; Method to help with convertin",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2809,Performance,load,loader,2809,"thod to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServerBuilders. Returns:. getInstalledImageServerBuilders; public static <T> List<ImageServerBuilder<T>> getInstalledImageServerBuilders(Class<T> imageClass); Request all available ImageServerBuilders supporting a given image class. Type Parameters:; T - ; Parameters:; imageClass - ; Returns:. legacyPathToURI; public static URI legacyPathToURI(String path); throws IOException; Method to help with converting legacy image paths to URIs.; This is intended for compatibility with data files used in QuPath v0.1.2, where servers ; were represented using paths only (rather than JSON). Parameters:; path - ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:2149,Security,hash,hashCode,2149,"s<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public static <T> void setCache(Map<RegionRequest,T> cache,; Class<T> cls); Set the cache to be used for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cache - ; cls - . getCache; public static <T> Map<RegionRequest,T> getCache(Class<T> cls); Get the cache in use for image tiles of a specific type. Type Parameters:; T - ; Parameters:; cls - ; Returns:. setServiceLoader; public static void setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader); Replace the default service loader with another.; ; This can be handy if the ServiceLoader should be using an alternative ClassLoader,; e.g. to auto-discover ImageServerBuilders in alternative directories. Parameters:; newLoader - . getInstalledImageServerBuilders; public static List<ImageServerBuilder<?>> getInstalledImageServerBuilders(); Request all available ImageServe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:2232,Availability,down,downsamples,2232," all ImageServerBuilder.UriImageSupport that claim to be able to open the specified URI with optional args. static TypeAdapterFactory; getImageServerTypeAdapterFactory(boolean includeMetadata). Get a TypeAdapterFactory for ImageServers, optionally including metadata in the serialized ; form of the server. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport that is best able to open the specified image with optional args. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(ImageServerBuilder<BufferedImage> builder,; URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport associated with an ImageServerBuilder, or null if the builder does not support the image. static TypeAdapterFactory; getServerBuilderFactory(). Get a TypeAdapterFactory to handle ServerBuilders. static ImageServer<BufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution r",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:2433,Availability,down,downsamples,2433,"ypeAdapterFactory for ImageServers, optionally including metadata in the serialized ; form of the server. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport that is best able to open the specified image with optional args. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(ImageServerBuilder<BufferedImage> builder,; URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport associated with an ImageServerBuilder, or null if the builder does not support the image. static TypeAdapterFactory; getServerBuilderFactory(). Get a TypeAdapterFactory to handle ServerBuilders. static ImageServer<BufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one r",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3003,Availability,down,downsamples,3003,"tic TypeAdapterFactory; getServerBuilderFactory(). Get a TypeAdapterFactory to handle ServerBuilders. static ImageServer<BufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have b",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3457,Availability,down,downsamples,3457,"rap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; St",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3497,Availability,down,downsamples,3497,"rap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; St",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3714,Availability,down,downsamples,3714,"ctory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; String... args); throws IOException; Build a ImageServer for the specified URI path and optional args.; ; See buildServer(URI, String...) for more information about how args are applied. Parameters:; path - path for the image; it should be possible to convert this to a URI; args - ; Returns:; Throws:; IOException.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:4267,Availability,down,downsamples,4267,"ow-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; String... args); throws IOException; Build a ImageServer for the specified URI path and optional args.; ; See buildServer(URI, String...) for more information about how args are applied. Parameters:; path - path for the image; it should be possible to convert this to a URI; args - ; Returns:; Throws:; IOException. buildServer; public static ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws IOException; Build a ImageServer for the specified URI and optional args.; This differs from ImageServerProvider.buildServer(String, Class, String...) in two main ways:; ; it always uses BufferedImage as the server class; where possible, args that request a transformed server are applied. ; Supported arguments include; ; --classname to request an image provi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:4307,Availability,down,downsamples,4307,"ow-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; String... args); throws IOException; Build a ImageServer for the specified URI path and optional args.; ; See buildServer(URI, String...) for more information about how args are applied. Parameters:; path - path for the image; it should be possible to convert this to a URI; args - ; Returns:; Throws:; IOException. buildServer; public static ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws IOException; Build a ImageServer for the specified URI and optional args.; This differs from ImageServerProvider.buildServer(String, Class, String...) in two main ways:; ; it always uses BufferedImage as the server class; where possible, args that request a transformed server are applied. ; Supported arguments include; ; --classname to request an image provi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3406,Integrability,wrap,wrap,3406,"rap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; St",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:4145,Integrability,wrap,wrap,4145,"ow-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; String... args); throws IOException; Build a ImageServer for the specified URI path and optional args.; ; See buildServer(URI, String...) for more information about how args are applied. Parameters:; path - path for the image; it should be possible to convert this to a URI; args - ; Returns:; Throws:; IOException. buildServer; public static ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws IOException; Build a ImageServer for the specified URI and optional args.; This differs from ImageServerProvider.buildServer(String, Class, String...) in two main ways:; ; it always uses BufferedImage as the server class; where possible, args that request a transformed server are applied. ; Supported arguments include; ; --classname to request an image provi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:467,Modifiability,extend,extends,467,". ImageServers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServers. java.lang.Object; qupath.lib.images.servers.ImageServers. public class ImageServers; extends Object; Helper class for working with ImageServer objects.; ; The main use is to convert ImageServers to and from serialized representations for use within a Project. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageServers();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ImageServer<BufferedImage>; buildServer(String path,; String... args). Build a ImageServer for the specified URI path and optional args. static ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Build a ImageServer for the specified URI and optional args. static List<ImageServerBuilder.UriImageSupport<BufferedImage>>; getAllImageSupports(URI uri,; String... args). Get all ImageServerBuilder.UriImageSupport that claim to be able to open the specified URI with optional args. static TypeAdapterFactory; getImageServerTypeAdapterFactory(boolean includeMetadata). Get a TypeAdapterFactory for ImageServers, optionally including metadata in the serialized ; form of the server. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport that is best able to open the specified image with optional args. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(ImageServerBuilder<BufferedImage> builder,; URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport associated with an ImageServerBuilder, or null if the buil",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:2538,Modifiability,inherit,inherited,2538,"tatic ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport that is best able to open the specified image with optional args. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(ImageServerBuilder<BufferedImage> builder,; URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport associated with an ImageServerBuilder, or null if the builder does not support the image. static TypeAdapterFactory; getServerBuilderFactory(). Get a TypeAdapterFactory to handle ServerBuilders. static ImageServer<BufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3328,Performance,perform,performance,3328," ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the d",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:4067,Performance,perform,performance,4067,"cally generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; String... args); throws IOException; Build a ImageServer for the specified URI path and optional args.; ; See buildServer(URI, String...) for more information about how args are applied. Parameters:; path - path for the image; it should be possible to convert this to a URI; args - ; Returns:; Throws:; IOException. buildServer; public static ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws IOException; Build a ImageServer for the specified URI and optional args.; This differs from ImageServerProvider.buildServer(String, Class, String...) in two main ways:; ; it always u",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:2612,Security,hash,hashCode,2612,"(URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport that is best able to open the specified image with optional args. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(ImageServerBuilder<BufferedImage> builder,; URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport associated with an ImageServerBuilder, or null if the builder does not support the image. static TypeAdapterFactory; getServerBuilderFactory(). Get a TypeAdapterFactory to handle ServerBuilders. static ImageServer<BufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> py",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3201,Security,access,accessed,3201,"ufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typicall",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3302,Security,access,accessed,3302," ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the d",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3941,Security,access,accessed,3941,"lize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; String... args); throws IOException; Build a ImageServer for the specified URI path and optional args.; ; See buildServer(URI, String...) for more information about how args are applied. Parameters:; path - path for the image; it should be possible to convert this to a URI; args - ; Returns:; Throws:; IOException. buildServer; public static ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws IOException; Build a ImageServer f",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:4041,Security,access,accessed,4041,"cally generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); tileWidth - requested tile height; tileHeight - requested tile height; downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. buildServer; public static ImageServer<BufferedImage> buildServer(String path,; String... args); throws IOException; Build a ImageServer for the specified URI path and optional args.; ; See buildServer(URI, String...) for more information about how args are applied. Parameters:; path - path for the image; it should be possible to convert this to a URI; args - ; Returns:; Throws:; IOException. buildServer; public static ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws IOException; Build a ImageServer for the specified URI and optional args.; This differs from ImageServerProvider.buildServer(String, Class, String...) in two main ways:; ; it always u",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ImageServers.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:772,Integrability,interface,interfaces,772,". JsonImageServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class JsonImageServerBuilder. java.lang.Object; qupath.lib.images.servers.JsonImageServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class JsonImageServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; ImageServerBuilder that constructs an ImageServer from a JSON representation. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Const",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:798,Integrability,interface,interface,798,". JsonImageServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class JsonImageServerBuilder. java.lang.Object; qupath.lib.images.servers.JsonImageServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class JsonImageServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; ImageServerBuilder that constructs an ImageServer from a JSON representation. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Const",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:1924,Integrability,interface,interface,1924,"faultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String ar",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:2235,Integrability,interface,interface,2235,"uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:2461,Integrability,interface,interface,2461,"ption(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:2711,Integrability,interface,interface,2711,"ind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:2830,Integrability,interface,interface,2830,"ass java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:3051,Integrability,interface,interface,3051,"ass java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:3175,Integrability,interface,interface,3175,"ass java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:3302,Integrability,interface,interface,3302,"ass java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:3428,Integrability,interface,interface,3428,"ass java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:3565,Integrability,interface,interface,3565,"ass java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:3732,Integrability,interface,interface,3732,"ass java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:; Throws:; Exception. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:571,Modifiability,extend,extends,571,". JsonImageServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class JsonImageServerBuilder. java.lang.Object; qupath.lib.images.servers.JsonImageServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class JsonImageServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; ImageServerBuilder that constructs an ImageServer from a JSON representation. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Const",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:783,Modifiability,inherit,inherited,783,". JsonImageServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class JsonImageServerBuilder. java.lang.Object; qupath.lib.images.servers.JsonImageServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class JsonImageServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; ImageServerBuilder that constructs an ImageServer from a JSON representation. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Const",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:1770,Modifiability,inherit,inherited,1770,"aces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:1909,Modifiability,inherit,inherited,1909,"faultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String ar",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html:1844,Security,hash,hashCode,1844,"er; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; JsonImageServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder; matchClassName. Constructor Details. JsonImageServerBuilder; public JsonImageServerBuilder(). Method Details. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); throws Exception; Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/JsonImageServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:3041,Availability,down,downsample,3041,"(Map<String,Integer> labelMap). Add multiple labels by classname, where the key represents a classname and the value ; represents the integer label that should be used for annotations of the given class. LabeledImageServer.Builder; addUnclassifiedLabel(int label). Add a single label for objects that are unclassified, where the label represents the integer label used for ; annotations that have no classification set. LabeledImageServer.Builder; addUnclassifiedLabel(int label,; Integer color). Add a single label for objects that are unclassified, where the label represents the integer label used for ; annotations that have no classification set. LabeledImageServer.Builder; backgroundLabel(int label). Specify the background label (0 by default). LabeledImageServer.Builder; backgroundLabel(int label,; Integer color). Specify the background label (0 by default) and color. LabeledImageServer; build(). Build the ImageServer with the requested parameters. LabeledImageServer.Builder; downsample(double downsample). Specify downsample factor. LabeledImageServer.Builder; grayscale(). Use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; grayscale(boolean grayscaleLut). Optionally use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; lineThickness(float thickness). Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. LabeledImageServer.Builder; maxOutputChannelLimit(int maxChannels). Specify the maximum number of output channels allowed before QuPath will throw an exception. LabeledImageServer.Builder; multichannelOutput(boolean doMultichannel). If true, the output image consists of multiple binary images concatenated as different channels, ; so that the channel number relates to a classification. LabeledImageServer.Builder; setBoundaryLabel(String pathClassName,; int label). Set the classification and l",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:3059,Availability,down,downsample,3059,"(Map<String,Integer> labelMap). Add multiple labels by classname, where the key represents a classname and the value ; represents the integer label that should be used for annotations of the given class. LabeledImageServer.Builder; addUnclassifiedLabel(int label). Add a single label for objects that are unclassified, where the label represents the integer label used for ; annotations that have no classification set. LabeledImageServer.Builder; addUnclassifiedLabel(int label,; Integer color). Add a single label for objects that are unclassified, where the label represents the integer label used for ; annotations that have no classification set. LabeledImageServer.Builder; backgroundLabel(int label). Specify the background label (0 by default). LabeledImageServer.Builder; backgroundLabel(int label,; Integer color). Specify the background label (0 by default) and color. LabeledImageServer; build(). Build the ImageServer with the requested parameters. LabeledImageServer.Builder; downsample(double downsample). Specify downsample factor. LabeledImageServer.Builder; grayscale(). Use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; grayscale(boolean grayscaleLut). Optionally use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; lineThickness(float thickness). Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. LabeledImageServer.Builder; maxOutputChannelLimit(int maxChannels). Specify the maximum number of output channels allowed before QuPath will throw an exception. LabeledImageServer.Builder; multichannelOutput(boolean doMultichannel). If true, the output image consists of multiple binary images concatenated as different channels, ; so that the channel number relates to a classification. LabeledImageServer.Builder; setBoundaryLabel(String pathClassName,; int label). Set the classification and l",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:3080,Availability,down,downsample,3080,"dd multiple labels by classname, where the key represents a classname and the value ; represents the integer label that should be used for annotations of the given class. LabeledImageServer.Builder; addUnclassifiedLabel(int label). Add a single label for objects that are unclassified, where the label represents the integer label used for ; annotations that have no classification set. LabeledImageServer.Builder; addUnclassifiedLabel(int label,; Integer color). Add a single label for objects that are unclassified, where the label represents the integer label used for ; annotations that have no classification set. LabeledImageServer.Builder; backgroundLabel(int label). Specify the background label (0 by default). LabeledImageServer.Builder; backgroundLabel(int label,; Integer color). Specify the background label (0 by default) and color. LabeledImageServer; build(). Build the ImageServer with the requested parameters. LabeledImageServer.Builder; downsample(double downsample). Specify downsample factor. LabeledImageServer.Builder; grayscale(). Use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; grayscale(boolean grayscaleLut). Optionally use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; lineThickness(float thickness). Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. LabeledImageServer.Builder; maxOutputChannelLimit(int maxChannels). Specify the maximum number of output channels allowed before QuPath will throw an exception. LabeledImageServer.Builder; multichannelOutput(boolean doMultichannel). If true, the output image consists of multiple binary images concatenated as different channels, ; so that the channel number relates to a classification. LabeledImageServer.Builder; setBoundaryLabel(String pathClassName,; int label). Set the classification and label to use for boundaries for cl",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:3524,Availability,down,downsample,3524,"eServer.Builder; addUnclassifiedLabel(int label,; Integer color). Add a single label for objects that are unclassified, where the label represents the integer label used for ; annotations that have no classification set. LabeledImageServer.Builder; backgroundLabel(int label). Specify the background label (0 by default). LabeledImageServer.Builder; backgroundLabel(int label,; Integer color). Specify the background label (0 by default) and color. LabeledImageServer; build(). Build the ImageServer with the requested parameters. LabeledImageServer.Builder; downsample(double downsample). Specify downsample factor. LabeledImageServer.Builder; grayscale(). Use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; grayscale(boolean grayscaleLut). Optionally use grayscale LUT, rather than deriving colors from classifications. LabeledImageServer.Builder; lineThickness(float thickness). Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. LabeledImageServer.Builder; maxOutputChannelLimit(int maxChannels). Specify the maximum number of output channels allowed before QuPath will throw an exception. LabeledImageServer.Builder; multichannelOutput(boolean doMultichannel). If true, the output image consists of multiple binary images concatenated as different channels, ; so that the channel number relates to a classification. LabeledImageServer.Builder; setBoundaryLabel(String pathClassName,; int label). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; setBoundaryLabel(String pathClassName,; int label,; Integer color). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; setBoundaryLabel(PathClass pathClass,; int label). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; setBoundaryLabel(PathCla",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:5115,Availability,avail,available,5115,"or classified areas. LabeledImageServer.Builder; setBoundaryLabel(String pathClassName,; int label,; Integer color). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; setBoundaryLabel(PathClass pathClass,; int label). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; setBoundaryLabel(PathClass pathClass,; int label,; Integer color). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; shuffleInstanceLabels(boolean doShuffle). Optionally request that instance labels are shuffled. LabeledImageServer.Builder; tileSize(int tileSize). Set tile width and height (square tiles). LabeledImageServer.Builder; tileSize(int tileWidth,; int tileHeight). Set tile width and height. LabeledImageServer.Builder; useAnnotations(). Use annotations for labels. LabeledImageServer.Builder; useCellNuclei(). Use cells rather than annotations for labels, requesting the nucleus ROI where available. LabeledImageServer.Builder; useCells(). Use cells rather than annotations for labels. LabeledImageServer.Builder; useDetections(). Use detections rather than annotations for labels. LabeledImageServer.Builder; useFilter(Predicate<PathObject> filter). Use a custom method of selecting objects for inclusion. LabeledImageServer.Builder; useInstanceLabels(). Request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useInstanceLabels(boolean instanceLabels). Optionally request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useUniqueLabels(). Deprecated.; in favor of useInstanceLabels(). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageData<BufferedImage> imageData); Create a Builder for a LabeledImageSer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:6670,Availability,avail,available,6670,"nceLabels). Optionally request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useUniqueLabels(). Deprecated.; in favor of useInstanceLabels(). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageData<BufferedImage> imageData); Create a Builder for a LabeledImageServer for the specified ImageData. Parameters:; imageData - . Method Details. useDetections; public LabeledImageServer.Builder useDetections(); Use detections rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCells; public LabeledImageServer.Builder useCells(); Use cells rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCellNuclei; public LabeledImageServer.Builder useCellNuclei(); Use cells rather than annotations for labels, requesting the nucleus ROI where available.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useAnnotations; public LabeledImageServer.Builder useAnnotations(); Use annotations for labels. This is the default. Returns:; See Also:. useDetections(). useFilter; public LabeledImageServer.Builder useFilter(Predicate<PathObject> filter); Use a custom method of selecting objects for inclusion.; The default is to use annotations. Parameters:; filter - the filter that determines whether an object will be included or not; Returns:; See Also:. useAnnotations(). grayscale; public LabeledImageServer.Builder grayscale(); Use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Returns:; Since:; v0.4.0; See Also:. grayscale(boolean). grayscale; public LabeledImageServer.Builder grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than derivin",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:7826,Availability,down,downsample,7826,"labels. This is the default. Returns:; See Also:. useDetections(). useFilter; public LabeledImageServer.Builder useFilter(Predicate<PathObject> filter); Use a custom method of selecting objects for inclusion.; The default is to use annotations. Parameters:; filter - the filter that determines whether an object will be included or not; Returns:; See Also:. useAnnotations(). grayscale; public LabeledImageServer.Builder grayscale(); Use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Returns:; Since:; v0.4.0; See Also:. grayscale(boolean). grayscale; public LabeledImageServer.Builder grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Parameters:; grayscaleLut - ; Returns:; Since:; v0.4.0; See Also:. grayscale(). downsample; public LabeledImageServer.Builder downsample(double downsample); Specify downsample factor. This is very important because it defines ; the resolution at which shapes will be drawn and the line thickness is determined. Parameters:; downsample - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileSize); Set tile width and height (square tiles). Parameters:; tileSize - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileWidth,; int tileHeight); Set tile width and height. Parameters:; tileWidth - ; tileHeight - ; Returns:. lineThickness; public LabeledImageServer.Builder lineThickness(float thickness); Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. Parameters:; thickness - ; Returns:. useUniqueLabels; @Deprecated; public LabeledImageServer.Builder useUniqueLabels(); Deprecated.; in favor of useInstanceLabels(). Returns:. useInstanceLabels; public LabeledIma",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:7872,Availability,down,downsample,7872,"eDetections(). useFilter; public LabeledImageServer.Builder useFilter(Predicate<PathObject> filter); Use a custom method of selecting objects for inclusion.; The default is to use annotations. Parameters:; filter - the filter that determines whether an object will be included or not; Returns:; See Also:. useAnnotations(). grayscale; public LabeledImageServer.Builder grayscale(); Use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Returns:; Since:; v0.4.0; See Also:. grayscale(boolean). grayscale; public LabeledImageServer.Builder grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Parameters:; grayscaleLut - ; Returns:; Since:; v0.4.0; See Also:. grayscale(). downsample; public LabeledImageServer.Builder downsample(double downsample); Specify downsample factor. This is very important because it defines ; the resolution at which shapes will be drawn and the line thickness is determined. Parameters:; downsample - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileSize); Set tile width and height (square tiles). Parameters:; tileSize - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileWidth,; int tileHeight); Set tile width and height. Parameters:; tileWidth - ; tileHeight - ; Returns:. lineThickness; public LabeledImageServer.Builder lineThickness(float thickness); Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. Parameters:; thickness - ; Returns:. useUniqueLabels; @Deprecated; public LabeledImageServer.Builder useUniqueLabels(); Deprecated.; in favor of useInstanceLabels(). Returns:. useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(); Request that u",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:7890,Availability,down,downsample,7890,"eDetections(). useFilter; public LabeledImageServer.Builder useFilter(Predicate<PathObject> filter); Use a custom method of selecting objects for inclusion.; The default is to use annotations. Parameters:; filter - the filter that determines whether an object will be included or not; Returns:; See Also:. useAnnotations(). grayscale; public LabeledImageServer.Builder grayscale(); Use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Returns:; Since:; v0.4.0; See Also:. grayscale(boolean). grayscale; public LabeledImageServer.Builder grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Parameters:; grayscaleLut - ; Returns:; Since:; v0.4.0; See Also:. grayscale(). downsample; public LabeledImageServer.Builder downsample(double downsample); Specify downsample factor. This is very important because it defines ; the resolution at which shapes will be drawn and the line thickness is determined. Parameters:; downsample - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileSize); Set tile width and height (square tiles). Parameters:; tileSize - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileWidth,; int tileHeight); Set tile width and height. Parameters:; tileWidth - ; tileHeight - ; Returns:. lineThickness; public LabeledImageServer.Builder lineThickness(float thickness); Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. Parameters:; thickness - ; Returns:. useUniqueLabels; @Deprecated; public LabeledImageServer.Builder useUniqueLabels(); Deprecated.; in favor of useInstanceLabels(). Returns:. useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(); Request that u",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:7911,Availability,down,downsample,7911,"eDetections(). useFilter; public LabeledImageServer.Builder useFilter(Predicate<PathObject> filter); Use a custom method of selecting objects for inclusion.; The default is to use annotations. Parameters:; filter - the filter that determines whether an object will be included or not; Returns:; See Also:. useAnnotations(). grayscale; public LabeledImageServer.Builder grayscale(); Use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Returns:; Since:; v0.4.0; See Also:. grayscale(boolean). grayscale; public LabeledImageServer.Builder grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Parameters:; grayscaleLut - ; Returns:; Since:; v0.4.0; See Also:. grayscale(). downsample; public LabeledImageServer.Builder downsample(double downsample); Specify downsample factor. This is very important because it defines ; the resolution at which shapes will be drawn and the line thickness is determined. Parameters:; downsample - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileSize); Set tile width and height (square tiles). Parameters:; tileSize - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileWidth,; int tileHeight); Set tile width and height. Parameters:; tileWidth - ; tileHeight - ; Returns:. lineThickness; public LabeledImageServer.Builder lineThickness(float thickness); Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. Parameters:; thickness - ; Returns:. useUniqueLabels; @Deprecated; public LabeledImageServer.Builder useUniqueLabels(); Deprecated.; in favor of useInstanceLabels(). Returns:. useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(); Request that u",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:8070,Availability,down,downsample,8070," annotations. Parameters:; filter - the filter that determines whether an object will be included or not; Returns:; See Also:. useAnnotations(). grayscale; public LabeledImageServer.Builder grayscale(); Use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Returns:; Since:; v0.4.0; See Also:. grayscale(boolean). grayscale; public LabeledImageServer.Builder grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Parameters:; grayscaleLut - ; Returns:; Since:; v0.4.0; See Also:. grayscale(). downsample; public LabeledImageServer.Builder downsample(double downsample); Specify downsample factor. This is very important because it defines ; the resolution at which shapes will be drawn and the line thickness is determined. Parameters:; downsample - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileSize); Set tile width and height (square tiles). Parameters:; tileSize - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileWidth,; int tileHeight); Set tile width and height. Parameters:; tileWidth - ; tileHeight - ; Returns:. lineThickness; public LabeledImageServer.Builder lineThickness(float thickness); Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. Parameters:; thickness - ; Returns:. useUniqueLabels; @Deprecated; public LabeledImageServer.Builder useUniqueLabels(); Deprecated.; in favor of useInstanceLabels(). Returns:. useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(); Request that unique labels are used for all objects, rather than classifications.; If this flag is set, all other label requests are ignored. Returns:; See Also:. useInstanceLabels(boolean); s",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:8601,Availability,down,downsample,8601,"r grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Parameters:; grayscaleLut - ; Returns:; Since:; v0.4.0; See Also:. grayscale(). downsample; public LabeledImageServer.Builder downsample(double downsample); Specify downsample factor. This is very important because it defines ; the resolution at which shapes will be drawn and the line thickness is determined. Parameters:; downsample - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileSize); Set tile width and height (square tiles). Parameters:; tileSize - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileWidth,; int tileHeight); Set tile width and height. Parameters:; tileWidth - ; tileHeight - ; Returns:. lineThickness; public LabeledImageServer.Builder lineThickness(float thickness); Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. Parameters:; thickness - ; Returns:. useUniqueLabels; @Deprecated; public LabeledImageServer.Builder useUniqueLabels(); Deprecated.; in favor of useInstanceLabels(). Returns:. useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(); Request that unique labels are used for all objects, rather than classifications.; If this flag is set, all other label requests are ignored. Returns:; See Also:. useInstanceLabels(boolean); shuffleInstanceLabels(boolean). useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(boolean instanceLabels); Optionally request that unique labels are used for all objects, rather than classifications.; If this flag is set, all other label requests are ignored. Parameters:; instanceLabels - ; Returns:; Since:; v0.4.0; See Also:. useInstanceLabels(); shuffleInstanceLabels(boolean). shuffleInstanceLabels; public LabeledImageServer.Builder shuffl",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:10233,Energy Efficiency,efficient,efficient,10233,"l objects, rather than classifications.; If this flag is set, all other label requests are ignored. Parameters:; instanceLabels - ; Returns:; Since:; v0.4.0; See Also:. useInstanceLabels(); shuffleInstanceLabels(boolean). shuffleInstanceLabels; public LabeledImageServer.Builder shuffleInstanceLabels(boolean doShuffle); Optionally request that instance labels are shuffled.; Default is true.; Only has an effect if useInstanceLabels(boolean) is called with true. Parameters:; doShuffle - ; Returns:; Since:; v0.4.0; See Also:. useInstanceLabels(); useInstanceLabels(boolean). multichannelOutput; public LabeledImageServer.Builder multichannelOutput(boolean doMultichannel); If true, the output image consists of multiple binary images concatenated as different channels, ; so that the channel number relates to a classification.; If false, the output image is a single-channel indexed image so that each pixel value relates to ; a classification.; Indexed images are much more efficient, but are unable to support more than one classification per pixel. Parameters:; doMultichannel - ; Returns:. backgroundLabel; public LabeledImageServer.Builder backgroundLabel(int label); Specify the background label (0 by default). Parameters:; label - ; Returns:. backgroundLabel; public LabeledImageServer.Builder backgroundLabel(int label,; Integer color); Specify the background label (0 by default) and color. Parameters:; label - ; color - ; Returns:. addLabelsByName; public LabeledImageServer.Builder addLabelsByName(Map<String,Integer> labelMap); Add multiple labels by classname, where the key represents a classname and the value ; represents the integer label that should be used for annotations of the given class. Parameters:; labelMap - ; Returns:. addLabels; public LabeledImageServer.Builder addLabels(Map<PathClass,Integer> labelMap); Add multiple labels by PathClass, where the key represents a PathClass and the value ; represents the integer label that should be used for annotations of the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:568,Modifiability,extend,extends,568,". LabeledImageServer.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class LabeledImageServer.Builder. java.lang.Object; qupath.lib.images.servers.LabeledImageServer.Builder. Enclosing class:; LabeledImageServer. public static class LabeledImageServer.Builder; extends Object; Helper class for building a LabeledImageServer. Constructor Summary; Constructors. Constructor; Description; Builder(ImageData<BufferedImage> imageData). Create a Builder for a LabeledImageServer for the specified ImageData. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; LabeledImageServer.Builder; addLabel(String pathClassName,; int label). Add a single label by classname, where the label represents the integer label used for ; annotations with the given classname. LabeledImageServer.Builder; addLabel(String pathClassName,; int label,; Integer color). Add a single label by classname, where the label represents the integer label used for ; annotations with the given classname. LabeledImageServer.Builder; addLabel(PathClass pathClass,; int label). Add a single label by PathClass, where the label represents the integer label used for ; annotations with the given classification. LabeledImageServer.Builder; addLabel(PathClass pathClass,; int label,; Integer color). Add a single label by PathClass, where the label represents the integer label used for ; annotations with the given classification. LabeledImageServer.Builder; addLabels(Map<PathClass,Integer> labelMap). Add multiple labels by PathClass, where the key represents a PathClass and the value ; represents the integer label that should be used for annotations of the given ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:5829,Modifiability,inherit,inherited,5829,"r.Builder; tileSize(int tileWidth,; int tileHeight). Set tile width and height. LabeledImageServer.Builder; useAnnotations(). Use annotations for labels. LabeledImageServer.Builder; useCellNuclei(). Use cells rather than annotations for labels, requesting the nucleus ROI where available. LabeledImageServer.Builder; useCells(). Use cells rather than annotations for labels. LabeledImageServer.Builder; useDetections(). Use detections rather than annotations for labels. LabeledImageServer.Builder; useFilter(Predicate<PathObject> filter). Use a custom method of selecting objects for inclusion. LabeledImageServer.Builder; useInstanceLabels(). Request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useInstanceLabels(boolean instanceLabels). Optionally request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useUniqueLabels(). Deprecated.; in favor of useInstanceLabels(). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageData<BufferedImage> imageData); Create a Builder for a LabeledImageServer for the specified ImageData. Parameters:; imageData - . Method Details. useDetections; public LabeledImageServer.Builder useDetections(); Use detections rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCells; public LabeledImageServer.Builder useCells(); Use cells rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCellNuclei; public LabeledImageServer.Builder useCellNuclei(); Use cells rather than annotations for labels, requesting the nucleus ROI where available.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useAnnotations; public LabeledImageServer.Builder useAnnotations(); Use annotation",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:5261,Safety,detect,detections,5261,"ImageServer.Builder; setBoundaryLabel(PathClass pathClass,; int label). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; setBoundaryLabel(PathClass pathClass,; int label,; Integer color). Set the classification and label to use for boundaries for classified areas. LabeledImageServer.Builder; shuffleInstanceLabels(boolean doShuffle). Optionally request that instance labels are shuffled. LabeledImageServer.Builder; tileSize(int tileSize). Set tile width and height (square tiles). LabeledImageServer.Builder; tileSize(int tileWidth,; int tileHeight). Set tile width and height. LabeledImageServer.Builder; useAnnotations(). Use annotations for labels. LabeledImageServer.Builder; useCellNuclei(). Use cells rather than annotations for labels, requesting the nucleus ROI where available. LabeledImageServer.Builder; useCells(). Use cells rather than annotations for labels. LabeledImageServer.Builder; useDetections(). Use detections rather than annotations for labels. LabeledImageServer.Builder; useFilter(Predicate<PathObject> filter). Use a custom method of selecting objects for inclusion. LabeledImageServer.Builder; useInstanceLabels(). Request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useInstanceLabels(boolean instanceLabels). Optionally request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useUniqueLabels(). Deprecated.; in favor of useInstanceLabels(). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageData<BufferedImage> imageData); Create a Builder for a LabeledImageServer for the specified ImageData. Parameters:; imageData - . Method Details. useDetections; public LabeledImageServer.Builder useDetections(); Use detections rather than annotations for labels.; The defa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:6226,Safety,detect,detections,6226,"lder; useDetections(). Use detections rather than annotations for labels. LabeledImageServer.Builder; useFilter(Predicate<PathObject> filter). Use a custom method of selecting objects for inclusion. LabeledImageServer.Builder; useInstanceLabels(). Request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useInstanceLabels(boolean instanceLabels). Optionally request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useUniqueLabels(). Deprecated.; in favor of useInstanceLabels(). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageData<BufferedImage> imageData); Create a Builder for a LabeledImageServer for the specified ImageData. Parameters:; imageData - . Method Details. useDetections; public LabeledImageServer.Builder useDetections(); Use detections rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCells; public LabeledImageServer.Builder useCells(); Use cells rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCellNuclei; public LabeledImageServer.Builder useCellNuclei(); Use cells rather than annotations for labels, requesting the nucleus ROI where available.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useAnnotations; public LabeledImageServer.Builder useAnnotations(); Use annotations for labels. This is the default. Returns:; See Also:. useDetections(). useFilter; public LabeledImageServer.Builder useFilter(Predicate<PathObject> filter); Use a custom method of selecting objects for inclusion.; The default is to use annotations. Parameters:; filter - the filter that determines whether an object will be included or not; Returns:; See Also:. useAnnotations(). grayscale; publ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:5903,Security,hash,hashCode,5903,"height. LabeledImageServer.Builder; useAnnotations(). Use annotations for labels. LabeledImageServer.Builder; useCellNuclei(). Use cells rather than annotations for labels, requesting the nucleus ROI where available. LabeledImageServer.Builder; useCells(). Use cells rather than annotations for labels. LabeledImageServer.Builder; useDetections(). Use detections rather than annotations for labels. LabeledImageServer.Builder; useFilter(Predicate<PathObject> filter). Use a custom method of selecting objects for inclusion. LabeledImageServer.Builder; useInstanceLabels(). Request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useInstanceLabels(boolean instanceLabels). Optionally request that unique labels are used for all objects, rather than classifications. LabeledImageServer.Builder; useUniqueLabels(). Deprecated.; in favor of useInstanceLabels(). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageData<BufferedImage> imageData); Create a Builder for a LabeledImageServer for the specified ImageData. Parameters:; imageData - . Method Details. useDetections; public LabeledImageServer.Builder useDetections(); Use detections rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCells; public LabeledImageServer.Builder useCells(); Use cells rather than annotations for labels.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useCellNuclei; public LabeledImageServer.Builder useCellNuclei(); Use cells rather than annotations for labels, requesting the nucleus ROI where available.; The default is to use annotations. Returns:; See Also:. useAnnotations(). useAnnotations; public LabeledImageServer.Builder useAnnotations(); Use annotations for labels. This is the default. Returns:; See Also:. useDetections().",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:2016,Availability,avail,available,2016,"onding ; stored and classified annotations.; ; Warning! This is intend for temporary use when exporting labelled images. No attempt is made to ; respond to changes within the hierarchy. For consistent results, the hierarchy must remain static for the ; time in which this server is being used. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; LabeledImageServer.Builder. Helper class for building a LabeledImageServer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). Map<PathClass,Integer>; getBoundaryLabels(). Get an unmodifiable map of classifications and their corresponding boundary labels, if available. Map<PathObject,Integer>; getInstanceLabels(). Get a mapping between objects and instance labels. Map<PathClass,Integer>; getLabels(). Get an unmodifiable map of classifications and their corresponding labels. List<PathObject>; getObjectsForRegion(ImageRegion region). Get the objects to be painted that fall within a specified region. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. boolean; isEmptyRegion(RegionRequest request). Returns true if there are no objects to be painted within the requested region. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. void; setMetadata(ImageServerMetadata metadata). Throws an exception - metadata shou",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:4434,Availability,avail,available,4434,"wnsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collect",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:4763,Availability,avail,available,4763,", wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatena",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:4967,Availability,avail,available,4967,"uilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specifi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:5107,Availability,avail,available,5107,"Manager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. isEmp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:3796,Integrability,interface,interface,3796,"uested region. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. void; setMetadata(ImageServerMetadata metadata). Throws an exception - metadata should not be set for a hierarchy image server directly. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:5461,Integrability,interface,interface,5461,"rver.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Returns true if there are no objects to be painted within the requested region.; . Specified by:; isEmptyRegion in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:5716,Integrability,depend,depend,5716," the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Returns true if there are no objects to be painted within the requested region.; . Specified by:; isEmptyRegion in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to ma",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:5912,Integrability,interface,interface,5912," and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Returns true if there are no objects to be painted within the requested region.; . Specified by:; isEmptyRegion in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to match isEmptyRegion(RegionRequest); in other worse, an object might fall outside the region ; but still influence an image type because of thick lines being drawn.; If thicker lines should influence the result, the region should be padde",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:6277,Integrability,interface,interface,6277,"uilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Returns true if there are no objects to be painted within the requested region.; . Specified by:; isEmptyRegion in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to match isEmptyRegion(RegionRequest); in other worse, an object might fall outside the region ; but still influence an image type because of thick lines being drawn.; If thicker lines should influence the result, the region should be padded accordingly. Parameters:; region - ; Returns:; a list of objects with ROIs that intersect the specified region. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name o",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:7088,Integrability,interface,interface,7088,"lean isEmptyRegion(RegionRequest request); Returns true if there are no objects to be painted within the requested region.; . Specified by:; isEmptyRegion in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to match isEmptyRegion(RegionRequest); in other worse, an object might fall outside the region ; but still influence an image type because of thick lines being drawn.; If thicker lines should influence the result, the region should be padded accordingly. Parameters:; region - ; Returns:; a list of objects with ROIs that intersect the specified region. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Throws an exception - metadata should not be set for a hierarchy image server directly. Any changes should be made to the underlying; image server for which this server represents an object hierarchy. Specified by:; setMetadata in interface ImageServer<Bu",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:7246,Integrability,interface,interface,7246,"in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to match isEmptyRegion(RegionRequest); in other worse, an object might fall outside the region ; but still influence an image type because of thick lines being drawn.; If thicker lines should influence the result, the region should be padded accordingly. Parameters:; region - ; Returns:; a list of objects with ROIs that intersect the specified region. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Throws an exception - metadata should not be set for a hierarchy image server directly. Any changes should be made to the underlying; image server for which this server represents an object hierarchy. Specified by:; setMetadata in interface ImageServer<BufferedImage>; Overrides:; setMetadata in class AbstractImageServer<BufferedImage>; Parameters:; metadata - . createDefaultRGBImage; protected BufferedImage ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:7411,Integrability,interface,interface,7411,":. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to match isEmptyRegion(RegionRequest); in other worse, an object might fall outside the region ; but still influence an image type because of thick lines being drawn.; If thicker lines should influence the result, the region should be padded accordingly. Parameters:; region - ; Returns:; a list of objects with ROIs that intersect the specified region. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Throws an exception - metadata should not be set for a hierarchy image server directly. Any changes should be made to the underlying; image server for which this server represents an object hierarchy. Specified by:; setMetadata in interface ImageServer<BufferedImage>; Overrides:; setMetadata in class AbstractImageServer<BufferedImage>; Parameters:; metadata - . createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Description copied from class: AbstractTileableImageServer; Create the default (blank) RGB image",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:7554,Integrability,interface,interface,7554,"ithin a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to match isEmptyRegion(RegionRequest); in other worse, an object might fall outside the region ; but still influence an image type because of thick lines being drawn.; If thicker lines should influence the result, the region should be padded accordingly. Parameters:; region - ; Returns:; a list of objects with ROIs that intersect the specified region. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Throws an exception - metadata should not be set for a hierarchy image server directly. Any changes should be made to the underlying; image server for which this server represents an object hierarchy. Specified by:; setMetadata in interface ImageServer<BufferedImage>; Overrides:; setMetadata in class AbstractImageServer<BufferedImage>; Parameters:; metadata - . createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Description copied from class: AbstractTileableImageServer; Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:7710,Integrability,interface,interface,7710,"; in other worse, an object might fall outside the region ; but still influence an image type because of thick lines being drawn.; If thicker lines should influence the result, the region should be padded accordingly. Parameters:; region - ; Returns:; a list of objects with ROIs that intersect the specified region. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Throws an exception - metadata should not be set for a hierarchy image server directly. Any changes should be made to the underlying; image server for which this server represents an object hierarchy. Specified by:; setMetadata in interface ImageServer<BufferedImage>; Overrides:; setMetadata in class AbstractImageServer<BufferedImage>; Parameters:; metadata - . createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Description copied from class: AbstractTileableImageServer; Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Overrides:; createDefaultRGBImage in class AbstractTileableImageServer; Parameters:; width - ; height - ; Returns:. readTile; protected BufferedImage readTi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:8095,Integrability,interface,interface,8095,"of objects with ROIs that intersect the specified region. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). setMetadata; public void setMetadata(ImageServerMetadata metadata); Throws an exception - metadata should not be set for a hierarchy image server directly. Any changes should be made to the underlying; image server for which this server represents an object hierarchy. Specified by:; setMetadata in interface ImageServer<BufferedImage>; Overrides:; setMetadata in class AbstractImageServer<BufferedImage>; Parameters:; metadata - . createDefaultRGBImage; protected BufferedImage createDefaultRGBImage(int width,; int height); Description copied from class: AbstractTileableImageServer; Create the default (blank) RGB image for this server.; ; By default this will have TYPE_INT_RGB but a subclass may change this if necessary ; (e.g. to incorporate an alpha channel). Overrides:; createDefaultRGBImage in class AbstractTileableImageServer; Parameters:; width - ; height - ; Returns:. readTile; protected BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:718,Modifiability,extend,extends,718,". LabeledImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class LabeledImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.LabeledImageServer. All Implemented Interfaces:; AutoCloseable, GeneratingImageServer<BufferedImage>, ImageServer<BufferedImage>. public class LabeledImageServer; extends AbstractTileableImageServer; implements GeneratingImageServer<BufferedImage>; A special ImageServer implementation that doesn't have a backing image, but rather; constructs tiles from a PathObjectHierarchy where pixel values are integer labels corresponding ; stored and classified annotations.; ; Warning! This is intend for temporary use when exporting labelled images. No attempt is made to ; respond to changes within the hierarchy. For consistent results, the hierarchy must remain static for the ; time in which this server is being used. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; LabeledImageServer.Builder. Helper class for building a LabeledImageServer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected BufferedImage; createDefaultRGBImage(int width,; int height). Create the default (blank) RGB image for this server. protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). Map<PathClass,Integer>; getBoundaryLabels(). Get an unmodifiable map of classifications and their corresponding bound",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:3038,Modifiability,inherit,inherited,3038,"er>; getInstanceLabels(). Get a mapping between objects and instance labels. Map<PathClass,Integer>; getLabels(). Get an unmodifiable map of classifications and their corresponding labels. List<PathObject>; getObjectsForRegion(ImageRegion region). Get the objects to be painted that fall within a specified region. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. boolean; isEmptyRegion(RegionRequest request). Returns true if there are no objects to be painted within the requested region. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. void; setMetadata(ImageServerMetadata metadata). Throws an exception - metadata should not be set for a hierarchy image server directly. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, ge",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:3219,Modifiability,inherit,inherited,3219,"labels. List<PathObject>; getObjectsForRegion(ImageRegion region). Get the objects to be painted that fall within a specified region. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. boolean; isEmptyRegion(RegionRequest request). Returns true if there are no objects to be painted within the requested region. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. void; setMetadata(ImageServerMetadata metadata). Throws an exception - metadata should not be set for a hierarchy image server directly. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. M",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:3662,Modifiability,inherit,inherited,3662,"s server. boolean; isEmptyRegion(RegionRequest request). Returns true if there are no objects to be painted within the requested region. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. void; setMetadata(ImageServerMetadata metadata). Throws an exception - metadata should not be set for a hierarchy image server directly. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:3781,Modifiability,inherit,inherited,3781,"uested region. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. void; setMetadata(ImageServerMetadata metadata). Throws an exception - metadata should not be set for a hierarchy image server directly. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:3726,Security,hash,hashCode,3726,"ns true if there are no objects to be painted within the requested region. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. void; setMetadata(ImageServerMetadata metadata). Throws an exception - metadata should not be set for a hierarchy image server directly. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of lab",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:5544,Usability,simpl,simplest,5544,"fiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Returns true if there are no objects to be painted within the requested region.; . Specified by:; isEmptyRegion in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note t",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:5836,Usability,simpl,simple,5836,"abels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Returns true if there are no objects to be painted within the requested region.; . Specified by:; isEmptyRegion in interface ImageServer<BufferedImage>; Overrides:; isEmptyRegion in class AbstractImageServer<BufferedImage>; Parameters:; request - ; Returns:. getObjectsForRegion; public List<PathObject> getObjectsForRegion(ImageRegion region); Get the objects to be painted that fall within a specified region.; Note that this does not take into consideration line thickness, and therefore results are not guaranteed ; to match isEmptyRegion(RegionRequest); in other worse, an object might fall outside the region ; but still influence an image type because of",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:460,Integrability,interface,interface,460,". qupath.lib.images.servers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers. package qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath.; ; ImageServer is the key interface for ; requesting pixels and metadata.; Implementations may be backed by specific image reading libraries, or optionally wrap around other ; ImageServers to perform additional transforms. Related Packages. Package; Description; qupath.lib.images. Defines the ImageData class to represent the key data associated with an analyzed image. qupath.lib.images.servers.bioformats. Read images using Bio-Formats (https://www.openmicroscopy.org/bio-formats/). qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). qupath.lib.images.writers. Supports for writing images of various kinds in various ways. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractImageServer<T>. Abstract implementation of ImageServer providing some common functionality. AbstractTileableImageServer. Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles. AffineTransformImageServer. ImageServer that dynamically applies an AffineTransform to an existing ImageServer. ChannelTransformFeatureServer. A TransformingImageServer that applies color transforms to generate channels. ColorTransforms. Color transforms that may be used to extract single-channel images from BufferedImages. ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. CroppedImageServer. ImageServer tha",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:590,Integrability,wrap,wrap,590,". qupath.lib.images.servers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers. package qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath.; ; ImageServer is the key interface for ; requesting pixels and metadata.; Implementations may be backed by specific image reading libraries, or optionally wrap around other ; ImageServers to perform additional transforms. Related Packages. Package; Description; qupath.lib.images. Defines the ImageData class to represent the key data associated with an analyzed image. qupath.lib.images.servers.bioformats. Read images using Bio-Formats (https://www.openmicroscopy.org/bio-formats/). qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). qupath.lib.images.writers. Supports for writing images of various kinds in various ways. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractImageServer<T>. Abstract implementation of ImageServer providing some common functionality. AbstractTileableImageServer. Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles. AffineTransformImageServer. ImageServer that dynamically applies an AffineTransform to an existing ImageServer. ChannelTransformFeatureServer. A TransformingImageServer that applies color transforms to generate channels. ColorTransforms. Color transforms that may be used to extract single-channel images from BufferedImages. ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. CroppedImageServer. ImageServer tha",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:2487,Integrability,interface,interface,2487,"hannelTransformFeatureServer. A TransformingImageServer that applies color transforms to generate channels. ColorTransforms. Color transforms that may be used to extract single-channel images from BufferedImages. ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. CroppedImageServer. ImageServer that treats a particular sub-region of another ImageServer as a full image, ; i.e. FileFormatInfo. Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data. FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. GeneratingImageServer<T>. Marker interface to indicate that this ImageServer generates tiles on request. ImageChannel. The name and display color for a single image channel. ImageServer<T>. Generic ImageServer, able to return pixels and metadata. ImageServerBuilder<T>. Helper class for creating ImageServers from a given URI and optional argument list. ImageServerBuilder.AbstractServerBuilder<T>. Abstract ServerBuilder implementation that handles metadata. ImageServerBuilder.DefaultImageServerBuilder<T>. Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. ImageServerBuilder.ServerBuilder<T>. Interface that defines a class encapsulating all that is required to build an ImageServer. ImageServerBuilder.UriImageSupport<T>. Helper class to summarize which ImageServers can be build by a particular ImageServerBuilder ; for a given URI, and a level of confidence. ImageServerMetadata. Class for storing primary ImageServer metadata fields. ImageS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:4848,Integrability,wrap,wraps,4848,"mageResolutionLevel to represent pyramidal resolutions. ImageServerProvider. Service provider for creating ImageServers from a given path - which may be a file path or URL. ImageServers. Helper class for working with ImageServer objects. JsonImageServerBuilder. ImageServerBuilder that constructs an ImageServer from a JSON representation. LabeledImageServer. A special ImageServer implementation that doesn't have a backing image, but rather; constructs tiles from a PathObjectHierarchy where pixel values are integer labels corresponding ; stored and classified annotations. LabeledImageServer.Builder. Helper class for building a LabeledImageServer. PixelCalibration. Class used to represent pixel sizes. PixelCalibration.Builder. Builder class for PixelCalibration objects. PixelType. Image bit-depths and types. RearrangeRGBImageServer. Simple image server to swap the red and blue channels of an RGB image. RotatedImageServer. ImageServer that wraps another ImageServer, but intercepts region requests to ; effectively rotate the image by 90, 180 or 270 degrees. RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. ServerTools. Static methods helpful when dealing with ImageServers. SparseImageServer. An ImageServer that combines regions from multiple separate ImageServers, ; repositioning these as necessary to generate one larger field of view. SparseImageServer.Builder. Builder to create a new SparseImageServer. SparseImageServer.SparseImageServerManager. Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions. TileRequest. A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution. TileRequestManager. Helper class to manage tile requests from an ImageServer. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:5549,Integrability,wrap,wrapper,5549,"geServers. Helper class for working with ImageServer objects. JsonImageServerBuilder. ImageServerBuilder that constructs an ImageServer from a JSON representation. LabeledImageServer. A special ImageServer implementation that doesn't have a backing image, but rather; constructs tiles from a PathObjectHierarchy where pixel values are integer labels corresponding ; stored and classified annotations. LabeledImageServer.Builder. Helper class for building a LabeledImageServer. PixelCalibration. Class used to represent pixel sizes. PixelCalibration.Builder. Builder class for PixelCalibration objects. PixelType. Image bit-depths and types. RearrangeRGBImageServer. Simple image server to swap the red and blue channels of an RGB image. RotatedImageServer. ImageServer that wraps another ImageServer, but intercepts region requests to ; effectively rotate the image by 90, 180 or 270 degrees. RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. ServerTools. Static methods helpful when dealing with ImageServers. SparseImageServer. An ImageServer that combines regions from multiple separate ImageServers, ; repositioning these as necessary to generate one larger field of view. SparseImageServer.Builder. Builder to create a new SparseImageServer. SparseImageServer.SparseImageServerManager. Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions. TileRequest. A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution. TileRequestManager. Helper class to manage tile requests from an ImageServer. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageServer implementation used to apply transforms to another ImageServer. WrappedBufferedImageServer. Implementation of an ImageServer that simply wraps an existing BufferedImage. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:5839,Integrability,wrap,wrapped,5839,"geServers. Helper class for working with ImageServer objects. JsonImageServerBuilder. ImageServerBuilder that constructs an ImageServer from a JSON representation. LabeledImageServer. A special ImageServer implementation that doesn't have a backing image, but rather; constructs tiles from a PathObjectHierarchy where pixel values are integer labels corresponding ; stored and classified annotations. LabeledImageServer.Builder. Helper class for building a LabeledImageServer. PixelCalibration. Class used to represent pixel sizes. PixelCalibration.Builder. Builder class for PixelCalibration objects. PixelType. Image bit-depths and types. RearrangeRGBImageServer. Simple image server to swap the red and blue channels of an RGB image. RotatedImageServer. ImageServer that wraps another ImageServer, but intercepts region requests to ; effectively rotate the image by 90, 180 or 270 degrees. RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. ServerTools. Static methods helpful when dealing with ImageServers. SparseImageServer. An ImageServer that combines regions from multiple separate ImageServers, ; repositioning these as necessary to generate one larger field of view. SparseImageServer.Builder. Builder to create a new SparseImageServer. SparseImageServer.SparseImageServerManager. Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions. TileRequest. A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution. TileRequestManager. Helper class to manage tile requests from an ImageServer. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageServer implementation used to apply transforms to another ImageServer. WrappedBufferedImageServer. Implementation of an ImageServer that simply wraps an existing BufferedImage. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:6041,Integrability,wrap,wraps,6041,"geServers. Helper class for working with ImageServer objects. JsonImageServerBuilder. ImageServerBuilder that constructs an ImageServer from a JSON representation. LabeledImageServer. A special ImageServer implementation that doesn't have a backing image, but rather; constructs tiles from a PathObjectHierarchy where pixel values are integer labels corresponding ; stored and classified annotations. LabeledImageServer.Builder. Helper class for building a LabeledImageServer. PixelCalibration. Class used to represent pixel sizes. PixelCalibration.Builder. Builder class for PixelCalibration objects. PixelType. Image bit-depths and types. RearrangeRGBImageServer. Simple image server to swap the red and blue channels of an RGB image. RotatedImageServer. ImageServer that wraps another ImageServer, but intercepts region requests to ; effectively rotate the image by 90, 180 or 270 degrees. RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. ServerTools. Static methods helpful when dealing with ImageServers. SparseImageServer. An ImageServer that combines regions from multiple separate ImageServers, ; repositioning these as necessary to generate one larger field of view. SparseImageServer.Builder. Builder to create a new SparseImageServer. SparseImageServer.SparseImageServerManager. Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions. TileRequest. A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution. TileRequestManager. Helper class to manage tile requests from an ImageServer. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageServer implementation used to apply transforms to another ImageServer. WrappedBufferedImageServer. Implementation of an ImageServer that simply wraps an existing BufferedImage. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:626,Performance,perform,perform,626,". qupath.lib.images.servers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers. package qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath.; ; ImageServer is the key interface for ; requesting pixels and metadata.; Implementations may be backed by specific image reading libraries, or optionally wrap around other ; ImageServers to perform additional transforms. Related Packages. Package; Description; qupath.lib.images. Defines the ImageData class to represent the key data associated with an analyzed image. qupath.lib.images.servers.bioformats. Read images using Bio-Formats (https://www.openmicroscopy.org/bio-formats/). qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). qupath.lib.images.writers. Supports for writing images of various kinds in various ways. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractImageServer<T>. Abstract implementation of ImageServer providing some common functionality. AbstractTileableImageServer. Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles. AffineTransformImageServer. ImageServer that dynamically applies an AffineTransform to an existing ImageServer. ChannelTransformFeatureServer. A TransformingImageServer that applies color transforms to generate channels. ColorTransforms. Color transforms that may be used to extract single-channel images from BufferedImages. ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. CroppedImageServer. ImageServer tha",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:2230,Performance,perform,performing,2230,"ctImageServer<T>. Abstract implementation of ImageServer providing some common functionality. AbstractTileableImageServer. Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles. AffineTransformImageServer. ImageServer that dynamically applies an AffineTransform to an existing ImageServer. ChannelTransformFeatureServer. A TransformingImageServer that applies color transforms to generate channels. ColorTransforms. Color transforms that may be used to extract single-channel images from BufferedImages. ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. CroppedImageServer. ImageServer that treats a particular sub-region of another ImageServer as a full image, ; i.e. FileFormatInfo. Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data. FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that may be extracted from an image file ; to help ascertain whether an ImageServerBuilder can handle it. GeneratingImageServer<T>. Marker interface to indicate that this ImageServer generates tiles on request. ImageChannel. The name and display color for a single image channel. ImageServer<T>. Generic ImageServer, able to return pixels and metadata. ImageServerBuilder<T>. Helper class for creating ImageServers from a given URI and optional argument list. ImageServerBuilder.AbstractServerBuilder<T>. Abstract ServerBuilder implementation that handles metadata. ImageServerBuilder.DefaultImageServerBuilder<T>. Default ImageServerBuilder.ServerBuilder that requires a URI and (optional) array of String arguments to create an ImageServer ; with the help of a ImageServerBuilder. ImageServerBuilder.ServerBuilder<T>. Interface that d",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:393,Security,access,accessing,393,". qupath.lib.images.servers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers. package qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath.; ; ImageServer is the key interface for ; requesting pixels and metadata.; Implementations may be backed by specific image reading libraries, or optionally wrap around other ; ImageServers to perform additional transforms. Related Packages. Package; Description; qupath.lib.images. Defines the ImageData class to represent the key data associated with an analyzed image. qupath.lib.images.servers.bioformats. Read images using Bio-Formats (https://www.openmicroscopy.org/bio-formats/). qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). qupath.lib.images.writers. Supports for writing images of various kinds in various ways. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractImageServer<T>. Abstract implementation of ImageServer providing some common functionality. AbstractTileableImageServer. Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles. AffineTransformImageServer. ImageServer that dynamically applies an AffineTransform to an existing ImageServer. ChannelTransformFeatureServer. A TransformingImageServer that applies color transforms to generate channels. ColorTransforms. Color transforms that may be used to extract single-channel images from BufferedImages. ColorTransforms.ColorTransform. Interface defining a color transform that can extract a float values from a BufferedImage. ColorTransforms.ColorTransformTypeAdapter. TypeAdapter to support serializing a ColorTransforms.ColorTransform. CroppedImageServer. ImageServer tha",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html:6034,Usability,simpl,simply,6034,"geServers. Helper class for working with ImageServer objects. JsonImageServerBuilder. ImageServerBuilder that constructs an ImageServer from a JSON representation. LabeledImageServer. A special ImageServer implementation that doesn't have a backing image, but rather; constructs tiles from a PathObjectHierarchy where pixel values are integer labels corresponding ; stored and classified annotations. LabeledImageServer.Builder. Helper class for building a LabeledImageServer. PixelCalibration. Class used to represent pixel sizes. PixelCalibration.Builder. Builder class for PixelCalibration objects. PixelType. Image bit-depths and types. RearrangeRGBImageServer. Simple image server to swap the red and blue channels of an RGB image. RotatedImageServer. ImageServer that wraps another ImageServer, but intercepts region requests to ; effectively rotate the image by 90, 180 or 270 degrees. RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. ServerTools. Static methods helpful when dealing with ImageServers. SparseImageServer. An ImageServer that combines regions from multiple separate ImageServers, ; repositioning these as necessary to generate one larger field of view. SparseImageServer.Builder. Builder to create a new SparseImageServer. SparseImageServer.SparseImageServerManager. Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions. TileRequest. A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution. TileRequestManager. Helper class to manage tile requests from an ImageServer. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageServer implementation used to apply transforms to another ImageServer. WrappedBufferedImageServer. Implementation of an ImageServer that simply wraps an existing BufferedImage. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html:558,Modifiability,extend,extends,558,". PixelCalibration.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class PixelCalibration.Builder. java.lang.Object; qupath.lib.images.servers.PixelCalibration.Builder. Enclosing class:; PixelCalibration. public static class PixelCalibration.Builder; extends Object; Builder class for PixelCalibration objects. Constructor Summary; Constructors. Constructor; Description; Builder(). Create a new builder with default (uncalibrated) values. Builder(PixelCalibration cal). Create a new builder, initialized values of an existing PixelCalibration. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; PixelCalibration; build(). Build PixelCalibration object. PixelCalibration.Builder; pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel width and height in microns (the most common calibration value). PixelCalibration.Builder; timepoints(TimeUnit timeUnit,; double... timepoints). Specify timepoints and units. PixelCalibration.Builder; zSpacingMicrons(Number zSpacingMicrons). Specify spacing between z-slices, in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(); Create a new builder with default (uncalibrated) values. Builder; public Builder(PixelCalibration cal); Create a new builder, initialized values of an existing PixelCalibration. Parameters:; cal - . Method Details. pixelSizeMicrons; public PixelCalibration.Builder pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons); Specify the pixel width and height in microns (the most common",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html:1423,Modifiability,inherit,inherited,1423,"lib.images.servers.PixelCalibration.Builder. Enclosing class:; PixelCalibration. public static class PixelCalibration.Builder; extends Object; Builder class for PixelCalibration objects. Constructor Summary; Constructors. Constructor; Description; Builder(). Create a new builder with default (uncalibrated) values. Builder(PixelCalibration cal). Create a new builder, initialized values of an existing PixelCalibration. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; PixelCalibration; build(). Build PixelCalibration object. PixelCalibration.Builder; pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel width and height in microns (the most common calibration value). PixelCalibration.Builder; timepoints(TimeUnit timeUnit,; double... timepoints). Specify timepoints and units. PixelCalibration.Builder; zSpacingMicrons(Number zSpacingMicrons). Specify spacing between z-slices, in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(); Create a new builder with default (uncalibrated) values. Builder; public Builder(PixelCalibration cal); Create a new builder, initialized values of an existing PixelCalibration. Parameters:; cal - . Method Details. pixelSizeMicrons; public PixelCalibration.Builder pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons); Specify the pixel width and height in microns (the most common calibration value). Parameters:; pixelWidthMicrons - ; pixelHeightMicrons - ; Returns:. timepoints; public PixelCalibration.Builder timepoints(TimeUnit timeUnit,; double... timepoints); Specify timepoints and units. Parameters:; timeUnit - ; timepoints - ; Returns:. zSpacingMicrons; public PixelCalibration.Builder zSpacingMicrons(Number zSpacingMicrons); Specify spacing between z-slices, in microns. Parameters:; zSpacingMicron",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html:1497,Security,hash,hashCode,1497,"bration. public static class PixelCalibration.Builder; extends Object; Builder class for PixelCalibration objects. Constructor Summary; Constructors. Constructor; Description; Builder(). Create a new builder with default (uncalibrated) values. Builder(PixelCalibration cal). Create a new builder, initialized values of an existing PixelCalibration. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; PixelCalibration; build(). Build PixelCalibration object. PixelCalibration.Builder; pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel width and height in microns (the most common calibration value). PixelCalibration.Builder; timepoints(TimeUnit timeUnit,; double... timepoints). Specify timepoints and units. PixelCalibration.Builder; zSpacingMicrons(Number zSpacingMicrons). Specify spacing between z-slices, in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(); Create a new builder with default (uncalibrated) values. Builder; public Builder(PixelCalibration cal); Create a new builder, initialized values of an existing PixelCalibration. Parameters:; cal - . Method Details. pixelSizeMicrons; public PixelCalibration.Builder pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons); Specify the pixel width and height in microns (the most common calibration value). Parameters:; pixelWidthMicrons - ; pixelHeightMicrons - ; Returns:. timepoints; public PixelCalibration.Builder timepoints(TimeUnit timeUnit,; double... timepoints); Specify timepoints and units. Parameters:; timeUnit - ; timepoints - ; Returns:. zSpacingMicrons; public PixelCalibration.Builder zSpacingMicrons(Number zSpacingMicrons); Specify spacing between z-slices, in microns. Parameters:; zSpacingMicrons - ; Returns:. build; public PixelCalibration build(); Build PixelCalib",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:1817,Availability,avail,available,1817,"er and Type; Field; Description; static final String; MICROMETER. String to represent 'micrometer' units. static final String; PIXEL. String to represent 'pixel' units. static final String; Z_SLICE. String to represent 'z-slice' units. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; PixelCalibration; createScaledInstance(double scaleX,; double scaleY). Get a scaled instance of this PixelCalibration, multiplying pixel sizes for x and y by the specified scale values. PixelCalibration; createScaledInstance(double scaleX,; double scaleY,; double scaleZ). Get a scaled instance of this PixelCalibration, multiplying pixel sizes for x, y and z by the specified scale values. boolean; equals(Object obj);  ; Number; getAveragedPixelSize(). Get an average of getPixelWidth() and getPixelHeight(). double; getAveragedPixelSizeMicrons(). Get the average of the pixel width and height in microns if possible, or Double.NaN if the pixel size is not available. static PixelCalibration; getDefaultInstance(). Get the default PixelCalibration. Number; getPixelHeight(). Get the numeric value representing the pixel height, in the stored units. double; getPixelHeightMicrons(). Get the pixel height in microns, or Double.NaN if this is unknown. String; getPixelHeightUnit(). Get a String representation of the preferred pixel height unit. Number; getPixelWidth(). Get the numeric value representing the pixel width, in the stored units. double; getPixelWidthMicrons(). Get the pixel width in microns, or Double.NaN if this is unknown. String; getPixelWidthUnit(). Get a String representation of the preferred pixel width unit. double; getTimepoint(int ind). Get the time for the specified time point, or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. Number; getZSpacing(). Get the numeric value representing the z-spacing, in the stored units. double; getZSpacingMicrons(). Get the z-spacing in mi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:5324,Availability,avail,available,5324,"le scaleY,; double scaleZ); Get a scaled instance of this PixelCalibration, multiplying pixel sizes for x, y and z by the specified scale values.; Units are kept the same. Parameters:; scaleX - ; scaleY - ; scaleZ - ; Returns:. getTimeUnit; public TimeUnit getTimeUnit(); Get the time unit for a time series. Returns:. nTimepoints; public int nTimepoints(); Get the number of known time points. Returns:. getTimepoint; public double getTimepoint(int ind); Get the time for the specified time point, or Double.NaN if this is unknown. Parameters:; ind - ; Returns:. hasPixelSizeMicrons; public boolean hasPixelSizeMicrons(); Returns true if the pixel width and height information in microns is known. Returns:. hasZSpacingMicrons; public boolean hasZSpacingMicrons(); Returns true if the z-spacing is known in microns. Returns:. getAveragedPixelSizeMicrons; public double getAveragedPixelSizeMicrons(); Get the average of the pixel width and height in microns if possible, or Double.NaN if the pixel size is not available. Returns:. getZSpacingMicrons; public double getZSpacingMicrons(); Get the z-spacing in microns, or Double.NaN if this is unknown. Returns:. getPixelWidthMicrons; public double getPixelWidthMicrons(); Get the pixel width in microns, or Double.NaN if this is unknown. Returns:. getPixelHeightMicrons; public double getPixelHeightMicrons(); Get the pixel height in microns, or Double.NaN if this is unknown. Returns:. getPixelWidthUnit; public String getPixelWidthUnit(); Get a String representation of the preferred pixel width unit. Returns:; See Also:. getPixelWidthMicrons(); PIXEL; MICROMETER. unitsMatch2D; public boolean unitsMatch2D(); Returns true if the units for pixel width and height are the same. Returns:. unitsMatch3D; public boolean unitsMatch3D(); Returns true if the units for pixel width, height and z-spacing are the same. Returns:. getPixelHeightUnit; public String getPixelHeightUnit(); Get a String representation of the preferred pixel height unit. Returns:;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:483,Modifiability,extend,extends,483,". PixelCalibration (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class PixelCalibration. java.lang.Object; qupath.lib.images.servers.PixelCalibration. public class PixelCalibration; extends Object; Class used to represent pixel sizes.; ; Currently only 'pixel' and 'µm' units are supported. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PixelCalibration.Builder. Builder class for PixelCalibration objects. Field Summary; Fields. Modifier and Type; Field; Description; static final String; MICROMETER. String to represent 'micrometer' units. static final String; PIXEL. String to represent 'pixel' units. static final String; Z_SLICE. String to represent 'z-slice' units. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; PixelCalibration; createScaledInstance(double scaleX,; double scaleY). Get a scaled instance of this PixelCalibration, multiplying pixel sizes for x and y by the specified scale values. PixelCalibration; createScaledInstance(double scaleX,; double scaleY,; double scaleZ). Get a scaled instance of this PixelCalibration, multiplying pixel sizes for x, y and z by the specified scale values. boolean; equals(Object obj);  ; Number; getAveragedPixelSize(). Get an average of getPixelWidth() and getPixelHeight(). double; getAveragedPixelSizeMicrons(). Get the average of the pixel width and height in microns if possible, or Double.NaN if the pixel size is not available. static PixelCalibration; getDefaultInstance(). Get the default PixelCalibration. Number; getPixelHeight(). Get the numeric value representing the pixel height, in the stored",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:3430,Modifiability,inherit,inherited,3430,"ng representation of the preferred pixel width unit. double; getTimepoint(int ind). Get the time for the specified time point, or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. Number; getZSpacing(). Get the numeric value representing the z-spacing, in the stored units. double; getZSpacingMicrons(). Get the z-spacing in microns, or Double.NaN if this is unknown. String; getZSpacingUnit(). Get a String representation of the preferred z-spacing unit. int; hashCode();  ; boolean; hasPixelSizeMicrons(). Returns true if the pixel width and height information in microns is known. boolean; hasZSpacingMicrons(). Returns true if the z-spacing is known in microns. int; nTimepoints(). Get the number of known time points. String; toString();  ; boolean; unitsMatch2D(). Returns true if the units for pixel width and height are the same. boolean; unitsMatch3D(). Returns true if the units for pixel width, height and z-spacing are the same. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. PIXEL; public static final String PIXEL; String to represent 'pixel' units. This is the default when no pixel size calibration is known. See Also:. Constant Field Values. MICROMETER; public static final String MICROMETER; String to represent 'micrometer' units. Z_SLICE; public static final String Z_SLICE; String to represent 'z-slice' units. See Also:. Constant Field Values. Method Details. createScaledInstance; public PixelCalibration createScaledInstance(double scaleX,; double scaleY); Get a scaled instance of this PixelCalibration, multiplying pixel sizes for x and y by the specified scale values.; Units are kept the same. Parameters:; scaleX - ; scaleY - ; Returns:. createScaledInstance; public PixelCalibration createScaledInstance(double scaleX,; double scaleY,; double scaleZ); Get a scaled instance of this PixelCalibration, multiplying pixel sizes for x, y and z by the spe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:2942,Security,hash,hashCode,2942,"senting the pixel height, in the stored units. double; getPixelHeightMicrons(). Get the pixel height in microns, or Double.NaN if this is unknown. String; getPixelHeightUnit(). Get a String representation of the preferred pixel height unit. Number; getPixelWidth(). Get the numeric value representing the pixel width, in the stored units. double; getPixelWidthMicrons(). Get the pixel width in microns, or Double.NaN if this is unknown. String; getPixelWidthUnit(). Get a String representation of the preferred pixel width unit. double; getTimepoint(int ind). Get the time for the specified time point, or Double.NaN if this is unknown. TimeUnit; getTimeUnit(). Get the time unit for a time series. Number; getZSpacing(). Get the numeric value representing the z-spacing, in the stored units. double; getZSpacingMicrons(). Get the z-spacing in microns, or Double.NaN if this is unknown. String; getZSpacingUnit(). Get a String representation of the preferred z-spacing unit. int; hashCode();  ; boolean; hasPixelSizeMicrons(). Returns true if the pixel width and height information in microns is known. boolean; hasZSpacingMicrons(). Returns true if the z-spacing is known in microns. int; nTimepoints(). Get the number of known time points. String; toString();  ; boolean; unitsMatch2D(). Returns true if the units for pixel width and height are the same. boolean; unitsMatch3D(). Returns true if the units for pixel width, height and z-spacing are the same. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. PIXEL; public static final String PIXEL; String to represent 'pixel' units. This is the default when no pixel size calibration is known. See Also:. Constant Field Values. MICROMETER; public static final String MICROMETER; String to represent 'micrometer' units. Z_SLICE; public static final String Z_SLICE; String to represent 'z-slice' units. See Also:. Constant Field Values. Method Details. createScaledInstance",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:7514,Security,hash,hashCode,7514,"crons(); Get the pixel height in microns, or Double.NaN if this is unknown. Returns:. getPixelWidthUnit; public String getPixelWidthUnit(); Get a String representation of the preferred pixel width unit. Returns:; See Also:. getPixelWidthMicrons(); PIXEL; MICROMETER. unitsMatch2D; public boolean unitsMatch2D(); Returns true if the units for pixel width and height are the same. Returns:. unitsMatch3D; public boolean unitsMatch3D(); Returns true if the units for pixel width, height and z-spacing are the same. Returns:. getPixelHeightUnit; public String getPixelHeightUnit(); Get a String representation of the preferred pixel height unit. Returns:; See Also:. getPixelHeightMicrons(); PIXEL; MICROMETER. getZSpacingUnit; public String getZSpacingUnit(); Get a String representation of the preferred z-spacing unit. Returns:; See Also:. getZSpacing(); PIXEL; MICROMETER. getAveragedPixelSize; public Number getAveragedPixelSize(); Get an average of getPixelWidth() and getPixelHeight().; No check is made to ensure that these are returned in the same units; rather, the numbers are simply averaged. Returns:. getPixelWidth; public Number getPixelWidth(); Get the numeric value representing the pixel width, in the stored units. Returns:; See Also:. getPixelWidthUnit(). getPixelHeight; public Number getPixelHeight(); Get the numeric value representing the pixel height, in the stored units. Returns:; See Also:. getPixelHeightUnit(). getZSpacing; public Number getZSpacing(); Get the numeric value representing the z-spacing, in the stored units. Returns:; See Also:. getZSpacingUnit(). toString; public String toString(). Overrides:; toString in class Object. getDefaultInstance; public static PixelCalibration getDefaultInstance(); Get the default PixelCalibration.; This isn't terribly informative, giving pixel sizes in pixel units. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:7535,Security,hash,hashCode,7535,"crons(); Get the pixel height in microns, or Double.NaN if this is unknown. Returns:. getPixelWidthUnit; public String getPixelWidthUnit(); Get a String representation of the preferred pixel width unit. Returns:; See Also:. getPixelWidthMicrons(); PIXEL; MICROMETER. unitsMatch2D; public boolean unitsMatch2D(); Returns true if the units for pixel width and height are the same. Returns:. unitsMatch3D; public boolean unitsMatch3D(); Returns true if the units for pixel width, height and z-spacing are the same. Returns:. getPixelHeightUnit; public String getPixelHeightUnit(); Get a String representation of the preferred pixel height unit. Returns:; See Also:. getPixelHeightMicrons(); PIXEL; MICROMETER. getZSpacingUnit; public String getZSpacingUnit(); Get a String representation of the preferred z-spacing unit. Returns:; See Also:. getZSpacing(); PIXEL; MICROMETER. getAveragedPixelSize; public Number getAveragedPixelSize(); Get an average of getPixelWidth() and getPixelHeight().; No check is made to ensure that these are returned in the same units; rather, the numbers are simply averaged. Returns:. getPixelWidth; public Number getPixelWidth(); Get the numeric value representing the pixel width, in the stored units. Returns:; See Also:. getPixelWidthUnit(). getPixelHeight; public Number getPixelHeight(); Get the numeric value representing the pixel height, in the stored units. Returns:; See Also:. getPixelHeightUnit(). getZSpacing; public Number getZSpacing(); Get the numeric value representing the z-spacing, in the stored units. Returns:; See Also:. getZSpacingUnit(). toString; public String toString(). Overrides:; toString in class Object. getDefaultInstance; public static PixelCalibration getDefaultInstance(); Get the default PixelCalibration.; This isn't terribly informative, giving pixel sizes in pixel units. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:7559,Security,hash,hashCode,7559,"crons(); Get the pixel height in microns, or Double.NaN if this is unknown. Returns:. getPixelWidthUnit; public String getPixelWidthUnit(); Get a String representation of the preferred pixel width unit. Returns:; See Also:. getPixelWidthMicrons(); PIXEL; MICROMETER. unitsMatch2D; public boolean unitsMatch2D(); Returns true if the units for pixel width and height are the same. Returns:. unitsMatch3D; public boolean unitsMatch3D(); Returns true if the units for pixel width, height and z-spacing are the same. Returns:. getPixelHeightUnit; public String getPixelHeightUnit(); Get a String representation of the preferred pixel height unit. Returns:; See Also:. getPixelHeightMicrons(); PIXEL; MICROMETER. getZSpacingUnit; public String getZSpacingUnit(); Get a String representation of the preferred z-spacing unit. Returns:; See Also:. getZSpacing(); PIXEL; MICROMETER. getAveragedPixelSize; public Number getAveragedPixelSize(); Get an average of getPixelWidth() and getPixelHeight().; No check is made to ensure that these are returned in the same units; rather, the numbers are simply averaged. Returns:. getPixelWidth; public Number getPixelWidth(); Get the numeric value representing the pixel width, in the stored units. Returns:; See Also:. getPixelWidthUnit(). getPixelHeight; public Number getPixelHeight(); Get the numeric value representing the pixel height, in the stored units. Returns:; See Also:. getPixelHeightUnit(). getZSpacing; public Number getZSpacing(); Get the numeric value representing the z-spacing, in the stored units. Returns:; See Also:. getZSpacingUnit(). toString; public String toString(). Overrides:; toString in class Object. getDefaultInstance; public static PixelCalibration getDefaultInstance(); Get the default PixelCalibration.; This isn't terribly informative, giving pixel sizes in pixel units. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html:6748,Usability,simpl,simply,6748,"crons(); Get the pixel height in microns, or Double.NaN if this is unknown. Returns:. getPixelWidthUnit; public String getPixelWidthUnit(); Get a String representation of the preferred pixel width unit. Returns:; See Also:. getPixelWidthMicrons(); PIXEL; MICROMETER. unitsMatch2D; public boolean unitsMatch2D(); Returns true if the units for pixel width and height are the same. Returns:. unitsMatch3D; public boolean unitsMatch3D(); Returns true if the units for pixel width, height and z-spacing are the same. Returns:. getPixelHeightUnit; public String getPixelHeightUnit(); Get a String representation of the preferred pixel height unit. Returns:; See Also:. getPixelHeightMicrons(); PIXEL; MICROMETER. getZSpacingUnit; public String getZSpacingUnit(); Get a String representation of the preferred z-spacing unit. Returns:; See Also:. getZSpacing(); PIXEL; MICROMETER. getAveragedPixelSize; public Number getAveragedPixelSize(); Get an average of getPixelWidth() and getPixelHeight().; No check is made to ensure that these are returned in the same units; rather, the numbers are simply averaged. Returns:. getPixelWidth; public Number getPixelWidth(); Get the numeric value representing the pixel width, in the stored units. Returns:; See Also:. getPixelWidthUnit(). getPixelHeight; public Number getPixelHeight(); Get the numeric value representing the pixel height, in the stored units. Returns:; See Also:. getPixelHeightUnit(). getZSpacing; public Number getZSpacing(); Get the numeric value representing the z-spacing, in the stored units. Returns:; See Also:. getZSpacingUnit(). toString; public String toString(). Overrides:; toString in class Object. getDefaultInstance; public static PixelCalibration getDefaultInstance(); Get the default PixelCalibration.; This isn't terribly informative, giving pixel sizes in pixel units. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelCalibration.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelCalibration.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html:806,Integrability,interface,interfaces,806,". PixelType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class PixelType. java.lang.Object; java.lang.Enum<PixelType>; qupath.lib.images.servers.PixelType. All Implemented Interfaces:; Serializable, Comparable<PixelType>, Constable. public enum PixelType; extends Enum<PixelType>; Image bit-depths and types. Not all may be well-supported; in general, ; expected image types are UINT8, UINT16 and FLOAT32. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLOAT32. 32-bit floating point. FLOAT64. 64-bit floating point. INT16. 16-bit signed integer. INT32. 32-bit signed integer. INT8. 8-bit signed integer. UINT16. 16-bit unsigned integer. UINT32. 32-bit unsigned integer (not supported by BufferedImage). UINT8. 8-bit unsigned integer. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getBitsPerPixel(). Number of bits per pixel. int; getBytesPerPixel(). Number of bytes per pixel. Number; getLowerBound(). Get a number representing the minimum value permitted by this type (may be negative). Number; getUpperBound(). Get a number representing the maximum value permitted by this type. boolean; isFloatingPoint(). Returns true if the type is a floating point representation. boolean; isSignedInteger(). Returns true if the type is a signed integer representation. boolean; isUnsignedInteger(). Returns true if the type is an unsigned integer representation. static PixelType; valueOf(String name). Returns the enum constant of th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html:595,Modifiability,extend,extends,595,". PixelType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class PixelType. java.lang.Object; java.lang.Enum<PixelType>; qupath.lib.images.servers.PixelType. All Implemented Interfaces:; Serializable, Comparable<PixelType>, Constable. public enum PixelType; extends Enum<PixelType>; Image bit-depths and types. Not all may be well-supported; in general, ; expected image types are UINT8, UINT16 and FLOAT32. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLOAT32. 32-bit floating point. FLOAT64. 64-bit floating point. INT16. 16-bit signed integer. INT32. 32-bit signed integer. INT8. 8-bit signed integer. UINT16. 16-bit unsigned integer. UINT32. 32-bit unsigned integer (not supported by BufferedImage). UINT8. 8-bit unsigned integer. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getBitsPerPixel(). Number of bits per pixel. int; getBytesPerPixel(). Number of bytes per pixel. Number; getLowerBound(). Get a number representing the minimum value permitted by this type (may be negative). Number; getUpperBound(). Get a number representing the maximum value permitted by this type. boolean; isFloatingPoint(). Returns true if the type is a floating point representation. boolean; isSignedInteger(). Returns true if the type is a signed integer representation. boolean; isUnsignedInteger(). Returns true if the type is an unsigned integer representation. static PixelType; valueOf(String name). Returns the enum constant of th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html:817,Modifiability,inherit,inherited,817,". PixelType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class PixelType. java.lang.Object; java.lang.Enum<PixelType>; qupath.lib.images.servers.PixelType. All Implemented Interfaces:; Serializable, Comparable<PixelType>, Constable. public enum PixelType; extends Enum<PixelType>; Image bit-depths and types. Not all may be well-supported; in general, ; expected image types are UINT8, UINT16 and FLOAT32. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLOAT32. 32-bit floating point. FLOAT64. 64-bit floating point. INT16. 16-bit signed integer. INT32. 32-bit signed integer. INT8. 8-bit signed integer. UINT16. 16-bit unsigned integer. UINT32. 32-bit unsigned integer (not supported by BufferedImage). UINT8. 8-bit unsigned integer. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getBitsPerPixel(). Number of bits per pixel. int; getBytesPerPixel(). Number of bytes per pixel. Number; getLowerBound(). Get a number representing the minimum value permitted by this type (may be negative). Number; getUpperBound(). Get a number representing the maximum value permitted by this type. boolean; isFloatingPoint(). Returns true if the type is a floating point representation. boolean; isSignedInteger(). Returns true if the type is a signed integer representation. boolean; isUnsignedInteger(). Returns true if the type is an unsigned integer representation. static PixelType; valueOf(String name). Returns the enum constant of th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html:870,Modifiability,extend,extends,870,". PixelType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class PixelType. java.lang.Object; java.lang.Enum<PixelType>; qupath.lib.images.servers.PixelType. All Implemented Interfaces:; Serializable, Comparable<PixelType>, Constable. public enum PixelType; extends Enum<PixelType>; Image bit-depths and types. Not all may be well-supported; in general, ; expected image types are UINT8, UINT16 and FLOAT32. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; FLOAT32. 32-bit floating point. FLOAT64. 64-bit floating point. INT16. 16-bit signed integer. INT32. 32-bit signed integer. INT8. 8-bit signed integer. UINT16. 16-bit unsigned integer. UINT32. 32-bit unsigned integer (not supported by BufferedImage). UINT8. 8-bit unsigned integer. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getBitsPerPixel(). Number of bits per pixel. int; getBytesPerPixel(). Number of bytes per pixel. Number; getLowerBound(). Get a number representing the minimum value permitted by this type (may be negative). Number; getUpperBound(). Get a number representing the maximum value permitted by this type. boolean; isFloatingPoint(). Returns true if the type is a floating point representation. boolean; isSignedInteger(). Returns true if the type is a signed integer representation. boolean; isUnsignedInteger(). Returns true if the type is an unsigned integer representation. static PixelType; valueOf(String name). Returns the enum constant of th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html:2168,Modifiability,inherit,inherited,2168," supported by BufferedImage). UINT8. 8-bit unsigned integer. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getBitsPerPixel(). Number of bits per pixel. int; getBytesPerPixel(). Number of bytes per pixel. Number; getLowerBound(). Get a number representing the minimum value permitted by this type (may be negative). Number; getUpperBound(). Get a number representing the maximum value permitted by this type. boolean; isFloatingPoint(). Returns true if the type is a floating point representation. boolean; isSignedInteger(). Returns true if the type is a signed integer representation. boolean; isUnsignedInteger(). Returns true if the type is an unsigned integer representation. static PixelType; valueOf(String name). Returns the enum constant of this class with the specified name. static PixelType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. UINT8; public static final PixelType UINT8; 8-bit unsigned integer. INT8; public static final PixelType INT8; 8-bit signed integer. UINT16; public static final PixelType UINT16; 16-bit unsigned integer. INT16; public static final PixelType INT16; 16-bit signed integer. UINT32; public static final PixelType UINT32; 32-bit unsigned integer (not supported by BufferedImage). INT32; public static final PixelType INT32; 32-bit signed integer. FLOAT32; public static final PixelType FLOAT32; 32-bit floating point. FLOAT64; public static final PixelType FLOAT64; 64-bit floating point. Method Details. values; public static PixelType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html:2331,Modifiability,inherit,inherited,2331,"Description; int; getBitsPerPixel(). Number of bits per pixel. int; getBytesPerPixel(). Number of bytes per pixel. Number; getLowerBound(). Get a number representing the minimum value permitted by this type (may be negative). Number; getUpperBound(). Get a number representing the maximum value permitted by this type. boolean; isFloatingPoint(). Returns true if the type is a floating point representation. boolean; isSignedInteger(). Returns true if the type is a signed integer representation. boolean; isUnsignedInteger(). Returns true if the type is an unsigned integer representation. static PixelType; valueOf(String name). Returns the enum constant of this class with the specified name. static PixelType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. UINT8; public static final PixelType UINT8; 8-bit unsigned integer. INT8; public static final PixelType INT8; 8-bit signed integer. UINT16; public static final PixelType UINT16; 16-bit unsigned integer. INT16; public static final PixelType INT16; 16-bit signed integer. UINT32; public static final PixelType UINT32; 32-bit unsigned integer (not supported by BufferedImage). INT32; public static final PixelType INT32; 32-bit signed integer. FLOAT32; public static final PixelType FLOAT32; 32-bit floating point. FLOAT64; public static final PixelType FLOAT64; 64-bit floating point. Method Details. values; public static PixelType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static PixelType valueOf(String name); Returns the",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html:2279,Security,hash,hashCode,2279,"hodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getBitsPerPixel(). Number of bits per pixel. int; getBytesPerPixel(). Number of bytes per pixel. Number; getLowerBound(). Get a number representing the minimum value permitted by this type (may be negative). Number; getUpperBound(). Get a number representing the maximum value permitted by this type. boolean; isFloatingPoint(). Returns true if the type is a floating point representation. boolean; isSignedInteger(). Returns true if the type is a signed integer representation. boolean; isUnsignedInteger(). Returns true if the type is an unsigned integer representation. static PixelType; valueOf(String name). Returns the enum constant of this class with the specified name. static PixelType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. UINT8; public static final PixelType UINT8; 8-bit unsigned integer. INT8; public static final PixelType INT8; 8-bit signed integer. UINT16; public static final PixelType UINT16; 16-bit unsigned integer. INT16; public static final PixelType INT16; 16-bit signed integer. UINT32; public static final PixelType UINT32; 32-bit unsigned integer (not supported by BufferedImage). INT32; public static final PixelType INT32; 32-bit signed integer. FLOAT32; public static final PixelType FLOAT32; 32-bit floating point. FLOAT64; public static final PixelType FLOAT64; 64-bit floating point. Method Details. values; public static PixelType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/PixelType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/PixelType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:3314,Availability,down,downsample,3314,"mbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:3828,Availability,down,downsampling,3828,"bration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:2740,Integrability,interface,interface,2740,"eServerBuilder.ServerBuilder<BufferedImage> builder,; String order). Get a ServerBuilder that swaps red and blue channels for another (RGB) server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getOriginalMetadata, getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:3112,Integrability,interface,interface,3112,"URIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:4150,Integrability,interface,interface,4150,"l units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:4638,Integrability,interface,interface,4638,"e caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; cre",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:711,Modifiability,extend,extends,711,". RearrangeRGBImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class RearrangeRGBImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.TransformingImageServer<BufferedImage>; qupath.lib.images.servers.RearrangeRGBImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class RearrangeRGBImageServer; extends TransformingImageServer<BufferedImage>; Simple image server to swap the red and blue channels of an RGB image.; This is intended for use whenever an image has erroneously been read as RGB or BGR. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order);  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). static ImageServerBuilder.ServerBuilder<BufferedImage>; getSwapRedBlueBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; String order). Get a ServerBuilder that swaps red and blue channels for another (RGB) server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:2000,Modifiability,inherit,inherited,2000," protected ; RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order);  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). static ImageServerBuilder.ServerBuilder<BufferedImage>; getSwapRedBlueBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; String order). Get a ServerBuilder that swaps red and blue channels for another (RGB) server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getOriginalMetadata, getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:2128,Modifiability,inherit,inherited,2128,"hodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). static ImageServerBuilder.ServerBuilder<BufferedImage>; getSwapRedBlueBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; String order). Get a ServerBuilder that swaps red and blue channels for another (RGB) server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getOriginalMetadata, getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:2606,Modifiability,inherit,inherited,2606,"ibrary used (Openslide, Bioformats...). static ImageServerBuilder.ServerBuilder<BufferedImage>; getSwapRedBlueBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; String order). Get a ServerBuilder that swaps red and blue channels for another (RGB) server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getOriginalMetadata, getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may conta",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:2725,Modifiability,inherit,inherited,2725,"eServerBuilder.ServerBuilder<BufferedImage> builder,; String order). Get a ServerBuilder that swaps red and blue channels for another (RGB) server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getOriginalMetadata, getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:3454,Modifiability,extend,extends,3454,"lutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBuffer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:4003,Safety,avoid,avoid,4003,"equest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the curre",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html:2670,Security,hash,hashCode,2670,"der.ServerBuilder<BufferedImage>; getSwapRedBlueBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; String order). Get a ServerBuilder that swaps red and blue channels for another (RGB) server. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getOriginalMetadata, getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RearrangeRGBImageServer; protected RearrangeRGBImageServer(ImageServer<BufferedImage> server,; String order). Method Details. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RearrangeRGBImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:3994,Availability,down,downsample,3994,"ring. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:4508,Availability,down,downsampling,4508,"cified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:756,Integrability,wrap,wraps,756,". RotatedImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class RotatedImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.TransformingImageServer<BufferedImage>; qupath.lib.images.servers.RotatedImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class RotatedImageServer; extends TransformingImageServer<BufferedImage>; ImageServer that wraps another ImageServer, but intercepts region requests to ; effectively rotate the image by 90, 180 or 270 degrees. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. Constructor Summary; Constructors. Constructor; Description; RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation). Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. static ImageServerBuilder.ServerBuilder<BufferedImage>; getRotatedBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; RotatedIma",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:3147,Integrability,interface,interface,3147,"e rotation applied by this server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends be",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:3792,Integrability,interface,interface,3792,"ImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:4830,Integrability,interface,interface,4830,"l units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + param",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:5343,Integrability,interface,interface,5343," up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. creat",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:5499,Integrability,interface,interface,5499," a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an iden",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:6190,Integrability,interface,interface,6190," int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getRotatedBuilder; public static ImageServerBuilder.ServerBuilder<BufferedImage> getRotatedBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; RotatedImageServer.Rotation rotation); Get a ServerBuilder that applies a rotation to another server. Parameters:; builder - ; rotation - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:691,Modifiability,extend,extends,691,". RotatedImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class RotatedImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.TransformingImageServer<BufferedImage>; qupath.lib.images.servers.RotatedImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class RotatedImageServer; extends TransformingImageServer<BufferedImage>; ImageServer that wraps another ImageServer, but intercepts region requests to ; effectively rotate the image by 90, 180 or 270 degrees. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. Constructor Summary; Constructors. Constructor; Description; RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation). Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. static ImageServerBuilder.ServerBuilder<BufferedImage>; getRotatedBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; RotatedIma",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:2428,Modifiability,inherit,inherited,2428,"scription; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. static ImageServerBuilder.ServerBuilder<BufferedImage>; getRotatedBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; RotatedImageServer.Rotation rotation). Get a ServerBuilder that applies a rotation to another server. RotatedImageServer.Rotation; getRotation(). Get the rotation applied by this server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:2535,Modifiability,inherit,inherited,2535,"fault value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. static ImageServerBuilder.ServerBuilder<BufferedImage>; getRotatedBuilder(ImageServerBuilder.ServerBuilder<BufferedImage> builder,; RotatedImageServer.Rotation rotation). Get a ServerBuilder that applies a rotation to another server. RotatedImageServer.Rotation; getRotation(). Get the rotation applied by this server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:3013,Modifiability,inherit,inherited,3013,"tation). Get a ServerBuilder that applies a rotation to another server. RotatedImageServer.Rotation; getRotation(). Get the rotation applied by this server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All chan",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:3132,Modifiability,inherit,inherited,3132,"e rotation applied by this server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends be",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:4134,Modifiability,extend,extends,4134,"fferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBuffer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:4683,Safety,avoid,avoid,4683,"equest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Overrides:; getOriginalMetadata in class TransformingImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createID; protected String createID(); Description copied from cl",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html:3077,Security,hash,hashCode,3077,"r server. RotatedImageServer.Rotation; getRotation(). Get the rotation applied by this server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.TransformingImageServer; getURIs, getWrappedServer. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. RotatedImageServer; public RotatedImageServer(ImageServer<BufferedImage> server,; RotatedImageServer.Rotation rotation); Create an image server that rotates pixel requests for a second server by a specified increment of 90 degrees. Parameters:; server - ; rotation - . Method Details. getRotation; public RotatedImageServer.Rotation getRotation(); Get the rotation applied by this server. Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guarantee",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html:876,Integrability,interface,interfaces,876,". RotatedImageServer.Rotation (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class RotatedImageServer.Rotation. java.lang.Object; java.lang.Enum<RotatedImageServer.Rotation>; qupath.lib.images.servers.RotatedImageServer.Rotation. All Implemented Interfaces:; Serializable, Comparable<RotatedImageServer.Rotation>, Constable. Enclosing class:; RotatedImageServer. public static enum RotatedImageServer.Rotation; extends Enum<RotatedImageServer.Rotation>; Enum for rotations in increments of 90 degrees. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ROTATE_180. Rotate 180 degrees. ROTATE_270. Rotate 270 degrees clockwise. ROTATE_90. Rotate 90 degrees clockwise. ROTATE_NONE. No rotation. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static RotatedImageServer.Rotation; valueOf(String name). Returns the enum constant of this class with the specified name. static RotatedImageServer.Rotation[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROTATE_NONE; public static final RotatedImageServer.Rotation ROTATE_NONE; No rotation. ROTATE_90; public static final RotatedImageServer.Rotation ROTATE_90; Rotat",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html:748,Modifiability,extend,extends,748,". RotatedImageServer.Rotation (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class RotatedImageServer.Rotation. java.lang.Object; java.lang.Enum<RotatedImageServer.Rotation>; qupath.lib.images.servers.RotatedImageServer.Rotation. All Implemented Interfaces:; Serializable, Comparable<RotatedImageServer.Rotation>, Constable. Enclosing class:; RotatedImageServer. public static enum RotatedImageServer.Rotation; extends Enum<RotatedImageServer.Rotation>; Enum for rotations in increments of 90 degrees. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ROTATE_180. Rotate 180 degrees. ROTATE_270. Rotate 270 degrees clockwise. ROTATE_90. Rotate 90 degrees clockwise. ROTATE_NONE. No rotation. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static RotatedImageServer.Rotation; valueOf(String name). Returns the enum constant of this class with the specified name. static RotatedImageServer.Rotation[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROTATE_NONE; public static final RotatedImageServer.Rotation ROTATE_NONE; No rotation. ROTATE_90; public static final RotatedImageServer.Rotation ROTATE_90; Rotat",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html:887,Modifiability,inherit,inherited,887,". RotatedImageServer.Rotation (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class RotatedImageServer.Rotation. java.lang.Object; java.lang.Enum<RotatedImageServer.Rotation>; qupath.lib.images.servers.RotatedImageServer.Rotation. All Implemented Interfaces:; Serializable, Comparable<RotatedImageServer.Rotation>, Constable. Enclosing class:; RotatedImageServer. public static enum RotatedImageServer.Rotation; extends Enum<RotatedImageServer.Rotation>; Enum for rotations in increments of 90 degrees. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ROTATE_180. Rotate 180 degrees. ROTATE_270. Rotate 270 degrees clockwise. ROTATE_90. Rotate 90 degrees clockwise. ROTATE_NONE. No rotation. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static RotatedImageServer.Rotation; valueOf(String name). Returns the enum constant of this class with the specified name. static RotatedImageServer.Rotation[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROTATE_NONE; public static final RotatedImageServer.Rotation ROTATE_NONE; No rotation. ROTATE_90; public static final RotatedImageServer.Rotation ROTATE_90; Rotat",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html:940,Modifiability,extend,extends,940,". RotatedImageServer.Rotation (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.servers; Enum Class RotatedImageServer.Rotation. java.lang.Object; java.lang.Enum<RotatedImageServer.Rotation>; qupath.lib.images.servers.RotatedImageServer.Rotation. All Implemented Interfaces:; Serializable, Comparable<RotatedImageServer.Rotation>, Constable. Enclosing class:; RotatedImageServer. public static enum RotatedImageServer.Rotation; extends Enum<RotatedImageServer.Rotation>; Enum for rotations in increments of 90 degrees. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ROTATE_180. Rotate 180 degrees. ROTATE_270. Rotate 270 degrees clockwise. ROTATE_90. Rotate 90 degrees clockwise. ROTATE_NONE. No rotation. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static RotatedImageServer.Rotation; valueOf(String name). Returns the enum constant of this class with the specified name. static RotatedImageServer.Rotation[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROTATE_NONE; public static final RotatedImageServer.Rotation ROTATE_NONE; No rotation. ROTATE_90; public static final RotatedImageServer.Rotation ROTATE_90; Rotat",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html:1577,Modifiability,inherit,inherited,1577,"terfaces:; Serializable, Comparable<RotatedImageServer.Rotation>, Constable. Enclosing class:; RotatedImageServer. public static enum RotatedImageServer.Rotation; extends Enum<RotatedImageServer.Rotation>; Enum for rotations in increments of 90 degrees. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ROTATE_180. Rotate 180 degrees. ROTATE_270. Rotate 270 degrees clockwise. ROTATE_90. Rotate 90 degrees clockwise. ROTATE_NONE. No rotation. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static RotatedImageServer.Rotation; valueOf(String name). Returns the enum constant of this class with the specified name. static RotatedImageServer.Rotation[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROTATE_NONE; public static final RotatedImageServer.Rotation ROTATE_NONE; No rotation. ROTATE_90; public static final RotatedImageServer.Rotation ROTATE_90; Rotate 90 degrees clockwise. ROTATE_180; public static final RotatedImageServer.Rotation ROTATE_180; Rotate 180 degrees. ROTATE_270; public static final RotatedImageServer.Rotation ROTATE_270; Rotate 270 degrees clockwise. Method Details. values; public static RotatedImageServer.Rotation[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static RotatedImageServer.Rotation valueOf(String name); Returns the enum constant",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html:1730,Modifiability,inherit,inherited,1730,"Rotation; extends Enum<RotatedImageServer.Rotation>; Enum for rotations in increments of 90 degrees. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ROTATE_180. Rotate 180 degrees. ROTATE_270. Rotate 270 degrees clockwise. ROTATE_90. Rotate 90 degrees clockwise. ROTATE_NONE. No rotation. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static RotatedImageServer.Rotation; valueOf(String name). Returns the enum constant of this class with the specified name. static RotatedImageServer.Rotation[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROTATE_NONE; public static final RotatedImageServer.Rotation ROTATE_NONE; No rotation. ROTATE_90; public static final RotatedImageServer.Rotation ROTATE_90; Rotate 90 degrees clockwise. ROTATE_180; public static final RotatedImageServer.Rotation ROTATE_180; Rotate 180 degrees. ROTATE_270; public static final RotatedImageServer.Rotation ROTATE_270; Rotate 270 degrees clockwise. Method Details. values; public static RotatedImageServer.Rotation[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static RotatedImageServer.Rotation valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitesp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html:1688,Security,hash,hashCode,1688,"closing class:; RotatedImageServer. public static enum RotatedImageServer.Rotation; extends Enum<RotatedImageServer.Rotation>; Enum for rotations in increments of 90 degrees. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ROTATE_180. Rotate 180 degrees. ROTATE_270. Rotate 270 degrees clockwise. ROTATE_90. Rotate 90 degrees clockwise. ROTATE_NONE. No rotation. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static RotatedImageServer.Rotation; valueOf(String name). Returns the enum constant of this class with the specified name. static RotatedImageServer.Rotation[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. ROTATE_NONE; public static final RotatedImageServer.Rotation ROTATE_NONE; No rotation. ROTATE_90; public static final RotatedImageServer.Rotation ROTATE_90; Rotate 90 degrees clockwise. ROTATE_180; public static final RotatedImageServer.Rotation ROTATE_180; Rotate 180 degrees. ROTATE_270; public static final RotatedImageServer.Rotation ROTATE_270; Rotate 270 degrees clockwise. Method Details. values; public static RotatedImageServer.Rotation[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static RotatedImageServer.Rotation valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an ident",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/RotatedImageServer.Rotation.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:1406,Availability,down,downsample,1406,"rTools. public class ServerTools; extends Object; Static methods helpful when dealing with ImageServers. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ServerTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<ImageChannel>; classificationLabelsToChannels(Map<Integer,PathClass> classificationLabels,; boolean ignoredTransparent). Create a list of channels from classification labels. static int; getChannelIndex(ImageServer<?> server,; String channelName). Get the index of the first channel of a server with a specified channel name. static String; getDefaultShortServerName(URI uri). Get the default shortened server name given the server's path. static String; getDisplayableImageName(ImageServer<?> server). Get an ImageServer name suitable for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:1772,Availability,down,downsample,1772,"s> classificationLabels,; boolean ignoredTransparent). Create a list of channels from classification labels. static int; getChannelIndex(ImageServer<?> server,; String channelName). Get the index of the first channel of a server with a specified channel name. static String; getDefaultShortServerName(URI uri). Get the default shortened server name given the server's path. static String; getDisplayableImageName(ImageServer<?> server). Get an ImageServer name suitable for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-b",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:1855,Availability,down,downsample,1855,"s> classificationLabels,; boolean ignoredTransparent). Create a list of channels from classification labels. static int; getChannelIndex(ImageServer<?> server,; String channelName). Get the index of the first channel of a server with a specified channel name. static String; getDefaultShortServerName(URI uri). Get the default shortened server name given the server's path. static String; getDisplayableImageName(ImageServer<?> server). Get an ImageServer name suitable for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-b",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:2049,Availability,down,downsample,2049," the first channel of a server with a specified channel name. static String; getDefaultShortServerName(URI uri). Get the default shortened server name given the server's path. static String; getDisplayableImageName(ImageServer<?> server). Get an ImageServer name suitable for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double r",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:3123,Availability,down,downsample,3123,"ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredDownsampleFactor(ImageServer, double). getPreferredDownsampleFactor; public static double getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:3402,Availability,down,downsample,3402,"Tools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredDownsampleFactor(ImageServer, double). getPreferredDownsampleFactor; public static double getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:3485,Availability,down,downsample,3485,"Tools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredDownsampleFactor(ImageServer, double). getPreferredDownsampleFactor; public static double getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:3541,Availability,down,downsample,3541," uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredDownsampleFactor(ImageServer, double). getPreferredDownsampleFactor; public static double getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use; Returns:; true if the metadata was updated, false otherwise (i.e. if the name is unchanged). getDownsampleFactor; public static double getDownsampleFactor(ImageServer<?> server,; doub",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:3588,Availability,error,error,3588," uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredDownsampleFactor(ImageServer, double). getPreferredDownsampleFactor; public static double getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use; Returns:; true if the metadata was updated, false otherwise (i.e. if the name is unchanged). getDownsampleFactor; public static double getDownsampleFactor(ImageServer<?> server,; doub",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:3664,Availability,avail,available,3664,"nnelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredDownsampleFactor(ImageServer, double). getPreferredDownsampleFactor; public static double getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use; Returns:; true if the metadata was updated, false otherwise (i.e. if the name is unchanged). getDownsampleFactor; public static double getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons); Calculate a downsample factor for a server given a preferred pixel size. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:4606,Availability,down,downsample,4606,"ightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use; Returns:; true if the metadata was updated, false otherwise (i.e. if the name is unchanged). getDownsampleFactor; public static double getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons); Calculate a downsample factor for a server given a preferred pixel size. Parameters:; server - ; preferredPixelSizeMicrons - ; Returns:. getPaddedRequest; public static BufferedImage getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding); throws IOException; Get a raster, padded by the specified amount, to the left, right, above and below.; ; Note that the padding is defined in terms of the destination pixels.; ; In other words, a specified padding of 5 should actually result in 20 pixels being added in each dimension ; if the request.getDownsample() == 4. Parameters:; server - ; request - ; padding - ; Returns:; Throws:; IOException. classificationLabelsToChannels; public static List<ImageChannel> classificationLabelsToChannels(Map<Integer,PathClass> classificationLabels,; boolean ignoredTransparent); Create a list of channels from classification labels.; Note that the labels must be ≥ 0 or else an IllegalArgumentExceptio",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:4344,Deployability,update,update,4344,"uestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use; Returns:; true if the metadata was updated, false otherwise (i.e. if the name is unchanged). getDownsampleFactor; public static double getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons); Calculate a downsample factor for a server given a preferred pixel size. Parameters:; server - ; preferredPixelSizeMicrons - ; Returns:. getPaddedRequest; public static BufferedImage getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding); throws IOException; Get a raster, padded by the specified amount, to the left, right, above and below.; ; Note that the padding is defined in terms of the destination pixels.; ; In other words, a specified padding of 5 should actually result in 20 pixels being added in each dimension ; if the request.getDownsample() == 4. Parameters:; server - ; request - ; padding - ; Returns:; Throws:; IOException. classificationLabelsToChannels; public static List<ImageChannel> classificationLabelsToChannels(Map",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:4415,Deployability,update,updated,4415,"uestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use; Returns:; true if the metadata was updated, false otherwise (i.e. if the name is unchanged). getDownsampleFactor; public static double getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons); Calculate a downsample factor for a server given a preferred pixel size. Parameters:; server - ; preferredPixelSizeMicrons - ; Returns:. getPaddedRequest; public static BufferedImage getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding); throws IOException; Get a raster, padded by the specified amount, to the left, right, above and below.; ; Note that the padding is defined in terms of the destination pixels.; ; In other words, a specified padding of 5 should actually result in 20 pixels being added in each dimension ; if the request.getDownsample() == 4. Parameters:; server - ; request - ; padding - ; Returns:; Throws:; IOException. classificationLabelsToChannels; public static List<ImageChannel> classificationLabelsToChannels(Map",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:463,Modifiability,extend,extends,463,". ServerTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ServerTools. java.lang.Object; qupath.lib.images.servers.ServerTools. public class ServerTools; extends Object; Static methods helpful when dealing with ImageServers. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ServerTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<ImageChannel>; classificationLabelsToChannels(Map<Integer,PathClass> classificationLabels,; boolean ignoredTransparent). Create a list of channels from classification labels. static int; getChannelIndex(ImageServer<?> server,; String channelName). Get the index of the first channel of a server with a specified channel name. static String; getDefaultShortServerName(URI uri). Get the default shortened server name given the server's path. static String; getDisplayableImageName(ImageServer<?> server). Get an ImageServer name suitable for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to req",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:2200,Modifiability,inherit,inherited,2200,"splayableImageName(ImageServer<?> server). Get an ImageServer name suitable for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:2274,Security,hash,hashCode,2274,"ble for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-based) of the first channel with a name matching channelName, or -1 if no channel is found. getPreferredResolutionLevel; public static int getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample); Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredDownsampleFactor(ImageServer, double). getPreferredDownsamp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/ServerTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:923,Availability,down,downsample,923,". SparseImageServer.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.Builder. java.lang.Object; qupath.lib.images.servers.SparseImageServer.Builder. Enclosing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion regio",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:1125,Availability,down,downsample,1125,"ckage; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.Builder. java.lang.Object; qupath.lib.images.servers.SparseImageServer.Builder. Enclosing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; reg",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:1508,Availability,down,downsample,1508,"ing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; server - the server to include, supplying pixels for the region; Returns:. build; public SparseImageServer build(); throws IOException; Build a new SparseImageServer. Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:1758,Availability,down,downsample,1758,"ing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; server - the server to include, supplying pixels for the region; Returns:. build; public SparseImageServer build(); throws IOException; Build a new SparseImageServer. Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:1775,Availability,down,downsample,1775,"ing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; server - the server to include, supplying pixels for the region; Returns:. build; public SparseImageServer build(); throws IOException; Build a new SparseImageServer. Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:2012,Availability,down,downsample,2012,"ing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; server - the server to include, supplying pixels for the region; Returns:. build; public SparseImageServer build(); throws IOException; Build a new SparseImageServer. Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:2224,Availability,down,downsample,2224,"ing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; server - the server to include, supplying pixels for the region; Returns:. build; public SparseImageServer build(); throws IOException; Build a new SparseImageServer. Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:2241,Availability,down,downsample,2241,"ing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; server - the server to include, supplying pixels for the region; Returns:. build; public SparseImageServer build(); throws IOException; Build a new SparseImageServer. Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:563,Modifiability,extend,extends,563,". SparseImageServer.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.Builder. java.lang.Object; qupath.lib.images.servers.SparseImageServer.Builder. Enclosing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion regio",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:1229,Modifiability,inherit,inherited,1229,"hod. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.Builder. java.lang.Object; qupath.lib.images.servers.SparseImageServer.Builder. Enclosing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - t",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html:1303,Security,hash,hashCode,1303,"| ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.Builder. java.lang.Object; qupath.lib.images.servers.SparseImageServer.Builder. Enclosing class:; SparseImageServer. public static class SparseImageServer.Builder; extends Object; Builder to create a new SparseImageServer. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SparseImageServer; build(). Build a new SparseImageServer. SparseImageServer.Builder; jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder). Add a region based on a JSON representation of an ImageServer. SparseImageServer.Builder; serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server). Add a region based on an existing ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. jsonRegion; public SparseImageServer.Builder jsonRegion(ImageRegion region,; double downsample,; ImageServerBuilder.ServerBuilder<BufferedImage> builder); Add a region based on a JSON representation of an ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; builder - the ServerBuilder representation of the server to include; Returns:; See Also:. ImageServers. serverRegion; public SparseImageServer.Builder serverRegion(ImageRegion region,; double downsample,; ImageServer<BufferedImage> server); Add a region based on an existing ImageServer. Parameters:; region - the region within this image where the pixels requested from the server should be positioned; downsample - the downsample value for the represented region; server - the server to i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:3399,Integrability,interface,interface,3399,"litConnectedRegions(SparseImageServer server,; double distancePixels,; boolean permitBoundsOverlap). Split a SparseImageServer into multiple servers, whereby each split server represents one connected region. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenatin",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:4094,Integrability,interface,interface,4094,"les, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getManager; public SparseImageServer.SparseImageServerManager getManager(); Get the manager, which defines from whence the regions originate. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata()",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:4349,Integrability,depend,depend,4349,"getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getManager; public SparseImageServer.SparseImageServerManager getManager(); Get the manager, which defines from whence the regions originate. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:4885,Integrability,interface,interface,4885,"s ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getManager; public SparseImageServer.SparseImageServerManager getManager(); Get the manager, which defines from whence the regions originate. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractIm",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:5123,Integrability,interface,interface,5123," Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getManager; public SparseImageServer.SparseImageServerManager getManager(); Get the manager, which defines from whence the regions originate. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. readTile; protected BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a si",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:5852,Integrability,interface,interface,5852,"e: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. readTile; protected BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. splitConnectedRegions; public static List<SparseImageServer> splitConnectedRegions(SparseImageServer server,; double distancePixels,; boolean permitBoundsOverlap); throws IOException; Split a SparseImageServer into multiple servers, whereby each split server represents one connected region.; This can be useful whenever a sparse server contains (for example) multiple pieces of tissue with a substantial gap between them, ; because it allows each piece to be treated as a separate image. Parameters:; server - the sparse server to be split; distancePixels - the maximum separation between regions for them to be considered part of the",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:676,Modifiability,extend,extends,676,". SparseImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.SparseImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class SparseImageServer; extends AbstractTileableImageServer; An ImageServer that combines regions from multiple separate ImageServers, ; repositioning these as necessary to generate one larger field of view.; ; Regions are currently defined within a JSON file passed as the 'path' argument, ; and this also contains the full paths to the other ImageServers. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; SparseImageServer.Builder. Builder to create a new SparseImageServer. static class ; SparseImageServer.SparseImageServerManager. Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. SparseImageServer.SparseImageServerManager; getManager(). Get the manager, which defines from whence the regions originate. ImageServerMetadata; getOriginalMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:2612,Modifiability,inherit,inherited,2612,"fferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. protected ColorModel; getDefaultColorModel(). Get an appropriate colormodel that may be used. SparseImageServer.SparseImageServerManager; getManager(). Get the manager, which defines from whence the regions originate. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. static List<SparseImageServer>; splitConnectedRegions(SparseImageServer server,; double distancePixels,; boolean permitBoundsOverlap). Split a SparseImageServer into multiple servers, whereby each split server represents one connected region. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from cla",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:2794,Modifiability,inherit,inherited,2794," colormodel that may be used. SparseImageServer.SparseImageServerManager; getManager(). Get the manager, which defines from whence the regions originate. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. static List<SparseImageServer>; splitConnectedRegions(SparseImageServer server,; double distancePixels,; boolean permitBoundsOverlap). Split a SparseImageServer into multiple servers, whereby each split server represents one connected region. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:3265,Modifiability,inherit,inherited,3265,". protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. static List<SparseImageServer>; splitConnectedRegions(SparseImageServer server,; double distancePixels,; boolean permitBoundsOverlap). Split a SparseImageServer into multiple servers, whereby each split server represents one connected region. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, som",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:3384,Modifiability,inherit,inherited,3384,"litConnectedRegions(SparseImageServer server,; double distancePixels,; boolean permitBoundsOverlap). Split a SparseImageServer into multiple servers, whereby each split server represents one connected region. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenatin",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:3329,Security,hash,hashCode,3329,"Read a single image tile. static List<SparseImageServer>; splitConnectedRegions(SparseImageServer server,; double distancePixels,; boolean permitBoundsOverlap). Split a SparseImageServer into multiple servers, whereby each split server represents one connected region. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:4177,Usability,simpl,simplest,4177,"mepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getManager; public SparseImageServer.SparseImageServerManager getManager(); Get the manager, which defines from whence the regions originate. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html:4469,Usability,simpl,simple,4469,"lCalibration, readBufferedImage, readRegion, readRegion. Method Details. getDefaultColorModel; protected ColorModel getDefaultColorModel(); Description copied from class: AbstractTileableImageServer; Get an appropriate colormodel that may be used. The default implementation uses ; the default RGB color model for RGB images, or else requests a low-resolution thumbnail ; to extract the color model from it. If neither implementation is sufficient, subclasses ; should override this method. Overrides:; getDefaultColorModel in class AbstractTileableImageServer; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getManager; public SparseImageServer.SparseImageServerManager getManager(); Get the manager, which defines from whence the regions originate. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a Serv",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1209,Availability,avail,available,1209,"sted; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.SparseImageServerManager. java.lang.Object; qupath.lib.images.servers.SparseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server s",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1294,Availability,down,downsample,1294,": ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.SparseImageServerManager. java.lang.Object; qupath.lib.images.servers.SparseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - sp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1341,Availability,down,downsample,1341," Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.SparseImageServerManager. java.lang.Object; qupath.lib.images.servers.SparseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDow",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1686,Availability,avail,available,1686,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1879,Availability,down,downsample,1879,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1946,Availability,down,downsample,1946,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:2093,Availability,down,downsample,2093,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:2252,Availability,down,downsample,2252,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:2275,Availability,down,downsample,2275,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:2444,Integrability,interface,interface,2444,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:675,Modifiability,extend,extends,675,". SparseImageServer.SparseImageServerManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.SparseImageServerManager. java.lang.Object; qupath.lib.images.servers.SparseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1361,Modifiability,inherit,inherited,1361,"th.lib.images.servers; Class SparseImageServer.SparseImageServerManager. java.lang.Object; qupath.lib.images.servers.SparseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOExcepti",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1435,Security,hash,hashCode,1435," java.lang.Object; qupath.lib.images.servers.SparseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:597,Availability,down,downsamples,597,". TileRequest (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TileRequest. java.lang.Object; qupath.lib.images.servers.TileRequest. public class TileRequest; extends Object; A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution.; ; Why?; ; Because downsamples can be defined with floating point precision, and are not always unambiguous when ; calculated as the ratios of pyramid level dimensions (i.e. different apparent horizontal and vertical scaling), ; a RegionRequest is too fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:927,Availability,error,errors,927,". TileRequest (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TileRequest. java.lang.Object; qupath.lib.images.servers.TileRequest. public class TileRequest; extends Object; A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution.; ; Why?; ; Because downsamples can be defined with floating point precision, and are not always unambiguous when ; calculated as the ratios of pyramid level dimensions (i.e. different apparent horizontal and vertical scaling), ; a RegionRequest is too fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:1451,Availability,down,downsample,1451,".servers.TileRequest. public class TileRequest; extends Object; A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution.; ; Why?; ; Because downsamples can be defined with floating point precision, and are not always unambiguous when ; calculated as the ratios of pyramid level dimensions (i.e. different apparent horizontal and vertical scaling), ; a RegionRequest is too fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for this request. int; getImageWidth(). Get the width of the bounding box for this tile in the full resolution image. int; getImageX(). Get the x-coordinate of the bounding box for this tile in the full resolution image. int; getImageY(). Get the y-coordinate of the bounding box for this tile in the full resolution image. int; getLevel(). Get the resolution level. ImagePlane; getPlane(). Deprecated.; v0.4.0 use ge",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:1539,Availability,down,downsample,1539," specify image tiles at a particular resolution.; ; Why?; ; Because downsamples can be defined with floating point precision, and are not always unambiguous when ; calculated as the ratios of pyramid level dimensions (i.e. different apparent horizontal and vertical scaling), ; a RegionRequest is too fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for this request. int; getImageWidth(). Get the width of the bounding box for this tile in the full resolution image. int; getImageX(). Get the x-coordinate of the bounding box for this tile in the full resolution image. int; getImageY(). Get the y-coordinate of the bounding box for this tile in the full resolution image. int; getLevel(). Get the resolution level. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). RegionRequest; getRegionRequest(). Get t",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:1816,Availability,down,downsample,1816,"oo fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for this request. int; getImageWidth(). Get the width of the bounding box for this tile in the full resolution image. int; getImageX(). Get the x-coordinate of the bounding box for this tile in the full resolution image. int; getImageY(). Get the y-coordinate of the bounding box for this tile in the full resolution image. int; getLevel(). Get the resolution level. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). RegionRequest; getRegionRequest(). Get the RegionRequest that this tile represents. int; getT(). Get the time point index for this request. int; getTileHeight(). Get the height of the bounding box for this tile at the tile resolution. int; getTileWidth(). Get the width of the bounding box for this tile at the tile resolution. int; getT",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:3566,Availability,avail,available,3566,"est that this tile represents. int; getT(). Get the time point index for this request. int; getTileHeight(). Get the height of the bounding box for this tile at the tile resolution. int; getTileWidth(). Get the width of the bounding box for this tile at the tile resolution. int; getTileX(). Get the x-coordinate of the bounding box for this tile at the tile resolution. int; getTileY(). Get the y-coordinate of the bounding box for this tile at the tile resolution. int; getZ(). Get the z-slice index for this request. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static TileRequest createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageRegion); where possible.; The current method exists for cases where a TileRequest is a useful data structure but it isn't ; associated with a specific image. Parameters:; path - ; level - ; downsample - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). getRegionRequest; public RegionRequest getRegionRequest(); Get the RegionRequest that this tile represents. Returns:. getDownsample; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:3797,Availability,down,downsample,3797,"ution. int; getTileX(). Get the x-coordinate of the bounding box for this tile at the tile resolution. int; getTileY(). Get the y-coordinate of the bounding box for this tile at the tile resolution. int; getZ(). Get the z-slice index for this request. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static TileRequest createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageRegion); where possible.; The current method exists for cases where a TileRequest is a useful data structure but it isn't ; associated with a specific image. Parameters:; path - ; level - ; downsample - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). getRegionRequest; public RegionRequest getRegionRequest(); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:3885,Availability,down,downsample,3885,"ution. int; getTileX(). Get the x-coordinate of the bounding box for this tile at the tile resolution. int; getTileY(). Get the y-coordinate of the bounding box for this tile at the tile resolution. int; getZ(). Get the z-slice index for this request. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static TileRequest createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageRegion); where possible.; The current method exists for cases where a TileRequest is a useful data structure but it isn't ; associated with a specific image. Parameters:; path - ; level - ; downsample - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). getRegionRequest; public RegionRequest getRegionRequest(); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:4312,Availability,down,downsample,4312,"vel,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageRegion); where possible.; The current method exists for cases where a TileRequest is a useful data structure but it isn't ; associated with a specific image. Parameters:; path - ; level - ; downsample - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). getRegionRequest; public RegionRequest getRegionRequest(); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageY; public int getImageY(); Get the y-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageWidth; public int getImageWidth(); Get the width of the bounding box for this tile in the full resolution image. Returns:. getImageHeight; public int getImageHeight(); Get the height of the bounding box for this tile in the full resolution image. Returns:. getTileX; public int getTileX(); Get the x-coordinate of the bounding box for this tile at the tile res",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:4582,Availability,down,downsample,4582,"lable for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageRegion); where possible.; The current method exists for cases where a TileRequest is a useful data structure but it isn't ; associated with a specific image. Parameters:; path - ; level - ; downsample - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). getRegionRequest; public RegionRequest getRegionRequest(); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageY; public int getImageY(); Get the y-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageWidth; public int getImageWidth(); Get the width of the bounding box for this tile in the full resolution image. Returns:. getImageHeight; public int getImageHeight(); Get the height of the bounding box for this tile in the full resolution image. Returns:. getTileX; public int getTileX(); Get the x-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileY; public int getTileY(); Get the y-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileWidth; public int getTileWidth(); Get the width of the bounding box for this tile at the tile resolut",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:481,Integrability,wrap,wrapper,481,". TileRequest (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TileRequest. java.lang.Object; qupath.lib.images.servers.TileRequest. public class TileRequest; extends Object; A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution.; ; Why?; ; Because downsamples can be defined with floating point precision, and are not always unambiguous when ; calculated as the ratios of pyramid level dimensions (i.e. different apparent horizontal and vertical scaling), ; a RegionRequest is too fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:1179,Integrability,wrap,wrap,1179," Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TileRequest. java.lang.Object; qupath.lib.images.servers.TileRequest. public class TileRequest; extends Object; A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution.; ; Why?; ; Because downsamples can be defined with floating point precision, and are not always unambiguous when ; calculated as the ratios of pyramid level dimensions (i.e. different apparent horizontal and vertical scaling), ; a RegionRequest is too fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for this request. int; getImageWidth(). Get the width of the bounding box for this tile in the full resolution image. int; getImageX(). Get the x-coordinate of the bounding box for this tile in the full resolution",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:463,Modifiability,extend,extends,463,". TileRequest (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TileRequest. java.lang.Object; qupath.lib.images.servers.TileRequest. public class TileRequest; extends Object; A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution.; ; Why?; ; Because downsamples can be defined with floating point precision, and are not always unambiguous when ; calculated as the ratios of pyramid level dimensions (i.e. different apparent horizontal and vertical scaling), ; a RegionRequest is too fuzzy a way to refer to a specific rectangle of pixels from a specific pyramid level. ; Rounding errors can easily occur, and different image readers might respond differently to the same request.; ; Consequently, TileRequests provide a means to reproducibly define coordinates at pyramid levels and not only ; the full resolution image space. They wrap a RegionRequest, because this is still used for caching purposes. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static TileRequest; createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion). Create a new tile request for a specified region, downsample and resolution level. static TileRequest; createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion). Create a new tile request for a specified region and resolution level of an image. boolean; equals(Object obj);  ; double; getDownsample(). Get the downsample value for this tile. int; getImageHeight(). Get the height of the bounding box for this tile in the full resolution image. ImagePlane; getImagePlane(). Get the ImagePlane for",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:3114,Modifiability,inherit,inherited,3114,"etImageX(). Get the x-coordinate of the bounding box for this tile in the full resolution image. int; getImageY(). Get the y-coordinate of the bounding box for this tile in the full resolution image. int; getLevel(). Get the resolution level. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). RegionRequest; getRegionRequest(). Get the RegionRequest that this tile represents. int; getT(). Get the time point index for this request. int; getTileHeight(). Get the height of the bounding box for this tile at the tile resolution. int; getTileWidth(). Get the width of the bounding box for this tile at the tile resolution. int; getTileX(). Get the x-coordinate of the bounding box for this tile at the tile resolution. int; getTileY(). Get the y-coordinate of the bounding box for this tile at the tile resolution. int; getZ(). Get the z-slice index for this request. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static TileRequest createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageR",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:3068,Security,hash,hashCode,3068,"le in the full resolution image. int; getImageX(). Get the x-coordinate of the bounding box for this tile in the full resolution image. int; getImageY(). Get the y-coordinate of the bounding box for this tile in the full resolution image. int; getLevel(). Get the resolution level. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). RegionRequest; getRegionRequest(). Get the RegionRequest that this tile represents. int; getT(). Get the time point index for this request. int; getTileHeight(). Get the height of the bounding box for this tile at the tile resolution. int; getTileWidth(). Get the width of the bounding box for this tile at the tile resolution. int; getTileX(). Get the x-coordinate of the bounding box for this tile at the tile resolution. int; getTileY(). Get the y-coordinate of the bounding box for this tile at the tile resolution. int; getZ(). Get the z-slice index for this request. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static TileRequest createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:6242,Security,hash,hashCode,6242,); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageY; public int getImageY(); Get the y-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageWidth; public int getImageWidth(); Get the width of the bounding box for this tile in the full resolution image. Returns:. getImageHeight; public int getImageHeight(); Get the height of the bounding box for this tile in the full resolution image. Returns:. getTileX; public int getTileX(); Get the x-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileY; public int getTileY(); Get the y-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileWidth; public int getTileWidth(); Get the width of the bounding box for this tile at the tile resolution. Returns:. getTileHeight; public int getTileHeight(); Get the height of the bounding box for this tile at the tile resolution. Returns:. getZ; public int getZ(); Get the z-slice index for this request. Returns:. getT; public int getT(); Get the time point index for this request. Returns:. getImagePlane; public ImagePlane getImagePlane(); Get the ImagePlane for this request. Returns:; Since:; v0.4.0 (replaces getPlane() for better consistency with other classes). getPlane; @Deprecated; public ImagePlane getPlane(); Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). Get the ImagePlane for this request. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:6263,Security,hash,hashCode,6263,); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageY; public int getImageY(); Get the y-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageWidth; public int getImageWidth(); Get the width of the bounding box for this tile in the full resolution image. Returns:. getImageHeight; public int getImageHeight(); Get the height of the bounding box for this tile in the full resolution image. Returns:. getTileX; public int getTileX(); Get the x-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileY; public int getTileY(); Get the y-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileWidth; public int getTileWidth(); Get the width of the bounding box for this tile at the tile resolution. Returns:. getTileHeight; public int getTileHeight(); Get the height of the bounding box for this tile at the tile resolution. Returns:. getZ; public int getZ(); Get the z-slice index for this request. Returns:. getT; public int getT(); Get the time point index for this request. Returns:. getImagePlane; public ImagePlane getImagePlane(); Get the ImagePlane for this request. Returns:; Since:; v0.4.0 (replaces getPlane() for better consistency with other classes). getPlane; @Deprecated; public ImagePlane getPlane(); Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). Get the ImagePlane for this request. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:6287,Security,hash,hashCode,6287,); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageY; public int getImageY(); Get the y-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageWidth; public int getImageWidth(); Get the width of the bounding box for this tile in the full resolution image. Returns:. getImageHeight; public int getImageHeight(); Get the height of the bounding box for this tile in the full resolution image. Returns:. getTileX; public int getTileX(); Get the x-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileY; public int getTileY(); Get the y-coordinate of the bounding box for this tile at the tile resolution. Returns:. getTileWidth; public int getTileWidth(); Get the width of the bounding box for this tile at the tile resolution. Returns:. getTileHeight; public int getTileHeight(); Get the height of the bounding box for this tile at the tile resolution. Returns:. getZ; public int getZ(); Get the z-slice index for this request. Returns:. getT; public int getT(); Get the time point index for this request. Returns:. getImagePlane; public ImagePlane getImagePlane(); Get the ImagePlane for this request. Returns:; Since:; v0.4.0 (replaces getPlane() for better consistency with other classes). getPlane; @Deprecated; public ImagePlane getPlane(); Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). Get the ImagePlane for this request. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. toString; public String toString(). Overrides:; toString in class Object. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequestManager.html:949,Availability,error,errors,949,". TileRequestManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface TileRequestManager. public interface TileRequestManager; Helper class to manage tile requests from an ImageServer.; ; The purpose of this is to make it possible to identify the 'optimal' regions to request ; for any particular pixels in the image, based on the resolution levels actually present. ; ; By contrast RegionRequest objects can be used to easily request any pixels at ; any desired resolution, but this flexibility means that one can easily requests pixels ; in an inefficient way - or even inadvertently request pixels multiple times ; (e.g. through rounding errors when requesting pixels at an arbitrary resolution). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Collection<TileRequest>; getAllTileRequests(). Get TileRequest objects for all tiles that this server supports. TileRequest; getTileRequest(int level,; int x,; int y,; int z,; int t). Get the single TileRequest containing a specified pixel, or null if no such request exists. Collection<TileRequest>; getTileRequests(RegionRequest request). Get a collection of TileRequest objects necessary to fulfil a specific RegionRequest. Collection<TileRequest>; getTileRequestsForLevel(int level). Get TileRequest objects for all tiles that this server supports ; at the specified resolution level. Method Details. getAllTileRequests; Collection<TileRequest> getAllTileRequests(); Get TileRequest objects for all tiles that this server supports.; ; This should return an exhaustive collection of non-overlapping tiles, such that ; making requests for each of these would result ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequestManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequestManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequestManager.html:405,Integrability,interface,interface,405,". TileRequestManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface TileRequestManager. public interface TileRequestManager; Helper class to manage tile requests from an ImageServer.; ; The purpose of this is to make it possible to identify the 'optimal' regions to request ; for any particular pixels in the image, based on the resolution levels actually present. ; ; By contrast RegionRequest objects can be used to easily request any pixels at ; any desired resolution, but this flexibility means that one can easily requests pixels ; in an inefficient way - or even inadvertently request pixels multiple times ; (e.g. through rounding errors when requesting pixels at an arbitrary resolution). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Collection<TileRequest>; getAllTileRequests(). Get TileRequest objects for all tiles that this server supports. TileRequest; getTileRequest(int level,; int x,; int y,; int z,; int t). Get the single TileRequest containing a specified pixel, or null if no such request exists. Collection<TileRequest>; getTileRequests(RegionRequest request). Get a collection of TileRequest objects necessary to fulfil a specific RegionRequest. Collection<TileRequest>; getTileRequestsForLevel(int level). Get TileRequest objects for all tiles that this server supports ; at the specified resolution level. Method Details. getAllTileRequests; Collection<TileRequest> getAllTileRequests(); Get TileRequest objects for all tiles that this server supports.; ; This should return an exhaustive collection of non-overlapping tiles, such that ; making requests for each of these would result ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TileRequestManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequestManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html:620,Integrability,wrap,wrapped,620,". TransformedServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TransformedServerBuilder. java.lang.Object; qupath.lib.images.servers.TransformedServerBuilder. public class TransformedServerBuilder; extends Object; Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer.; ; Note: This is an early-stage experimental class, which may well change!. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TransformedServerBuilder(ImageServer<BufferedImage> baseServer). Create a transformed ImageServer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TransformedServerBuilder; averageChannelProject(). Perform an average (mean) projection of the channels. ImageServer<BufferedImage>; build(). Get the ImageServer that applies all the requested transforms. TransformedServerBuilder; concatChannels(Collection<ImageServer<BufferedImage>> additionalChannels). Concatenate a collection of additional servers along the 'channels' dimension (iteration order is used). TransformedServerBuilder; concatChannels(ImageServer<BufferedImage>... additionalChannels). Concatenate additional servers along the 'channels' dimension. TransformedServerBuilder; crop(ImageRegion region). Crop an specified region based on a bounding box. TransformedServerBuilder; deconvolveStains(ColorDeconvolutionStains stains,; int... stainNumbers). Apply color deconvolution to the brightfield image, so that deconvolved stains behave as separate channels/. TransformedServerBuilder; extractChannels(int... channels). Extract specified channels for an image. TransformedServerBuil",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html:515,Modifiability,extend,extends,515,". TransformedServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TransformedServerBuilder. java.lang.Object; qupath.lib.images.servers.TransformedServerBuilder. public class TransformedServerBuilder; extends Object; Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer.; ; Note: This is an early-stage experimental class, which may well change!. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TransformedServerBuilder(ImageServer<BufferedImage> baseServer). Create a transformed ImageServer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TransformedServerBuilder; averageChannelProject(). Perform an average (mean) projection of the channels. ImageServer<BufferedImage>; build(). Get the ImageServer that applies all the requested transforms. TransformedServerBuilder; concatChannels(Collection<ImageServer<BufferedImage>> additionalChannels). Concatenate a collection of additional servers along the 'channels' dimension (iteration order is used). TransformedServerBuilder; concatChannels(ImageServer<BufferedImage>... additionalChannels). Concatenate additional servers along the 'channels' dimension. TransformedServerBuilder; crop(ImageRegion region). Crop an specified region based on a bounding box. TransformedServerBuilder; deconvolveStains(ColorDeconvolutionStains stains,; int... stainNumbers). Apply color deconvolution to the brightfield image, so that deconvolved stains behave as separate channels/. TransformedServerBuilder; extractChannels(int... channels). Extract specified channels for an image. TransformedServerBuil",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html:2600,Modifiability,inherit,inherited,2600,"ion region). Crop an specified region based on a bounding box. TransformedServerBuilder; deconvolveStains(ColorDeconvolutionStains stains,; int... stainNumbers). Apply color deconvolution to the brightfield image, so that deconvolved stains behave as separate channels/. TransformedServerBuilder; extractChannels(int... channels). Extract specified channels for an image. TransformedServerBuilder; extractChannels(String... names). Extract specified channels for an image. TransformedServerBuilder; maxChannelProject(). Perform a maximum projection of the channels. TransformedServerBuilder; minChannelProject(). Perform a minimum projection of the channels. TransformedServerBuilder; reorderRGB(String order). Rearrange the channel order of an RGB image. TransformedServerBuilder; rotate(RotatedImageServer.Rotation rotation). Rotate the image, using an increment of 90 degrees. TransformedServerBuilder; transform(AffineTransform transform). Apply an AffineTransform to the server. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TransformedServerBuilder; public TransformedServerBuilder(ImageServer<BufferedImage> baseServer); Create a transformed ImageServer. Parameters:; baseServer - the initial server that will be transformed. Method Details. crop; public TransformedServerBuilder crop(ImageRegion region); Crop an specified region based on a bounding box. Parameters:; region - ; Returns:. transform; public TransformedServerBuilder transform(AffineTransform transform); Apply an AffineTransform to the server. ; Note that the transform must be invertible, otherwise and IllegalArgumentException will be thrown. Parameters:; transform - ; Returns:. deconvolveStains; public TransformedServerBuilder deconvolveStains(ColorDeconvolutionStains stains,; int... stainNumbers); Apply color deconvolution to the brightfield image, so that deconvolved stains behave as separate channels/.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html:2674,Security,hash,hashCode,2674,"edServerBuilder; deconvolveStains(ColorDeconvolutionStains stains,; int... stainNumbers). Apply color deconvolution to the brightfield image, so that deconvolved stains behave as separate channels/. TransformedServerBuilder; extractChannels(int... channels). Extract specified channels for an image. TransformedServerBuilder; extractChannels(String... names). Extract specified channels for an image. TransformedServerBuilder; maxChannelProject(). Perform a maximum projection of the channels. TransformedServerBuilder; minChannelProject(). Perform a minimum projection of the channels. TransformedServerBuilder; reorderRGB(String order). Rearrange the channel order of an RGB image. TransformedServerBuilder; rotate(RotatedImageServer.Rotation rotation). Rotate the image, using an increment of 90 degrees. TransformedServerBuilder; transform(AffineTransform transform). Apply an AffineTransform to the server. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TransformedServerBuilder; public TransformedServerBuilder(ImageServer<BufferedImage> baseServer); Create a transformed ImageServer. Parameters:; baseServer - the initial server that will be transformed. Method Details. crop; public TransformedServerBuilder crop(ImageRegion region); Crop an specified region based on a bounding box. Parameters:; region - ; Returns:. transform; public TransformedServerBuilder transform(AffineTransform transform); Apply an AffineTransform to the server. ; Note that the transform must be invertible, otherwise and IllegalArgumentException will be thrown. Parameters:; transform - ; Returns:. deconvolveStains; public TransformedServerBuilder deconvolveStains(ColorDeconvolutionStains stains,; int... stainNumbers); Apply color deconvolution to the brightfield image, so that deconvolved stains behave as separate channels/. Parameters:; stains - the stains to apply for color deconvolution; stai",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:3708,Availability,down,downsample,3708,"ngImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int,",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:4222,Availability,down,downsampling,4222,"eton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:2519,Integrability,interface,interface,2519,"erverMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. Collection<URI>; getURIs(). Get the URIs for images required for this server. protected ImageServer<T>; getWrappedServer(). Get underlying ImageServer, i.e. T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface:",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:2885,Integrability,wrap,wrapped,2885,"nherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boun",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:2971,Integrability,interface,interface,2971,"Builder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:3226,Integrability,depend,depend,3226,"getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:3506,Integrability,interface,interface,3506,"Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:4918,Integrability,interface,interface,4918,"eton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:844,Modifiability,extend,extends,844,". TransformingImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class TransformingImageServer<T>. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<T>; qupath.lib.images.servers.TransformingImageServer<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, ImageServer<T>. Direct Known Subclasses:; AffineTransformImageServer, ChannelDisplayTransformServer, ChannelTransformFeatureServer, CroppedImageServer, RearrangeRGBImageServer, RotatedImageServer. public abstract class TransformingImageServer<T>; extends AbstractImageServer<T>; An ImageServer implementation used to apply transforms to another ImageServer.; This might be a spatial or pixel intensity transformation, for example.; ; Subclasses may only implement the methods necessary to apply the required transform, ; such as readRegion(RegionRequest) since much of the remaining functionality ; is left up to the AbstractImageServer implementation. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; TransformingImageServer(ImageServer<T> server);  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. Collection<URI>; getURIs(). Get the URIs for images required for this server. protected ImageServer<T>; getWrappedServer(). Get underlying ImageServer, i.e. T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssoci",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:1876,Modifiability,inherit,inherited,1876,"erver implementation used to apply transforms to another ImageServer.; This might be a spatial or pixel intensity transformation, for example.; ; Subclasses may only implement the methods necessary to apply the required transform, ; such as readRegion(RegionRequest) since much of the remaining functionality ; is left up to the AbstractImageServer implementation. Author:; Pete Bankhead. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; TransformingImageServer(ImageServer<T> server);  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. Collection<URI>; getURIs(). Get the URIs for images required for this server. protected ImageServer<T>; getWrappedServer(). Get underlying ImageServer, i.e. T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being w",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:2385,Modifiability,inherit,inherited,2385,"T> server);  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. Collection<URI>; getURIs(). Get the URIs for images required for this server. protected ImageServer<T>; getWrappedServer(). Get underlying ImageServer, i.e. T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder()",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:2504,Modifiability,inherit,inherited,2504,"erverMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. Collection<URI>; getURIs(). Get the URIs for images required for this server. protected ImageServer<T>; getWrappedServer(). Get underlying ImageServer, i.e. T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface:",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:3848,Modifiability,extend,extends,3848,"etURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:4397,Safety,avoid,avoid,4397,"eton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:2449,Security,hash,hashCode,2449,"rete Methods. Modifier and Type; Method; Description; ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. Collection<URI>; getURIs(). Get the URIs for images required for this server. protected ImageServer<T>; getWrappedServer(). Get underlying ImageServer, i.e. T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, createID, createServerBuilder, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest requ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:3054,Usability,simpl,simplest,3054,"aultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the req",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html:3346,Usability,simpl,simple,3346,"Timepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, getServerType, readBufferedImage, readRegion, readRegion. Constructor Details. TransformingImageServer; protected TransformingImageServer(ImageServer<T> server). Method Details. getWrappedServer; protected ImageServer<T> getWrappedServer(); Get underlying ImageServer, i.e. the one that is being wrapped. Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. readRegion; public T readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformingImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:794,Integrability,wrap,wraps,794,". WrappedBufferedImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class WrappedBufferedImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.WrappedBufferedImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class WrappedBufferedImageServer; extends AbstractTileableImageServer; Implementation of an ImageServer that simply wraps an existing BufferedImage.; ; This may help whenever requiring a server, but only having a BufferedImage. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WrappedBufferedImageServer(String imageName,; BufferedImage img). Create an ImageServer<BufferedImage> using an image that has been provided directly. WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels). Create an ImageServer<BufferedImage> using an image that has been provided directly. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image til",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:2828,Integrability,interface,interface,2828,"Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:3233,Integrability,wrap,wrap,3233,"le, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; p",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:3540,Integrability,wrap,wrap,3540,", getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public Im",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:3747,Integrability,interface,interface,3747,"etClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:4002,Integrability,depend,depend,4002,"feredImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilde",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:4386,Integrability,interface,interface,4386,"Image img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. readTile; protected BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:4624,Integrability,interface,interface,4624,"Image img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. readTile; protected BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:712,Modifiability,extend,extends,712,". WrappedBufferedImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class WrappedBufferedImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.WrappedBufferedImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class WrappedBufferedImageServer; extends AbstractTileableImageServer; Implementation of an ImageServer that simply wraps an existing BufferedImage.; ; This may help whenever requiring a server, but only having a BufferedImage. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WrappedBufferedImageServer(String imageName,; BufferedImage img). Create an ImageServer<BufferedImage> using an image that has been provided directly. WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels). Create an ImageServer<BufferedImage> using an image that has been provided directly. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image til",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:2012,Modifiability,inherit,inherited,2012,"ing imageName,; BufferedImage img). Create an ImageServer<BufferedImage> using an image that has been provided directly. WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels). Create an ImageServer<BufferedImage> using an image that has been provided directly. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:2216,Modifiability,inherit,inherited,2216,"> channels). Create an ImageServer<BufferedImage> using an image that has been provided directly. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedIm",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:2694,Modifiability,inherit,inherited,2694,"er. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collect",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:2813,Modifiability,inherit,inherited,2813,"Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:2758,Security,hash,hashCode,2758,"erver, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; close, finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageSe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:787,Usability,simpl,simply,787,". WrappedBufferedImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class WrappedBufferedImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.WrappedBufferedImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class WrappedBufferedImageServer; extends AbstractTileableImageServer; Implementation of an ImageServer that simply wraps an existing BufferedImage.; ; This may help whenever requiring a server, but only having a BufferedImage. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WrappedBufferedImageServer(String imageName,; BufferedImage img). Create an ImageServer<BufferedImage> using an image that has been provided directly. WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels). Create an ImageServer<BufferedImage> using an image that has been provided directly. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected String; createID(). Returns a UUID. protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns null (does not support ServerBuilders). ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. protected BufferedImage; readTile(TileRequest tileRequest). Read a single image til",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:3830,Usability,simpl,simplest,3830,"geServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html:4122,Usability,simpl,simple,4122," image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap. WrappedBufferedImageServer; public WrappedBufferedImageServer(String imageName,; BufferedImage img,; List<ImageChannel> channels); Create an ImageServer<BufferedImage> using an image that has been provided directly. Parameters:; imageName - a name to display (may be null); img - the BufferedImage to wrap; channels - the ImageChannels, required in case the preferred channel colors cannot be obtained from the image itself. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Returns a UUID. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. readTile; protected BufferedImage readTile(TileRequest tileRequest); throws IOE",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/WrappedBufferedImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html:516,Integrability,interface,interface,516,". ImageWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Interface ImageWriter<T>. Type Parameters:; T - . All Known Implementing Classes:; JpegWriter, OMETiffWriter, PngWriter, TiffWriterIJ, ZipWriterIJ. public interface ImageWriter<T>; Interface for defining class that can write images.; ; This may not have been a particularly good idea and may change in the future... (e.g. using services?).; ; As it is, it's best to avoid using it because the design is rather clumsy (and goes back to a day whenever ; external dependencies were avoided with an enthusiasm that may have been a bit too much). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default String; getDefaultExtension(). Get the default extension. String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<T>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<T> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImageServer<T> server,; OutputS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html:822,Integrability,depend,dependencies,822,". ImageWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Interface ImageWriter<T>. Type Parameters:; T - . All Known Implementing Classes:; JpegWriter, OMETiffWriter, PngWriter, TiffWriterIJ, ZipWriterIJ. public interface ImageWriter<T>; Interface for defining class that can write images.; ; This may not have been a particularly good idea and may change in the future... (e.g. using services?).; ; As it is, it's best to avoid using it because the design is rather clumsy (and goes back to a day whenever ; external dependencies were avoided with an enthusiasm that may have been a bit too much). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default String; getDefaultExtension(). Get the default extension. String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<T>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<T> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImageServer<T> server,; OutputS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html:727,Safety,avoid,avoid,727,". ImageWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Interface ImageWriter<T>. Type Parameters:; T - . All Known Implementing Classes:; JpegWriter, OMETiffWriter, PngWriter, TiffWriterIJ, ZipWriterIJ. public interface ImageWriter<T>; Interface for defining class that can write images.; ; This may not have been a particularly good idea and may change in the future... (e.g. using services?).; ; As it is, it's best to avoid using it because the design is rather clumsy (and goes back to a day whenever ; external dependencies were avoided with an enthusiasm that may have been a bit too much). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default String; getDefaultExtension(). Get the default extension. String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<T>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<T> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImageServer<T> server,; OutputS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html:840,Safety,avoid,avoided,840,". ImageWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Interface ImageWriter<T>. Type Parameters:; T - . All Known Implementing Classes:; JpegWriter, OMETiffWriter, PngWriter, TiffWriterIJ, ZipWriterIJ. public interface ImageWriter<T>; Interface for defining class that can write images.; ; This may not have been a particularly good idea and may change in the future... (e.g. using services?).; ; As it is, it's best to avoid using it because the design is rather clumsy (and goes back to a day whenever ; external dependencies were avoided with an enthusiasm that may have been a bit too much). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default String; getDefaultExtension(). Get the default extension. String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<T>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<T> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImageServer<T> server,; OutputS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html:483,Modifiability,extend,extends,483,". ImageWriterTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Class ImageWriterTools. java.lang.Object; qupath.lib.images.writers.ImageWriterTools. public class ImageWriterTools; extends Object; Static methods to access ImageWriter objects and write images. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageWriterTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> List<ImageWriter<T>>; getCompatibleWriters(Class<T> imageClass,; String ext). Get a list of compatible ImageWriters for a specific image class. static <T> List<ImageWriter<T>>; getCompatibleWriters(ImageServer<T> server,; String ext). Get a list of compatible ImageWriters compatible with a specific server. static boolean; writeImage(BufferedImage img,; String path). Write a 2D image using the default writer based on the file path. static boolean; writeImage(ImageServer<BufferedImage> server,; String path). Write a (possibly multidimensional) image region using the default writer based on the file path. static boolean; writeImageRegion(ImageServer<BufferedImage> server,; RegionRequest request,; String path). Write a 2D image region using the default writer based on the file path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageWriterTools; public ImageWriterTools(). Method Details. getCompatibleWriters; public static <T> List<ImageWriter<T>> getCompatibleWriters(ImageServer<T> server,; String ext); Get a list of compatible ImageWriters compatible with a specific server. Type Parameters:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html:1578,Modifiability,inherit,inherited,1578,"Constructor Summary; Constructors. Constructor; Description; ImageWriterTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> List<ImageWriter<T>>; getCompatibleWriters(Class<T> imageClass,; String ext). Get a list of compatible ImageWriters for a specific image class. static <T> List<ImageWriter<T>>; getCompatibleWriters(ImageServer<T> server,; String ext). Get a list of compatible ImageWriters compatible with a specific server. static boolean; writeImage(BufferedImage img,; String path). Write a 2D image using the default writer based on the file path. static boolean; writeImage(ImageServer<BufferedImage> server,; String path). Write a (possibly multidimensional) image region using the default writer based on the file path. static boolean; writeImageRegion(ImageServer<BufferedImage> server,; RegionRequest request,; String path). Write a 2D image region using the default writer based on the file path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageWriterTools; public ImageWriterTools(). Method Details. getCompatibleWriters; public static <T> List<ImageWriter<T>> getCompatibleWriters(ImageServer<T> server,; String ext); Get a list of compatible ImageWriters compatible with a specific server. Type Parameters:; T - ; Parameters:; server - ; ext - ; Returns:; getCompatibleWriters(Class, String). getCompatibleWriters; public static <T> List<ImageWriter<T>> getCompatibleWriters(Class<T> imageClass,; String ext); Get a list of compatible ImageWriters for a specific image class.; ; The returned list is sorted, with the 'preferred' server coming first. ; This decision is made based upon whether the writer supports pixel calibration information and. Type Parameters:; T - ; Parameters:; imageClass - the image class (e.g. BufferedImage.class); ext - the desired output file extension (e.g. "".jpg""",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html:517,Security,access,access,517,". ImageWriterTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Class ImageWriterTools. java.lang.Object; qupath.lib.images.writers.ImageWriterTools. public class ImageWriterTools; extends Object; Static methods to access ImageWriter objects and write images. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageWriterTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> List<ImageWriter<T>>; getCompatibleWriters(Class<T> imageClass,; String ext). Get a list of compatible ImageWriters for a specific image class. static <T> List<ImageWriter<T>>; getCompatibleWriters(ImageServer<T> server,; String ext). Get a list of compatible ImageWriters compatible with a specific server. static boolean; writeImage(BufferedImage img,; String path). Write a 2D image using the default writer based on the file path. static boolean; writeImage(ImageServer<BufferedImage> server,; String path). Write a (possibly multidimensional) image region using the default writer based on the file path. static boolean; writeImageRegion(ImageServer<BufferedImage> server,; RegionRequest request,; String path). Write a 2D image region using the default writer based on the file path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageWriterTools; public ImageWriterTools(). Method Details. getCompatibleWriters; public static <T> List<ImageWriter<T>> getCompatibleWriters(ImageServer<T> server,; String ext); Get a list of compatible ImageWriters compatible with a specific server. Type Parameters:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html:1652,Security,hash,hashCode,1652,"Tools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> List<ImageWriter<T>>; getCompatibleWriters(Class<T> imageClass,; String ext). Get a list of compatible ImageWriters for a specific image class. static <T> List<ImageWriter<T>>; getCompatibleWriters(ImageServer<T> server,; String ext). Get a list of compatible ImageWriters compatible with a specific server. static boolean; writeImage(BufferedImage img,; String path). Write a 2D image using the default writer based on the file path. static boolean; writeImage(ImageServer<BufferedImage> server,; String path). Write a (possibly multidimensional) image region using the default writer based on the file path. static boolean; writeImageRegion(ImageServer<BufferedImage> server,; RegionRequest request,; String path). Write a 2D image region using the default writer based on the file path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageWriterTools; public ImageWriterTools(). Method Details. getCompatibleWriters; public static <T> List<ImageWriter<T>> getCompatibleWriters(ImageServer<T> server,; String ext); Get a list of compatible ImageWriters compatible with a specific server. Type Parameters:; T - ; Parameters:; server - ; ext - ; Returns:; getCompatibleWriters(Class, String). getCompatibleWriters; public static <T> List<ImageWriter<T>> getCompatibleWriters(Class<T> imageClass,; String ext); Get a list of compatible ImageWriters for a specific image class.; ; The returned list is sorted, with the 'preferred' server coming first. ; This decision is made based upon whether the writer supports pixel calibration information and. Type Parameters:; T - ; Parameters:; imageClass - the image class (e.g. BufferedImage.class); ext - the desired output file extension (e.g. "".jpg"", "".tif"").; Returns:; getCompatibleWriters(ImageServer, String). writeIm",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ImageWriterTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:2561,Integrability,interface,interface,2561,"f writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:2759,Integrability,interface,interface,2759," output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:2891,Integrability,interface,interface,2891,"eredImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getIm",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:3113,Integrability,interface,interface,3113,"ge to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in inter",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:3206,Integrability,interface,interface,3206,"ified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can hand",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:3384,Integrability,interface,interface,3384,"o a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supports",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:3749,Integrability,interface,interface,3749,"Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of s",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:3840,Integrability,interface,interface,3840,"getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. sup",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:3980,Integrability,interface,interface,3980," Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWrite",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4080,Integrability,interface,interface,4080,"Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4191,Integrability,interface,interface,4191,"riteImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4289,Integrability,interface,interface,4289,"on. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB();",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4416,Integrability,interface,interface,4416,"extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; suppor",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4543,Integrability,interface,interface,4543,"associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4670,Integrability,interface,interface,4670,"; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4803,Integrability,interface,interface,4803,"Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; p",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:4963,Integrability,interface,interface,4963,"ription copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Descri",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:5184,Integrability,interface,interface,5184," ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeI",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:5323,Integrability,interface,interface,5323,"; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copie",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:5430,Integrability,interface,interface,5430,"; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:5637,Integrability,interface,interface,5637," supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedIma",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:5733,Integrability,interface,interface,5733,"ied by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interf",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:5979,Integrability,interface,interface,5979,"cription copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:6072,Integrability,interface,interface,6072," the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interfac",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:6332,Integrability,interface,interface,6332," ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:6437,Integrability,interface,interface,6437," ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:6665,Integrability,interface,interface,6665," ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:6767,Integrability,interface,interface,6767," ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:6996,Integrability,interface,interface,6996," ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:7098,Integrability,interface,interface,7098," ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:516,Modifiability,extend,extends,516,". JpegWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Class JpegWriter. java.lang.Object; qupath.lib.images.writers.JpegWriter. All Implemented Interfaces:; ImageWriter<BufferedImage>. public class JpegWriter; extends Object; ImageWriter implementation to write JPEG images using ImageIO. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; JpegWriter();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<BufferedImage>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<BufferedImage> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:2407,Modifiability,inherit,inherited,2407,"apable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:2546,Modifiability,inherit,inherited,2546,"f writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html:2481,Security,hash,hashCode,2481,"ter can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. JpegWriter; public JpegWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/JpegWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/JpegWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/package-summary.html:684,Security,access,accessing,684,". qupath.lib.images.writers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.writers. package qupath.lib.images.writers. Supports for writing images of various kinds in various ways. Related Packages. Package; Description; qupath.lib.images. Defines the ImageData class to represent the key data associated with an analyzed image. qupath.lib.images.writers.ome. Write OME-TIFF images. qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath. All Classes and InterfacesInterfacesClasses. Class; Description; ImageWriter<T>. Interface for defining class that can write images. ImageWriterTools. Static methods to access ImageWriter objects and write images. JpegWriter. ImageWriter implementation to write JPEG images using ImageIO. PngWriter. ImageWriter implementation to write PNG images using ImageIO. TileExporter. Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/package-summary.html:894,Security,access,access,894,". qupath.lib.images.writers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.writers. package qupath.lib.images.writers. Supports for writing images of various kinds in various ways. Related Packages. Package; Description; qupath.lib.images. Defines the ImageData class to represent the key data associated with an analyzed image. qupath.lib.images.writers.ome. Write OME-TIFF images. qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath. All Classes and InterfacesInterfacesClasses. Class; Description; ImageWriter<T>. Interface for defining class that can write images. ImageWriterTools. Static methods to access ImageWriter objects and write images. JpegWriter. ImageWriter implementation to write JPEG images using ImageIO. PngWriter. ImageWriter implementation to write PNG images using ImageIO. TileExporter. Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:2555,Integrability,interface,interface,2555,"f writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied fro",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:2751,Integrability,interface,interface,2751,"ed output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Descr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:2901,Integrability,interface,interface,2901,"fferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:3301,Integrability,interface,interface,3301,"ageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:3394,Integrability,interface,interface,3394,".lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:3554,Integrability,interface,interface,3554,"path.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Desc",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:3769,Integrability,interface,interface,3769,"eWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:3990,Integrability,interface,interface,3990,"leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4146,Integrability,interface,interface,4146,"he preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of s",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4237,Integrability,interface,interface,4237,"tput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. sup",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4377,Integrability,interface,interface,4377,"writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probabl",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4477,Integrability,interface,interface,4477,"on. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; publ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4588,Integrability,interface,interface,4588,"details of the writer, which may be displayed to a user. Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4686,Integrability,interface,interface,4686,"ortsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4813,Integrability,interface,interface,4813,"ded by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Thro",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:4940,Integrability,interface,interface,4940,"t-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:5067,Integrability,interface,interface,5067,"; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface I",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:5200,Integrability,interface,interface,5200,"Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageSe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:5315,Integrability,interface,interface,5315,"portsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copie",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:5422,Integrability,interface,interface,5422,"ltiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:5629,Integrability,interface,interface,5629," from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedIma",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:5725,Integrability,interface,interface,5725,"an supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interf",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:5971,Integrability,interface,interface,5971,"al in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:6064,Integrability,interface,interface,6064," true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interfac",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:6324,Integrability,interface,interface,6324,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:6429,Integrability,interface,interface,6429,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:6657,Integrability,interface,interface,6657,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:6759,Integrability,interface,interface,6759,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:6988,Integrability,interface,interface,6988,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:7090,Integrability,interface,interface,7090,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:512,Modifiability,extend,extends,512,". PngWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Class PngWriter. java.lang.Object; qupath.lib.images.writers.PngWriter. All Implemented Interfaces:; ImageWriter<BufferedImage>. public class PngWriter; extends Object; ImageWriter implementation to write PNG images using ImageIO. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PngWriter();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<BufferedImage>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<BufferedImage> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeI",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:2401,Modifiability,inherit,inherited,2401,"apable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageW",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:2540,Modifiability,inherit,inherited,2540,"f writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. getDetails; public String getDetails(); Description copied fro",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html:2475,Security,hash,hashCode,2475,"ter can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. PngWriter; public PngWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOExc",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/PngWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/PngWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:1369,Availability,down,downsample,1369,"rter. java.lang.Object; qupath.lib.images.writers.TileExporter. public class TileExporter; extends Object; Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileExporter(ImageData<BufferedImage> imageData). Create a builder to export tiles. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TileExporter; annotatedCentroidTilesOnly(boolean annotatedCentroidTilesOnly). Specify whether tiles without any annotations over the tile centroid should be included. TileExporter; annotatedTilesOnly(boolean annotatedTilesOnly). Specify whether tiles that do not overlap with any annotations should be included. TileExporter; channels(int... channels). Export only specified channels. TileExporter; channels(String... channelNames). Export only specified channels, identified by name. TileExporter; downsample(double downsample). Define resolution as a downsample value. TileExporter; exportJson(boolean exportJson). Optionally export a JSON file that includes label information and image/label pairs, where available. TileExporter; fullImageTile(). Specify that a single tile should be generated corresponding to the full image. TileExporter; imageExtension(String ext). Specify a file extension for the original pixels, which determines the export file format. TileExporter; imageSubDir(String subdir). Specify a subdirectory within which image tiles should be saved. TileExporter; includePartialTiles(boolean includePartialTiles). Specify whether incomplete tiles at image boundaries should be included. TileExporter; labeledImageExtension(String ext). Specify a file extension for the labelled image, which determines the export file format. TileExporter; labeledImageId(String labelId). Specify an identifier appended to the filename for labeled images. TileExporter; labeledImageSubDir(String subdir).",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:1387,Availability,down,downsample,1387,"rter. java.lang.Object; qupath.lib.images.writers.TileExporter. public class TileExporter; extends Object; Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileExporter(ImageData<BufferedImage> imageData). Create a builder to export tiles. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TileExporter; annotatedCentroidTilesOnly(boolean annotatedCentroidTilesOnly). Specify whether tiles without any annotations over the tile centroid should be included. TileExporter; annotatedTilesOnly(boolean annotatedTilesOnly). Specify whether tiles that do not overlap with any annotations should be included. TileExporter; channels(int... channels). Export only specified channels. TileExporter; channels(String... channelNames). Export only specified channels, identified by name. TileExporter; downsample(double downsample). Define resolution as a downsample value. TileExporter; exportJson(boolean exportJson). Optionally export a JSON file that includes label information and image/label pairs, where available. TileExporter; fullImageTile(). Specify that a single tile should be generated corresponding to the full image. TileExporter; imageExtension(String ext). Specify a file extension for the original pixels, which determines the export file format. TileExporter; imageSubDir(String subdir). Specify a subdirectory within which image tiles should be saved. TileExporter; includePartialTiles(boolean includePartialTiles). Specify whether incomplete tiles at image boundaries should be included. TileExporter; labeledImageExtension(String ext). Specify a file extension for the labelled image, which determines the export file format. TileExporter; labeledImageId(String labelId). Specify an identifier appended to the filename for labeled images. TileExporter; labeledImageSubDir(String subdir).",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:1423,Availability,down,downsample,1423,"riters.TileExporter. public class TileExporter; extends Object; Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileExporter(ImageData<BufferedImage> imageData). Create a builder to export tiles. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TileExporter; annotatedCentroidTilesOnly(boolean annotatedCentroidTilesOnly). Specify whether tiles without any annotations over the tile centroid should be included. TileExporter; annotatedTilesOnly(boolean annotatedTilesOnly). Specify whether tiles that do not overlap with any annotations should be included. TileExporter; channels(int... channels). Export only specified channels. TileExporter; channels(String... channelNames). Export only specified channels, identified by name. TileExporter; downsample(double downsample). Define resolution as a downsample value. TileExporter; exportJson(boolean exportJson). Optionally export a JSON file that includes label information and image/label pairs, where available. TileExporter; fullImageTile(). Specify that a single tile should be generated corresponding to the full image. TileExporter; imageExtension(String ext). Specify a file extension for the original pixels, which determines the export file format. TileExporter; imageSubDir(String subdir). Specify a subdirectory within which image tiles should be saved. TileExporter; includePartialTiles(boolean includePartialTiles). Specify whether incomplete tiles at image boundaries should be included. TileExporter; labeledImageExtension(String ext). Specify a file extension for the labelled image, which determines the export file format. TileExporter; labeledImageId(String labelId). Specify an identifier appended to the filename for labeled images. TileExporter; labeledImageSubDir(String subdir). Specify a subdirectory within which labele",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:1578,Availability,avail,available,1578,"further analysis elsewhere or for training up an AI algorithm. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileExporter(ImageData<BufferedImage> imageData). Create a builder to export tiles. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TileExporter; annotatedCentroidTilesOnly(boolean annotatedCentroidTilesOnly). Specify whether tiles without any annotations over the tile centroid should be included. TileExporter; annotatedTilesOnly(boolean annotatedTilesOnly). Specify whether tiles that do not overlap with any annotations should be included. TileExporter; channels(int... channels). Export only specified channels. TileExporter; channels(String... channelNames). Export only specified channels, identified by name. TileExporter; downsample(double downsample). Define resolution as a downsample value. TileExporter; exportJson(boolean exportJson). Optionally export a JSON file that includes label information and image/label pairs, where available. TileExporter; fullImageTile(). Specify that a single tile should be generated corresponding to the full image. TileExporter; imageExtension(String ext). Specify a file extension for the original pixels, which determines the export file format. TileExporter; imageSubDir(String subdir). Specify a subdirectory within which image tiles should be saved. TileExporter; includePartialTiles(boolean includePartialTiles). Specify whether incomplete tiles at image boundaries should be included. TileExporter; labeledImageExtension(String ext). Specify a file extension for the labelled image, which determines the export file format. TileExporter; labeledImageId(String labelId). Specify an identifier appended to the filename for labeled images. TileExporter; labeledImageSubDir(String subdir). Specify a subdirectory within which labeled image tiles should be saved. TileExporter; labeledServer(ImageServer<BufferedImage> server). Optional server provid",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:3203,Availability,down,downsample,3203,"rmines the export file format. TileExporter; labeledImageId(String labelId). Specify an identifier appended to the filename for labeled images. TileExporter; labeledImageSubDir(String subdir). Specify a subdirectory within which labeled image tiles should be saved. TileExporter; labeledServer(ImageServer<BufferedImage> server). Optional server providing image labels. TileExporter; overlap(int overlap). Define tile overlap (both x and y) in pixel units at the export resolution. TileExporter; overlap(int overlapX,; int overlapY). Define tile overlap (x and y separately) in pixel units at the export resolution. TileExporter; parentObjects(Collection<? extends PathObject> parentObjects). Specify parent objects to define tiles. TileExporter; parentObjects(Predicate<PathObject> filter). Specify a filter to extract parent objects to define tiles. TileExporter; region(ImageRegion region). Define the region to be processed. TileExporter; region(RegionRequest region). Define the region to be processed, including downsample. TileExporter; requestedPixelSize(double pixelSize). Define resolution as a pixel size in calibrated units. TileExporter; tileSize(int tileSize). Define the tile size in pixel units at the export resolution. TileExporter; tileSize(int tileWidth,; int tileHeight). Define the horizontal and vertical tile size in pixel units at the export resolution. TileExporter; tRange(int minT,; int maxT). Define the range of timepoints to process. TileExporter; useROIBounds(boolean fullROIs). Optionally use the full ROI for parent objects, rather than tileSize(int, int). void; writeTiles(String dirOutput). Export the image tiles to the specified directory. TileExporter; zRange(int minZ,; int maxZ). Define the range of Z-slices to process. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TileExporter; public TileExporter(ImageData<BufferedImage> imageData); Create a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:7163,Availability,down,downsample,7163,"on of QuPath to preserve image type. Parameters:; channels - channels to export (0-based indexing); Returns:; this exporter. channels; public TileExporter channels(String... channelNames); Export only specified channels, identified by name.; ; Note: currently, this always involved conversion to 32-bit.; This behavior may change in a future version of QuPath to preserve image type. Parameters:; channelNames - channels to export; Returns:; this exporter. overlap; public TileExporter overlap(int overlap); Define tile overlap (both x and y) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlap - ; Returns:; this exporter. overlap; public TileExporter overlap(int overlapX,; int overlapY); Define tile overlap (x and y separately) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlapX - ; overlapY - ; Returns:; this exporter. downsample; public TileExporter downsample(double downsample); Define resolution as a downsample value. Parameters:; downsample - ; Returns:; this exporter; See Also:. requestedPixelSize(double). requestedPixelSize; public TileExporter requestedPixelSize(double pixelSize); Define resolution as a pixel size in calibrated units. The actual units depend upon those stored within the server. Parameters:; pixelSize - ; Returns:; this exporter. includePartialTiles; public TileExporter includePartialTiles(boolean includePartialTiles); Specify whether incomplete tiles at image boundaries should be included.; ; If true, then when tiling the entire image some tiles may not have the specified tile width or height, ; or alternatively when creating tiles based upon object centroids then some zero-padding may be required ; to ensure the center is preserved along with the tile dimensions.; Default is false. Parameters:; includePartialTiles - ; Returns:; this exporter; See Also:. tileSize(int, int); parentObjects(Predicate); parentObjects(Collection); ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:7195,Availability,down,downsample,7195,"on of QuPath to preserve image type. Parameters:; channels - channels to export (0-based indexing); Returns:; this exporter. channels; public TileExporter channels(String... channelNames); Export only specified channels, identified by name.; ; Note: currently, this always involved conversion to 32-bit.; This behavior may change in a future version of QuPath to preserve image type. Parameters:; channelNames - channels to export; Returns:; this exporter. overlap; public TileExporter overlap(int overlap); Define tile overlap (both x and y) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlap - ; Returns:; this exporter. overlap; public TileExporter overlap(int overlapX,; int overlapY); Define tile overlap (x and y separately) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlapX - ; overlapY - ; Returns:; this exporter. downsample; public TileExporter downsample(double downsample); Define resolution as a downsample value. Parameters:; downsample - ; Returns:; this exporter; See Also:. requestedPixelSize(double). requestedPixelSize; public TileExporter requestedPixelSize(double pixelSize); Define resolution as a pixel size in calibrated units. The actual units depend upon those stored within the server. Parameters:; pixelSize - ; Returns:; this exporter. includePartialTiles; public TileExporter includePartialTiles(boolean includePartialTiles); Specify whether incomplete tiles at image boundaries should be included.; ; If true, then when tiling the entire image some tiles may not have the specified tile width or height, ; or alternatively when creating tiles based upon object centroids then some zero-padding may be required ; to ensure the center is preserved along with the tile dimensions.; Default is false. Parameters:; includePartialTiles - ; Returns:; this exporter; See Also:. tileSize(int, int); parentObjects(Predicate); parentObjects(Collection); ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:7213,Availability,down,downsample,7213,"on of QuPath to preserve image type. Parameters:; channels - channels to export (0-based indexing); Returns:; this exporter. channels; public TileExporter channels(String... channelNames); Export only specified channels, identified by name.; ; Note: currently, this always involved conversion to 32-bit.; This behavior may change in a future version of QuPath to preserve image type. Parameters:; channelNames - channels to export; Returns:; this exporter. overlap; public TileExporter overlap(int overlap); Define tile overlap (both x and y) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlap - ; Returns:; this exporter. overlap; public TileExporter overlap(int overlapX,; int overlapY); Define tile overlap (x and y separately) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlapX - ; overlapY - ; Returns:; this exporter. downsample; public TileExporter downsample(double downsample); Define resolution as a downsample value. Parameters:; downsample - ; Returns:; this exporter; See Also:. requestedPixelSize(double). requestedPixelSize; public TileExporter requestedPixelSize(double pixelSize); Define resolution as a pixel size in calibrated units. The actual units depend upon those stored within the server. Parameters:; pixelSize - ; Returns:; this exporter. includePartialTiles; public TileExporter includePartialTiles(boolean includePartialTiles); Specify whether incomplete tiles at image boundaries should be included.; ; If true, then when tiling the entire image some tiles may not have the specified tile width or height, ; or alternatively when creating tiles based upon object centroids then some zero-padding may be required ; to ensure the center is preserved along with the tile dimensions.; Default is false. Parameters:; includePartialTiles - ; Returns:; this exporter; See Also:. tileSize(int, int); parentObjects(Predicate); parentObjects(Collection); ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:7249,Availability,down,downsample,7249,"on of QuPath to preserve image type. Parameters:; channels - channels to export (0-based indexing); Returns:; this exporter. channels; public TileExporter channels(String... channelNames); Export only specified channels, identified by name.; ; Note: currently, this always involved conversion to 32-bit.; This behavior may change in a future version of QuPath to preserve image type. Parameters:; channelNames - channels to export; Returns:; this exporter. overlap; public TileExporter overlap(int overlap); Define tile overlap (both x and y) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlap - ; Returns:; this exporter. overlap; public TileExporter overlap(int overlapX,; int overlapY); Define tile overlap (x and y separately) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlapX - ; overlapY - ; Returns:; this exporter. downsample; public TileExporter downsample(double downsample); Define resolution as a downsample value. Parameters:; downsample - ; Returns:; this exporter; See Also:. requestedPixelSize(double). requestedPixelSize; public TileExporter requestedPixelSize(double pixelSize); Define resolution as a pixel size in calibrated units. The actual units depend upon those stored within the server. Parameters:; pixelSize - ; Returns:; this exporter. includePartialTiles; public TileExporter includePartialTiles(boolean includePartialTiles); Specify whether incomplete tiles at image boundaries should be included.; ; If true, then when tiling the entire image some tiles may not have the specified tile width or height, ; or alternatively when creating tiles based upon object centroids then some zero-padding may be required ; to ensure the center is preserved along with the tile dimensions.; Default is false. Parameters:; includePartialTiles - ; Returns:; this exporter; See Also:. tileSize(int, int); parentObjects(Predicate); parentObjects(Collection); ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:7280,Availability,down,downsample,7280,"ased indexing); Returns:; this exporter. channels; public TileExporter channels(String... channelNames); Export only specified channels, identified by name.; ; Note: currently, this always involved conversion to 32-bit.; This behavior may change in a future version of QuPath to preserve image type. Parameters:; channelNames - channels to export; Returns:; this exporter. overlap; public TileExporter overlap(int overlap); Define tile overlap (both x and y) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlap - ; Returns:; this exporter. overlap; public TileExporter overlap(int overlapX,; int overlapY); Define tile overlap (x and y separately) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlapX - ; overlapY - ; Returns:; this exporter. downsample; public TileExporter downsample(double downsample); Define resolution as a downsample value. Parameters:; downsample - ; Returns:; this exporter; See Also:. requestedPixelSize(double). requestedPixelSize; public TileExporter requestedPixelSize(double pixelSize); Define resolution as a pixel size in calibrated units. The actual units depend upon those stored within the server. Parameters:; pixelSize - ; Returns:; this exporter. includePartialTiles; public TileExporter includePartialTiles(boolean includePartialTiles); Specify whether incomplete tiles at image boundaries should be included.; ; If true, then when tiling the entire image some tiles may not have the specified tile width or height, ; or alternatively when creating tiles based upon object centroids then some zero-padding may be required ; to ensure the center is preserved along with the tile dimensions.; Default is false. Parameters:; includePartialTiles - ; Returns:; this exporter; See Also:. tileSize(int, int); parentObjects(Predicate); parentObjects(Collection); useROIBounds(boolean). region; public TileExporter region(RegionRequest region); Def",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:8340,Availability,down,downsample,8340,"; Returns:; this exporter; See Also:. requestedPixelSize(double). requestedPixelSize; public TileExporter requestedPixelSize(double pixelSize); Define resolution as a pixel size in calibrated units. The actual units depend upon those stored within the server. Parameters:; pixelSize - ; Returns:; this exporter. includePartialTiles; public TileExporter includePartialTiles(boolean includePartialTiles); Specify whether incomplete tiles at image boundaries should be included.; ; If true, then when tiling the entire image some tiles may not have the specified tile width or height, ; or alternatively when creating tiles based upon object centroids then some zero-padding may be required ; to ensure the center is preserved along with the tile dimensions.; Default is false. Parameters:; includePartialTiles - ; Returns:; this exporter; See Also:. tileSize(int, int); parentObjects(Predicate); parentObjects(Collection); useROIBounds(boolean). region; public TileExporter region(RegionRequest region); Define the region to be processed, including downsample. Default is the full image. Parameters:; region - ; Returns:; this exporter; See Also:. region(ImageRegion). region; public TileExporter region(ImageRegion region); Define the region to be processed. Default is the full image. Parameters:; region - ; Returns:; this exporter; See Also:. region(RegionRequest). zRange; public TileExporter zRange(int minZ,; int maxZ); Define the range of Z-slices to process. Default is all Z-slices (0 to nZSlices).; Note: the range is from minZ (included) to maxZ (excluded). -1 can be ; used for maxZ to process all Z-slices without having to indicate the exact max number. Parameters:; minZ - the lower value (included); maxZ - the higher value (excluded); Returns:; this exporter. tRange; public TileExporter tRange(int minT,; int maxT); Define the range of timepoints to process. Default is all timepoints (0 to nTimepoints).; Note: the range is from minT (included) to maxT (excluded). -1 can be ; used f",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:12437,Availability,avail,available,12437,"erver(ImageServer<BufferedImage> server); Optional server providing image labels.; These may be export as corresponding images alongside the 'original' pixels, e.g. to create ; training data for an AI algorithm. Parameters:; server - the labeled server; Returns:; this exporter. imageSubDir; public TileExporter imageSubDir(String subdir); Specify a subdirectory within which image tiles should be saved.; By default, tiles are written to the directory specified within writeTiles(String).; This option makes it possible to split images and labels into separate subdirectories. Parameters:; subdir - ; Returns:; this exporter. labeledImageSubDir; public TileExporter labeledImageSubDir(String subdir); Specify a subdirectory within which labeled image tiles should be saved.; By default, tile labels are written to the directory specified within writeTiles(String).; This option makes it possible to split images and labels into separate subdirectories.; ; Only relevant if labeledServer(ImageServer) is provided. Parameters:; subdir - ; Returns:; this exporter. labeledImageId; public TileExporter labeledImageId(String labelId); Specify an identifier appended to the filename for labeled images.; The labeled image name will be in the format imageName + labeledImageId + labeledImageExtension.; ; This can be used to avoid name clashes with export image tiles.; If not specified, QuPath will generate a default ID if required.; ; Only relevant if labeledServer(ImageServer) is provided. Parameters:; labelId - ; Returns:; this exporter. exportJson; public TileExporter exportJson(boolean exportJson); Optionally export a JSON file that includes label information and image/label pairs, where available. Parameters:; exportJson - ; Returns:; this exporter. writeTiles; public void writeTiles(String dirOutput); throws IOException; Export the image tiles to the specified directory. Parameters:; dirOutput - full path to the export directory; Throws:; IOException - if an error occurs during export. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:12715,Availability,error,error,12715,"erver(ImageServer<BufferedImage> server); Optional server providing image labels.; These may be export as corresponding images alongside the 'original' pixels, e.g. to create ; training data for an AI algorithm. Parameters:; server - the labeled server; Returns:; this exporter. imageSubDir; public TileExporter imageSubDir(String subdir); Specify a subdirectory within which image tiles should be saved.; By default, tiles are written to the directory specified within writeTiles(String).; This option makes it possible to split images and labels into separate subdirectories. Parameters:; subdir - ; Returns:; this exporter. labeledImageSubDir; public TileExporter labeledImageSubDir(String subdir); Specify a subdirectory within which labeled image tiles should be saved.; By default, tile labels are written to the directory specified within writeTiles(String).; This option makes it possible to split images and labels into separate subdirectories.; ; Only relevant if labeledServer(ImageServer) is provided. Parameters:; subdir - ; Returns:; this exporter. labeledImageId; public TileExporter labeledImageId(String labelId); Specify an identifier appended to the filename for labeled images.; The labeled image name will be in the format imageName + labeledImageId + labeledImageExtension.; ; This can be used to avoid name clashes with export image tiles.; If not specified, QuPath will generate a default ID if required.; ; Only relevant if labeledServer(ImageServer) is provided. Parameters:; labelId - ; Returns:; this exporter. exportJson; public TileExporter exportJson(boolean exportJson); Optionally export a JSON file that includes label information and image/label pairs, where available. Parameters:; exportJson - ; Returns:; this exporter. writeTiles; public void writeTiles(String dirOutput); throws IOException; Export the image tiles to the specified directory. Parameters:; dirOutput - full path to the export directory; Throws:; IOException - if an error occurs during export. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:7509,Integrability,depend,depend,7509,"is behavior may change in a future version of QuPath to preserve image type. Parameters:; channelNames - channels to export; Returns:; this exporter. overlap; public TileExporter overlap(int overlap); Define tile overlap (both x and y) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlap - ; Returns:; this exporter. overlap; public TileExporter overlap(int overlapX,; int overlapY); Define tile overlap (x and y separately) in pixel units at the export resolution.; This is ignored if 'parentObjects' are specified. Parameters:; overlapX - ; overlapY - ; Returns:; this exporter. downsample; public TileExporter downsample(double downsample); Define resolution as a downsample value. Parameters:; downsample - ; Returns:; this exporter; See Also:. requestedPixelSize(double). requestedPixelSize; public TileExporter requestedPixelSize(double pixelSize); Define resolution as a pixel size in calibrated units. The actual units depend upon those stored within the server. Parameters:; pixelSize - ; Returns:; this exporter. includePartialTiles; public TileExporter includePartialTiles(boolean includePartialTiles); Specify whether incomplete tiles at image boundaries should be included.; ; If true, then when tiling the entire image some tiles may not have the specified tile width or height, ; or alternatively when creating tiles based upon object centroids then some zero-padding may be required ; to ensure the center is preserved along with the tile dimensions.; Default is false. Parameters:; includePartialTiles - ; Returns:; this exporter; See Also:. tileSize(int, int); parentObjects(Predicate); parentObjects(Collection); useROIBounds(boolean). region; public TileExporter region(RegionRequest region); Define the region to be processed, including downsample. Default is the full image. Parameters:; region - ; Returns:; this exporter; See Also:. region(ImageRegion). region; public TileExporter region(ImageRegion region); Define",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:467,Modifiability,extend,extends,467,". TileExporter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers; Class TileExporter. java.lang.Object; qupath.lib.images.writers.TileExporter. public class TileExporter; extends Object; Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileExporter(ImageData<BufferedImage> imageData). Create a builder to export tiles. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TileExporter; annotatedCentroidTilesOnly(boolean annotatedCentroidTilesOnly). Specify whether tiles without any annotations over the tile centroid should be included. TileExporter; annotatedTilesOnly(boolean annotatedTilesOnly). Specify whether tiles that do not overlap with any annotations should be included. TileExporter; channels(int... channels). Export only specified channels. TileExporter; channels(String... channelNames). Export only specified channels, identified by name. TileExporter; downsample(double downsample). Define resolution as a downsample value. TileExporter; exportJson(boolean exportJson). Optionally export a JSON file that includes label information and image/label pairs, where available. TileExporter; fullImageTile(). Specify that a single tile should be generated corresponding to the full image. TileExporter; imageExtension(String ext). Specify a file extension for the original pixels, which determines the export file format. TileExporter; imageSubDir(String subdir). Specify a subdirectory within which image tiles should be saved. TileExporter; includePartialTiles(boolean includePartialTiles",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:2842,Modifiability,extend,extends,2842,"xporter; imageSubDir(String subdir). Specify a subdirectory within which image tiles should be saved. TileExporter; includePartialTiles(boolean includePartialTiles). Specify whether incomplete tiles at image boundaries should be included. TileExporter; labeledImageExtension(String ext). Specify a file extension for the labelled image, which determines the export file format. TileExporter; labeledImageId(String labelId). Specify an identifier appended to the filename for labeled images. TileExporter; labeledImageSubDir(String subdir). Specify a subdirectory within which labeled image tiles should be saved. TileExporter; labeledServer(ImageServer<BufferedImage> server). Optional server providing image labels. TileExporter; overlap(int overlap). Define tile overlap (both x and y) in pixel units at the export resolution. TileExporter; overlap(int overlapX,; int overlapY). Define tile overlap (x and y separately) in pixel units at the export resolution. TileExporter; parentObjects(Collection<? extends PathObject> parentObjects). Specify parent objects to define tiles. TileExporter; parentObjects(Predicate<PathObject> filter). Specify a filter to extract parent objects to define tiles. TileExporter; region(ImageRegion region). Define the region to be processed. TileExporter; region(RegionRequest region). Define the region to be processed, including downsample. TileExporter; requestedPixelSize(double pixelSize). Define resolution as a pixel size in calibrated units. TileExporter; tileSize(int tileSize). Define the tile size in pixel units at the export resolution. TileExporter; tileSize(int tileWidth,; int tileHeight). Define the horizontal and vertical tile size in pixel units at the export resolution. TileExporter; tRange(int minT,; int maxT). Define the range of timepoints to process. TileExporter; useROIBounds(boolean fullROIs). Optionally use the full ROI for parent objects, rather than tileSize(int, int). void; writeTiles(String dirOutput). Export the image tiles to t",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:3955,Modifiability,inherit,inherited,3955,"ect> filter). Specify a filter to extract parent objects to define tiles. TileExporter; region(ImageRegion region). Define the region to be processed. TileExporter; region(RegionRequest region). Define the region to be processed, including downsample. TileExporter; requestedPixelSize(double pixelSize). Define resolution as a pixel size in calibrated units. TileExporter; tileSize(int tileSize). Define the tile size in pixel units at the export resolution. TileExporter; tileSize(int tileWidth,; int tileHeight). Define the horizontal and vertical tile size in pixel units at the export resolution. TileExporter; tRange(int minT,; int maxT). Define the range of timepoints to process. TileExporter; useROIBounds(boolean fullROIs). Optionally use the full ROI for parent objects, rather than tileSize(int, int). void; writeTiles(String dirOutput). Export the image tiles to the specified directory. TileExporter; zRange(int minZ,; int maxZ). Define the range of Z-slices to process. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TileExporter; public TileExporter(ImageData<BufferedImage> imageData); Create a builder to export tiles. Parameters:; imageData - . Method Details. parentObjects; public TileExporter parentObjects(Predicate<PathObject> filter); Specify a filter to extract parent objects to define tiles.; Tiles are either generated based upon the ROI centroid (in which case the specified tile size is respected) ; or the ROI bounding box (with the specified tile size ignored). Parameters:; filter - ; Returns:; this exporter; See Also:. parentObjects(Collection); useROIBounds(boolean); includePartialTiles(boolean). parentObjects; public TileExporter parentObjects(Collection<? extends PathObject> parentObjects); Specify parent objects to define tiles.; Tiles are either generated based upon the ROI centroid (in which case the specified tile size is respected) ; or th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:4772,Modifiability,extend,extends,4772,"id; writeTiles(String dirOutput). Export the image tiles to the specified directory. TileExporter; zRange(int minZ,; int maxZ). Define the range of Z-slices to process. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TileExporter; public TileExporter(ImageData<BufferedImage> imageData); Create a builder to export tiles. Parameters:; imageData - . Method Details. parentObjects; public TileExporter parentObjects(Predicate<PathObject> filter); Specify a filter to extract parent objects to define tiles.; Tiles are either generated based upon the ROI centroid (in which case the specified tile size is respected) ; or the ROI bounding box (with the specified tile size ignored). Parameters:; filter - ; Returns:; this exporter; See Also:. parentObjects(Collection); useROIBounds(boolean); includePartialTiles(boolean). parentObjects; public TileExporter parentObjects(Collection<? extends PathObject> parentObjects); Specify parent objects to define tiles.; Tiles are either generated based upon the ROI centroid (in which case the specified tile size is respected) ; or the ROI bounding box (with the specified tile size ignored). Parameters:; parentObjects - ; Returns:; this exporter; See Also:. parentObjects(Predicate); useROIBounds(boolean); includePartialTiles(boolean). useROIBounds; public TileExporter useROIBounds(boolean fullROIs); Optionally use the full ROI for parent objects, rather than tileSize(int, int). Parameters:; fullROIs - if true, use the bounding box of the ROI; Returns:; this exporter; See Also:. parentObjects(Collection); parentObjects(Predicate). fullImageTile; public TileExporter fullImageTile(); Specify that a single tile should be generated corresponding to the full image. Returns:; this exporter. tileSize; public TileExporter tileSize(int tileSize); Define the tile size in pixel units at the export resolution. Parameters:; tileSize - ; Returns:;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:12062,Safety,avoid,avoid,12062,"erver(ImageServer<BufferedImage> server); Optional server providing image labels.; These may be export as corresponding images alongside the 'original' pixels, e.g. to create ; training data for an AI algorithm. Parameters:; server - the labeled server; Returns:; this exporter. imageSubDir; public TileExporter imageSubDir(String subdir); Specify a subdirectory within which image tiles should be saved.; By default, tiles are written to the directory specified within writeTiles(String).; This option makes it possible to split images and labels into separate subdirectories. Parameters:; subdir - ; Returns:; this exporter. labeledImageSubDir; public TileExporter labeledImageSubDir(String subdir); Specify a subdirectory within which labeled image tiles should be saved.; By default, tile labels are written to the directory specified within writeTiles(String).; This option makes it possible to split images and labels into separate subdirectories.; ; Only relevant if labeledServer(ImageServer) is provided. Parameters:; subdir - ; Returns:; this exporter. labeledImageId; public TileExporter labeledImageId(String labelId); Specify an identifier appended to the filename for labeled images.; The labeled image name will be in the format imageName + labeledImageId + labeledImageExtension.; ; This can be used to avoid name clashes with export image tiles.; If not specified, QuPath will generate a default ID if required.; ; Only relevant if labeledServer(ImageServer) is provided. Parameters:; labelId - ; Returns:; this exporter. exportJson; public TileExporter exportJson(boolean exportJson); Optionally export a JSON file that includes label information and image/label pairs, where available. Parameters:; exportJson - ; Returns:; this exporter. writeTiles; public void writeTiles(String dirOutput); throws IOException; Export the image tiles to the specified directory. Parameters:; dirOutput - full path to the export directory; Throws:; IOException - if an error occurs during export. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:4029,Security,hash,hashCode,4029,". TileExporter; region(ImageRegion region). Define the region to be processed. TileExporter; region(RegionRequest region). Define the region to be processed, including downsample. TileExporter; requestedPixelSize(double pixelSize). Define resolution as a pixel size in calibrated units. TileExporter; tileSize(int tileSize). Define the tile size in pixel units at the export resolution. TileExporter; tileSize(int tileWidth,; int tileHeight). Define the horizontal and vertical tile size in pixel units at the export resolution. TileExporter; tRange(int minT,; int maxT). Define the range of timepoints to process. TileExporter; useROIBounds(boolean fullROIs). Optionally use the full ROI for parent objects, rather than tileSize(int, int). void; writeTiles(String dirOutput). Export the image tiles to the specified directory. TileExporter; zRange(int minZ,; int maxZ). Define the range of Z-slices to process. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TileExporter; public TileExporter(ImageData<BufferedImage> imageData); Create a builder to export tiles. Parameters:; imageData - . Method Details. parentObjects; public TileExporter parentObjects(Predicate<PathObject> filter); Specify a filter to extract parent objects to define tiles.; Tiles are either generated based upon the ROI centroid (in which case the specified tile size is respected) ; or the ROI bounding box (with the specified tile size ignored). Parameters:; filter - ; Returns:; this exporter; See Also:. parentObjects(Collection); useROIBounds(boolean); includePartialTiles(boolean). parentObjects; public TileExporter parentObjects(Collection<? extends PathObject> parentObjects); Specify parent objects to define tiles.; Tiles are either generated based upon the ROI centroid (in which case the specified tile size is respected) ; or the ROI bounding box (with the specified tile size ignored). Parameters:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/TileExporter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:3303,Integrability,interface,interface,3303,"server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). Returns:. getURIs; public Collection<URI> getURIs(); Description copied from i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:4299,Integrability,interface,interface,4299,"m interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; public String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns a build",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:4554,Integrability,depend,depend,4554,"ormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; public String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns a builder capable of creating a server like this one. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getSeries; public int getSeries(); Get the series index, as used by Bio-Formats. Retur",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:5895,Integrability,interface,interface,5895,"getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns a builder capable of creating a server like this one. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getSeries; public int getSeries(); Get the series index, as used by Bio-Formats. Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; O",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:6108,Integrability,interface,interface,6108,"ageServer<BufferedImage>; Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns a builder capable of creating a server like this one. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getSeries; public int getSeries(); Get the series index, as used by Bio-Formats. Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:6608,Integrability,interface,interface,6608,"st); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getFile; public File getFile(); Get the underlying file. Returns:. getOriginalMetadata; public ImageServerMetadata getOrigin",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:6885,Integrability,interface,interface,6885,"turns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getFile; public File getFile(); Get the underlying file. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:7162,Integrability,interface,interface,7162,"turns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getFile; public File getFile(); Get the underlying file. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:7272,Integrability,interface,interface,7272,"turns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getFile; public File getFile(); Get the underlying file. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:7629,Integrability,interface,interface,7629,"turns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getFile; public File getFile(); Get the underlying file. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:714,Modifiability,extend,extends,714,". BioFormatsImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.bioformats.BioFormatsImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class BioFormatsImageServer; extends AbstractTileableImageServer; QuPath ImageServer that uses the Bio-Formats library to read image data.; ; See http://www.openmicroscopy.org/site/products/bio-formats; ; See also https://docs.openmicroscopy.org/bio-formats/6.5.1/developers/matlab-dev.html#improving-reading-performance. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; BioFormatsImageServer(URI uri,; String... args). Create an ImageServer using the Bio-Formats library. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns a builder capable of creating a server like this one. String; dumpMetadata(). Retrieve a string representation of the metadata OME-XML. BufferedImage; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. File; getFile(). Get the underlying file. String; getFormat(). Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). OMEPyramidSto",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:2538,Modifiability,inherit,inherited,2538,"pable of creating a server like this one. String; dumpMetadata(). Retrieve a string representation of the metadata OME-XML. BufferedImage; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. File; getFile(). Get the underlying file. String; getFormat(). Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). OMEPyramidStore; getMetadataStore(). Get the MetadataStore, as used by Bio-Formats. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. int; getSeries(). Get the series index, as used by Bio-Formats. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOExcep",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:2742,Modifiability,inherit,inherited,2742,"ated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. File; getFile(). Get the underlying file. String; getFormat(). Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). OMEPyramidStore; getMetadataStore(). Get the MetadataStore, as used by Bio-Formats. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. int; getSeries(). Get the series index, as used by Bio-Formats. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where a",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:3169,Modifiability,inherit,inherited,3169," int; getSeries(). Get the series index, as used by Bio-Formats. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returne",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:3288,Modifiability,inherit,inherited,3288,"server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). Returns:. getURIs; public Collection<URI> getURIs(); Description copied from i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:994,Performance,perform,performance,994,". BioFormatsImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.bioformats.BioFormatsImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class BioFormatsImageServer; extends AbstractTileableImageServer; QuPath ImageServer that uses the Bio-Formats library to read image data.; ; See http://www.openmicroscopy.org/site/products/bio-formats; ; See also https://docs.openmicroscopy.org/bio-formats/6.5.1/developers/matlab-dev.html#improving-reading-performance. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; BioFormatsImageServer(URI uri,; String... args). Create an ImageServer using the Bio-Formats library. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Returns a builder capable of creating a server like this one. String; dumpMetadata(). Retrieve a string representation of the metadata OME-XML. BufferedImage; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. File; getFile(). Get the underlying file. String; getFormat(). Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). OMEPyramidSto",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:3233,Security,hash,hashCode,3233,"s. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). Returns:. getURIs;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:6380,Security,access,accessible,6380,"d by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getSeries; public int getSeries(); Get the series index, as used by Bio-Formats. Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class Abstrac",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:4382,Usability,simpl,simplest,4382,"structor Details. BioFormatsImageServer; public BioFormatsImageServer(URI uri,; String... args); throws FormatException,; IOException,; loci.common.services.DependencyException,; loci.common.services.ServiceException,; URISyntaxException; Create an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; public String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns a builder capable of creating a server like this one. Specified by:; createServerBuilder in class AbstractImageServer<Buffer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:4674,Usability,simpl,simple,4674,"eate an ImageServer using the Bio-Formats library.; ; This requires an absolute URI, where an integer fragment can be used to define the series number. Parameters:; uri - for the image that should be opened; this might include a sub-image as a query or fragment.; args - optional arguments; Throws:; FormatException; IOException; loci.common.services.DependencyException; loci.common.services.ServiceException; URISyntaxException. Method Details. getFormat; public String getFormat(); Get the format String, as returned by Bio-Formats IFormatReader.getFormat(). Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; public String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns a builder capable of creating a server like this one. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getSeries; public int getSeries(); Get the series index, as used by Bio-Formats. Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileab",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html:6737,Usability,simpl,simply,6737,"; tileRequest - ; Returns:; Throws:; IOException. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. getMetadataStore; public OMEPyramidStore getMetadataStore(); Get the MetadataStore, as used by Bio-Formats. This can be used to query metadata values not otherwise accessible. Returns:. dumpMetadata; public String dumpMetadata(); Retrieve a string representation of the metadata OME-XML. Returns:. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getFile; public File getFile(); Get the underlying file. Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageSer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html:721,Modifiability,extend,extends,721,". BioFormatsOptionsExtension.BioFormatsPreferences (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsOptionsExtension.BioFormatsPreferences. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.BioFormatsPreferences. Enclosing class:; BioFormatsOptionsExtension. @PrefCategory(""Prefs.BioFormats""); public static class BioFormatsOptionsExtension.BioFormatsPreferences; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final BooleanProperty; enableBioformats;  ; final BooleanProperty; filesOnly;  ; final IntegerProperty; memoizationTimeMillis;  ; final StringProperty; pathMemoization;  ; final StringProperty; skipExtensions;  ; final StringProperty; useExtensions;  ; final BooleanProperty; useParallelization;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. enableBioformats; @BooleanPref(""Prefs.BioFormats.enable""); public final BooleanProperty enableBioformats. filesOnly; @BooleanPref(""Prefs.BioFormats.localOnly""); public final BooleanProperty filesOnly. useParallelization; @BooleanPref(""Prefs.BioFormats.useParallelization""); public final BooleanProperty useParallelization. memoizationTimeMillis; @IntegerPref(""Prefs.BioFormats.memoizationTimeMillis""); public final IntegerProperty memoizationTimeMillis. pathMemoization; @DirectoryPref(""Prefs.BioFormats.pathMemoization""); public final StringProperty pathMemoization. useExtensions; @StringPref(""Prefs.BioFormats.alwaysUseExtensions""); public final StringProperty useExtensions. skipExtensions; @StringPref(""Prefs.BioFormats.skipExte",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html:1122,Modifiability,inherit,inherited,1122,"ath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsOptionsExtension.BioFormatsPreferences. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.BioFormatsPreferences. Enclosing class:; BioFormatsOptionsExtension. @PrefCategory(""Prefs.BioFormats""); public static class BioFormatsOptionsExtension.BioFormatsPreferences; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final BooleanProperty; enableBioformats;  ; final BooleanProperty; filesOnly;  ; final IntegerProperty; memoizationTimeMillis;  ; final StringProperty; pathMemoization;  ; final StringProperty; skipExtensions;  ; final StringProperty; useExtensions;  ; final BooleanProperty; useParallelization;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. enableBioformats; @BooleanPref(""Prefs.BioFormats.enable""); public final BooleanProperty enableBioformats. filesOnly; @BooleanPref(""Prefs.BioFormats.localOnly""); public final BooleanProperty filesOnly. useParallelization; @BooleanPref(""Prefs.BioFormats.useParallelization""); public final BooleanProperty useParallelization. memoizationTimeMillis; @IntegerPref(""Prefs.BioFormats.memoizationTimeMillis""); public final IntegerProperty memoizationTimeMillis. pathMemoization; @DirectoryPref(""Prefs.BioFormats.pathMemoization""); public final StringProperty pathMemoization. useExtensions; @StringPref(""Prefs.BioFormats.alwaysUseExtensions""); public final StringProperty useExtensions. skipExtensions; @StringPref(""Prefs.BioFormats.skipExtensions""); public final StringProperty skipExtensions. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html:1196,Security,hash,hashCode,1196,"ath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsOptionsExtension.BioFormatsPreferences. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.BioFormatsPreferences. Enclosing class:; BioFormatsOptionsExtension. @PrefCategory(""Prefs.BioFormats""); public static class BioFormatsOptionsExtension.BioFormatsPreferences; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final BooleanProperty; enableBioformats;  ; final BooleanProperty; filesOnly;  ; final IntegerProperty; memoizationTimeMillis;  ; final StringProperty; pathMemoization;  ; final StringProperty; skipExtensions;  ; final StringProperty; useExtensions;  ; final BooleanProperty; useParallelization;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. enableBioformats; @BooleanPref(""Prefs.BioFormats.enable""); public final BooleanProperty enableBioformats. filesOnly; @BooleanPref(""Prefs.BioFormats.localOnly""); public final BooleanProperty filesOnly. useParallelization; @BooleanPref(""Prefs.BioFormats.useParallelization""); public final BooleanProperty useParallelization. memoizationTimeMillis; @IntegerPref(""Prefs.BioFormats.memoizationTimeMillis""); public final IntegerProperty memoizationTimeMillis. pathMemoization; @DirectoryPref(""Prefs.BioFormats.pathMemoization""); public final StringProperty pathMemoization. useExtensions; @StringPref(""Prefs.BioFormats.alwaysUseExtensions""); public final StringProperty useExtensions. skipExtensions; @StringPref(""Prefs.BioFormats.skipExtensions""); public final StringProperty skipExtensions. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.BioFormatsPreferences.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1449,Deployability,install,installExtension,1449,"s.bioformats.BioFormatsOptionsExtension. All Implemented Interfaces:; QuPathExtension. public class BioFormatsOptionsExtension; extends Object; implements QuPathExtension; A QuPath extension that adds options relating to the BioFormatsImageServer to the main QuPath preference pane. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; BioFormatsOptionsExtension.BioFormatsPreferences;  ; static class ; BioFormatsOptionsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied fr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1862,Deployability,install,installExtension,1862,"onsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1892,Deployability,install,installExtension,1892,"onsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2302,Deployability,install,installExtension,2302,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1695,Integrability,interface,interface,1695,"FormatsImageServer to the main QuPath preference pane. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; BioFormatsOptionsExtension.BioFormatsPreferences;  ; static class ; BioFormatsOptionsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1952,Integrability,interface,interface,1952,"onsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns th",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2322,Integrability,interface,interface,2322,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2466,Integrability,interface,interface,2466,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2555,Integrability,interface,interface,2555,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2664,Integrability,interface,interface,2664,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2844,Integrability,interface,interface,2844,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:3058,Integrability,interface,interface,3058,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:591,Modifiability,extend,extends,591,". BioFormatsOptionsExtension (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsOptionsExtension. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension. All Implemented Interfaces:; QuPathExtension. public class BioFormatsOptionsExtension; extends Object; implements QuPathExtension; A QuPath extension that adds options relating to the BioFormatsImageServer to the main QuPath preference pane. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; BioFormatsOptionsExtension.BioFormatsPreferences;  ; static class ; BioFormatsOptionsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1541,Modifiability,inherit,inherited,1541," public class BioFormatsOptionsExtension; extends Object; implements QuPathExtension; A QuPath extension that adds options relating to the BioFormatsImageServer to the main QuPath preference pane. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; BioFormatsOptionsExtension.BioFormatsPreferences;  ; static class ; BioFormatsOptionsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getNam",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1680,Modifiability,inherit,inherited,1680,"FormatsImageServer to the main QuPath preference pane. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; BioFormatsOptionsExtension.BioFormatsPreferences;  ; static class ; BioFormatsOptionsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1615,Security,hash,hashCode,1615,"athExtension; A QuPath extension that adds options relating to the BioFormatsImageServer to the main QuPath preference pane. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; BioFormatsOptionsExtension.BioFormatsPreferences;  ; static class ; BioFormatsOptionsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2233,Testability,test,test,2233,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html:678,Modifiability,extend,extends,678,". BioFormatsOptionsExtension.OmeTiffWriterAction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsOptionsExtension.OmeTiffWriterAction. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.OmeTiffWriterAction. Enclosing class:; BioFormatsOptionsExtension. public static class BioFormatsOptionsExtension.OmeTiffWriterAction; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; actionWriter;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. actionWriter; @ActionMenu({""Menu.File"",""Menu.File.ExportImage""}); @ActionConfig(""Action.BioFormats.exportOmeTif""); public final org.controlsfx.control.action.Action actionWriter. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html:841,Modifiability,inherit,inherited,841,". BioFormatsOptionsExtension.OmeTiffWriterAction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsOptionsExtension.OmeTiffWriterAction. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.OmeTiffWriterAction. Enclosing class:; BioFormatsOptionsExtension. public static class BioFormatsOptionsExtension.OmeTiffWriterAction; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; actionWriter;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. actionWriter; @ActionMenu({""Menu.File"",""Menu.File.ExportImage""}); @ActionConfig(""Action.BioFormats.exportOmeTif""); public final org.controlsfx.control.action.Action actionWriter. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html:915,Security,hash,hashCode,915,". BioFormatsOptionsExtension.OmeTiffWriterAction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsOptionsExtension.OmeTiffWriterAction. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.OmeTiffWriterAction. Enclosing class:; BioFormatsOptionsExtension. public static class BioFormatsOptionsExtension.OmeTiffWriterAction; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; actionWriter;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. actionWriter; @ActionMenu({""Menu.File"",""Menu.File.ExportImage""}); @ActionConfig(""Action.BioFormats.exportOmeTif""); public final org.controlsfx.control.action.Action actionWriter. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.OmeTiffWriterAction.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:787,Integrability,interface,interfaces,787,". BioFormatsServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsServerBuilder. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class BioFormatsServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that make use of the Bio-Formats library. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; BioFormatsServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:813,Integrability,interface,interface,813,". BioFormatsServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsServerBuilder. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class BioFormatsServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that make use of the Bio-Formats library. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; BioFormatsServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:2235,Integrability,interface,interface,2235,"dServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. BioFormatsServerBuilder; public BioFormatsServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:2354,Integrability,interface,interface,2354,">; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. BioFormatsServerBuilder; public BioFormatsServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable desc",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:2662,Integrability,interface,interface,2662,"by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. BioFormatsServerBuilder; public BioFormatsServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images sup",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:2888,Integrability,interface,interface,2888,"e, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. BioFormatsServerBuilder; public BioFormatsServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:3090,Integrability,interface,interface,3090,"Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may ov",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:3214,Integrability,interface,interface,3214,"ed from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:3341,Integrability,interface,interface,3341," in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuild",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:3467,Integrability,interface,interface,3467,"e used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:3604,Integrability,interface,interface,3604,"e used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:3771,Integrability,interface,interface,3771,"e used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:3919,Integrability,interface,interface,3919,"e used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:4325,Integrability,interface,interface,4325,"e used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:597,Modifiability,extend,extends,597,". BioFormatsServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsServerBuilder. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class BioFormatsServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that make use of the Bio-Formats library. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; BioFormatsServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:798,Modifiability,inherit,inherited,798,". BioFormatsServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsServerBuilder. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class BioFormatsServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that make use of the Bio-Formats library. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; BioFormatsServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:1898,Modifiability,inherit,inherited,1898,"der<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; BioFormatsServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. BioFormatsServerBuilder; public BioFormatsServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:1972,Security,hash,hashCode,1972,"der.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; BioFormatsServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. BioFormatsServerBuilder; public BioFormatsServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String ar",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:4065,Usability,simpl,simple,4065,"e used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html:4146,Usability,intuit,intuitive,4146,"e used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); throws IOException; Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:; Throws:; IOException. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:1441,Availability,avail,available,1441,"upath.lib.images.servers.bioformats.BioFormatsServerOptions. public class BioFormatsServerOptions; extends Object; Container for various options that can customize the behavior of the BioFormatsImageServer. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static String; ALLOW_MEMOIZATION_PROPERTY. System property controlling whether memoization is allowed or not. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static boolean; allowMemoization(). Check whether memoization should be allowed or not. boolean; bioformatsEnabled(). Returns true if Bio-Formats is enabled and may be used to read images. void; clearReaderOptions(). Clear all reader options, returning these to their defaults. boolean; getFilesOnly(). Returns true if Bio-Formats is restricted to support only local files, not other URLs. static BioFormatsServerOptions; getInstance(). Get the static instance of BioFormatsServerOptions, available to servers being constructed. int; getMemoizationTimeMillis(). Returns the number of milliseconds that must elapse when opening an image before a memoization file is generated. String; getPathMemoization(). Get the path to the directory where memoization files should be written, or null if no path is set. Map<String,String>; getReaderOptions(). Get a map representing additional arguments that should be passed to readers. Set<String>; getSkipAlwaysExtensions(). Query the set of file extensions for which Bio-Formats should not be used. Set<String>; getUseAlwaysExtensions(). Query the set of file extensions for which Bio-Formats should always be used. boolean; requestParallelization(). Returns true if multiple readers may be created for different threads, to enable parallel image reading. void; setBioformatsEnabled(boolean bioformatsEnabled). Set whether Bio-Formats should be enabled or disabled (in favor of other readers). void; setFilesOnly(boolean filesOnly). Set wheth",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:5407,Availability,avail,available,5407,"ditional arguments currently requested when opening images; See Also:. clearReaderOptions(); setReaderOptions(Map). clearReaderOptions; public void clearReaderOptions(); Clear all reader options, returning these to their defaults. See Also:. getReaderOptions(); setReaderOptions(Map). setReaderOptions; public void setReaderOptions(Map<String,String> options); Set additional arguments that should be passed to readers.; Example:; ; BioFormatsServerOptions.setReaderOptions(Map.of(""zeissczi.autostitch"", ""false""));; ; Note: options are passed to every server, even when irrelevant for the particular server type.; Therefore they can end up being stored unnecessarily in projects and server paths.; For that reason it best practice to call clearReaderOptions() after options are no longer required. Parameters:; options - the arguments to pass when opening new readers; See Also:. clearReaderOptions(); getReaderOptions(). getInstance; public static BioFormatsServerOptions getInstance(); Get the static instance of BioFormatsServerOptions, available to servers being constructed. Returns:. bioformatsEnabled; public boolean bioformatsEnabled(); Returns true if Bio-Formats is enabled and may be used to read images. Returns:. setBioformatsEnabled; public void setBioformatsEnabled(boolean bioformatsEnabled); Set whether Bio-Formats should be enabled or disabled (in favor of other readers). Parameters:; bioformatsEnabled - . setFilesOnly; public void setFilesOnly(boolean filesOnly); Set whether Bio-Formats should support only local files (rather than any URL). Parameters:; filesOnly - . getFilesOnly; public boolean getFilesOnly(); Returns true if Bio-Formats is restricted to support only local files, not other URLs. Returns:. getMemoizationTimeMillis; public int getMemoizationTimeMillis(); Returns the number of milliseconds that must elapse when opening an image before a memoization file is generated. Returns:. setMemoizationTimeMillis; public void setMemoizationTimeMillis(int memoizatio",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:533,Modifiability,extend,extends,533,". BioFormatsServerOptions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsServerOptions. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsServerOptions. public class BioFormatsServerOptions; extends Object; Container for various options that can customize the behavior of the BioFormatsImageServer. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static String; ALLOW_MEMOIZATION_PROPERTY. System property controlling whether memoization is allowed or not. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static boolean; allowMemoization(). Check whether memoization should be allowed or not. boolean; bioformatsEnabled(). Returns true if Bio-Formats is enabled and may be used to read images. void; clearReaderOptions(). Clear all reader options, returning these to their defaults. boolean; getFilesOnly(). Returns true if Bio-Formats is restricted to support only local files, not other URLs. static BioFormatsServerOptions; getInstance(). Get the static instance of BioFormatsServerOptions, available to servers being constructed. int; getMemoizationTimeMillis(). Returns the number of milliseconds that must elapse when opening an image before a memoization file is generated. String; getPathMemoization(). Get the path to the directory where memoization files should be written, or null if no path is set. Map<String,String>; getReaderOptions(). Get a map representing additional arguments that should be passed to readers. Set<String>; getSkipAlwaysExtensions(). Query the set of file extensions for which Bio-Formats should not be used. Set<String",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:3034,Modifiability,inherit,inherited,3034,"t of file extensions for which Bio-Formats should always be used. boolean; requestParallelization(). Returns true if multiple readers may be created for different threads, to enable parallel image reading. void; setBioformatsEnabled(boolean bioformatsEnabled). Set whether Bio-Formats should be enabled or disabled (in favor of other readers). void; setFilesOnly(boolean filesOnly). Set whether Bio-Formats should support only local files (rather than any URL). void; setMemoizationTimeMillis(int memoizationTimeMillis). Set the number of milliseconds that must elapse when opening an image before a memoization file is generated. void; setPathMemoization(String pathMemoization). Set the directory where memoization files should be written. void; setReaderOptions(Map<String,String> options). Set additional arguments that should be passed to readers. void; setRequestParallelization(boolean requestParallelization). Optionally enable or disable parallelization when reading images. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. ALLOW_MEMOIZATION_PROPERTY; public static String ALLOW_MEMOIZATION_PROPERTY; System property controlling whether memoization is allowed or not.; If set to false, this is a hint that memoization should not be supported - but it is up to consumers to enforce that.; ; Default is to set status based upon Java version, with 17+ turning memoization off.; ; See https://github.com/qupath/qupath/issues/957. Method Details. getPathMemoization; public String getPathMemoization(); Get the path to the directory where memoization files should be written, or null if no path is set. Returns:. setPathMemoization; public void setPathMemoization(String pathMemoization); Set the directory where memoization files should be written.; This can be null, in which case memoization files may be written in the same directory as the original image. Parameters:; pathMemoization - ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:3108,Security,hash,hashCode,3108,"n; requestParallelization(). Returns true if multiple readers may be created for different threads, to enable parallel image reading. void; setBioformatsEnabled(boolean bioformatsEnabled). Set whether Bio-Formats should be enabled or disabled (in favor of other readers). void; setFilesOnly(boolean filesOnly). Set whether Bio-Formats should support only local files (rather than any URL). void; setMemoizationTimeMillis(int memoizationTimeMillis). Set the number of milliseconds that must elapse when opening an image before a memoization file is generated. void; setPathMemoization(String pathMemoization). Set the directory where memoization files should be written. void; setReaderOptions(Map<String,String> options). Set additional arguments that should be passed to readers. void; setRequestParallelization(boolean requestParallelization). Optionally enable or disable parallelization when reading images. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. ALLOW_MEMOIZATION_PROPERTY; public static String ALLOW_MEMOIZATION_PROPERTY; System property controlling whether memoization is allowed or not.; If set to false, this is a hint that memoization should not be supported - but it is up to consumers to enforce that.; ; Default is to set status based upon Java version, with 17+ turning memoization off.; ; See https://github.com/qupath/qupath/issues/957. Method Details. getPathMemoization; public String getPathMemoization(); Get the path to the directory where memoization files should be written, or null if no path is set. Returns:. setPathMemoization; public void setPathMemoization(String pathMemoization); Set the directory where memoization files should be written.; This can be null, in which case memoization files may be written in the same directory as the original image. Parameters:; pathMemoization - . getReaderOptions; public Map<String,String> getReaderOptions(); Get a ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:1147,Usability,clear,clearReaderOptions,1147,"Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class BioFormatsServerOptions. java.lang.Object; qupath.lib.images.servers.bioformats.BioFormatsServerOptions. public class BioFormatsServerOptions; extends Object; Container for various options that can customize the behavior of the BioFormatsImageServer. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static String; ALLOW_MEMOIZATION_PROPERTY. System property controlling whether memoization is allowed or not. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static boolean; allowMemoization(). Check whether memoization should be allowed or not. boolean; bioformatsEnabled(). Returns true if Bio-Formats is enabled and may be used to read images. void; clearReaderOptions(). Clear all reader options, returning these to their defaults. boolean; getFilesOnly(). Returns true if Bio-Formats is restricted to support only local files, not other URLs. static BioFormatsServerOptions; getInstance(). Get the static instance of BioFormatsServerOptions, available to servers being constructed. int; getMemoizationTimeMillis(). Returns the number of milliseconds that must elapse when opening an image before a memoization file is generated. String; getPathMemoization(). Get the path to the directory where memoization files should be written, or null if no path is set. Map<String,String>; getReaderOptions(). Get a map representing additional arguments that should be passed to readers. Set<String>; getSkipAlwaysExtensions(). Query the set of file extensions for which Bio-Formats should not be used. Set<String>; getUseAlwaysExtensions(). Query the set of file extensions for which Bio-Formats should always be used. boolean; requestParallelization(). Returns tru",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:4438,Usability,clear,clearReaderOptions,4438," set status based upon Java version, with 17+ turning memoization off.; ; See https://github.com/qupath/qupath/issues/957. Method Details. getPathMemoization; public String getPathMemoization(); Get the path to the directory where memoization files should be written, or null if no path is set. Returns:. setPathMemoization; public void setPathMemoization(String pathMemoization); Set the directory where memoization files should be written.; This can be null, in which case memoization files may be written in the same directory as the original image. Parameters:; pathMemoization - . getReaderOptions; public Map<String,String> getReaderOptions(); Get a map representing additional arguments that should be passed to readers.; This method returns a copy of the map, and therefore changes will not automatically be reflected in ; the options until these are passed to setReaderOptions(Map). Returns:; the additional arguments currently requested when opening images; See Also:. clearReaderOptions(); setReaderOptions(Map). clearReaderOptions; public void clearReaderOptions(); Clear all reader options, returning these to their defaults. See Also:. getReaderOptions(); setReaderOptions(Map). setReaderOptions; public void setReaderOptions(Map<String,String> options); Set additional arguments that should be passed to readers.; Example:; ; BioFormatsServerOptions.setReaderOptions(Map.of(""zeissczi.autostitch"", ""false""));; ; Note: options are passed to every server, even when irrelevant for the particular server type.; Therefore they can end up being stored unnecessarily in projects and server paths.; For that reason it best practice to call clearReaderOptions() after options are no longer required. Parameters:; options - the arguments to pass when opening new readers; See Also:. clearReaderOptions(); getReaderOptions(). getInstance; public static BioFormatsServerOptions getInstance(); Get the static instance of BioFormatsServerOptions, available to servers being constructed. Returns:. bio",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:4483,Usability,clear,clearReaderOptions,4483,"tps://github.com/qupath/qupath/issues/957. Method Details. getPathMemoization; public String getPathMemoization(); Get the path to the directory where memoization files should be written, or null if no path is set. Returns:. setPathMemoization; public void setPathMemoization(String pathMemoization); Set the directory where memoization files should be written.; This can be null, in which case memoization files may be written in the same directory as the original image. Parameters:; pathMemoization - . getReaderOptions; public Map<String,String> getReaderOptions(); Get a map representing additional arguments that should be passed to readers.; This method returns a copy of the map, and therefore changes will not automatically be reflected in ; the options until these are passed to setReaderOptions(Map). Returns:; the additional arguments currently requested when opening images; See Also:. clearReaderOptions(); setReaderOptions(Map). clearReaderOptions; public void clearReaderOptions(); Clear all reader options, returning these to their defaults. See Also:. getReaderOptions(); setReaderOptions(Map). setReaderOptions; public void setReaderOptions(Map<String,String> options); Set additional arguments that should be passed to readers.; Example:; ; BioFormatsServerOptions.setReaderOptions(Map.of(""zeissczi.autostitch"", ""false""));; ; Note: options are passed to every server, even when irrelevant for the particular server type.; Therefore they can end up being stored unnecessarily in projects and server paths.; For that reason it best practice to call clearReaderOptions() after options are no longer required. Parameters:; options - the arguments to pass when opening new readers; See Also:. clearReaderOptions(); getReaderOptions(). getInstance; public static BioFormatsServerOptions getInstance(); Get the static instance of BioFormatsServerOptions, available to servers being constructed. Returns:. bioformatsEnabled; public boolean bioformatsEnabled(); Returns true if Bio-Formats ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:4515,Usability,clear,clearReaderOptions,4515,"tps://github.com/qupath/qupath/issues/957. Method Details. getPathMemoization; public String getPathMemoization(); Get the path to the directory where memoization files should be written, or null if no path is set. Returns:. setPathMemoization; public void setPathMemoization(String pathMemoization); Set the directory where memoization files should be written.; This can be null, in which case memoization files may be written in the same directory as the original image. Parameters:; pathMemoization - . getReaderOptions; public Map<String,String> getReaderOptions(); Get a map representing additional arguments that should be passed to readers.; This method returns a copy of the map, and therefore changes will not automatically be reflected in ; the options until these are passed to setReaderOptions(Map). Returns:; the additional arguments currently requested when opening images; See Also:. clearReaderOptions(); setReaderOptions(Map). clearReaderOptions; public void clearReaderOptions(); Clear all reader options, returning these to their defaults. See Also:. getReaderOptions(); setReaderOptions(Map). setReaderOptions; public void setReaderOptions(Map<String,String> options); Set additional arguments that should be passed to readers.; Example:; ; BioFormatsServerOptions.setReaderOptions(Map.of(""zeissczi.autostitch"", ""false""));; ; Note: options are passed to every server, even when irrelevant for the particular server type.; Therefore they can end up being stored unnecessarily in projects and server paths.; For that reason it best practice to call clearReaderOptions() after options are no longer required. Parameters:; options - the arguments to pass when opening new readers; See Also:. clearReaderOptions(); getReaderOptions(). getInstance; public static BioFormatsServerOptions getInstance(); Get the static instance of BioFormatsServerOptions, available to servers being constructed. Returns:. bioformatsEnabled; public boolean bioformatsEnabled(); Returns true if Bio-Formats ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:5106,Usability,clear,clearReaderOptions,5106,"a map representing additional arguments that should be passed to readers.; This method returns a copy of the map, and therefore changes will not automatically be reflected in ; the options until these are passed to setReaderOptions(Map). Returns:; the additional arguments currently requested when opening images; See Also:. clearReaderOptions(); setReaderOptions(Map). clearReaderOptions; public void clearReaderOptions(); Clear all reader options, returning these to their defaults. See Also:. getReaderOptions(); setReaderOptions(Map). setReaderOptions; public void setReaderOptions(Map<String,String> options); Set additional arguments that should be passed to readers.; Example:; ; BioFormatsServerOptions.setReaderOptions(Map.of(""zeissczi.autostitch"", ""false""));; ; Note: options are passed to every server, even when irrelevant for the particular server type.; Therefore they can end up being stored unnecessarily in projects and server paths.; For that reason it best practice to call clearReaderOptions() after options are no longer required. Parameters:; options - the arguments to pass when opening new readers; See Also:. clearReaderOptions(); getReaderOptions(). getInstance; public static BioFormatsServerOptions getInstance(); Get the static instance of BioFormatsServerOptions, available to servers being constructed. Returns:. bioformatsEnabled; public boolean bioformatsEnabled(); Returns true if Bio-Formats is enabled and may be used to read images. Returns:. setBioformatsEnabled; public void setBioformatsEnabled(boolean bioformatsEnabled); Set whether Bio-Formats should be enabled or disabled (in favor of other readers). Parameters:; bioformatsEnabled - . setFilesOnly; public void setFilesOnly(boolean filesOnly); Set whether Bio-Formats should support only local files (rather than any URL). Parameters:; filesOnly - . getFilesOnly; public boolean getFilesOnly(); Returns true if Bio-Formats is restricted to support only local files, not other URLs. Returns:. getMemoizatio",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:5247,Usability,clear,clearReaderOptions,5247,"ally be reflected in ; the options until these are passed to setReaderOptions(Map). Returns:; the additional arguments currently requested when opening images; See Also:. clearReaderOptions(); setReaderOptions(Map). clearReaderOptions; public void clearReaderOptions(); Clear all reader options, returning these to their defaults. See Also:. getReaderOptions(); setReaderOptions(Map). setReaderOptions; public void setReaderOptions(Map<String,String> options); Set additional arguments that should be passed to readers.; Example:; ; BioFormatsServerOptions.setReaderOptions(Map.of(""zeissczi.autostitch"", ""false""));; ; Note: options are passed to every server, even when irrelevant for the particular server type.; Therefore they can end up being stored unnecessarily in projects and server paths.; For that reason it best practice to call clearReaderOptions() after options are no longer required. Parameters:; options - the arguments to pass when opening new readers; See Also:. clearReaderOptions(); getReaderOptions(). getInstance; public static BioFormatsServerOptions getInstance(); Get the static instance of BioFormatsServerOptions, available to servers being constructed. Returns:. bioformatsEnabled; public boolean bioformatsEnabled(); Returns true if Bio-Formats is enabled and may be used to read images. Returns:. setBioformatsEnabled; public void setBioformatsEnabled(boolean bioformatsEnabled); Set whether Bio-Formats should be enabled or disabled (in favor of other readers). Parameters:; bioformatsEnabled - . setFilesOnly; public void setFilesOnly(boolean filesOnly); Set whether Bio-Formats should support only local files (rather than any URL). Parameters:; filesOnly - . getFilesOnly; public boolean getFilesOnly(); Returns true if Bio-Formats is restricted to support only local files, not other URLs. Returns:. getMemoizationTimeMillis; public int getMemoizationTimeMillis(); Returns the number of milliseconds that must elapse when opening an image before a memoization file i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html:570,Modifiability,extend,extends,570,". OMEPixelParser.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class OMEPixelParser.Builder. java.lang.Object; qupath.lib.images.servers.bioformats.OMEPixelParser.Builder. Enclosing class:; OMEPixelParser. public static class OMEPixelParser.Builder; extends Object; Builder for instances of OMEPixelParser. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OMEPixelParser; build(). Creates a new OMEPixelParser instance. OMEPixelParser.Builder; byteOrder(ByteOrder byteOrder);  ; OMEPixelParser.Builder; effectiveNChannels(int effectiveNChannels);  ; OMEPixelParser.Builder; isInterleaved(boolean isInterleaved);  ; OMEPixelParser.Builder; normalizeFloats(boolean normalizeFloats);  ; OMEPixelParser.Builder; pixelType(PixelType pixelType);  ; OMEPixelParser.Builder; samplesPerPixel(int[] samplesPerPixel);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. isInterleaved; public OMEPixelParser.Builder isInterleaved(boolean isInterleaved). Parameters:; isInterleaved - whether pixel values are interleaved; Returns:; the current builder. pixelType; public OMEPixelParser.Builder pixelType(PixelType pixelType). Parameters:; pixelType - the bit-depth of the image pixels; Returns:; the current builder. byteOrder; public OMEPixelParser.Builder byteOrder(ByteOrder byteOrder). Parameters:; byteOrder - the byte order of each pixel; Returns:; the current builder. effectiveNChannels; public OMEPixelPa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html:1265,Modifiability,inherit,inherited,1265,"nstr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class OMEPixelParser.Builder. java.lang.Object; qupath.lib.images.servers.bioformats.OMEPixelParser.Builder. Enclosing class:; OMEPixelParser. public static class OMEPixelParser.Builder; extends Object; Builder for instances of OMEPixelParser. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OMEPixelParser; build(). Creates a new OMEPixelParser instance. OMEPixelParser.Builder; byteOrder(ByteOrder byteOrder);  ; OMEPixelParser.Builder; effectiveNChannels(int effectiveNChannels);  ; OMEPixelParser.Builder; isInterleaved(boolean isInterleaved);  ; OMEPixelParser.Builder; normalizeFloats(boolean normalizeFloats);  ; OMEPixelParser.Builder; pixelType(PixelType pixelType);  ; OMEPixelParser.Builder; samplesPerPixel(int[] samplesPerPixel);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. isInterleaved; public OMEPixelParser.Builder isInterleaved(boolean isInterleaved). Parameters:; isInterleaved - whether pixel values are interleaved; Returns:; the current builder. pixelType; public OMEPixelParser.Builder pixelType(PixelType pixelType). Parameters:; pixelType - the bit-depth of the image pixels; Returns:; the current builder. byteOrder; public OMEPixelParser.Builder byteOrder(ByteOrder byteOrder). Parameters:; byteOrder - the byte order of each pixel; Returns:; the current builder. effectiveNChannels; public OMEPixelParser.Builder effectiveNChannels(int effectiveNChannels). Parameters:; effectiveNChannels - the effective size of the C dimension of the image. This is not always; the number of channels, for example RGB values can be stored in one effective channel; Returns:; the current b",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html:1339,Security,hash,hashCode,1339,"qupath.lib.images.servers.bioformats; Class OMEPixelParser.Builder. java.lang.Object; qupath.lib.images.servers.bioformats.OMEPixelParser.Builder. Enclosing class:; OMEPixelParser. public static class OMEPixelParser.Builder; extends Object; Builder for instances of OMEPixelParser. Constructor Summary; Constructors. Constructor; Description; Builder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OMEPixelParser; build(). Creates a new OMEPixelParser instance. OMEPixelParser.Builder; byteOrder(ByteOrder byteOrder);  ; OMEPixelParser.Builder; effectiveNChannels(int effectiveNChannels);  ; OMEPixelParser.Builder; isInterleaved(boolean isInterleaved);  ; OMEPixelParser.Builder; normalizeFloats(boolean normalizeFloats);  ; OMEPixelParser.Builder; pixelType(PixelType pixelType);  ; OMEPixelParser.Builder; samplesPerPixel(int[] samplesPerPixel);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. isInterleaved; public OMEPixelParser.Builder isInterleaved(boolean isInterleaved). Parameters:; isInterleaved - whether pixel values are interleaved; Returns:; the current builder. pixelType; public OMEPixelParser.Builder pixelType(PixelType pixelType). Parameters:; pixelType - the bit-depth of the image pixels; Returns:; the current builder. byteOrder; public OMEPixelParser.Builder byteOrder(ByteOrder byteOrder). Parameters:; byteOrder - the byte order of each pixel; Returns:; the current builder. effectiveNChannels; public OMEPixelParser.Builder effectiveNChannels(int effectiveNChannels). Parameters:; effectiveNChannels - the effective size of the C dimension of the image. This is not always; the number of channels, for example RGB values can be stored in one effective channel; Returns:; the current builder. normalizeFloats; public OMEPixelParser.Builder normalizeFloats(b",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html:497,Modifiability,extend,extends,497,". OMEPixelParser (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class OMEPixelParser. java.lang.Object; qupath.lib.images.servers.bioformats.OMEPixelParser. public class OMEPixelParser; extends Object; This class can parse raw bytes into a BufferedImage.; It is intended for use with non-RGB images; AWTImageTools can be used for RGB images. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OMEPixelParser.Builder. Builder for instances of OMEPixelParser. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; BufferedImage; parse(byte[][] pixels,; int width,; int height,; int nChannels,; ColorModel colorModel). Creates a BufferedImage from a 2-dimensional byte array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. parse; public BufferedImage parse(byte[][] pixels,; int width,; int height,; int nChannels,; ColorModel colorModel); Creates a BufferedImage from a 2-dimensional byte array. Parameters:; pixels - the byte array containing the pixel values. The first dimension of the; array refers to the channel and the second dimension refers to the position; of the pixel; width - the width in pixels of the image; height - the height in pixels of the image; nChannels - the number of channels of this image; colorModel - the color model to use when creating the image; Returns:; the corresponding image. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html:1080,Modifiability,inherit,inherited,1080,". OMEPixelParser (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class OMEPixelParser. java.lang.Object; qupath.lib.images.servers.bioformats.OMEPixelParser. public class OMEPixelParser; extends Object; This class can parse raw bytes into a BufferedImage.; It is intended for use with non-RGB images; AWTImageTools can be used for RGB images. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OMEPixelParser.Builder. Builder for instances of OMEPixelParser. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; BufferedImage; parse(byte[][] pixels,; int width,; int height,; int nChannels,; ColorModel colorModel). Creates a BufferedImage from a 2-dimensional byte array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. parse; public BufferedImage parse(byte[][] pixels,; int width,; int height,; int nChannels,; ColorModel colorModel); Creates a BufferedImage from a 2-dimensional byte array. Parameters:; pixels - the byte array containing the pixel values. The first dimension of the; array refers to the channel and the second dimension refers to the position; of the pixel; width - the width in pixels of the image; height - the height in pixels of the image; nChannels - the number of channels of this image; colorModel - the color model to use when creating the image; Returns:; the corresponding image. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html:1154,Security,hash,hashCode,1154,". OMEPixelParser (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.bioformats; Class OMEPixelParser. java.lang.Object; qupath.lib.images.servers.bioformats.OMEPixelParser. public class OMEPixelParser; extends Object; This class can parse raw bytes into a BufferedImage.; It is intended for use with non-RGB images; AWTImageTools can be used for RGB images. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OMEPixelParser.Builder. Builder for instances of OMEPixelParser. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; BufferedImage; parse(byte[][] pixels,; int width,; int height,; int nChannels,; ColorModel colorModel). Creates a BufferedImage from a 2-dimensional byte array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. parse; public BufferedImage parse(byte[][] pixels,; int width,; int height,; int nChannels,; ColorModel colorModel); Creates a BufferedImage from a 2-dimensional byte array. Parameters:; pixels - the byte array containing the pixel values. The first dimension of the; array refers to the channel and the second dimension refers to the position; of the pixel; width - the width in pixels of the image; height - the height in pixels of the image; nChannels - the number of channels of this image; colorModel - the color model to use when creating the image; Returns:; the corresponding image. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/OMEPixelParser.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/package-summary.html:570,Security,access,accessing,570,. qupath.lib.images.servers.bioformats (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers.bioformats. package qupath.lib.images.servers.bioformats. Read images using Bio-Formats (https://www.openmicroscopy.org/bio-formats/). Related Packages. Package; Description; qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath. qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). Classes. Class; Description; BioFormatsImageServer. QuPath ImageServer that uses the Bio-Formats library to read image data. BioFormatsOptionsExtension. A QuPath extension that adds options relating to the BioFormatsImageServer to the main QuPath preference pane. BioFormatsOptionsExtension.BioFormatsPreferences;  ; BioFormatsOptionsExtension.OmeTiffWriterAction;  ; BioFormatsServerBuilder. Builder for ImageServers that make use of the Bio-Formats library. BioFormatsServerOptions. Container for various options that can customize the behavior of the BioFormatsImageServer. OMEPixelParser. This class can parse raw bytes into a BufferedImage. OMEPixelParser.Builder. Builder for instances of OMEPixelParser. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/bioformats/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:2876,Integrability,interface,interface,2876,"server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:3446,Integrability,interface,interface,3446,"aultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractIm",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:3701,Integrability,depend,depend,3701,"s, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. dumpMetadata; public String dumpMetadata(); Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. Returns:. getServerType; public String getServerType(",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:4387,Integrability,interface,interface,4387,"(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. dumpMetadata; public String dumpMetadata(); Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full Image",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:4699,Integrability,interface,interface,4699,"(e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. dumpMetadata; public String dumpMetadata(); Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). createServerBuilder; protected ImageServe",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:5231,Integrability,interface,interface,5231,"tImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. dumpMetadata; public String dumpMetadata(); Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getAssociatedImage; public Buffere",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:5508,Integrability,interface,interface,5508," of the properties, as stored as key-value pairs by OpenSlide. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:6278,Integrability,interface,interface,6278,"adTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:6388,Integrability,interface,interface,6388,"adTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:6678,Integrability,interface,interface,6678,"adTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImage in class AbstractImageServer<BufferedImage>; Parameters:; name - ; Returns:; See Also:. ImageServer.getAssociatedImageList(). getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Returns:; See Also:. ImageServer.getMetadata(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:708,Modifiability,extend,extends,708,". OpenslideImageServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide; Class OpenslideImageServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.lib.images.servers.AbstractTileableImageServer; qupath.lib.images.servers.openslide.OpenslideImageServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>. public class OpenslideImageServer; extends AbstractTileableImageServer; ImageServer implementation using OpenSlide. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; OpenslideImageServer(URI uri,; String... args). Create an ImageServer using OpenSlide for the specified file. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; dumpMetadata(). Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. BufferedImage; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:2111,Modifiability,inherit,inherited,2111," createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; dumpMetadata(). Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. BufferedImage; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an Imag",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:2315,Modifiability,inherit,inherited,2315,"). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; dumpMetadata(). Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. BufferedImage; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; u",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:2742,Modifiability,inherit,inherited,2742,"). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:2861,Modifiability,inherit,inherited,2861,"server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Re",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:2806,Security,hash,hashCode,2806,"r. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. BufferedImage; readTile(TileRequest tileRequest). Read a single image tile. Methods inherited from class qupath.lib.images.servers.AbstractTileableImageServer; allowSmoothInterpolation, createDefaultRGBImage, getDefaultColorModel, getEmptyTile, getEmptyTile, getTile, readRegion. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:3529,Usability,simpl,simplest,3529,"ownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. dumpMetadata; public String dumpMetadata(); Retrieve a JSON string representation of the pr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:3821,Usability,simpl,simple,3821,"ashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. OpenslideImageServer; public OpenslideImageServer(URI uri,; String... args); throws IOException; Create an ImageServer using OpenSlide for the specified file.; ; The only supported arg is --no-crop, to specify that any bounding box should not be ; applied (which was the default in QuPath <= v0.1.2). Parameters:; uri - ; args - ; Throws:; IOException. Method Details. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(). Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. dumpMetadata; public String dumpMetadata(); Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Ope",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html:5360,Usability,simpl,simply,5360,"utoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>. dumpMetadata; public String dumpMetadata(); Retrieve a JSON string representation of the properties, as stored as key-value pairs by OpenSlide. Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. readTile; public BufferedImage readTile(TileRequest tileRequest); throws IOException; Description copied from class: AbstractTileableImageServer; Read a single image tile. Specified by:; readTile in class AbstractTileableImageServer; Parameters:; tileRequest - ; Returns:; Throws:; IOException. getAssociatedImageList; public List<String> getAssociatedImageList(); Description copied from interface: ImageServer; Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Specified by:; getAssociatedImageList in interface ImageServer<BufferedImage>; Overrides:; getAssociatedImageList in class AbstractImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getAssociatedImage(String). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); Description copied from interface: ImageServer; Get the image for a given associated image name. Specified by:; getAssociatedImage in interface I",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideImageServer.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:749,Integrability,interface,interfaces,749,". OpenslideServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide; Class OpenslideServerBuilder. java.lang.Object; qupath.lib.images.servers.openslide.OpenslideServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class OpenslideServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for Openslide ImageServer. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; OpenslideServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:775,Integrability,interface,interface,775,". OpenslideServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide; Class OpenslideServerBuilder. java.lang.Object; qupath.lib.images.servers.openslide.OpenslideServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class OpenslideServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for Openslide ImageServer. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; OpenslideServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:2194,Integrability,interface,interface,2194,"ildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenslideServerBuilder; public OpenslideServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDes",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:2313,Integrability,interface,interface,2313,"ge>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenslideServerBuilder; public OpenslideServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:2601,Integrability,interface,interface,2601,"s supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenslideServerBuilder; public OpenslideServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typical",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:2827,Integrability,interface,interface,2827,"from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenslideServerBuilder; public OpenslideServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Ch",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3007,Integrability,interface,interface,3007,"Builder; public OpenslideServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may ov",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3131,Integrability,interface,interface,3131,"RI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3258,Integrability,interface,interface,3258,"specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuild",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3384,Integrability,interface,interface,3384,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3521,Integrability,interface,interface,3521,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3688,Integrability,interface,interface,3688,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3836,Integrability,interface,interface,3836,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:4242,Integrability,interface,interface,4242,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:591,Modifiability,extend,extends,591,". OpenslideServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide; Class OpenslideServerBuilder. java.lang.Object; qupath.lib.images.servers.openslide.OpenslideServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class OpenslideServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for Openslide ImageServer. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; OpenslideServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:760,Modifiability,inherit,inherited,760,". OpenslideServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide; Class OpenslideServerBuilder. java.lang.Object; qupath.lib.images.servers.openslide.OpenslideServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class OpenslideServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for Openslide ImageServer. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; OpenslideServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:1859,Modifiability,inherit,inherited,1859,"lder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; OpenslideServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenslideServerBuilder; public OpenslideServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImag",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:1933,Security,hash,hashCode,1933,"lder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; OpenslideServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenslideServerBuilder; public OpenslideServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); R",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:3982,Usability,simpl,simple,3982,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html:4063,Usability,intuit,intuitive,4063,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/OpenslideServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/package-summary.html:544,Security,access,accessing,544,. qupath.lib.images.servers.openslide (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers.openslide. package qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). Related Packages. Package; Description; qupath.lib.images.servers. Supports accessing pixels and metadata in QuPath. qupath.lib.images.servers.openslide.jna;  ; qupath.lib.images.servers.bioformats. Read images using Bio-Formats (https://www.openmicroscopy.org/bio-formats/). Classes. Class; Description; OpenslideImageServer. ImageServer implementation using OpenSlide. OpenslideServerBuilder. Builder for Openslide ImageServer. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:2342,Availability,avail,available,2342,"_POWER;  ; static final String; PROPERTY_NAME_QUICKHASH1;  ; static final String; PROPERTY_NAME_VENDOR;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close(). Close; this is important for cleanup. void; dispose(). Dispose the OpenSlide object; this is equivalent to close(). BufferedImage; getAssociatedImage(String name). Get a named associated image. List<String>; getAssociatedImages(). Get a list of all associated image names. byte[]; getICCProfileBytes(). Request the bytes for an ICC profile. long; getLevel0Height(). Get the height of the full-resolution image (level 0). long; getLevel0Width(). Get the width of the full-resolution image (level 0). int; getLevelCount(). Get the total number of pyramid levels. long; getLevelHeight(int level). Get the image height at the specified level. long; getLevelWidth(int level). Get the image width at the specified level. Map<String,String>; getProperties(). Get an unmodifiable map of all available properties. void; paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. PROPERTY_NAME_COMMENT; public static final String PROPERTY_NAME_COMMENT. See Also:. Constant Field Values. PROPERTY_NAME_VENDOR; public static final String PROPERTY_NAME_VENDOR. See Also:. Constant Field Values. PROPERTY_NAME_QUICKHASH1; public static final String PROPERTY_NAME_QUICKHASH1. See Also:. Constant Field Values. PROPERTY_NAME_BACKGROUND_COLOR; public static final String PROPERTY_NAME_BACKGROUND_COLOR. See Also:. Constant Field Values. PROPERTY_NAME_OBJECTIVE_POWER; public static final String PROPERTY_NAME_OBJECTIVE_POWER. See Also:. Constant Field Values. PROPERTY_NAME_MPP_X; public static final String PROPERTY_NAME_MPP_X. See Also:. Constant Field Values. PROPERTY_NAME_MPP_Y; public static final String PROPERTY_NA",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:4758,Availability,avail,available,4758,"TH; public static final String PROPERTY_NAME_BOUNDS_WIDTH. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_HEIGHT; public static final String PROPERTY_NAME_BOUNDS_HEIGHT. See Also:. Constant Field Values. Method Details. dispose; public void dispose(); Dispose the OpenSlide object; this is equivalent to close(). getLevelCount; public int getLevelCount(); Get the total number of pyramid levels. Returns:. getLevel0Width; public long getLevel0Width(); Get the width of the full-resolution image (level 0). Returns:. getLevel0Height; public long getLevel0Height(); Get the height of the full-resolution image (level 0). Returns:. getLevelWidth; public long getLevelWidth(int level); Get the image width at the specified level. Parameters:; level - ; Returns:. getLevelHeight; public long getLevelHeight(int level); Get the image height at the specified level. Parameters:; level - ; Returns:. paintRegionARGB; public void paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h); throws IOException. Throws:; IOException. getProperties; public Map<String,String> getProperties(); Get an unmodifiable map of all available properties. Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); throws IOException; Get a named associated image. Parameters:; name - ; Returns:; Throws:; IOException. getAssociatedImages; public List<String> getAssociatedImages(); Get a list of all associated image names. Returns:. close; public void close(); Close; this is important for cleanup. Specified by:; close in interface AutoCloseable; Specified by:; close in interface Closeable. getICCProfileBytes; public byte[] getICCProfileBytes(); throws UnsupportedOperationException; Request the bytes for an ICC profile. Returns:; the bytes of an ICC profile is available, or null otherwise.; Throws:; UnsupportedOperationException - if an unsatisfied link error occurred, which indicates that; the OpenSlide version is not compatible (it should be 4.0.0 or greater). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:5417,Availability,avail,available,5417,"TH; public static final String PROPERTY_NAME_BOUNDS_WIDTH. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_HEIGHT; public static final String PROPERTY_NAME_BOUNDS_HEIGHT. See Also:. Constant Field Values. Method Details. dispose; public void dispose(); Dispose the OpenSlide object; this is equivalent to close(). getLevelCount; public int getLevelCount(); Get the total number of pyramid levels. Returns:. getLevel0Width; public long getLevel0Width(); Get the width of the full-resolution image (level 0). Returns:. getLevel0Height; public long getLevel0Height(); Get the height of the full-resolution image (level 0). Returns:. getLevelWidth; public long getLevelWidth(int level); Get the image width at the specified level. Parameters:; level - ; Returns:. getLevelHeight; public long getLevelHeight(int level); Get the image height at the specified level. Parameters:; level - ; Returns:. paintRegionARGB; public void paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h); throws IOException. Throws:; IOException. getProperties; public Map<String,String> getProperties(); Get an unmodifiable map of all available properties. Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); throws IOException; Get a named associated image. Parameters:; name - ; Returns:; Throws:; IOException. getAssociatedImages; public List<String> getAssociatedImages(); Get a list of all associated image names. Returns:. close; public void close(); Close; this is important for cleanup. Specified by:; close in interface AutoCloseable; Specified by:; close in interface Closeable. getICCProfileBytes; public byte[] getICCProfileBytes(); throws UnsupportedOperationException; Request the bytes for an ICC profile. Returns:; the bytes of an ICC profile is available, or null otherwise.; Throws:; UnsupportedOperationException - if an unsatisfied link error occurred, which indicates that; the OpenSlide version is not compatible (it should be 4.0.0 or greater). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:5512,Availability,error,error,5512,"TH; public static final String PROPERTY_NAME_BOUNDS_WIDTH. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_HEIGHT; public static final String PROPERTY_NAME_BOUNDS_HEIGHT. See Also:. Constant Field Values. Method Details. dispose; public void dispose(); Dispose the OpenSlide object; this is equivalent to close(). getLevelCount; public int getLevelCount(); Get the total number of pyramid levels. Returns:. getLevel0Width; public long getLevel0Width(); Get the width of the full-resolution image (level 0). Returns:. getLevel0Height; public long getLevel0Height(); Get the height of the full-resolution image (level 0). Returns:. getLevelWidth; public long getLevelWidth(int level); Get the image width at the specified level. Parameters:; level - ; Returns:. getLevelHeight; public long getLevelHeight(int level); Get the image height at the specified level. Parameters:; level - ; Returns:. paintRegionARGB; public void paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h); throws IOException. Throws:; IOException. getProperties; public Map<String,String> getProperties(); Get an unmodifiable map of all available properties. Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); throws IOException; Get a named associated image. Parameters:; name - ; Returns:; Throws:; IOException. getAssociatedImages; public List<String> getAssociatedImages(); Get a list of all associated image names. Returns:. close; public void close(); Close; this is important for cleanup. Specified by:; close in interface AutoCloseable; Specified by:; close in interface Closeable. getICCProfileBytes; public byte[] getICCProfileBytes(); throws UnsupportedOperationException; Request the bytes for an ICC profile. Returns:; the bytes of an ICC profile is available, or null otherwise.; Throws:; UnsupportedOperationException - if an unsatisfied link error occurred, which indicates that; the OpenSlide version is not compatible (it should be 4.0.0 or greater). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:595,Integrability,wrap,wrapper,595,". OpenSlide (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlide. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlide. All Implemented Interfaces:; Closeable, AutoCloseable. public final class OpenSlide; extends Object; implements Closeable; Minimal Java wrapper for OpenSlide. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenSlide.OpenSlideDisposedException. Exception thrown whenever a request is made after the OpenSlide object has been closed. Field Summary; Fields. Modifier and Type; Field; Description; static final String; PROPERTY_NAME_BACKGROUND_COLOR;  ; static final String; PROPERTY_NAME_BOUNDS_HEIGHT;  ; static final String; PROPERTY_NAME_BOUNDS_WIDTH;  ; static final String; PROPERTY_NAME_BOUNDS_X;  ; static final String; PROPERTY_NAME_BOUNDS_Y;  ; static final String; PROPERTY_NAME_COMMENT;  ; static final String; PROPERTY_NAME_MPP_X;  ; static final String; PROPERTY_NAME_MPP_Y;  ; static final String; PROPERTY_NAME_OBJECTIVE_POWER;  ; static final String; PROPERTY_NAME_QUICKHASH1;  ; static final String; PROPERTY_NAME_VENDOR;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close(). Close; this is important for cleanup. void; dispose(). Dispose the OpenSlide object; this is equivalent to close(). BufferedImage; getAssociatedImage(String name). Get a named associated image. List<String>; getAssociatedImages(). Get a list of all associated image names. byte[]; getICCProfileBytes(). Request the bytes for an ICC profile. long; getLevel0Height(). Get the height of the full-resolution image (level 0). long; getLevel0Width(",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:5174,Integrability,interface,interface,5174,"TH; public static final String PROPERTY_NAME_BOUNDS_WIDTH. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_HEIGHT; public static final String PROPERTY_NAME_BOUNDS_HEIGHT. See Also:. Constant Field Values. Method Details. dispose; public void dispose(); Dispose the OpenSlide object; this is equivalent to close(). getLevelCount; public int getLevelCount(); Get the total number of pyramid levels. Returns:. getLevel0Width; public long getLevel0Width(); Get the width of the full-resolution image (level 0). Returns:. getLevel0Height; public long getLevel0Height(); Get the height of the full-resolution image (level 0). Returns:. getLevelWidth; public long getLevelWidth(int level); Get the image width at the specified level. Parameters:; level - ; Returns:. getLevelHeight; public long getLevelHeight(int level); Get the image height at the specified level. Parameters:; level - ; Returns:. paintRegionARGB; public void paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h); throws IOException. Throws:; IOException. getProperties; public Map<String,String> getProperties(); Get an unmodifiable map of all available properties. Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); throws IOException; Get a named associated image. Parameters:; name - ; Returns:; Throws:; IOException. getAssociatedImages; public List<String> getAssociatedImages(); Get a list of all associated image names. Returns:. close; public void close(); Close; this is important for cleanup. Specified by:; close in interface AutoCloseable; Specified by:; close in interface Closeable. getICCProfileBytes; public byte[] getICCProfileBytes(); throws UnsupportedOperationException; Request the bytes for an ICC profile. Returns:; the bytes of an ICC profile is available, or null otherwise.; Throws:; UnsupportedOperationException - if an unsatisfied link error occurred, which indicates that; the OpenSlide version is not compatible (it should be 4.0.0 or greater). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:5223,Integrability,interface,interface,5223,"TH; public static final String PROPERTY_NAME_BOUNDS_WIDTH. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_HEIGHT; public static final String PROPERTY_NAME_BOUNDS_HEIGHT. See Also:. Constant Field Values. Method Details. dispose; public void dispose(); Dispose the OpenSlide object; this is equivalent to close(). getLevelCount; public int getLevelCount(); Get the total number of pyramid levels. Returns:. getLevel0Width; public long getLevel0Width(); Get the width of the full-resolution image (level 0). Returns:. getLevel0Height; public long getLevel0Height(); Get the height of the full-resolution image (level 0). Returns:. getLevelWidth; public long getLevelWidth(int level); Get the image width at the specified level. Parameters:; level - ; Returns:. getLevelHeight; public long getLevelHeight(int level); Get the image height at the specified level. Parameters:; level - ; Returns:. paintRegionARGB; public void paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h); throws IOException. Throws:; IOException. getProperties; public Map<String,String> getProperties(); Get an unmodifiable map of all available properties. Returns:. getAssociatedImage; public BufferedImage getAssociatedImage(String name); throws IOException; Get a named associated image. Parameters:; name - ; Returns:; Throws:; IOException. getAssociatedImages; public List<String> getAssociatedImages(); Get a list of all associated image names. Returns:. close; public void close(); Close; this is important for cleanup. Specified by:; close in interface AutoCloseable; Specified by:; close in interface Closeable. getICCProfileBytes; public byte[] getICCProfileBytes(); throws UnsupportedOperationException; Request the bytes for an ICC profile. Returns:; the bytes of an ICC profile is available, or null otherwise.; Throws:; UnsupportedOperationException - if an unsatisfied link error occurred, which indicates that; the OpenSlide version is not compatible (it should be 4.0.0 or greater). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:544,Modifiability,extend,extends,544,". OpenSlide (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlide. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlide. All Implemented Interfaces:; Closeable, AutoCloseable. public final class OpenSlide; extends Object; implements Closeable; Minimal Java wrapper for OpenSlide. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenSlide.OpenSlideDisposedException. Exception thrown whenever a request is made after the OpenSlide object has been closed. Field Summary; Fields. Modifier and Type; Field; Description; static final String; PROPERTY_NAME_BACKGROUND_COLOR;  ; static final String; PROPERTY_NAME_BOUNDS_HEIGHT;  ; static final String; PROPERTY_NAME_BOUNDS_WIDTH;  ; static final String; PROPERTY_NAME_BOUNDS_X;  ; static final String; PROPERTY_NAME_BOUNDS_Y;  ; static final String; PROPERTY_NAME_COMMENT;  ; static final String; PROPERTY_NAME_MPP_X;  ; static final String; PROPERTY_NAME_MPP_Y;  ; static final String; PROPERTY_NAME_OBJECTIVE_POWER;  ; static final String; PROPERTY_NAME_QUICKHASH1;  ; static final String; PROPERTY_NAME_VENDOR;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close(). Close; this is important for cleanup. void; dispose(). Dispose the OpenSlide object; this is equivalent to close(). BufferedImage; getAssociatedImage(String name). Get a named associated image. List<String>; getAssociatedImages(). Get a list of all associated image names. byte[]; getICCProfileBytes(). Request the bytes for an ICC profile. long; getLevel0Height(). Get the height of the full-resolution image (level 0). long; getLevel0Width(",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:2456,Modifiability,inherit,inherited,2456,"ethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close(). Close; this is important for cleanup. void; dispose(). Dispose the OpenSlide object; this is equivalent to close(). BufferedImage; getAssociatedImage(String name). Get a named associated image. List<String>; getAssociatedImages(). Get a list of all associated image names. byte[]; getICCProfileBytes(). Request the bytes for an ICC profile. long; getLevel0Height(). Get the height of the full-resolution image (level 0). long; getLevel0Width(). Get the width of the full-resolution image (level 0). int; getLevelCount(). Get the total number of pyramid levels. long; getLevelHeight(int level). Get the image height at the specified level. long; getLevelWidth(int level). Get the image width at the specified level. Map<String,String>; getProperties(). Get an unmodifiable map of all available properties. void; paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. PROPERTY_NAME_COMMENT; public static final String PROPERTY_NAME_COMMENT. See Also:. Constant Field Values. PROPERTY_NAME_VENDOR; public static final String PROPERTY_NAME_VENDOR. See Also:. Constant Field Values. PROPERTY_NAME_QUICKHASH1; public static final String PROPERTY_NAME_QUICKHASH1. See Also:. Constant Field Values. PROPERTY_NAME_BACKGROUND_COLOR; public static final String PROPERTY_NAME_BACKGROUND_COLOR. See Also:. Constant Field Values. PROPERTY_NAME_OBJECTIVE_POWER; public static final String PROPERTY_NAME_OBJECTIVE_POWER. See Also:. Constant Field Values. PROPERTY_NAME_MPP_X; public static final String PROPERTY_NAME_MPP_X. See Also:. Constant Field Values. PROPERTY_NAME_MPP_Y; public static final String PROPERTY_NAME_MPP_Y. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_X; public static final String PROPERTY_NAME_BOUNDS_X. See Also:",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html:2530,Security,hash,hashCode,2530,"iption; void; close(). Close; this is important for cleanup. void; dispose(). Dispose the OpenSlide object; this is equivalent to close(). BufferedImage; getAssociatedImage(String name). Get a named associated image. List<String>; getAssociatedImages(). Get a list of all associated image names. byte[]; getICCProfileBytes(). Request the bytes for an ICC profile. long; getLevel0Height(). Get the height of the full-resolution image (level 0). long; getLevel0Width(). Get the width of the full-resolution image (level 0). int; getLevelCount(). Get the total number of pyramid levels. long; getLevelHeight(int level). Get the image height at the specified level. long; getLevelWidth(int level). Get the image width at the specified level. Map<String,String>; getProperties(). Get an unmodifiable map of all available properties. void; paintRegionARGB(int[] dest,; long x,; long y,; int level,; int w,; int h);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. PROPERTY_NAME_COMMENT; public static final String PROPERTY_NAME_COMMENT. See Also:. Constant Field Values. PROPERTY_NAME_VENDOR; public static final String PROPERTY_NAME_VENDOR. See Also:. Constant Field Values. PROPERTY_NAME_QUICKHASH1; public static final String PROPERTY_NAME_QUICKHASH1. See Also:. Constant Field Values. PROPERTY_NAME_BACKGROUND_COLOR; public static final String PROPERTY_NAME_BACKGROUND_COLOR. See Also:. Constant Field Values. PROPERTY_NAME_OBJECTIVE_POWER; public static final String PROPERTY_NAME_OBJECTIVE_POWER. See Also:. Constant Field Values. PROPERTY_NAME_MPP_X; public static final String PROPERTY_NAME_MPP_X. See Also:. Constant Field Values. PROPERTY_NAME_MPP_Y; public static final String PROPERTY_NAME_MPP_Y. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_X; public static final String PROPERTY_NAME_BOUNDS_X. See Also:. Constant Field Values. PROPERTY_NAME_BOUNDS_Y; public static final Str",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html:740,Modifiability,extend,extends,740,". OpenSlide.OpenSlideDisposedException (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlide.OpenSlideDisposedException. java.lang.Object; java.lang.Throwable; java.lang.Exception; java.lang.RuntimeException; qupath.lib.images.servers.openslide.jna.OpenSlide.OpenSlideDisposedException. All Implemented Interfaces:; Serializable. Enclosing class:; OpenSlide. public static class OpenSlide.OpenSlideDisposedException; extends RuntimeException; Exception thrown whenever a request is made after the OpenSlide object has been closed. See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; OpenSlideDisposedException();  . Method Summary. Methods inherited from class java.lang.Throwable; addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. OpenSlideDisposedException; public OpenSlideDisposedException(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html:1000,Modifiability,inherit,inherited,1000,". OpenSlide.OpenSlideDisposedException (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlide.OpenSlideDisposedException. java.lang.Object; java.lang.Throwable; java.lang.Exception; java.lang.RuntimeException; qupath.lib.images.servers.openslide.jna.OpenSlide.OpenSlideDisposedException. All Implemented Interfaces:; Serializable. Enclosing class:; OpenSlide. public static class OpenSlide.OpenSlideDisposedException; extends RuntimeException; Exception thrown whenever a request is made after the OpenSlide object has been closed. See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; OpenSlideDisposedException();  . Method Summary. Methods inherited from class java.lang.Throwable; addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. OpenSlideDisposedException; public OpenSlideDisposedException(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html:1243,Modifiability,inherit,inherited,1243,". OpenSlide.OpenSlideDisposedException (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlide.OpenSlideDisposedException. java.lang.Object; java.lang.Throwable; java.lang.Exception; java.lang.RuntimeException; qupath.lib.images.servers.openslide.jna.OpenSlide.OpenSlideDisposedException. All Implemented Interfaces:; Serializable. Enclosing class:; OpenSlide. public static class OpenSlide.OpenSlideDisposedException; extends RuntimeException; Exception thrown whenever a request is made after the OpenSlide object has been closed. See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; OpenSlideDisposedException();  . Method Summary. Methods inherited from class java.lang.Throwable; addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. OpenSlideDisposedException; public OpenSlideDisposedException(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html:1317,Security,hash,hashCode,1317,". OpenSlide.OpenSlideDisposedException (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlide.OpenSlideDisposedException. java.lang.Object; java.lang.Throwable; java.lang.Exception; java.lang.RuntimeException; qupath.lib.images.servers.openslide.jna.OpenSlide.OpenSlideDisposedException. All Implemented Interfaces:; Serializable. Enclosing class:; OpenSlide. public static class OpenSlide.OpenSlideDisposedException; extends RuntimeException; Exception thrown whenever a request is made after the OpenSlide object has been closed. See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; OpenSlideDisposedException();  . Method Summary. Methods inherited from class java.lang.Throwable; addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. OpenSlideDisposedException; public OpenSlideDisposedException(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlide.OpenSlideDisposedException.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:450,Integrability,interface,interface,450,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:507,Integrability,interface,interface,507,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:569,Integrability,interface,interfaces,569,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:595,Integrability,interface,interface,595,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:692,Integrability,interface,interface,692,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:474,Modifiability,extend,extends,474,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:580,Modifiability,inherit,inherited,580,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html:677,Modifiability,inherit,inherited,677,". OpenSlideJNA (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Interface OpenSlideJNA. All Superinterfaces:; com.sun.jna.Library. public interface OpenSlideJNA; extends com.sun.jna.Library; JNA interface for OpenSlide. Nested Class Summary. Nested classes/interfaces inherited from interface com.sun.jna.Library; com.sun.jna.Library.Handler. Field Summary. Fields inherited from interface com.sun.jna.Library; OPTION_ALLOW_OBJECTS, OPTION_CALLING_CONVENTION, OPTION_CLASSLOADER, OPTION_FUNCTION_MAPPER, OPTION_INVOCATION_MAPPER, OPTION_OPEN_FLAGS, OPTION_STRING_ENCODING, OPTION_STRUCTURE_ALIGNMENT, OPTION_SYMBOL_PROVIDER, OPTION_TYPE_MAPPER. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; openslide_close(long osr);  ; String; openslide_detect_vendor(String file);  ; void; openslide_get_associated_image_dimensions(long osr,; String name,; long[] w,; long[] h);  ; String[]; openslide_get_associated_image_names(long osr);  ; String; openslide_get_error(long osr);  ; long; openslide_get_icc_profile_size(long osr);  ; int; openslide_get_level_count(long osr);  ; void; openslide_get_level_dimensions(long osr,; int level,; long[] w,; long[] h);  ; double; openslide_get_level_downsample(long osr,; int level);  ; String[]; openslide_get_property_names(long osr);  ; String; openslide_get_property_value(long osr,; String name);  ; String; openslide_get_version();  ; long; openslide_open(String file);  ; void; openslide_read_associated_image(long osr,; String name,; int[] dest);  ; void; openslide_read_icc_profile(long osr,; byte[] bytes);  ; void; openslide_read_region(long osr,; int[] dest,; long x,; long y,; int leve",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideJNA.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2482,Availability,avail,available,2482,"notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. dete",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2567,Availability,avail,available,2567,"Loader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the v",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3241,Availability,avail,available,3241,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3746,Availability,avail,available,3746,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:507,Modifiability,extend,extends,507,". OpenSlideLoader (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1373,Modifiability,inherit,inherited,1373,"ass OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:553,Performance,load,loading,553,". OpenSlideLoader (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1028,Performance,load,loaded,1028,"eLoader (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; T",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1228,Performance,load,load,1228," Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; tru",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1307,Performance,load,load,1307,"ackage qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryV",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1671,Performance,load,load,1671,"thodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been lo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1877,Performance,load,loaded,1877,"ring; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2017,Performance,load,load,2017,"r OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenS",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2095,Performance,load,loaded,2095,"ing path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2251,Performance,load,loaded,2251,"oolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available be",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2446,Performance,load,load,2446,"notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. dete",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2687,Performance,load,loaded,2687,"ietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2721,Performance,load,load,2721,"optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:2858,Performance,load,loaded,2858,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3093,Performance,load,load,3093,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3135,Performance,load,loaded,3135,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3422,Performance,load,loaded,3422,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3599,Performance,load,load,3599,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3641,Performance,load,loaded,3641,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3791,Performance,load,loaded,3791,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:781,Safety,detect,detectVendor,781,". OpenSlideLoader (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:815,Safety,detect,detect,815,". OpenSlideLoader (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLi",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3454,Safety,detect,detectVendor,3454,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3489,Safety,detect,detectVendor,3489,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3523,Safety,detect,detect,3523,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1144,Security,access,access,1144,"ss; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers.openslide.jna; Class OpenSlideLoader. java.lang.Object; qupath.lib.images.servers.openslide.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPa",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:1447,Security,hash,hashCode,1447,"de.jna.OpenSlideLoader. public class OpenSlideLoader; extends Object; Static helper class to manage loading the OpenSlide library. Constructor Summary; Constructors. Constructor; Description; OpenSlideLoader();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; detectVendor(String path). Try to detect the vendor of the image at the specified path. static String; getLibraryVersion(). Get the version of the OpenSlide library. static boolean; isOpenSlideAvailable(). Query whether OpenSlide has already been loaded. static OpenSlide; openImage(String path). Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata. static boolean; tryToLoad(String... searchPath). Try to load OpenSlide. static boolean; tryToLoadQuietly(String... searchPath). Try to load OpenSlide, but don't throw an exception if it fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenSlideLoader; public OpenSlideLoader(). Method Details. tryToLoadQuietly; public static boolean tryToLoadQuietly(String... searchPath); Try to load OpenSlide, but don't throw an exception if it fails. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load Ope",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3041,Security,access,access,3041,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html:663,Integrability,wrap,wrapper,663,. qupath.lib.images.servers.openslide.jna (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers.openslide.jna. package qupath.lib.images.servers.openslide.jna. Related Packages. Package; Description; qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). All Classes and InterfacesInterfacesClassesException Classes. Class; Description; OpenSlide. Minimal Java wrapper for OpenSlide. OpenSlide.OpenSlideDisposedException. Exception thrown whenever a request is made after the OpenSlide object has been closed. OpenSlideJNA. JNA interface for OpenSlide. OpenSlideLoader. Static helper class to manage loading the OpenSlide library. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html:830,Integrability,interface,interface,830,. qupath.lib.images.servers.openslide.jna (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers.openslide.jna. package qupath.lib.images.servers.openslide.jna. Related Packages. Package; Description; qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). All Classes and InterfacesInterfacesClassesException Classes. Class; Description; OpenSlide. Minimal Java wrapper for OpenSlide. OpenSlide.OpenSlideDisposedException. Exception thrown whenever a request is made after the OpenSlide object has been closed. OpenSlideJNA. JNA interface for OpenSlide. OpenSlideLoader. Static helper class to manage loading the OpenSlide library. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html:902,Performance,load,loading,902,. qupath.lib.images.servers.openslide.jna (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.images.servers.openslide.jna. package qupath.lib.images.servers.openslide.jna. Related Packages. Package; Description; qupath.lib.images.servers.openslide. Read images using OpenSlide (https://openslide.org/). All Classes and InterfacesInterfacesClassesException Classes. Class; Description; OpenSlide. Minimal Java wrapper for OpenSlide. OpenSlide.OpenSlideDisposedException. Exception thrown whenever a request is made after the OpenSlide object has been closed. OpenSlideJNA. JNA interface for OpenSlide. OpenSlideLoader. Static helper class to manage loading the OpenSlide library. ,MatchSource.WIKI,javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html:1136,Integrability,interface,interface,1136,". ConvertCommand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class ConvertCommand. java.lang.Object; qupath.lib.images.writers.ome.ConvertCommand. All Implemented Interfaces:; Runnable, Subcommand. public class ConvertCommand; extends Object; implements Runnable, Subcommand; Allows command line option to convert an input image to OME-TIFF. Author:; Melvin Gelbard. Constructor Summary; Constructors. Constructor; Description; ConvertCommand();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvertCommand; public ConvertCommand(). Method Details. run; public void run(). Specified by:; run in interface Runnable. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html:534,Modifiability,extend,extends,534,". ConvertCommand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class ConvertCommand. java.lang.Object; qupath.lib.images.writers.ome.ConvertCommand. All Implemented Interfaces:; Runnable, Subcommand. public class ConvertCommand; extends Object; implements Runnable, Subcommand; Allows command line option to convert an input image to OME-TIFF. Author:; Melvin Gelbard. Constructor Summary; Constructors. Constructor; Description; ConvertCommand();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvertCommand; public ConvertCommand(). Method Details. run; public void run(). Specified by:; run in interface Runnable. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html:881,Modifiability,inherit,inherited,881,". ConvertCommand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class ConvertCommand. java.lang.Object; qupath.lib.images.writers.ome.ConvertCommand. All Implemented Interfaces:; Runnable, Subcommand. public class ConvertCommand; extends Object; implements Runnable, Subcommand; Allows command line option to convert an input image to OME-TIFF. Author:; Melvin Gelbard. Constructor Summary; Constructors. Constructor; Description; ConvertCommand();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvertCommand; public ConvertCommand(). Method Details. run; public void run(). Specified by:; run in interface Runnable. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html:955,Security,hash,hashCode,955,". ConvertCommand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class ConvertCommand. java.lang.Object; qupath.lib.images.writers.ome.ConvertCommand. All Implemented Interfaces:; Runnable, Subcommand. public class ConvertCommand; extends Object; implements Runnable, Subcommand; Allows command line option to convert an input image to OME-TIFF. Author:; Melvin Gelbard. Constructor Summary; Constructors. Constructor; Description; ConvertCommand();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvertCommand; public ConvertCommand(). Method Details. run; public void run(). Specified by:; run in interface Runnable. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/ConvertCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:2101,Availability,down,downsamples,2101,"are exported. OMEPyramidWriter.Builder; bigTiff(). Request that the image is written in BigTIFF format. OMEPyramidWriter.Builder; bigTiff(boolean doBigTiff). Specify whether the image should be written in BigTIFF format. OMEPyramidWriter.OMEPyramidSeries; build(). Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. OMEPyramidWriter.Builder; channels(int... channels). Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. OMEPyramidWriter.Builder; channelsImages(). Request that channels are written as separate images. OMEPyramidWriter.Builder; channelsInterleaved(). Request that channels are written interleaved within a single image plane. OMEPyramidWriter.Builder; channelsPlanar(). Request that channels are written as separate image planes. OMEPyramidWriter.Builder; compression(OMEPyramidWriter.CompressionType compression). Request the output compression type. OMEPyramidWriter.Builder; downsamples(double... downsamples). Specify downsample factors to use in the final pyramid. OMEPyramidWriter.Builder; dyadicDownsampling(). Downsample by factors of 2. OMEPyramidWriter.Builder; losslessCompression(). Request the default lossless compression method. OMEPyramidWriter.Builder; lossyCompression(). Request the default lossy compression method. OMEPyramidWriter.Builder; name(String name). Specify a series name. OMEPyramidWriter.Builder; parallelize(). Parallelize tile export, if possible. OMEPyramidWriter.Builder; parallelize(boolean doParallel). Specify if tile export should be parallelized if possible, with the default number of threads (current 4). OMEPyramidWriter.Builder; parallelize(int nThreads). Specify if tile export should be parallelized if possible, with the requested number of threads. OMEPyramidWriter.Builder; pixelType(String exportPixelType). Specify the output PixelType as a String, e.g. OMEPyramidWriter.Builder; pixelType(PixelType exportPixelType). Specify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:2123,Availability,down,downsamples,2123,"dWriter.Builder; bigTiff(). Request that the image is written in BigTIFF format. OMEPyramidWriter.Builder; bigTiff(boolean doBigTiff). Specify whether the image should be written in BigTIFF format. OMEPyramidWriter.OMEPyramidSeries; build(). Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. OMEPyramidWriter.Builder; channels(int... channels). Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. OMEPyramidWriter.Builder; channelsImages(). Request that channels are written as separate images. OMEPyramidWriter.Builder; channelsInterleaved(). Request that channels are written interleaved within a single image plane. OMEPyramidWriter.Builder; channelsPlanar(). Request that channels are written as separate image planes. OMEPyramidWriter.Builder; compression(OMEPyramidWriter.CompressionType compression). Request the output compression type. OMEPyramidWriter.Builder; downsamples(double... downsamples). Specify downsample factors to use in the final pyramid. OMEPyramidWriter.Builder; dyadicDownsampling(). Downsample by factors of 2. OMEPyramidWriter.Builder; losslessCompression(). Request the default lossless compression method. OMEPyramidWriter.Builder; lossyCompression(). Request the default lossy compression method. OMEPyramidWriter.Builder; name(String name). Specify a series name. OMEPyramidWriter.Builder; parallelize(). Parallelize tile export, if possible. OMEPyramidWriter.Builder; parallelize(boolean doParallel). Specify if tile export should be parallelized if possible, with the default number of threads (current 4). OMEPyramidWriter.Builder; parallelize(int nThreads). Specify if tile export should be parallelized if possible, with the requested number of threads. OMEPyramidWriter.Builder; pixelType(String exportPixelType). Specify the output PixelType as a String, e.g. OMEPyramidWriter.Builder; pixelType(PixelType exportPixelType). Specify the output PixelType. OMEPy",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:2145,Availability,down,downsample,2145," that the image is written in BigTIFF format. OMEPyramidWriter.Builder; bigTiff(boolean doBigTiff). Specify whether the image should be written in BigTIFF format. OMEPyramidWriter.OMEPyramidSeries; build(). Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. OMEPyramidWriter.Builder; channels(int... channels). Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. OMEPyramidWriter.Builder; channelsImages(). Request that channels are written as separate images. OMEPyramidWriter.Builder; channelsInterleaved(). Request that channels are written interleaved within a single image plane. OMEPyramidWriter.Builder; channelsPlanar(). Request that channels are written as separate image planes. OMEPyramidWriter.Builder; compression(OMEPyramidWriter.CompressionType compression). Request the output compression type. OMEPyramidWriter.Builder; downsamples(double... downsamples). Specify downsample factors to use in the final pyramid. OMEPyramidWriter.Builder; dyadicDownsampling(). Downsample by factors of 2. OMEPyramidWriter.Builder; losslessCompression(). Request the default lossless compression method. OMEPyramidWriter.Builder; lossyCompression(). Request the default lossy compression method. OMEPyramidWriter.Builder; name(String name). Specify a series name. OMEPyramidWriter.Builder; parallelize(). Parallelize tile export, if possible. OMEPyramidWriter.Builder; parallelize(boolean doParallel). Specify if tile export should be parallelized if possible, with the default number of threads (current 4). OMEPyramidWriter.Builder; parallelize(int nThreads). Specify if tile export should be parallelized if possible, with the requested number of threads. OMEPyramidWriter.Builder; pixelType(String exportPixelType). Specify the output PixelType as a String, e.g. OMEPyramidWriter.Builder; pixelType(PixelType exportPixelType). Specify the output PixelType. OMEPyramidWriter.Builder; region(int x,;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:3649,Availability,down,downsample,3649,"r.Builder; parallelize(boolean doParallel). Specify if tile export should be parallelized if possible, with the default number of threads (current 4). OMEPyramidWriter.Builder; parallelize(int nThreads). Specify if tile export should be parallelized if possible, with the requested number of threads. OMEPyramidWriter.Builder; pixelType(String exportPixelType). Specify the output PixelType as a String, e.g. OMEPyramidWriter.Builder; pixelType(PixelType exportPixelType). Specify the output PixelType. OMEPyramidWriter.Builder; region(int x,; int y,; int width,; int height). Define the region to export based on a bounding box. OMEPyramidWriter.Builder; region(ImageRegion region). Define the region to export, including the z-slice and time point. OMEPyramidWriter.Builder; scaledDownsampling(double scale). Downsample by specific increasing factor each time (e.g. OMEPyramidWriter.Builder; scaledDownsampling(double minDownsample,; double scale). Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. OMEPyramidWriter.Builder; tileSize(int tileSize). Define the requested tile size (width == height). OMEPyramidWriter.Builder; tileSize(int tileWidth,; int tileHeight). Define the requested tile width and height. OMEPyramidWriter.Builder; timePoint(int t). Specify a single timepoint to be written from a time series. OMEPyramidWriter.Builder; timePoints(int tStart,; int tEnd). Specify a range of timepoints to be written from a time series. OMEPyramidWriter.Builder; uncompressed(). Request no compression. OMEPyramidWriter.Builder; zSlice(int z). Specify the z-slice to export. OMEPyramidWriter.Builder; zSlices(int zStart,; int zEnd). Specify the start (inclusive) and end (exclusive) z-slices. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageServer<BufferedImage> server); Constructor. Parameters:; ser",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:9691,Availability,down,downsamples,9691,"int x,; int y,; int width,; int height); Define the region to export based on a bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:; this builder. region; public OMEPyramidWriter.Builder region(ImageRegion region); Define the region to export, including the z-slice and time point. Parameters:; region - ; Returns:; this builder; See Also:. region(int, int, int, int); timePoint(int); zSlice(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(doub",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:9736,Availability,down,downsamples,9736,"height); Define the region to export based on a bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:; this builder. region; public OMEPyramidWriter.Builder region(ImageRegion region); Define the region to export, including the z-slice and time point. Parameters:; region - ; Returns:; this builder; See Also:. region(int, int, int, int); timePoint(int); zSlice(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale);",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:9758,Availability,down,downsamples,9758,"nding box. Parameters:; x - ; y - ; width - ; height - ; Returns:; this builder. region; public OMEPyramidWriter.Builder region(ImageRegion region); Define the region to export, including the z-slice and time point. Parameters:; region - ; Returns:; this builder; See Also:. region(int, int, int, int); timePoint(int); zSlice(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each tim",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:9780,Availability,down,downsample,9780,"nding box. Parameters:; x - ; y - ; width - ; height - ; Returns:; this builder. region; public OMEPyramidWriter.Builder region(ImageRegion region); Define the region to export, including the z-slice and time point. Parameters:; region - ; Returns:; this builder; See Also:. region(int, int, int, int); timePoint(int); zSlice(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each tim",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:9845,Availability,down,downsample,9845,"ilder. region; public OMEPyramidWriter.Builder region(ImageRegion region); Define the region to export, including the z-slice and time point. Parameters:; region - ; Returns:; this builder; See Also:. region(int, int, int, int); timePoint(int); zSlice(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then do",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:9920,Availability,down,downsamples,9920,"region); Define the region to export, including the z-slice and time point. Parameters:; region - ; Returns:; this builder; See Also:. region(int, int, int, int); timePoint(int); zSlice(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4.",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10087,Availability,down,downsample,10087,"(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10400,Availability,down,downsamples,10400,"leSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10461,Availability,down,downsample,10461,"ne the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameter",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10820,Availability,down,downsample,10820,"wnsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameters:; channels - zero-based channel indices for all channels that should be exported, in the desired export order.; Returns:; this builder. build; public OMEPyramidWriter.OMEPyramidSeries build(); Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. Returns",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10865,Availability,down,downsamples,10865,"cify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameters:; channels - zero-based channel indices for all channels that should be exported, in the desired export order.; Returns:; this builder. build; public OMEPyramidWriter.OMEPyramidSeries build(); Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. Returns:; the series. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10963,Availability,down,downsample,10963,"cify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameters:; channels - zero-based channel indices for all channels that should be exported, in the desired export order.; Returns:; this builder. build; public OMEPyramidWriter.OMEPyramidSeries build(); Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. Returns:; the series. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:11092,Availability,down,downsample,11092,"cify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameters:; channels - zero-based channel indices for all channels that should be exported, in the desired export order.; Returns:; this builder. build; public OMEPyramidWriter.OMEPyramidSeries build(); Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. Returns:; the series. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:11201,Availability,down,downsamples,11201,"cify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameters:; channels - zero-based channel indices for all channels that should be exported, in the desired export order.; Returns:; this builder. build; public OMEPyramidWriter.OMEPyramidSeries build(); Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. Returns:; the series. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10109,Integrability,depend,depend,10109,"(int); zSlices(int, int). tileSize; public OMEPyramidWriter.Builder tileSize(int tileSize); Define the requested tile size (width == height).; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileSize - ; Returns:; this builder. tileSize; public OMEPyramidWriter.Builder tileSize(int tileWidth,; int tileHeight); Define the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10483,Integrability,depend,depend,10483,"ne the requested tile width and height.; ; This is only a suggestion, and the OME reader may override it if the value is unsupported. Parameters:; tileWidth - ; tileHeight - ; Returns:; this builder. downsamples; public OMEPyramidWriter.Builder downsamples(double... downsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameter",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10985,Integrability,depend,depend,10985,"cify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameters:; channels - zero-based channel indices for all channels that should be exported, in the desired export order.; Returns:; this builder. build; public OMEPyramidWriter.OMEPyramidSeries build(); Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. Returns:; the series. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:566,Modifiability,extend,extends,566,". OMEPyramidWriter.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriter.Builder. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Enclosing class:; OMEPyramidWriter. public static class OMEPyramidWriter.Builder; extends Object; Builder class to define parameters when exporting an image region as OME-TIFF,; possibly as an image pyramid. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Builder(ImageServer<BufferedImage> server). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; OMEPyramidWriter.Builder; allTimePoints(). Request that all timepoints of a time series will be written. OMEPyramidWriter.Builder; allZSlices(). Request that all z-slices are exported. OMEPyramidWriter.Builder; bigTiff(). Request that the image is written in BigTIFF format. OMEPyramidWriter.Builder; bigTiff(boolean doBigTiff). Specify whether the image should be written in BigTIFF format. OMEPyramidWriter.OMEPyramidSeries; build(). Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. OMEPyramidWriter.Builder; channels(int... channels). Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. OMEPyramidWriter.Builder; channelsImages(). Request that channels are written as separate images. OMEPyramidWriter.Builder; channelsInterleaved(). Request that channels are written interleaved within a single image plane. OMEPyramidWriter.Builder; channelsPlanar(). Request that channels are written as separate image planes. OMEPyramidWriter.Builder; compression(OMEPyramid",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:4380,Modifiability,inherit,inherited,4380,".Builder; scaledDownsampling(double scale). Downsample by specific increasing factor each time (e.g. OMEPyramidWriter.Builder; scaledDownsampling(double minDownsample,; double scale). Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. OMEPyramidWriter.Builder; tileSize(int tileSize). Define the requested tile size (width == height). OMEPyramidWriter.Builder; tileSize(int tileWidth,; int tileHeight). Define the requested tile width and height. OMEPyramidWriter.Builder; timePoint(int t). Specify a single timepoint to be written from a time series. OMEPyramidWriter.Builder; timePoints(int tStart,; int tEnd). Specify a range of timepoints to be written from a time series. OMEPyramidWriter.Builder; uncompressed(). Request no compression. OMEPyramidWriter.Builder; zSlice(int z). Specify the z-slice to export. OMEPyramidWriter.Builder; zSlices(int zStart,; int zEnd). Specify the start (inclusive) and end (exclusive) z-slices. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageServer<BufferedImage> server); Constructor. Parameters:; server - the ImageServer from which pixels will be requested and written to the OME-TIFF. Method Details. channelsPlanar; public OMEPyramidWriter.Builder channelsPlanar(); Request that channels are written as separate image planes. Returns:; this builder. channelsInterleaved; public OMEPyramidWriter.Builder channelsInterleaved(); Request that channels are written interleaved within a single image plane. Returns:; this builder. channelsImages; public OMEPyramidWriter.Builder channelsImages(); Request that channels are written as separate images. Returns:; this builder. bigTiff; public OMEPyramidWriter.Builder bigTiff(); Request that the image is written in BigTIFF format. Returns:; this builder. bigTiff; public OMEPyramidWriter.Builder bigTiff(boolean doBigTiff)",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:6806,Performance,perform,performance,6806,"; Request the default lossy compression method. Not all servers support lossy compression ; (e.g. non-RGB servers). Returns:; this builder. losslessCompression; public OMEPyramidWriter.Builder losslessCompression(); Request the default lossless compression method. Returns:. uncompressed; public OMEPyramidWriter.Builder uncompressed(); Request no compression. Returns:; Since:; v0.4.0. parallelize; public OMEPyramidWriter.Builder parallelize(); Parallelize tile export, if possible. Returns:; this builder. parallelize; public OMEPyramidWriter.Builder parallelize(boolean doParallel); Specify if tile export should be parallelized if possible, with the default number of threads (current 4). Parameters:; doParallel - ; Returns:; See Also:. parallelize(int). parallelize; public OMEPyramidWriter.Builder parallelize(int nThreads); Specify if tile export should be parallelized if possible, with the requested number of threads.; ; Note that increasing the number of threads may not give improved performance, since it I/O and compression may well ; become a bottleneck. The main purpose of this option is to parallelize requesting and writing tiles, which can ; be achieved with just a few threads. Parameters:; nThreads - number of threads for parallel export; use ≤ 1 to turn off parallelization.; Returns:; Since:; v0.4.0. pixelType; public OMEPyramidWriter.Builder pixelType(PixelType exportPixelType); Specify the output PixelType. Parameters:; exportPixelType - ; Returns:. pixelType; public OMEPyramidWriter.Builder pixelType(String exportPixelType); Specify the output PixelType as a String, e.g. ""UINT8"", ""FLOAT32"" etc. Parameters:; exportPixelType - ; Returns:. allZSlices; public OMEPyramidWriter.Builder allZSlices(); Request that all z-slices are exported. Returns:; this builder. zSlice; public OMEPyramidWriter.Builder zSlice(int z); Specify the z-slice to export. Parameters:; z - ; Returns:; this builder. zSlices; public OMEPyramidWriter.Builder zSlices(int zStart,; int zEnd); Sp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:6868,Performance,bottleneck,bottleneck,6868,"; Request the default lossy compression method. Not all servers support lossy compression ; (e.g. non-RGB servers). Returns:; this builder. losslessCompression; public OMEPyramidWriter.Builder losslessCompression(); Request the default lossless compression method. Returns:. uncompressed; public OMEPyramidWriter.Builder uncompressed(); Request no compression. Returns:; Since:; v0.4.0. parallelize; public OMEPyramidWriter.Builder parallelize(); Parallelize tile export, if possible. Returns:; this builder. parallelize; public OMEPyramidWriter.Builder parallelize(boolean doParallel); Specify if tile export should be parallelized if possible, with the default number of threads (current 4). Parameters:; doParallel - ; Returns:; See Also:. parallelize(int). parallelize; public OMEPyramidWriter.Builder parallelize(int nThreads); Specify if tile export should be parallelized if possible, with the requested number of threads.; ; Note that increasing the number of threads may not give improved performance, since it I/O and compression may well ; become a bottleneck. The main purpose of this option is to parallelize requesting and writing tiles, which can ; be achieved with just a few threads. Parameters:; nThreads - number of threads for parallel export; use ≤ 1 to turn off parallelization.; Returns:; Since:; v0.4.0. pixelType; public OMEPyramidWriter.Builder pixelType(PixelType exportPixelType); Specify the output PixelType. Parameters:; exportPixelType - ; Returns:. pixelType; public OMEPyramidWriter.Builder pixelType(String exportPixelType); Specify the output PixelType as a String, e.g. ""UINT8"", ""FLOAT32"" etc. Parameters:; exportPixelType - ; Returns:. allZSlices; public OMEPyramidWriter.Builder allZSlices(); Request that all z-slices are exported. Returns:; this builder. zSlice; public OMEPyramidWriter.Builder zSlice(int z); Specify the z-slice to export. Parameters:; z - ; Returns:; this builder. zSlices; public OMEPyramidWriter.Builder zSlices(int zStart,; int zEnd); Sp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:4454,Security,hash,hashCode,4454,"asing factor each time (e.g. OMEPyramidWriter.Builder; scaledDownsampling(double minDownsample,; double scale). Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. OMEPyramidWriter.Builder; tileSize(int tileSize). Define the requested tile size (width == height). OMEPyramidWriter.Builder; tileSize(int tileWidth,; int tileHeight). Define the requested tile width and height. OMEPyramidWriter.Builder; timePoint(int t). Specify a single timepoint to be written from a time series. OMEPyramidWriter.Builder; timePoints(int tStart,; int tEnd). Specify a range of timepoints to be written from a time series. OMEPyramidWriter.Builder; uncompressed(). Request no compression. OMEPyramidWriter.Builder; zSlice(int z). Specify the z-slice to export. OMEPyramidWriter.Builder; zSlices(int zStart,; int zEnd). Specify the start (inclusive) and end (exclusive) z-slices. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(ImageServer<BufferedImage> server); Constructor. Parameters:; server - the ImageServer from which pixels will be requested and written to the OME-TIFF. Method Details. channelsPlanar; public OMEPyramidWriter.Builder channelsPlanar(); Request that channels are written as separate image planes. Returns:; this builder. channelsInterleaved; public OMEPyramidWriter.Builder channelsInterleaved(); Request that channels are written interleaved within a single image plane. Returns:; this builder. channelsImages; public OMEPyramidWriter.Builder channelsImages(); Request that channels are written as separate images. Returns:; this builder. bigTiff; public OMEPyramidWriter.Builder bigTiff(); Request that the image is written in BigTIFF format. Returns:; this builder. bigTiff; public OMEPyramidWriter.Builder bigTiff(boolean doBigTiff); Specify whether the image should be written in BigTIFF format. Paramet",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html:960,Integrability,interface,interfaces,960,". OMEPyramidWriter.ChannelExportType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.ChannelExportType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.ChannelExportType>; qupath.lib.images.writers.ome.OMEPyramidWriter.ChannelExportType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.ChannelExportType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.ChannelExportType; extends Enum<OMEPyramidWriter.ChannelExportType>; Enum representing different ways in which channels may be written to a file. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Leave it up to the writer to choose the appropriate method. IMAGES. Channels are stored as separate images (this is not yet supported!). INTERLEAVED. Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.ChannelExportType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.ChannelExportType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, noti",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html:796,Modifiability,extend,extends,796,". OMEPyramidWriter.ChannelExportType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.ChannelExportType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.ChannelExportType>; qupath.lib.images.writers.ome.OMEPyramidWriter.ChannelExportType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.ChannelExportType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.ChannelExportType; extends Enum<OMEPyramidWriter.ChannelExportType>; Enum representing different ways in which channels may be written to a file. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Leave it up to the writer to choose the appropriate method. IMAGES. Channels are stored as separate images (this is not yet supported!). INTERLEAVED. Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.ChannelExportType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.ChannelExportType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, noti",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html:971,Modifiability,inherit,inherited,971,". OMEPyramidWriter.ChannelExportType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.ChannelExportType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.ChannelExportType>; qupath.lib.images.writers.ome.OMEPyramidWriter.ChannelExportType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.ChannelExportType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.ChannelExportType; extends Enum<OMEPyramidWriter.ChannelExportType>; Enum representing different ways in which channels may be written to a file. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Leave it up to the writer to choose the appropriate method. IMAGES. Channels are stored as separate images (this is not yet supported!). INTERLEAVED. Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.ChannelExportType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.ChannelExportType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, noti",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html:1024,Modifiability,extend,extends,1024,"xportType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.ChannelExportType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.ChannelExportType>; qupath.lib.images.writers.ome.OMEPyramidWriter.ChannelExportType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.ChannelExportType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.ChannelExportType; extends Enum<OMEPyramidWriter.ChannelExportType>; Enum representing different ways in which channels may be written to a file. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Leave it up to the writer to choose the appropriate method. IMAGES. Channels are stored as separate images (this is not yet supported!). INTERLEAVED. Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.ChannelExportType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.ChannelExportType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait,",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html:1785,Modifiability,inherit,inherited,1785,"e; extends Enum<OMEPyramidWriter.ChannelExportType>; Enum representing different ways in which channels may be written to a file. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Leave it up to the writer to choose the appropriate method. IMAGES. Channels are stored as separate images (this is not yet supported!). INTERLEAVED. Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.ChannelExportType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.ChannelExportType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. DEFAULT; public static final OMEPyramidWriter.ChannelExportType DEFAULT; Leave it up to the writer to choose the appropriate method. INTERLEAVED; public static final OMEPyramidWriter.ChannelExportType INTERLEAVED; Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR; public static final OMEPyramidWriter.ChannelExportType PLANAR; Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). IMAGES; public static final OMEPyramidWriter.ChannelExportType IMAGES; Channels are stored as separate images (this is not yet supported!). Method Details. values; public static OMEPyramidWriter.ChannelExportType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html:1948,Modifiability,inherit,inherited,1948,"ses/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Leave it up to the writer to choose the appropriate method. IMAGES. Channels are stored as separate images (this is not yet supported!). INTERLEAVED. Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.ChannelExportType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.ChannelExportType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. DEFAULT; public static final OMEPyramidWriter.ChannelExportType DEFAULT; Leave it up to the writer to choose the appropriate method. INTERLEAVED; public static final OMEPyramidWriter.ChannelExportType INTERLEAVED; Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR; public static final OMEPyramidWriter.ChannelExportType PLANAR; Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). IMAGES; public static final OMEPyramidWriter.ChannelExportType IMAGES; Channels are stored as separate images (this is not yet supported!). Method Details. values; public static OMEPyramidWriter.ChannelExportType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static OMEPyramidWriter.ChannelExportType valueOf(String name",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html:1896,Security,hash,hashCode,1896,"s in which channels may be written to a file. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Leave it up to the writer to choose the appropriate method. IMAGES. Channels are stored as separate images (this is not yet supported!). INTERLEAVED. Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.ChannelExportType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.ChannelExportType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. DEFAULT; public static final OMEPyramidWriter.ChannelExportType DEFAULT; Leave it up to the writer to choose the appropriate method. INTERLEAVED; public static final OMEPyramidWriter.ChannelExportType INTERLEAVED; Channels are interleaved ('PLANARCONFIG_CONTIG'). PLANAR; public static final OMEPyramidWriter.ChannelExportType PLANAR; Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). IMAGES; public static final OMEPyramidWriter.ChannelExportType IMAGES; Channels are stored as separate images (this is not yet supported!). Method Details. values; public static OMEPyramidWriter.ChannelExportType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.ChannelExportType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html:920,Integrability,interface,interfaces,920,". OMEPyramidWriter.CompressionType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.CompressionType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.CompressionType>; qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.CompressionType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.CompressionType; extends Enum<OMEPyramidWriter.CompressionType>; Preferred compression type when using Bio-Formats. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Default (QuPath will select compression option based on image size and type, may be lossless or lossy). J2K. Lossless JPEG-2000 compression. J2K_LOSSY. Lossy JPEG-2000 compression. JPEG. JPEG compression (only for single channel or RGB 8-bit images). LZW. LZW compression. UNCOMPRESSED. No compression (faster to write, no loss of information, but large file sizes). ZLIB. ZLIB compression. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; fromFriendlyString(String friendlyCompression). Get the CompressionType corresponding to the given input. String; getOMEString(ImageServer<?> server). Get the String representation understood by OMETiffWriter. boolean; supportsImage(ImageServer<?> server). Returns true if the compression type supports a specific image server, or false ; if it is incompatible. boolean; suppo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html:784,Modifiability,extend,extends,784,". OMEPyramidWriter.CompressionType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.CompressionType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.CompressionType>; qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.CompressionType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.CompressionType; extends Enum<OMEPyramidWriter.CompressionType>; Preferred compression type when using Bio-Formats. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Default (QuPath will select compression option based on image size and type, may be lossless or lossy). J2K. Lossless JPEG-2000 compression. J2K_LOSSY. Lossy JPEG-2000 compression. JPEG. JPEG compression (only for single channel or RGB 8-bit images). LZW. LZW compression. UNCOMPRESSED. No compression (faster to write, no loss of information, but large file sizes). ZLIB. ZLIB compression. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; fromFriendlyString(String friendlyCompression). Get the CompressionType corresponding to the given input. String; getOMEString(ImageServer<?> server). Get the String representation understood by OMETiffWriter. boolean; supportsImage(ImageServer<?> server). Returns true if the compression type supports a specific image server, or false ; if it is incompatible. boolean; suppo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html:931,Modifiability,inherit,inherited,931,". OMEPyramidWriter.CompressionType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.CompressionType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.CompressionType>; qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.CompressionType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.CompressionType; extends Enum<OMEPyramidWriter.CompressionType>; Preferred compression type when using Bio-Formats. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Default (QuPath will select compression option based on image size and type, may be lossless or lossy). J2K. Lossless JPEG-2000 compression. J2K_LOSSY. Lossy JPEG-2000 compression. JPEG. JPEG compression (only for single channel or RGB 8-bit images). LZW. LZW compression. UNCOMPRESSED. No compression (faster to write, no loss of information, but large file sizes). ZLIB. ZLIB compression. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; fromFriendlyString(String friendlyCompression). Get the CompressionType corresponding to the given input. String; getOMEString(ImageServer<?> server). Get the String representation understood by OMETiffWriter. boolean; supportsImage(ImageServer<?> server). Returns true if the compression type supports a specific image server, or false ; if it is incompatible. boolean; suppo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html:984,Modifiability,extend,extends,984,". OMEPyramidWriter.CompressionType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Enum Class OMEPyramidWriter.CompressionType. java.lang.Object; java.lang.Enum<OMEPyramidWriter.CompressionType>; qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. All Implemented Interfaces:; Serializable, Comparable<OMEPyramidWriter.CompressionType>, Constable. Enclosing class:; OMEPyramidWriter. public static enum OMEPyramidWriter.CompressionType; extends Enum<OMEPyramidWriter.CompressionType>; Preferred compression type when using Bio-Formats. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DEFAULT. Default (QuPath will select compression option based on image size and type, may be lossless or lossy). J2K. Lossless JPEG-2000 compression. J2K_LOSSY. Lossy JPEG-2000 compression. JPEG. JPEG compression (only for single channel or RGB 8-bit images). LZW. LZW compression. UNCOMPRESSED. No compression (faster to write, no loss of information, but large file sizes). ZLIB. ZLIB compression. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; fromFriendlyString(String friendlyCompression). Get the CompressionType corresponding to the given input. String; getOMEString(ImageServer<?> server). Get the String representation understood by OMETiffWriter. boolean; supportsImage(ImageServer<?> server). Returns true if the compression type supports a specific image server, or false ; if it is incompatible. boolean; suppo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html:2557,Modifiability,inherit,inherited,2557,"thod; Description; static OMEPyramidWriter.CompressionType; fromFriendlyString(String friendlyCompression). Get the CompressionType corresponding to the given input. String; getOMEString(ImageServer<?> server). Get the String representation understood by OMETiffWriter. boolean; supportsImage(ImageServer<?> server). Returns true if the compression type supports a specific image server, or false ; if it is incompatible. boolean; supportsImage(PixelType pixelType,; int nChannels,; boolean isRGB). Returns true if the compression type supports a specific PixelType output ; with the given number of channels - and (optionally) RGB status. String; toFriendlyString(). Get a friendlier string representation. static OMEPyramidWriter.CompressionType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.CompressionType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. UNCOMPRESSED; public static final OMEPyramidWriter.CompressionType UNCOMPRESSED; No compression (faster to write, no loss of information, but large file sizes). DEFAULT; public static final OMEPyramidWriter.CompressionType DEFAULT; Default (QuPath will select compression option based on image size and type, may be lossless or lossy). JPEG; public static final OMEPyramidWriter.CompressionType JPEG; JPEG compression (only for single channel or RGB 8-bit images). J2K; public static final OMEPyramidWriter.CompressionType J2K; Lossless JPEG-2000 compression. J2K_LOSSY; public static final OMEPyramidWriter.CompressionType J2K_LOSSY; Lossy JPEG-2000 compression. LZW; public static final OMEPyramidWriter.CompressionType LZW; LZW compre",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html:2720,Modifiability,inherit,inherited,2720,"t. String; getOMEString(ImageServer<?> server). Get the String representation understood by OMETiffWriter. boolean; supportsImage(ImageServer<?> server). Returns true if the compression type supports a specific image server, or false ; if it is incompatible. boolean; supportsImage(PixelType pixelType,; int nChannels,; boolean isRGB). Returns true if the compression type supports a specific PixelType output ; with the given number of channels - and (optionally) RGB status. String; toFriendlyString(). Get a friendlier string representation. static OMEPyramidWriter.CompressionType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.CompressionType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. UNCOMPRESSED; public static final OMEPyramidWriter.CompressionType UNCOMPRESSED; No compression (faster to write, no loss of information, but large file sizes). DEFAULT; public static final OMEPyramidWriter.CompressionType DEFAULT; Default (QuPath will select compression option based on image size and type, may be lossless or lossy). JPEG; public static final OMEPyramidWriter.CompressionType JPEG; JPEG compression (only for single channel or RGB 8-bit images). J2K; public static final OMEPyramidWriter.CompressionType J2K; Lossless JPEG-2000 compression. J2K_LOSSY; public static final OMEPyramidWriter.CompressionType J2K_LOSSY; Lossy JPEG-2000 compression. LZW; public static final OMEPyramidWriter.CompressionType LZW; LZW compression. ZLIB; public static final OMEPyramidWriter.CompressionType ZLIB; ZLIB compression. Method Details. values; public static OMEPyramidWriter.CompressionType[] ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html:2668,Security,hash,hashCode,2668,"g friendlyCompression). Get the CompressionType corresponding to the given input. String; getOMEString(ImageServer<?> server). Get the String representation understood by OMETiffWriter. boolean; supportsImage(ImageServer<?> server). Returns true if the compression type supports a specific image server, or false ; if it is incompatible. boolean; supportsImage(PixelType pixelType,; int nChannels,; boolean isRGB). Returns true if the compression type supports a specific PixelType output ; with the given number of channels - and (optionally) RGB status. String; toFriendlyString(). Get a friendlier string representation. static OMEPyramidWriter.CompressionType; valueOf(String name). Returns the enum constant of this class with the specified name. static OMEPyramidWriter.CompressionType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. UNCOMPRESSED; public static final OMEPyramidWriter.CompressionType UNCOMPRESSED; No compression (faster to write, no loss of information, but large file sizes). DEFAULT; public static final OMEPyramidWriter.CompressionType DEFAULT; Default (QuPath will select compression option based on image size and type, may be lossless or lossy). JPEG; public static final OMEPyramidWriter.CompressionType JPEG; JPEG compression (only for single channel or RGB 8-bit images). J2K; public static final OMEPyramidWriter.CompressionType J2K; Lossless JPEG-2000 compression. J2K_LOSSY; public static final OMEPyramidWriter.CompressionType J2K_LOSSY; Lossy JPEG-2000 compression. LZW; public static final OMEPyramidWriter.CompressionType LZW; LZW compression. ZLIB; public static final OMEPyramidWriter.CompressionType ZLIB; ZLIB compres",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.CompressionType.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:5597,Availability,down,downsample,5597,"; Static helper method to write an image using Bio-Formats with the specified compression.; This is primarily intended for saving whole slide images as pyramidal OME-TIFF, but other formats are supported. Parameters:; server - ; path - ; compression - ; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region); throws FormatException,; IOException; Static helper method to write an image region using Bio-Formats with the specified compression.; If region is null, the entire image will be written. If region is not null, it defines the bounding box of the exported ; pixels in addition to the z-slice and timepoint. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region,; boolean allZ,; boolean allT); throws FormatException,; IOException; Static helper method to write an image using Bio-Formats for a defined region with the specified compression, optionally including all ; z-slices or timepoints.; This is intended primarily to write (possibly pyramidal) OME-TIFF images; other formats may support fewer image types and dimensions. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; allZ - if true, export all z-slices otherwise export slice defined by ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:5652,Availability,down,downsample,5652,"; Static helper method to write an image using Bio-Formats with the specified compression.; This is primarily intended for saving whole slide images as pyramidal OME-TIFF, but other formats are supported. Parameters:; server - ; path - ; compression - ; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region); throws FormatException,; IOException; Static helper method to write an image region using Bio-Formats with the specified compression.; If region is null, the entire image will be written. If region is not null, it defines the bounding box of the exported ; pixels in addition to the z-slice and timepoint. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region,; boolean allZ,; boolean allT); throws FormatException,; IOException; Static helper method to write an image using Bio-Formats for a defined region with the specified compression, optionally including all ; z-slices or timepoints.; This is intended primarily to write (possibly pyramidal) OME-TIFF images; other formats may support fewer image types and dimensions. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; allZ - if true, export all z-slices otherwise export slice defined by ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:6464,Availability,down,downsample,6464,"arameters:; server - ; path - ; compression - ; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region); throws FormatException,; IOException; Static helper method to write an image region using Bio-Formats with the specified compression.; If region is null, the entire image will be written. If region is not null, it defines the bounding box of the exported ; pixels in addition to the z-slice and timepoint. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region,; boolean allZ,; boolean allT); throws FormatException,; IOException; Static helper method to write an image using Bio-Formats for a defined region with the specified compression, optionally including all ; z-slices or timepoints.; This is intended primarily to write (possibly pyramidal) OME-TIFF images; other formats may support fewer image types and dimensions. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; allZ - if true, export all z-slices otherwise export slice defined by region (ignored if image is not a z-stack); allT - if true, export all timepoints otherwise export timepoint defined by region (ignored if image is not a timeseries); Throws:; FormatException; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:6519,Availability,down,downsample,6519,"arameters:; server - ; path - ; compression - ; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region); throws FormatException,; IOException; Static helper method to write an image region using Bio-Formats with the specified compression.; If region is null, the entire image will be written. If region is not null, it defines the bounding box of the exported ; pixels in addition to the z-slice and timepoint. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; Throws:; FormatException; IOException. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region,; boolean allZ,; boolean allT); throws FormatException,; IOException; Static helper method to write an image using Bio-Formats for a defined region with the specified compression, optionally including all ; z-slices or timepoints.; This is intended primarily to write (possibly pyramidal) OME-TIFF images; other formats may support fewer image types and dimensions. Parameters:; server - image to write; path - path to output file; compression - image compression method; may be null to use the default compression; region - the region to export. If this is a RegionRequest that defines a downsample other than the default for the server, this downsample will be used.; allZ - if true, export all z-slices otherwise export slice defined by region (ignored if image is not a z-stack); allT - if true, export all timepoints otherwise export timepoint defined by region (ignored if image is not a timeseries); Throws:; FormatException; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:491,Modifiability,extend,extends,491,". OMEPyramidWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriter. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriter. public class OMEPyramidWriter; extends Object; Write OME-TIFF files based on QuPath ImageServers.; ; The files may optionally be pyramidal TIFFs. Some key metadata is set (e.g. channel names/colors, pixel size), ; and an effort is made to support multidimensional images - but this has not been extensively checked. ; ; Currently the magnification is not written, nor is the full OME XML metadata, and images written using this class ; should not be assumed to contain all the necessary information, correctly or at all (i.e. always keep your original data files!).; ; Note this requires Bio-Formats v6.0.0 or later. Author:; Pete Bankhead; ; modified by @phaub , 04'2021 (JPEG support for nChannels > 1, sanity check). Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OMEPyramidWriter.Builder. Builder class to define parameters when exporting an image region as OME-TIFF,; possibly as an image pyramid. static enum ; OMEPyramidWriter.ChannelExportType. Enum representing different ways in which channels may be written to a file. static enum ; OMEPyramidWriter.CompressionType. Preferred compression type when using Bio-Formats. static class ; OMEPyramidWriter.OMEPyramidSeries. Class representing a single series to write to an OME-TIFF. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter; createWriter(Collection<OMEPyramidWriter.OMEPyramidSeries> series). Create a writer capable of writing an image with ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:3201,Modifiability,inherit,inherited,3201,"Write an image consisting of one or more series to the specified path. static void; writeImage(ImageServer<BufferedImage> server,; String path). Static helper method to write an image using Bio-Formats. static void; writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression). Static helper method to write an image using Bio-Formats with the specified compression. static void; writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region). Static helper method to write an image region using Bio-Formats with the specified compression. static void; writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region,; boolean allZ,; boolean allT). Static helper method to write an image using Bio-Formats for a defined region with the specified compression, optionally including all ; z-slices or timepoints. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. writeImage; public void writeImage(String path); throws FormatException,; IOException; Write an image consisting of one or more series to the specified path. Parameters:; path - ; Throws:; FormatException; IOException; See Also:. createWriter(Collection); createWriter(OMEPyramidSeries...). createWriter; public static OMEPyramidWriter createWriter(OMEPyramidWriter.OMEPyramidSeries... series); Create a writer capable of writing an image with one or more series. Parameters:; series - ; Returns:. createWriter; public static OMEPyramidWriter createWriter(Collection<OMEPyramidWriter.OMEPyramidSeries> series); Create a writer capable of writing an image with a collection of series. Parameters:; series - ; Returns:. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path); throws FormatException,; IOException; Static helper ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:1165,Safety,sanity check,sanity check,1165,"; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriter. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriter. public class OMEPyramidWriter; extends Object; Write OME-TIFF files based on QuPath ImageServers.; ; The files may optionally be pyramidal TIFFs. Some key metadata is set (e.g. channel names/colors, pixel size), ; and an effort is made to support multidimensional images - but this has not been extensively checked. ; ; Currently the magnification is not written, nor is the full OME XML metadata, and images written using this class ; should not be assumed to contain all the necessary information, correctly or at all (i.e. always keep your original data files!).; ; Note this requires Bio-Formats v6.0.0 or later. Author:; Pete Bankhead; ; modified by @phaub , 04'2021 (JPEG support for nChannels > 1, sanity check). Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OMEPyramidWriter.Builder. Builder class to define parameters when exporting an image region as OME-TIFF,; possibly as an image pyramid. static enum ; OMEPyramidWriter.ChannelExportType. Enum representing different ways in which channels may be written to a file. static enum ; OMEPyramidWriter.CompressionType. Preferred compression type when using Bio-Formats. static class ; OMEPyramidWriter.OMEPyramidSeries. Class representing a single series to write to an OME-TIFF. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter; createWriter(Collection<OMEPyramidWriter.OMEPyramidSeries> series). Create a writer capable of writing an image with a collection of series. static OMEPyramidWriter; createWriter(OMEPyramidWriter.OMEPyramidSeries... series). Create a writer cap",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html:3275,Security,hash,hashCode,3275,"tatic void; writeImage(ImageServer<BufferedImage> server,; String path). Static helper method to write an image using Bio-Formats. static void; writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression). Static helper method to write an image using Bio-Formats with the specified compression. static void; writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region). Static helper method to write an image region using Bio-Formats with the specified compression. static void; writeImage(ImageServer<BufferedImage> server,; String path,; OMEPyramidWriter.CompressionType compression,; ImageRegion region,; boolean allZ,; boolean allT). Static helper method to write an image using Bio-Formats for a defined region with the specified compression, optionally including all ; z-slices or timepoints. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. writeImage; public void writeImage(String path); throws FormatException,; IOException; Write an image consisting of one or more series to the specified path. Parameters:; path - ; Throws:; FormatException; IOException; See Also:. createWriter(Collection); createWriter(OMEPyramidSeries...). createWriter; public static OMEPyramidWriter createWriter(OMEPyramidWriter.OMEPyramidSeries... series); Create a writer capable of writing an image with one or more series. Parameters:; series - ; Returns:. createWriter; public static OMEPyramidWriter createWriter(Collection<OMEPyramidWriter.OMEPyramidSeries> series); Create a writer capable of writing an image with a collection of series. Parameters:; series - ; Returns:. writeImage; public static void writeImage(ImageServer<BufferedImage> server,; String path); throws FormatException,; IOException; Static helper method to write an image using Bio-Formats.; This is primarily intended ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html:602,Modifiability,extend,extends,602,". OMEPyramidWriter.OMEPyramidSeries (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriter.OMEPyramidSeries. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriter.OMEPyramidSeries. Enclosing class:; OMEPyramidWriter. public static class OMEPyramidWriter.OMEPyramidSeries; extends Object; Class representing a single series to write to an OME-TIFF. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; void; writePyramid(String path). Deprecated.; use writeSeries(String) instead. void; writePyramid(PyramidOMETiffWriter writer,; IMetadata meta,; int series). Deprecated.; use writeSeries(IFormatWriter, IMetadata, int) instead. void; writeSeries(String path). Write an image to the given file. void; writeSeries(IFormatWriter writer,; IMetadata meta,; int series). Append an image as a specific series. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. writePyramid; @Deprecated; public void writePyramid(String path); throws FormatException,; IOException; Deprecated.; use writeSeries(String) instead. Write an OME-TIFF pyramidal image to the given file. Parameters:; path - file path for output; Throws:; FormatException; IOException. writeSeries; public void writeSeries(String path); throws FormatException,; IOException; Write an image to the given file. Parameters:; path - file path for output; Throws:; FormatException; IOException. writePyramid; @Deprecated; public void writePyramid(PyramidOMETiffWriter writer,; IMetadata meta,; int series); throws FormatException,; IOException; Deprecate",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html:1207,Modifiability,inherit,inherited,1207,"d. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriter.OMEPyramidSeries. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriter.OMEPyramidSeries. Enclosing class:; OMEPyramidWriter. public static class OMEPyramidWriter.OMEPyramidSeries; extends Object; Class representing a single series to write to an OME-TIFF. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; void; writePyramid(String path). Deprecated.; use writeSeries(String) instead. void; writePyramid(PyramidOMETiffWriter writer,; IMetadata meta,; int series). Deprecated.; use writeSeries(IFormatWriter, IMetadata, int) instead. void; writeSeries(String path). Write an image to the given file. void; writeSeries(IFormatWriter writer,; IMetadata meta,; int series). Append an image as a specific series. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. writePyramid; @Deprecated; public void writePyramid(String path); throws FormatException,; IOException; Deprecated.; use writeSeries(String) instead. Write an OME-TIFF pyramidal image to the given file. Parameters:; path - file path for output; Throws:; FormatException; IOException. writeSeries; public void writeSeries(String path); throws FormatException,; IOException; Write an image to the given file. Parameters:; path - file path for output; Throws:; FormatException; IOException. writePyramid; @Deprecated; public void writePyramid(PyramidOMETiffWriter writer,; IMetadata meta,; int series); throws FormatException,; IOException; Deprecated.; use writeSeries(IFormatWriter, IMetadata, int) instead. Append an image as a specific series to a pyramidal OME TIFF. Parameters:; writer - the current writer; it should already be initialized, with metadata and",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html:1281,Security,hash,hashCode,1281,"r | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriter.OMEPyramidSeries. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriter.OMEPyramidSeries. Enclosing class:; OMEPyramidWriter. public static class OMEPyramidWriter.OMEPyramidSeries; extends Object; Class representing a single series to write to an OME-TIFF. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; void; writePyramid(String path). Deprecated.; use writeSeries(String) instead. void; writePyramid(PyramidOMETiffWriter writer,; IMetadata meta,; int series). Deprecated.; use writeSeries(IFormatWriter, IMetadata, int) instead. void; writeSeries(String path). Write an image to the given file. void; writeSeries(IFormatWriter writer,; IMetadata meta,; int series). Append an image as a specific series. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. writePyramid; @Deprecated; public void writePyramid(String path); throws FormatException,; IOException; Deprecated.; use writeSeries(String) instead. Write an OME-TIFF pyramidal image to the given file. Parameters:; path - file path for output; Throws:; FormatException; IOException. writeSeries; public void writeSeries(String path); throws FormatException,; IOException; Write an image to the given file. Parameters:; path - file path for output; Throws:; FormatException; IOException. writePyramid; @Deprecated; public void writePyramid(PyramidOMETiffWriter writer,; IMetadata meta,; int series); throws FormatException,; IOException; Deprecated.; use writeSeries(IFormatWriter, IMetadata, int) instead. Append an image as a specific series to a pyramidal OME TIFF. Parameters:; writer - the current writer; it should already be initialized, with metadata and ID set; meta - the metadata, which should already have been initialized",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.OMEPyramidSeries.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html:2250,Integrability,interface,interface,2250,"; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriterCommand. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriterCommand. All Implemented Interfaces:; Runnable. public class OMEPyramidWriterCommand; extends Object; implements Runnable; OME TIFF writer command capable of exporting image pyramids based on QuPath ImageServers.; ; Note this requires Bio-Formats v6.0.0 or later. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; OMEPyramidWriterCommand(QuPathGUI qupath). Constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; getDefaultPyramidCompression(). Query the default compression type when writing OME-TIFF images. static int; getDefaultTileSize(). Query the default tile size when writing OME-TIFF images. static int; getMinSizeForTiling(). Query the default minimum image size when writing OME-TIFF images. void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OMEPyramidWriterCommand; public OMEPyramidWriterCommand(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. Method Details. getDefaultPyramidCompression; public static OMEPyramidWriter.CompressionType getDefaultPyramidCompression(); Query the default compression type when writing OME-TIFF images. Returns:. getDefaultTileSize; public static int getDefaultTileSize(); Query the default tile size when writing OME-TIFF images. Returns:. getMinSizeForTiling; public static int getMinSizeForTiling(); Query the default minimum image size when writing OME-TIFF images.; This is used as a hint to disable tiling for images with widths and heights smaller than this value. Returns:. run; public void run(). Specified by:; run in interface Runnable. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html:558,Modifiability,extend,extends,558,". OMEPyramidWriterCommand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriterCommand. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriterCommand. All Implemented Interfaces:; Runnable. public class OMEPyramidWriterCommand; extends Object; implements Runnable; OME TIFF writer command capable of exporting image pyramids based on QuPath ImageServers.; ; Note this requires Bio-Formats v6.0.0 or later. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; OMEPyramidWriterCommand(QuPathGUI qupath). Constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; getDefaultPyramidCompression(). Query the default compression type when writing OME-TIFF images. static int; getDefaultTileSize(). Query the default tile size when writing OME-TIFF images. static int; getMinSizeForTiling(). Query the default minimum image size when writing OME-TIFF images. void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OMEPyramidWriterCommand; public OMEPyramidWriterCommand(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. Method Details. getDefaultPyramidCompression; public static OMEPyramidWriter.CompressionType getDefaultPyramidCompression(); Query the default compression type when writing OME-TIFF images. Returns:. getDefaultTileSize; public static int getDefaultTileSize(); Query the default tile size when writing OME-TIFF images. Returns:. getMinSizeForTiling; public static int",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html:1348,Modifiability,inherit,inherited,1348,"; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriterCommand. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriterCommand. All Implemented Interfaces:; Runnable. public class OMEPyramidWriterCommand; extends Object; implements Runnable; OME TIFF writer command capable of exporting image pyramids based on QuPath ImageServers.; ; Note this requires Bio-Formats v6.0.0 or later. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; OMEPyramidWriterCommand(QuPathGUI qupath). Constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; getDefaultPyramidCompression(). Query the default compression type when writing OME-TIFF images. static int; getDefaultTileSize(). Query the default tile size when writing OME-TIFF images. static int; getMinSizeForTiling(). Query the default minimum image size when writing OME-TIFF images. void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OMEPyramidWriterCommand; public OMEPyramidWriterCommand(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. Method Details. getDefaultPyramidCompression; public static OMEPyramidWriter.CompressionType getDefaultPyramidCompression(); Query the default compression type when writing OME-TIFF images. Returns:. getDefaultTileSize; public static int getDefaultTileSize(); Query the default tile size when writing OME-TIFF images. Returns:. getMinSizeForTiling; public static int getMinSizeForTiling(); Query the default minimum image size when writing OME-TIFF images.; This is used as a hint to disable tiling for images with widths and heights smaller than this value. Returns:. run; public void run(). Specified by:; run in interface Runnable. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html:1422,Security,hash,hashCode,1422,"; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMEPyramidWriterCommand. java.lang.Object; qupath.lib.images.writers.ome.OMEPyramidWriterCommand. All Implemented Interfaces:; Runnable. public class OMEPyramidWriterCommand; extends Object; implements Runnable; OME TIFF writer command capable of exporting image pyramids based on QuPath ImageServers.; ; Note this requires Bio-Formats v6.0.0 or later. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; OMEPyramidWriterCommand(QuPathGUI qupath). Constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OMEPyramidWriter.CompressionType; getDefaultPyramidCompression(). Query the default compression type when writing OME-TIFF images. static int; getDefaultTileSize(). Query the default tile size when writing OME-TIFF images. static int; getMinSizeForTiling(). Query the default minimum image size when writing OME-TIFF images. void; run();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OMEPyramidWriterCommand; public OMEPyramidWriterCommand(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. Method Details. getDefaultPyramidCompression; public static OMEPyramidWriter.CompressionType getDefaultPyramidCompression(); Query the default compression type when writing OME-TIFF images. Returns:. getDefaultTileSize; public static int getDefaultTileSize(); Query the default tile size when writing OME-TIFF images. Returns:. getMinSizeForTiling; public static int getMinSizeForTiling(); Query the default minimum image size when writing OME-TIFF images.; This is used as a hint to disable tiling for images with widths and heights smaller than this value. Returns:. run; public void run(). Specified by:; run in interface Runnable. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriterCommand.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:2625,Integrability,interface,interface,2625,"upportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:2829,Integrability,interface,interface,2829,"o a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; p",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:2913,Integrability,interface,interface,2913,"ull image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer ca",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3043,Integrability,interface,interface,3043,"-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. su",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3346,Integrability,interface,interface,3346,"BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; suppo",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3457,Integrability,interface,interface,3457,"h. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; p",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3557,Integrability,interface,interface,3557,"ifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the wr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3668,Integrability,interface,interface,3668,"er; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<Bu",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3766,Integrability,interface,interface,3766,"ame; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from i",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3881,Integrability,interface,interface,3881,"er. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:3988,Integrability,interface,interface,3988,"ring> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); D",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:4148,Integrability,interface,interface,4148,"the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in inter",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:4369,Integrability,interface,interface,4369,"turns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:4520,Integrability,interface,interface,4520,"ts. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:4647,Integrability,interface,interface,4647,"ion copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a sp",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:4774,Integrability,interface,interface,4774,"riter<BufferedImage>; Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:4907,Integrability,interface,interface,4907,"f writer can handle RGB (it probably can...). Specified by:; supportsRGB in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:5019,Integrability,interface,interface,5019,"s:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageW",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:5141,Integrability,interface,interface,5141,"nterface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(Im",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:5273,Integrability,interface,interface,5273," Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: I",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:5364,Integrability,interface,interface,5364,"e ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:5599,Integrability,interface,interface,5599,"true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:5695,Integrability,interface,interface,5695,"rtsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:5924,Integrability,interface,interface,5924,"ixelSize in interface ImageWriter<BufferedImage>; Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:6017,Integrability,interface,interface,6017,"rther details of the writer, which may be displayed to a user. Specified by:; getDetails in interface ImageWriter<BufferedImage>; Returns:. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:6248,Integrability,interface,interface,6248,"Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void w",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:6341,Integrability,interface,interface,6341,"mageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to wr",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:6766,Integrability,interface,interface,6766,"n copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:6993,Integrability,interface,interface,6993,"n copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:7095,Integrability,interface,interface,7095,"n copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:7490,Integrability,interface,interface,7490,"n copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Write OME-TIFF image to an output stream. Note that this must be able to write the image in-memory first, ; and therefore is not suitable for very large images. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:536,Modifiability,extend,extends,536,". OMETiffWriter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.writers.ome; Class OMETiffWriter. java.lang.Object; qupath.lib.images.writers.ome.OMETiffWriter. All Implemented Interfaces:; ImageWriter<BufferedImage>. public class OMETiffWriter; extends Object; implements ImageWriter<BufferedImage>; ImageWriter for writing OME-TIFF images. For greater control, see OMEPyramidWriter. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; OMETiffWriter();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<BufferedImage>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<BufferedImage> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> ser",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:2471,Modifiability,inherit,inherited,2471," if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter;",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:2610,Modifiability,inherit,inherited,2610,"upportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html:2545,Security,hash,hashCode,2545,"RGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write OME-TIFF image to an output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. OMETiffWriter; public OMETiffWriter(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Specified by:; getName in interface ImageWriter<BufferedImage>; Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Specified by:; getExtensions in interface ImageWriter<BufferedImage>; Returns:. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supports",MatchSource.WIKI,javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMETiffWriter.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:8158,Availability,avail,available,8158,"fault PathClass that represents no classification.; Usually no classification is represented by null, so this is not normally ; needed; however, sometimes it is required in contexts where a null is not permitted ; (e.g. some collections). Method Details. getParentClass; public PathClass getParentClass(); Get the parent classification, or null if this classification has no parent. Returns:. isDerivedClass; public boolean isDerivedClass(); Returns true if #getParentClass() != null. Returns:. isDerivedFrom; public boolean isDerivedFrom(PathClass parentClass); Returns true if this class, or any ancestor class, is equal to the specified parent class. Parameters:; parentClass - ; Returns:. isAncestorOf; public boolean isAncestorOf(PathClass childClass); Returns true if this class is equal to the specified child class, ; or an ancestor of that class. Parameters:; childClass - ; Returns:. getBaseClass; public PathClass getBaseClass(); Get the 'base' class, i.e. trace back through getParentClass() until no parent is available.; ; For a PathClass with no parent, this just returns itself. Returns:. setColor; public void setColor(Integer colorRGB); Set the color that should be used to display objects with this classification. Parameters:; colorRGB - color, as a packed (A)RGB value. setColor; public void setColor(int red,; int green,; int blue); Set the color as 8-bit RGB values. Parameters:; red - ; green - ; blue - ; Since:; v0.4.0. getColor; public Integer getColor(); Get the color that should be used to display objects with this classification. Returns:; packed (A)RGB value representing the classification color. getName; public String getName(); Get the name of this classification. ; Note that this does not incorporate information from any parent classifications; to access this, ; use toString() instead. Returns:. toString; public String toString(). Overrides:; toString in class Object. toString; public String toString(String delimiter); Create a string representation, using",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:14317,Deployability,release,release,14317,"ring, Integer). getInstance; public static PathClass getInstance(String name). getInstance; public static PathClass getInstance(String name,; Integer color); Get a base PathClass instance, without any parent PathClass.; ; This is equivalent to calling getInstance(PathClass, String, Integer) with ; the first argument as null. Parameters:; name - ; color - ; Returns:; See Also:. getInstance(PathClass, String, Integer). getInstance; public static PathClass getInstance(PathClass parent,; String name,; Integer color); Get a derived PathClass instance with the specified parent.; ; This will be derived from the parent PathClass (if provided) and have the specified ; name, stripped to remove any leading or training whitespace.; ; Note that the name should generally be an alphanumeric string, optionally including ; punctuation symbols but not including DELIMITER.; ; The delimiter is currently a colon "":"" but it is advised not to rely upon ; this and to avoid punctuation where possible, because the delimiter may possibly change ; in a future release - primarily because the choice of colon can be problematic in some ; cases, e.g. when using ontologies. Parameters:; parent - parent class (optional, may be null); name - name of the PathClass; color - color to use if a new instance is created (may be null to use the default); Returns:; a PathClass instance; the same instance will be returned given the same parent and name; See Also:. fromString(String, Integer); fromCollection(Collection, Integer). getOnePlus; public static PathClass getOnePlus(PathClass parentClass); Get a standalone or derived 1+ classification, indicating weak positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getTwoPlus; public static PathClass getTwoPlus(PathClass parentClass); Get a standalone or derived 2+ classification, indicating moderate positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getThreePlus; public static PathClass getThree",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:5455,Energy Efficiency,green,green,5455,"alone or derived Positive classification. static PathClass; getSingleton(PathClass pathClass). Get the singleton PathClass that is equivalent to the PathClass provided. static PathClass; getThreePlus(PathClass parentClass). Get a standalone or derived 3+ classification, indicating strong positivity. static PathClass; getTwoPlus(PathClass parentClass). Get a standalone or derived 2+ classification, indicating moderate positivity. boolean; isAncestorOf(PathClass childClass). Returns true if this class is equal to the specified child class, ; or an ancestor of that class. boolean; isDerivedClass(). Returns true if #getParentClass() != null. boolean; isDerivedFrom(PathClass parentClass). Returns true if this class, or any ancestor class, is equal to the specified parent class. boolean; isValid(). A PathClass is valid if its name is not null. protected Object; readResolve(). Called during deserialization to ensure that only a single instance of each PathClass exists. void; setColor(int red,; int green,; int blue). Set the color as 8-bit RGB values. void; setColor(Integer colorRGB). Set the color that should be used to display objects with this classification. Set<String>; toSet(). Return a view of this path class as an unmodifiable set, with ; each element representing the name of a path class component names. String; toString();  ; String; toString(String delimiter). Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. NAME_POSITIVE; public static final String NAME_POSITIVE; Default name for a class representing ""Positive"" staining intensity. See Also:. Constant Field Values. NAME_NEGATIVE; public static final String NAME_NEGATIVE; Default name for a class representing ""Negative"" staining intensity. See Also:. Constant Field Values. NAME_ONE_PLUS; public static final String NAM",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:8471,Energy Efficiency,green,green,8471," null if this classification has no parent. Returns:. isDerivedClass; public boolean isDerivedClass(); Returns true if #getParentClass() != null. Returns:. isDerivedFrom; public boolean isDerivedFrom(PathClass parentClass); Returns true if this class, or any ancestor class, is equal to the specified parent class. Parameters:; parentClass - ; Returns:. isAncestorOf; public boolean isAncestorOf(PathClass childClass); Returns true if this class is equal to the specified child class, ; or an ancestor of that class. Parameters:; childClass - ; Returns:. getBaseClass; public PathClass getBaseClass(); Get the 'base' class, i.e. trace back through getParentClass() until no parent is available.; ; For a PathClass with no parent, this just returns itself. Returns:. setColor; public void setColor(Integer colorRGB); Set the color that should be used to display objects with this classification. Parameters:; colorRGB - color, as a packed (A)RGB value. setColor; public void setColor(int red,; int green,; int blue); Set the color as 8-bit RGB values. Parameters:; red - ; green - ; blue - ; Since:; v0.4.0. getColor; public Integer getColor(); Get the color that should be used to display objects with this classification. Returns:; packed (A)RGB value representing the classification color. getName; public String getName(); Get the name of this classification. ; Note that this does not incorporate information from any parent classifications; to access this, ; use toString() instead. Returns:. toString; public String toString(). Overrides:; toString in class Object. toString; public String toString(String delimiter); Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Parameters:; delimiter - ; Returns:. isValid; public boolean isValid(); A PathClass is valid if its name is not null.; ; This should generally the case, but a single (invalid) PathClass with a null name ; can be used to indicate the absence of a classification; however, i",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:8546,Energy Efficiency,green,green,8546," boolean isDerivedClass(); Returns true if #getParentClass() != null. Returns:. isDerivedFrom; public boolean isDerivedFrom(PathClass parentClass); Returns true if this class, or any ancestor class, is equal to the specified parent class. Parameters:; parentClass - ; Returns:. isAncestorOf; public boolean isAncestorOf(PathClass childClass); Returns true if this class is equal to the specified child class, ; or an ancestor of that class. Parameters:; childClass - ; Returns:. getBaseClass; public PathClass getBaseClass(); Get the 'base' class, i.e. trace back through getParentClass() until no parent is available.; ; For a PathClass with no parent, this just returns itself. Returns:. setColor; public void setColor(Integer colorRGB); Set the color that should be used to display objects with this classification. Parameters:; colorRGB - color, as a packed (A)RGB value. setColor; public void setColor(int red,; int green,; int blue); Set the color as 8-bit RGB values. Parameters:; red - ; green - ; blue - ; Since:; v0.4.0. getColor; public Integer getColor(); Get the color that should be used to display objects with this classification. Returns:; packed (A)RGB value representing the classification color. getName; public String getName(); Get the name of this classification. ; Note that this does not incorporate information from any parent classifications; to access this, ; use toString() instead. Returns:. toString; public String toString(). Overrides:; toString in class Object. toString; public String toString(String delimiter); Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Parameters:; delimiter - ; Returns:. isValid; public boolean isValid(); A PathClass is valid if its name is not null.; ; This should generally the case, but a single (invalid) PathClass with a null name ; can be used to indicate the absence of a classification; however, it should not be assigned ; to any object. Rather, objects should be assigne",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:11000,Integrability,interface,interface,11000," the output will return the same PathClass object.; ; var pathClass = ...;; var pathClass2 = PathClass.getInstance(pathClass.toSet());; assert pathClass == pathClass2; // This may or may not be true!; . However the PathClass objects should be the same if the name components are all valid and ; there are no duplicates (which should normally be the case). Returns:. compareTo; public int compareTo(PathClass o); This is now equivalent to this.toString().compareTo(o.toString()).; ; Note that in previous versions (< 0.1.2), the comparison was made based on the name only.; ; This could result in unexpected behavior whenever comparing with equality and using ; derived PathClass objects, because only the (final) name part was being compared ; and this could potentially result in classifications (wrongly) being considered equal ; (e.g. ""Tumor: Positive"" and ""Stroma: Positive"").; ; This was most significant when working with Groovy, where == is replaced by compareTo. Specified by:; compareTo in interface Comparable<PathClass>. getNullClass; public static PathClass getNullClass(); Get the value of NULL_CLASS, used to represent no classification.; In most cases, null should be used instead; this exists only as a ; representation in cases where null is not permitted (e.g. in some collection ; implementations). Returns:. fromString; public static PathClass fromString(String string); Get a PathClass instance from a string representation, without specifying a default color.; ; This calls fromString(String, Integer) with the second argument as null. Parameters:; string - ; Returns:. fromString; public static PathClass fromString(String string,; Integer color); Get a PathClass instance from a string representation, optionally providing a default color ; if a new instance needs to be created.; ; This ultimately calls getInstance(PathClass, String, Integer) but differs in that it ; accepts a string representation that may include the DELIMITER.; If so, this is used to split the string in",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:529,Modifiability,extend,extends,529,". PathClass (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.classes; Class PathClass. java.lang.Object; qupath.lib.objects.classes.PathClass. All Implemented Interfaces:; Serializable, Comparable<PathClass>. public final class PathClass; extends Object; implements Comparable<PathClass>, Serializable; Representation of an object's classification - which can be defined using any unique string; identifier (e.g. tumour, lymphocyte, gland, benign, malignant).; ; The constructors in this class should never be called directly, because there should only ever; be one instance of each classification - ; shared among all objects with that classification.; This is important for checking if classifications are identical, and also assigning colors to them for display.; ; To achieve this, be sure to use one of the getInstance() or fromXXX() methods each time; you want to access or create a new PathClass instance.; ; This class has been with QuPath since the beginning, but was thoroughly revised for v0.4.0 to simplify the code,; improve the validation, and make it easier to use. Author:; Pete Bankhead; See Also:. PathClassFactory; Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PathClass.StandardPathClasses. Enum representing standard classifications. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DELIMITER. Get the delimiter to use between names of the PathClass when converting to a string. static final String; NAME_NEGATIVE. Default name for a class representing ""Negative"" staining intensity. static final String; NAME_ONE_PLUS. Default name for a class representing ""1+"" staining intensity (i.e. stati",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:5948,Modifiability,inherit,inherited,5948," equal to the specified child class, ; or an ancestor of that class. boolean; isDerivedClass(). Returns true if #getParentClass() != null. boolean; isDerivedFrom(PathClass parentClass). Returns true if this class, or any ancestor class, is equal to the specified parent class. boolean; isValid(). A PathClass is valid if its name is not null. protected Object; readResolve(). Called during deserialization to ensure that only a single instance of each PathClass exists. void; setColor(int red,; int green,; int blue). Set the color as 8-bit RGB values. void; setColor(Integer colorRGB). Set the color that should be used to display objects with this classification. Set<String>; toSet(). Return a view of this path class as an unmodifiable set, with ; each element representing the name of a path class component names. String; toString();  ; String; toString(String delimiter). Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. NAME_POSITIVE; public static final String NAME_POSITIVE; Default name for a class representing ""Positive"" staining intensity. See Also:. Constant Field Values. NAME_NEGATIVE; public static final String NAME_NEGATIVE; Default name for a class representing ""Negative"" staining intensity. See Also:. Constant Field Values. NAME_ONE_PLUS; public static final String NAME_ONE_PLUS; Default name for a class representing ""1+"" staining intensity (i.e. weakly positive). See Also:. Constant Field Values. NAME_TWO_PLUS; public static final String NAME_TWO_PLUS; Default name for a class representing ""2+"" staining intensity (i.e. moderately positive). See Also:. Constant Field Values. NAME_THREE_PLUS; public static final String NAME_THREE_PLUS; Default name for a class representing ""3+"" staining intensity (i.e. strongly positive). See Also:. Constant Field Values. DELIMITER; p",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:14227,Safety,avoid,avoid,14227,"ring, Integer). getInstance; public static PathClass getInstance(String name). getInstance; public static PathClass getInstance(String name,; Integer color); Get a base PathClass instance, without any parent PathClass.; ; This is equivalent to calling getInstance(PathClass, String, Integer) with ; the first argument as null. Parameters:; name - ; color - ; Returns:; See Also:. getInstance(PathClass, String, Integer). getInstance; public static PathClass getInstance(PathClass parent,; String name,; Integer color); Get a derived PathClass instance with the specified parent.; ; This will be derived from the parent PathClass (if provided) and have the specified ; name, stripped to remove any leading or training whitespace.; ; Note that the name should generally be an alphanumeric string, optionally including ; punctuation symbols but not including DELIMITER.; ; The delimiter is currently a colon "":"" but it is advised not to rely upon ; this and to avoid punctuation where possible, because the delimiter may possibly change ; in a future release - primarily because the choice of colon can be problematic in some ; cases, e.g. when using ontologies. Parameters:; parent - parent class (optional, may be null); name - name of the PathClass; color - color to use if a new instance is created (may be null to use the default); Returns:; a PathClass instance; the same instance will be returned given the same parent and name; See Also:. fromString(String, Integer); fromCollection(Collection, Integer). getOnePlus; public static PathClass getOnePlus(PathClass parentClass); Get a standalone or derived 1+ classification, indicating weak positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getTwoPlus; public static PathClass getTwoPlus(PathClass parentClass); Get a standalone or derived 2+ classification, indicating moderate positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getThreePlus; public static PathClass getThree",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:1160,Security,access,access,1160,"Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.classes; Class PathClass. java.lang.Object; qupath.lib.objects.classes.PathClass. All Implemented Interfaces:; Serializable, Comparable<PathClass>. public final class PathClass; extends Object; implements Comparable<PathClass>, Serializable; Representation of an object's classification - which can be defined using any unique string; identifier (e.g. tumour, lymphocyte, gland, benign, malignant).; ; The constructors in this class should never be called directly, because there should only ever; be one instance of each classification - ; shared among all objects with that classification.; This is important for checking if classifications are identical, and also assigning colors to them for display.; ; To achieve this, be sure to use one of the getInstance() or fromXXX() methods each time; you want to access or create a new PathClass instance.; ; This class has been with QuPath since the beginning, but was thoroughly revised for v0.4.0 to simplify the code,; improve the validation, and make it easier to use. Author:; Pete Bankhead; See Also:. PathClassFactory; Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PathClass.StandardPathClasses. Enum representing standard classifications. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DELIMITER. Get the delimiter to use between names of the PathClass when converting to a string. static final String; NAME_NEGATIVE. Default name for a class representing ""Negative"" staining intensity. static final String; NAME_ONE_PLUS. Default name for a class representing ""1+"" staining intensity (i.e. static final String; NAME_POSITIVE. Default name for a class representing ""Positive"" staining intensity. static final String; NAME_TH",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:1332,Security,validat,validation,1332,"qupath.lib.objects.classes; Class PathClass. java.lang.Object; qupath.lib.objects.classes.PathClass. All Implemented Interfaces:; Serializable, Comparable<PathClass>. public final class PathClass; extends Object; implements Comparable<PathClass>, Serializable; Representation of an object's classification - which can be defined using any unique string; identifier (e.g. tumour, lymphocyte, gland, benign, malignant).; ; The constructors in this class should never be called directly, because there should only ever; be one instance of each classification - ; shared among all objects with that classification.; This is important for checking if classifications are identical, and also assigning colors to them for display.; ; To achieve this, be sure to use one of the getInstance() or fromXXX() methods each time; you want to access or create a new PathClass instance.; ; This class has been with QuPath since the beginning, but was thoroughly revised for v0.4.0 to simplify the code,; improve the validation, and make it easier to use. Author:; Pete Bankhead; See Also:. PathClassFactory; Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PathClass.StandardPathClasses. Enum representing standard classifications. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DELIMITER. Get the delimiter to use between names of the PathClass when converting to a string. static final String; NAME_NEGATIVE. Default name for a class representing ""Negative"" staining intensity. static final String; NAME_ONE_PLUS. Default name for a class representing ""1+"" staining intensity (i.e. static final String; NAME_POSITIVE. Default name for a class representing ""Positive"" staining intensity. static final String; NAME_THREE_PLUS. Default name for a class representing ""3+"" staining intensity (i.e. static final String; NAME_TWO_PLUS. Default name for a class representing ""2+"" staining intensity (i.e. static final PathClass",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:6022,Security,hash,hashCode,6022,". boolean; isDerivedClass(). Returns true if #getParentClass() != null. boolean; isDerivedFrom(PathClass parentClass). Returns true if this class, or any ancestor class, is equal to the specified parent class. boolean; isValid(). A PathClass is valid if its name is not null. protected Object; readResolve(). Called during deserialization to ensure that only a single instance of each PathClass exists. void; setColor(int red,; int green,; int blue). Set the color as 8-bit RGB values. void; setColor(Integer colorRGB). Set the color that should be used to display objects with this classification. Set<String>; toSet(). Return a view of this path class as an unmodifiable set, with ; each element representing the name of a path class component names. String; toString();  ; String; toString(String delimiter). Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. NAME_POSITIVE; public static final String NAME_POSITIVE; Default name for a class representing ""Positive"" staining intensity. See Also:. Constant Field Values. NAME_NEGATIVE; public static final String NAME_NEGATIVE; Default name for a class representing ""Negative"" staining intensity. See Also:. Constant Field Values. NAME_ONE_PLUS; public static final String NAME_ONE_PLUS; Default name for a class representing ""1+"" staining intensity (i.e. weakly positive). See Also:. Constant Field Values. NAME_TWO_PLUS; public static final String NAME_TWO_PLUS; Default name for a class representing ""2+"" staining intensity (i.e. moderately positive). See Also:. Constant Field Values. NAME_THREE_PLUS; public static final String NAME_THREE_PLUS; Default name for a class representing ""3+"" staining intensity (i.e. strongly positive). See Also:. Constant Field Values. DELIMITER; public static final String DELIMITER; Get the delimiter to use betwe",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:8923,Security,access,access,8923,"ns true if this class is equal to the specified child class, ; or an ancestor of that class. Parameters:; childClass - ; Returns:. getBaseClass; public PathClass getBaseClass(); Get the 'base' class, i.e. trace back through getParentClass() until no parent is available.; ; For a PathClass with no parent, this just returns itself. Returns:. setColor; public void setColor(Integer colorRGB); Set the color that should be used to display objects with this classification. Parameters:; colorRGB - color, as a packed (A)RGB value. setColor; public void setColor(int red,; int green,; int blue); Set the color as 8-bit RGB values. Parameters:; red - ; green - ; blue - ; Since:; v0.4.0. getColor; public Integer getColor(); Get the color that should be used to display objects with this classification. Returns:; packed (A)RGB value representing the classification color. getName; public String getName(); Get the name of this classification. ; Note that this does not incorporate information from any parent classifications; to access this, ; use toString() instead. Returns:. toString; public String toString(). Overrides:; toString in class Object. toString; public String toString(String delimiter); Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Parameters:; delimiter - ; Returns:. isValid; public boolean isValid(); A PathClass is valid if its name is not null.; ; This should generally the case, but a single (invalid) PathClass with a null name ; can be used to indicate the absence of a classification; however, it should not be assigned ; to any object. Rather, objects should be assigned either a valid PathClass or null to indicate ; that they have no classification. Returns:. toSet; public Set<String> toSet(); Return a view of this path class as an unmodifiable set, with ; each element representing the name of a path class component names.; ; Important! If any path class component names are duplicates, these will ; (necessarily",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:16105,Security,access,accessing,16105,"erived 2+ classification, indicating moderate positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getThreePlus; public static PathClass getThreePlus(PathClass parentClass); Get a standalone or derived 3+ classification, indicating strong positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getNegative; public static PathClass getNegative(PathClass parentClass); Get a standalone or derived Negative classification. Parameters:; parentClass - parent classification (may be null); Returns:. getPositive; public static PathClass getPositive(PathClass parentClass); Get a standalone or derived Positive classification. Parameters:; parentClass - parent classification (may be null); Returns:. getSingleton; public static PathClass getSingleton(PathClass pathClass); Get the singleton PathClass that is equivalent to the PathClass provided.; ; This is important because there should only ever be one PathClass instance for ; any classification - and accessing PathClasses only via the getInstance() ; methods here should ensure that.; ; However, if receiving a PathClass from some other source then it is possible ; that the PathClass was created some other way and duplicates could emerge. ; Calling this method returns resolves that problem by returning the single instance ; that should be used.; ; This is significant if the PathClass has been created via Java deserialization, ; which skips the required use of getInstance() by default. Parameters:; pathClass - ; Returns:; either the input PathClass, or an equivalent that should be used. fromArray; public static PathClass fromArray(String... names); Get a PathClass from an array of individual names. Parameters:; names - ; Returns:; See Also:. fromCollection(Collection); getInstance(PathClass, String, Integer). readResolve; protected Object readResolve(); throws ObjectStreamException; Called during deserialization to ensure that only a single instance of each PathClass exis",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:10137,Testability,assert,assert,10137,"een ; elements of derived PathClasses. Parameters:; delimiter - ; Returns:. isValid; public boolean isValid(); A PathClass is valid if its name is not null.; ; This should generally the case, but a single (invalid) PathClass with a null name ; can be used to indicate the absence of a classification; however, it should not be assigned ; to any object. Rather, objects should be assigned either a valid PathClass or null to indicate ; that they have no classification. Returns:. toSet; public Set<String> toSet(); Return a view of this path class as an unmodifiable set, with ; each element representing the name of a path class component names.; ; Important! If any path class component names are duplicates, these will ; (necessarily) be removed from the set. Therefore it is not guaranteed that ; calling fromCollection(Collection) on the output will return the same PathClass object.; ; var pathClass = ...;; var pathClass2 = PathClass.getInstance(pathClass.toSet());; assert pathClass == pathClass2; // This may or may not be true!; . However the PathClass objects should be the same if the name components are all valid and ; there are no duplicates (which should normally be the case). Returns:. compareTo; public int compareTo(PathClass o); This is now equivalent to this.toString().compareTo(o.toString()).; ; Note that in previous versions (< 0.1.2), the comparison was made based on the name only.; ; This could result in unexpected behavior whenever comparing with equality and using ; derived PathClass objects, because only the (final) name part was being compared ; and this could potentially result in classifications (wrongly) being considered equal ; (e.g. ""Tumor: Positive"" and ""Stroma: Positive"").; ; This was most significant when working with Groovy, where == is replaced by compareTo. Specified by:; compareTo in interface Comparable<PathClass>. getNullClass; public static PathClass getNullClass(); Get the value of NULL_CLASS, used to represent no classification.; In most cas",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:1300,Usability,simpl,simplify,1300,"qupath.lib.objects.classes; Class PathClass. java.lang.Object; qupath.lib.objects.classes.PathClass. All Implemented Interfaces:; Serializable, Comparable<PathClass>. public final class PathClass; extends Object; implements Comparable<PathClass>, Serializable; Representation of an object's classification - which can be defined using any unique string; identifier (e.g. tumour, lymphocyte, gland, benign, malignant).; ; The constructors in this class should never be called directly, because there should only ever; be one instance of each classification - ; shared among all objects with that classification.; This is important for checking if classifications are identical, and also assigning colors to them for display.; ; To achieve this, be sure to use one of the getInstance() or fromXXX() methods each time; you want to access or create a new PathClass instance.; ; This class has been with QuPath since the beginning, but was thoroughly revised for v0.4.0 to simplify the code,; improve the validation, and make it easier to use. Author:; Pete Bankhead; See Also:. PathClassFactory; Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PathClass.StandardPathClasses. Enum representing standard classifications. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DELIMITER. Get the delimiter to use between names of the PathClass when converting to a string. static final String; NAME_NEGATIVE. Default name for a class representing ""Negative"" staining intensity. static final String; NAME_ONE_PLUS. Default name for a class representing ""1+"" staining intensity (i.e. static final String; NAME_POSITIVE. Default name for a class representing ""Positive"" staining intensity. static final String; NAME_THREE_PLUS. Default name for a class representing ""3+"" staining intensity (i.e. static final String; NAME_TWO_PLUS. Default name for a class representing ""2+"" staining intensity (i.e. static final PathClass",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html:573,Modifiability,extend,extends,573,". PathClass.StandardPathClasses (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.classes; Class PathClass.StandardPathClasses. java.lang.Object; qupath.lib.objects.classes.PathClass.StandardPathClasses. Enclosing class:; PathClass. public static class PathClass.StandardPathClasses; extends Object; Enum representing standard classifications. Exists mostly to ensure consisting naming (including capitalization). Field Summary; Fields. Modifier and Type; Field; Description; static final PathClass; IGNORE. Ignore classification, indicating what should not be further measured (e.g. static final PathClass; IMAGE_ROOT. Root object classification. static final PathClass; IMMUNE_CELLS. Immune cell classification. static final PathClass; NECROSIS. Necrosis classification. static final PathClass; NEGATIVE. General class to represent something 'negative'. static final PathClass; OTHER. Other classification. static final PathClass; POSITIVE. General class to represent something 'positive'. static final PathClass; REGION. Region class. static final PathClass; STROMA. Stroma classification. static final PathClass; TUMOR. Tumor classification. Constructor Summary; Constructors. Constructor; Description; StandardPathClasses();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TUMOR; public static final PathClass TUMOR; Tumor classification. STROMA; public static final PathClass STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClass IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClass IGNORE; Ignore classification, indicating what sho",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html:1546,Modifiability,inherit,inherited,1546,"andardPathClasses; extends Object; Enum representing standard classifications. Exists mostly to ensure consisting naming (including capitalization). Field Summary; Fields. Modifier and Type; Field; Description; static final PathClass; IGNORE. Ignore classification, indicating what should not be further measured (e.g. static final PathClass; IMAGE_ROOT. Root object classification. static final PathClass; IMMUNE_CELLS. Immune cell classification. static final PathClass; NECROSIS. Necrosis classification. static final PathClass; NEGATIVE. General class to represent something 'negative'. static final PathClass; OTHER. Other classification. static final PathClass; POSITIVE. General class to represent something 'positive'. static final PathClass; REGION. Region class. static final PathClass; STROMA. Stroma classification. static final PathClass; TUMOR. Tumor classification. Constructor Summary; Constructors. Constructor; Description; StandardPathClasses();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TUMOR; public static final PathClass TUMOR; Tumor classification. STROMA; public static final PathClass STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClass IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClass IGNORE; Ignore classification, indicating what should not be further measured (e.g. background, whitespace). IMAGE_ROOT; public static final PathClass IMAGE_ROOT; Root object classification. NECROSIS; public static final PathClass NECROSIS; Necrosis classification. OTHER; public static final PathClass OTHER; Other classification. REGION; public static final PathClass REGION; Region class. This behaves slightly differently from other classes, e.g. it is not filled in when applied to; annotations. Consequently it is good to heavily annotated regions, or possibly detected tissue ; containing further ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html:2518,Safety,detect,detected,2518,"t be further measured (e.g. static final PathClass; IMAGE_ROOT. Root object classification. static final PathClass; IMMUNE_CELLS. Immune cell classification. static final PathClass; NECROSIS. Necrosis classification. static final PathClass; NEGATIVE. General class to represent something 'negative'. static final PathClass; OTHER. Other classification. static final PathClass; POSITIVE. General class to represent something 'positive'. static final PathClass; REGION. Region class. static final PathClass; STROMA. Stroma classification. static final PathClass; TUMOR. Tumor classification. Constructor Summary; Constructors. Constructor; Description; StandardPathClasses();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TUMOR; public static final PathClass TUMOR; Tumor classification. STROMA; public static final PathClass STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClass IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClass IGNORE; Ignore classification, indicating what should not be further measured (e.g. background, whitespace). IMAGE_ROOT; public static final PathClass IMAGE_ROOT; Root object classification. NECROSIS; public static final PathClass NECROSIS; Necrosis classification. OTHER; public static final PathClass OTHER; Other classification. REGION; public static final PathClass REGION; Region class. This behaves slightly differently from other classes, e.g. it is not filled in when applied to; annotations. Consequently it is good to heavily annotated regions, or possibly detected tissue ; containing further annotations inside. POSITIVE; public static final PathClass POSITIVE; General class to represent something 'positive'. NEGATIVE; public static final PathClass NEGATIVE; General class to represent something 'negative'. Constructor Details. StandardPathClasses; public StandardPathClasses(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html:1620,Security,hash,hashCode,1620,"tions. Exists mostly to ensure consisting naming (including capitalization). Field Summary; Fields. Modifier and Type; Field; Description; static final PathClass; IGNORE. Ignore classification, indicating what should not be further measured (e.g. static final PathClass; IMAGE_ROOT. Root object classification. static final PathClass; IMMUNE_CELLS. Immune cell classification. static final PathClass; NECROSIS. Necrosis classification. static final PathClass; NEGATIVE. General class to represent something 'negative'. static final PathClass; OTHER. Other classification. static final PathClass; POSITIVE. General class to represent something 'positive'. static final PathClass; REGION. Region class. static final PathClass; STROMA. Stroma classification. static final PathClass; TUMOR. Tumor classification. Constructor Summary; Constructors. Constructor; Description; StandardPathClasses();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TUMOR; public static final PathClass TUMOR; Tumor classification. STROMA; public static final PathClass STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClass IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClass IGNORE; Ignore classification, indicating what should not be further measured (e.g. background, whitespace). IMAGE_ROOT; public static final PathClass IMAGE_ROOT; Root object classification. NECROSIS; public static final PathClass NECROSIS; Necrosis classification. OTHER; public static final PathClass OTHER; Other classification. REGION; public static final PathClass REGION; Region class. This behaves slightly differently from other classes, e.g. it is not filled in when applied to; annotations. Consequently it is good to heavily annotated regions, or possibly detected tissue ; containing further annotations inside. POSITIVE; public static final PathClass POSITIVE; Ge",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html:7367,Availability,avail,available,7367,"e v0.4.0, use PathClass.getOnePlus(PathClass). Get a standalone or derived 1+ classification, indicating weak positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getTwoPlus; @Deprecated; public static PathClass getTwoPlus(PathClass parentClass); Deprecated.; since v0.4.0, use PathClass.getTwoPlus(PathClass). Get a standalone or derived 2+ classification, indicating moderate positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getThreePlus; @Deprecated; public static PathClass getThreePlus(PathClass parentClass); Deprecated.; since v0.4.0, use PathClass.getThreePlus(PathClass). Get a standalone or derived 3+ classification, indicating strong positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getNegative; @Deprecated; public static PathClass getNegative(PathClass parentClass); Deprecated.; since v0.4.0, use PathClass.getNegative(PathClass). Get a standalone or derived Negative classification. Parameters:; parentClass - parent classification (may be null); Returns:. getPositive; @Deprecated; public static PathClass getPositive(PathClass parentClass); Deprecated.; since v0.4.0, use PathClass.getPositive(PathClass). Get a standalone or derived Positive classification. Parameters:; parentClass - parent classification (may be null); Returns:. getPathClass; @Deprecated; public static PathClass getPathClass(PathClassFactory.StandardPathClasses pathClass); Deprecated.; since v0.4.0, use PathClass.StandardPathClasses. Get a standard PathClass. Parameters:; pathClass - ; Returns:. getPathClassUnclassified; @Deprecated; public static PathClass getPathClassUnclassified(); Deprecated.; since v0.4.0, use instead PathClass.NULL_CLASS. Return a special 'null' class to represent no classification.; ; This is useful for displaying available classes; it should not be set as the class for any object, ; rather an object that is unclassified should have a classification of null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html:504,Modifiability,extend,extends,504,". PathClassFactory (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.classes; Class PathClassFactory. java.lang.Object; qupath.lib.objects.classes.PathClassFactory. @Deprecated; public final class PathClassFactory; extends Object; Deprecated.; since v0.4.0 in favor of methods added to PathClass directly. Factory for creating PathClasses.; ; This must be used in favor of creating PathClass objects directly to ensure that ; only one PathClass with a specified name (and, optionally, ancestry) can exist at any time. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; PathClassFactory.StandardPathClasses. Deprecated.; Enum representing standard classifications. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static PathClass; getDerivedPathClass(PathClass parentClass,; String name,; Integer rgb). Deprecated.; since v0.4.0, use PathClass.getInstance(PathClass, String, Integer). static PathClass; getNegative(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getNegative(PathClass). static PathClass; getOnePlus(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getOnePlus(PathClass). static PathClass; getPathClass(String name). Deprecated.; Get a PathClass, without specifying any color. static PathClass; getPathClass(String name,; Integer rgb). Deprecated.; since v0.4.0 in favor of PathClass.getInstance(String, Integer) or ; PathClass.fromString(String, Integer). static PathClass; getPathClass(String baseName,; String... names). Deprecated.; since v0.4.0 in favor of PathClass.fromArray(String...). static PathClass; getPathClass(List<S",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html:2851,Modifiability,inherit,inherited,2851,"tring baseName,; String... names). Deprecated.; since v0.4.0 in favor of PathClass.fromArray(String...). static PathClass; getPathClass(List<String> names). Deprecated.; since v0.4.0 in favor of PathClass.fromCollection(java.util.Collection). static PathClass; getPathClass(PathClassFactory.StandardPathClasses pathClass). Deprecated.; since v0.4.0, use PathClass.StandardPathClasses. static PathClass; getPathClassUnclassified(). Deprecated.; since v0.4.0, use instead PathClass.NULL_CLASS. static PathClass; getPositive(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getPositive(PathClass). static PathClass; getSingletonPathClass(PathClass pathClass). Deprecated.; since v0.4.0 in favor of PathClass.getSingleton(PathClass). static PathClass; getThreePlus(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getThreePlus(PathClass). static PathClass; getTwoPlus(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getTwoPlus(PathClass). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getPathClass; public static PathClass getPathClass(String name); Deprecated.; Get a PathClass, without specifying any color. Parameters:; name - ; Returns:. getPathClass; @Deprecated; public static PathClass getPathClass(String name,; Integer rgb); Deprecated.; since v0.4.0 in favor of PathClass.getInstance(String, Integer) or ; PathClass.fromString(String, Integer). Get the PathClass object associated with a specific name. Note that this name must not contain newline; ; doing so will result in an IllegalArgumentException being thrown. If the name contains colon characters, ; it will be treated as a derived class. Parameters:; name - ; rgb - ; Returns:. getPathClass; @Deprecated; public static PathClass getPathClass(String baseName,; String... names); Deprecated.; since v0.4.0 in favor of PathClass.fromArray(String...). Get a derived PathClass object",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html:2925,Security,hash,hashCode,2925," PathClass.fromArray(String...). static PathClass; getPathClass(List<String> names). Deprecated.; since v0.4.0 in favor of PathClass.fromCollection(java.util.Collection). static PathClass; getPathClass(PathClassFactory.StandardPathClasses pathClass). Deprecated.; since v0.4.0, use PathClass.StandardPathClasses. static PathClass; getPathClassUnclassified(). Deprecated.; since v0.4.0, use instead PathClass.NULL_CLASS. static PathClass; getPositive(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getPositive(PathClass). static PathClass; getSingletonPathClass(PathClass pathClass). Deprecated.; since v0.4.0 in favor of PathClass.getSingleton(PathClass). static PathClass; getThreePlus(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getThreePlus(PathClass). static PathClass; getTwoPlus(PathClass parentClass). Deprecated.; since v0.4.0, use PathClass.getTwoPlus(PathClass). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getPathClass; public static PathClass getPathClass(String name); Deprecated.; Get a PathClass, without specifying any color. Parameters:; name - ; Returns:. getPathClass; @Deprecated; public static PathClass getPathClass(String name,; Integer rgb); Deprecated.; since v0.4.0 in favor of PathClass.getInstance(String, Integer) or ; PathClass.fromString(String, Integer). Get the PathClass object associated with a specific name. Note that this name must not contain newline; ; doing so will result in an IllegalArgumentException being thrown. If the name contains colon characters, ; it will be treated as a derived class. Parameters:; name - ; rgb - ; Returns:. getPathClass; @Deprecated; public static PathClass getPathClass(String baseName,; String... names); Deprecated.; since v0.4.0 in favor of PathClass.fromArray(String...). Get a derived PathClass object representing all the provided names, ; using default colors.; ; Note th",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:1005,Integrability,interface,interfaces,1005,"ory.StandardPathClasses (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.classes; Enum Class PathClassFactory.StandardPathClasses. java.lang.Object; java.lang.Enum<PathClassFactory.StandardPathClasses>; qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. All Implemented Interfaces:; Serializable, Comparable<PathClassFactory.StandardPathClasses>, Constable. Enclosing class:; PathClassFactory. public static enum PathClassFactory.StandardPathClasses; extends Enum<PathClassFactory.StandardPathClasses>; Enum representing standard classifications. Exists mostly to ensure consisting naming (including capitalization). Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; IGNORE. Ignore classification, indicating what should not be further measured (e.g. IMAGE_ROOT. Root object classification. IMMUNE_CELLS. Immune cell classification. NECROSIS. Necrosis classification. NEGATIVE. General class to represent something 'negative'. OTHER. Other classification. POSITIVE. General class to represent something 'positive'. REGION. Region class. STROMA. Stroma classification. TUMOR. Tumor classification. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathClassFactory.StandardPathClasses; valueOf(String name). Returns the enum constant of this class with the specified name. static PathClassFactory.StandardPathClasses[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clon",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:802,Modifiability,extend,extends,802,". PathClassFactory.StandardPathClasses (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.classes; Enum Class PathClassFactory.StandardPathClasses. java.lang.Object; java.lang.Enum<PathClassFactory.StandardPathClasses>; qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. All Implemented Interfaces:; Serializable, Comparable<PathClassFactory.StandardPathClasses>, Constable. Enclosing class:; PathClassFactory. public static enum PathClassFactory.StandardPathClasses; extends Enum<PathClassFactory.StandardPathClasses>; Enum representing standard classifications. Exists mostly to ensure consisting naming (including capitalization). Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; IGNORE. Ignore classification, indicating what should not be further measured (e.g. IMAGE_ROOT. Root object classification. IMMUNE_CELLS. Immune cell classification. NECROSIS. Necrosis classification. NEGATIVE. General class to represent something 'negative'. OTHER. Other classification. POSITIVE. General class to represent something 'positive'. REGION. Region class. STROMA. Stroma classification. TUMOR. Tumor classification. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathClassFactory.StandardPathClasses; valueOf(String name). Returns the enum constant of this class with the specified name. static PathClassFactory.StandardPathClasses[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:1016,Modifiability,inherit,inherited,1016,"ory.StandardPathClasses (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.classes; Enum Class PathClassFactory.StandardPathClasses. java.lang.Object; java.lang.Enum<PathClassFactory.StandardPathClasses>; qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. All Implemented Interfaces:; Serializable, Comparable<PathClassFactory.StandardPathClasses>, Constable. Enclosing class:; PathClassFactory. public static enum PathClassFactory.StandardPathClasses; extends Enum<PathClassFactory.StandardPathClasses>; Enum representing standard classifications. Exists mostly to ensure consisting naming (including capitalization). Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; IGNORE. Ignore classification, indicating what should not be further measured (e.g. IMAGE_ROOT. Root object classification. IMMUNE_CELLS. Immune cell classification. NECROSIS. Necrosis classification. NEGATIVE. General class to represent something 'negative'. OTHER. Other classification. POSITIVE. General class to represent something 'positive'. REGION. Region class. STROMA. Stroma classification. TUMOR. Tumor classification. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathClassFactory.StandardPathClasses; valueOf(String name). Returns the enum constant of this class with the specified name. static PathClassFactory.StandardPathClasses[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clon",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:1069,Modifiability,extend,extends,1069,"abled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.classes; Enum Class PathClassFactory.StandardPathClasses. java.lang.Object; java.lang.Enum<PathClassFactory.StandardPathClasses>; qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. All Implemented Interfaces:; Serializable, Comparable<PathClassFactory.StandardPathClasses>, Constable. Enclosing class:; PathClassFactory. public static enum PathClassFactory.StandardPathClasses; extends Enum<PathClassFactory.StandardPathClasses>; Enum representing standard classifications. Exists mostly to ensure consisting naming (including capitalization). Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; IGNORE. Ignore classification, indicating what should not be further measured (e.g. IMAGE_ROOT. Root object classification. IMMUNE_CELLS. Immune cell classification. NECROSIS. Necrosis classification. NEGATIVE. General class to represent something 'negative'. OTHER. Other classification. POSITIVE. General class to represent something 'positive'. REGION. Region class. STROMA. Stroma classification. TUMOR. Tumor classification. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathClassFactory.StandardPathClasses; valueOf(String name). Returns the enum constant of this class with the specified name. static PathClassFactory.StandardPathClasses[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDe",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:1975,Modifiability,inherit,inherited,1975,"mmary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; IGNORE. Ignore classification, indicating what should not be further measured (e.g. IMAGE_ROOT. Root object classification. IMMUNE_CELLS. Immune cell classification. NECROSIS. Necrosis classification. NEGATIVE. General class to represent something 'negative'. OTHER. Other classification. POSITIVE. General class to represent something 'positive'. REGION. Region class. STROMA. Stroma classification. TUMOR. Tumor classification. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathClassFactory.StandardPathClasses; valueOf(String name). Returns the enum constant of this class with the specified name. static PathClassFactory.StandardPathClasses[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TUMOR; public static final PathClassFactory.StandardPathClasses TUMOR; Tumor classification. STROMA; public static final PathClassFactory.StandardPathClasses STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClassFactory.StandardPathClasses IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClassFactory.StandardPathClasses IGNORE; Ignore classification, indicating what should not be further measured (e.g. background, whitespace). IMAGE_ROOT; public static final PathClassFactory.StandardPathClasses IMAGE_ROOT; Root object classification. NECROSIS; public static final PathClassFactory.StandardPathClasses NECROSIS; Necrosis classification. OTHER; public static final PathClassFactory.Standa",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:2138,Modifiability,inherit,inherited,2138,"iption; IGNORE. Ignore classification, indicating what should not be further measured (e.g. IMAGE_ROOT. Root object classification. IMMUNE_CELLS. Immune cell classification. NECROSIS. Necrosis classification. NEGATIVE. General class to represent something 'negative'. OTHER. Other classification. POSITIVE. General class to represent something 'positive'. REGION. Region class. STROMA. Stroma classification. TUMOR. Tumor classification. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathClassFactory.StandardPathClasses; valueOf(String name). Returns the enum constant of this class with the specified name. static PathClassFactory.StandardPathClasses[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TUMOR; public static final PathClassFactory.StandardPathClasses TUMOR; Tumor classification. STROMA; public static final PathClassFactory.StandardPathClasses STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClassFactory.StandardPathClasses IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClassFactory.StandardPathClasses IGNORE; Ignore classification, indicating what should not be further measured (e.g. background, whitespace). IMAGE_ROOT; public static final PathClassFactory.StandardPathClasses IMAGE_ROOT; Root object classification. NECROSIS; public static final PathClassFactory.StandardPathClasses NECROSIS; Necrosis classification. OTHER; public static final PathClassFactory.StandardPathClasses OTHER; Other classification. REGION; public static final PathClassFactory.StandardPathClasses REGION; Region class. This behaves slightly differently",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:3289,Safety,detect,detected,3289,"Factory.StandardPathClasses TUMOR; Tumor classification. STROMA; public static final PathClassFactory.StandardPathClasses STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClassFactory.StandardPathClasses IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClassFactory.StandardPathClasses IGNORE; Ignore classification, indicating what should not be further measured (e.g. background, whitespace). IMAGE_ROOT; public static final PathClassFactory.StandardPathClasses IMAGE_ROOT; Root object classification. NECROSIS; public static final PathClassFactory.StandardPathClasses NECROSIS; Necrosis classification. OTHER; public static final PathClassFactory.StandardPathClasses OTHER; Other classification. REGION; public static final PathClassFactory.StandardPathClasses REGION; Region class. This behaves slightly differently from other classes, e.g. it is not filled in when applied to; annotations. Consequently it is good to heavily annotated regions, or possibly detected tissue ; containing further annotations inside. POSITIVE; public static final PathClassFactory.StandardPathClasses POSITIVE; General class to represent something 'positive'. NEGATIVE; public static final PathClassFactory.StandardPathClasses NEGATIVE; General class to represent something 'negative'. Method Details. values; public static PathClassFactory.StandardPathClasses[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static PathClassFactory.StandardPathClasses valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:; the enum constant with the specif",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html:2086,Security,hash,hashCode,2086,"E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; IGNORE. Ignore classification, indicating what should not be further measured (e.g. IMAGE_ROOT. Root object classification. IMMUNE_CELLS. Immune cell classification. NECROSIS. Necrosis classification. NEGATIVE. General class to represent something 'negative'. OTHER. Other classification. POSITIVE. General class to represent something 'positive'. REGION. Region class. STROMA. Stroma classification. TUMOR. Tumor classification. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathClassFactory.StandardPathClasses; valueOf(String name). Returns the enum constant of this class with the specified name. static PathClassFactory.StandardPathClasses[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. TUMOR; public static final PathClassFactory.StandardPathClasses TUMOR; Tumor classification. STROMA; public static final PathClassFactory.StandardPathClasses STROMA; Stroma classification. IMMUNE_CELLS; public static final PathClassFactory.StandardPathClasses IMMUNE_CELLS; Immune cell classification. IGNORE; public static final PathClassFactory.StandardPathClasses IGNORE; Ignore classification, indicating what should not be further measured (e.g. background, whitespace). IMAGE_ROOT; public static final PathClassFactory.StandardPathClasses IMAGE_ROOT; Root object classification. NECROSIS; public static final PathClassFactory.StandardPathClasses NECROSIS; Necrosis classification. OTHER; public static final PathClassFactory.StandardPathClasses OTHER; Other classification. REGION; public static final PathClassFact",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassFactory.StandardPathClasses.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html:483,Modifiability,extend,extends,483,". PathClassTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.classes; Class PathClassTools. java.lang.Object; qupath.lib.objects.classes.PathClassTools. public final class PathClassTools; extends Object; Static methods for use with PathClass objects. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static boolean; containsName(PathClass pathClass,; String name). Query whether a PathClass or any of its ancestor classes contains a specified name. static PathClass; getNonIntensityAncestorClass(PathClass pathClass). Get the first ancestor class that is not an intensity class (i.e. static boolean; isGradedIntensityClass(PathClass pathClass). Return true if the PathClass represents a built-in intensity class. static boolean; isIgnoredClass(PathClass pathClass). Return true if the PathClass should be ignored from some operations, or is null. static boolean; isNegativeClass(PathClass pathClass). Return true if the PathClass has the name ""Negative"". static boolean; isNullClass(PathClass pathClass). Return true if the PathClass is null, its name is null or if it is equal ; to the special case of 'Unclassified' path object. static boolean; isOnePlus(PathClass pathClass). Returns true if the name of the class is ""1+"", indicating a weakly-positive staining. static boolean; isPositiveClass(PathClass pathClass). Return true if the PathClass has the name ""Positive"". static boolean; isPositiveOrGradedIntensityClass(PathClass pathClass). Return true if the name of the class is ""Positive"", ""1+"", ""2+"" or ""3+"", indicating positive staining. static boolean; isThreePlus(PathClass pathClass). Return true if the name of the class",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html:3303,Modifiability,inherit,inherited,3303,"n. static PathClass; mergeClasses(PathClass baseClass,; PathClass additionalClass). Merge two classifications together. static PathClass; removeNames(PathClass pathClass,; String... namesToRemove). Create a PathClass with specific name elements removed (if present) from an existing classification. static PathClass; removeNames(PathClass pathClass,; Collection<String> namesToRemove). Create a PathClass with specific name elements removed (if present) from an existing classification. static PathClass; sortNames(PathClass pathClass). Create a PathClass with name elements sorted alphabetically. static PathClass; sortNames(PathClass pathClass,; Comparator<String> comparator). Create a PathClass with name elements sorted using an arbitrary Comparator. static List<String>; splitNames(PathClass pathClass). Get a list containing the names of all constituent parts of a PathClass. static PathClass; uniqueNames(PathClass pathClass). Remove duplicate names from a derived PathClass. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. isGradedIntensityClass; public static boolean isGradedIntensityClass(PathClass pathClass); Return true if the PathClass represents a built-in intensity class.; Here, this means its name is equal to ""1+"", ""2+"" or ""3+"". Parameters:; pathClass - ; Returns:. isIgnoredClass; public static boolean isIgnoredClass(PathClass pathClass); Return true if the PathClass should be ignored from some operations, or is null. ; In practice, this checks if the PathClass is null or if the name is either null or ends with an asterisk.; It is useful to avoid generating objects for certain classes (e.g. Ignore*, Artefact*, Background*) ; where these would not be meaningful.; ; Warning: the 'ignored' status is ambiguous if the PathClass is null. ; In a future version this method may throw an exception rather than accepting null classifications. ; Code that calls this method ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html:3986,Safety,avoid,avoid,3986,"athClass with name elements sorted using an arbitrary Comparator. static List<String>; splitNames(PathClass pathClass). Get a list containing the names of all constituent parts of a PathClass. static PathClass; uniqueNames(PathClass pathClass). Remove duplicate names from a derived PathClass. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. isGradedIntensityClass; public static boolean isGradedIntensityClass(PathClass pathClass); Return true if the PathClass represents a built-in intensity class.; Here, this means its name is equal to ""1+"", ""2+"" or ""3+"". Parameters:; pathClass - ; Returns:. isIgnoredClass; public static boolean isIgnoredClass(PathClass pathClass); Return true if the PathClass should be ignored from some operations, or is null. ; In practice, this checks if the PathClass is null or if the name is either null or ends with an asterisk.; It is useful to avoid generating objects for certain classes (e.g. Ignore*, Artefact*, Background*) ; where these would not be meaningful.; ; Warning: the 'ignored' status is ambiguous if the PathClass is null. ; In a future version this method may throw an exception rather than accepting null classifications. ; Code that calls this method therefore should explicitly handle cases where the PathClass is ; null (or its name is null) to avoid ambiguity and potential exceptions in the future. Parameters:; pathClass - ; Returns:; See Also:. isNullClass(PathClass). isNullClass; public static boolean isNullClass(PathClass pathClass); Return true if the PathClass is null, its name is null or if it is equal ; to the special case of 'Unclassified' path object. Parameters:; pathClass - ; Returns:. isValidClass; public static boolean isValidClass(PathClass pathClass); Returns true if the PathClass represents a valid (non-null) classification. Parameters:; pathClass - input classification to check; Returns:; true if the input re",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html:4408,Safety,avoid,avoid,4408,"ass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. isGradedIntensityClass; public static boolean isGradedIntensityClass(PathClass pathClass); Return true if the PathClass represents a built-in intensity class.; Here, this means its name is equal to ""1+"", ""2+"" or ""3+"". Parameters:; pathClass - ; Returns:. isIgnoredClass; public static boolean isIgnoredClass(PathClass pathClass); Return true if the PathClass should be ignored from some operations, or is null. ; In practice, this checks if the PathClass is null or if the name is either null or ends with an asterisk.; It is useful to avoid generating objects for certain classes (e.g. Ignore*, Artefact*, Background*) ; where these would not be meaningful.; ; Warning: the 'ignored' status is ambiguous if the PathClass is null. ; In a future version this method may throw an exception rather than accepting null classifications. ; Code that calls this method therefore should explicitly handle cases where the PathClass is ; null (or its name is null) to avoid ambiguity and potential exceptions in the future. Parameters:; pathClass - ; Returns:; See Also:. isNullClass(PathClass). isNullClass; public static boolean isNullClass(PathClass pathClass); Return true if the PathClass is null, its name is null or if it is equal ; to the special case of 'Unclassified' path object. Parameters:; pathClass - ; Returns:. isValidClass; public static boolean isValidClass(PathClass pathClass); Returns true if the PathClass represents a valid (non-null) classification. Parameters:; pathClass - input classification to check; Returns:; true if the input represents a valid classification, or false if the input is null or is equivalent to PathClass.NULL_CLASS. isOnePlus; public static boolean isOnePlus(PathClass pathClass); Returns true if the name of the class is ""1+"", indicating a weakly-positive staining. Parameters:; pathClass - ; Returns:. isTwoPlus; public static boolean isTwoPlus(PathClass pathClass); Return true i",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html:3377,Security,hash,hashCode,3377,"onalClass). Merge two classifications together. static PathClass; removeNames(PathClass pathClass,; String... namesToRemove). Create a PathClass with specific name elements removed (if present) from an existing classification. static PathClass; removeNames(PathClass pathClass,; Collection<String> namesToRemove). Create a PathClass with specific name elements removed (if present) from an existing classification. static PathClass; sortNames(PathClass pathClass). Create a PathClass with name elements sorted alphabetically. static PathClass; sortNames(PathClass pathClass,; Comparator<String> comparator). Create a PathClass with name elements sorted using an arbitrary Comparator. static List<String>; splitNames(PathClass pathClass). Get a list containing the names of all constituent parts of a PathClass. static PathClass; uniqueNames(PathClass pathClass). Remove duplicate names from a derived PathClass. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. isGradedIntensityClass; public static boolean isGradedIntensityClass(PathClass pathClass); Return true if the PathClass represents a built-in intensity class.; Here, this means its name is equal to ""1+"", ""2+"" or ""3+"". Parameters:; pathClass - ; Returns:. isIgnoredClass; public static boolean isIgnoredClass(PathClass pathClass); Return true if the PathClass should be ignored from some operations, or is null. ; In practice, this checks if the PathClass is null or if the name is either null or ends with an asterisk.; It is useful to avoid generating objects for certain classes (e.g. Ignore*, Artefact*, Background*) ; where these would not be meaningful.; ; Warning: the 'ignored' status is ambiguous if the PathClass is null. ; In a future version this method may throw an exception rather than accepting null classifications. ; Code that calls this method therefore should explicitly handle cases where the PathClass is ; null (",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html:10009,Testability,test,test,10009,"s; comparator - ; Returns:; a PathClass representing the same names sorted; See Also:. sortNames(PathClass). removeNames; public static PathClass removeNames(PathClass pathClass,; Collection<String> namesToRemove); Create a PathClass with specific name elements removed (if present) from an existing classification. Parameters:; pathClass - the input PathClass; namesToRemove - ; Returns:; a PathClass representing the classification with the required names removed; See Also:. removeNames(PathClass, String...). removeNames; public static PathClass removeNames(PathClass pathClass,; String... namesToRemove); Create a PathClass with specific name elements removed (if present) from an existing classification. Parameters:; pathClass - the input PathClass; namesToRemove - ; Returns:; a PathClass representing the classification with the required names removed; See Also:. removeNames(PathClass, Collection). mergeClasses; public static PathClass mergeClasses(PathClass baseClass,; PathClass additionalClass); Merge two classifications together.; Specifically, the name components of the additional class that are not already contained ; within the base class will be appended, deriving a new class as required.; ; Note that if the additional class contains duplicate names these will not automatically be stripped ; unless they are also present within the base class; use uniqueNames(PathClass) if this is required. Parameters:; baseClass - base class, all name components will be retained; additionalClass - ; Returns:; the merged classification, or null if both input classes are null. containsName; public static boolean containsName(PathClass pathClass,; String name); Query whether a PathClass or any of its ancestor classes contains a specified name.; ; For example a class ""CD3: CD8"" would return true for the name ""CD3"" or ""CD8"", but not anything else. Parameters:; pathClass - the classification to test; name - the name to search for; Returns:; true if the name is found, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/PathClassTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClassTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:2009,Deployability,update,update,2009,"ass pathClass,; boolean retainIntensityClass). Helper class to store an object prior to reclassifying it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability); Helper class to store an object prior to reclassifying it, including a classification probability. Parameters:; pathObject - an object whose classification may be set by a subsequent call to apply(); pathClass - the classification that may be applied to pathObject; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class.; probability - optional classification probability value to store in the object (may be Double.NaN if this should be ignored). Method Details. apply; public boolean apply(); Apply the stored classification. Returns:; true if the classification for the object changed, false otherwise. getPathObject; public",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:2590,Deployability,update,update,2590,"it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability); Helper class to store an object prior to reclassifying it, including a classification probability. Parameters:; pathObject - an object whose classification may be set by a subsequent call to apply(); pathClass - the classification that may be applied to pathObject; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class.; probability - optional classification probability value to store in the object (may be Double.NaN if this should be ignored). Method Details. apply; public boolean apply(); Apply the stored classification. Returns:; true if the classification for the object changed, false otherwise. getPathObject; public PathObject getPathObject(); Get the stored PathObject for which the PathClass may be set. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:469,Modifiability,extend,extends,469,". Reclassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.classes; Class Reclassifier. java.lang.Object; qupath.lib.objects.classes.Reclassifier. public class Reclassifier; extends Object; Helper class when classifying PathObjects.; ; When applying a classifier to make objects, it's desirable to make updating the classification an atomic ; operation, applied to all objects in one go. Consequently, it the classifier is aborted early ; (e.g. the thread interrupted), then the objects are not partially reclassified. Constructor Summary; Constructors. Constructor; Description; Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass). Helper class to store an object prior to reclassifying it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this a",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:1485,Modifiability,inherit,inherited,1485,"lass when classifying PathObjects.; ; When applying a classifier to make objects, it's desirable to make updating the classification an atomic ; operation, applied to all objects in one go. Consequently, it the classifier is aborted early ; (e.g. the thread interrupted), then the objects are not partially reclassified. Constructor Summary; Constructors. Constructor; Description; Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass). Helper class to store an object prior to reclassifying it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability); Helper class to store an object prior to reclassifying it, including a classification probability. Parameters:; pathObject - an object whose classification may be set by a subsequent call to apply(); pathClass - the classification that may be applied to pathObject; retainIntensityClass - of we have a single-level or two-level Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:718,Safety,abort,aborted,718,". Reclassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.classes; Class Reclassifier. java.lang.Object; qupath.lib.objects.classes.Reclassifier. public class Reclassifier; extends Object; Helper class when classifying PathObjects.; ; When applying a classifier to make objects, it's desirable to make updating the classification an atomic ; operation, applied to all objects in one go. Consequently, it the classifier is aborted early ; (e.g. the thread interrupted), then the objects are not partially reclassified. Constructor Summary; Constructors. Constructor; Description; Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass). Helper class to store an object prior to reclassifying it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this a",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:1559,Security,hash,hashCode,1559," objects, it's desirable to make updating the classification an atomic ; operation, applied to all objects in one go. Consequently, it the classifier is aborted early ; (e.g. the thread interrupted), then the objects are not partially reclassified. Constructor Summary; Constructors. Constructor; Description; Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass). Helper class to store an object prior to reclassifying it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability); Helper class to store an object prior to reclassifying it, including a classification probability. Parameters:; pathObject - an object whose classification may be set by a subsequent call to apply(); pathClass - the classification that may be applied to pathObject; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optional",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:1876,Integrability,interface,interface,1876,"f cores and grid width. int; getGridHeight(). Number of cores along the vertical axis of the grid. int; getGridWidth(). Number of cores along the horizontal axis of the grid. TMACoreObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMAC",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:1960,Integrability,interface,interface,1960,"is of the grid. int; getGridWidth(). Number of cores along the horizontal axis of the grid. TMACoreObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2054,Integrability,interface,interface,2054,"reObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2160,Integrability,interface,interface,2160,"eObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toStr",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2256,Integrability,interface,interface,2256,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2361,Integrability,interface,interface,2361,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2478,Integrability,interface,interface,2478,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2580,Integrability,interface,interface,2580,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2723,Integrability,interface,interface,2723,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2826,Integrability,interface,interface,2826,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:2941,Integrability,interface,interface,2941,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:3098,Integrability,interface,interface,3098,"its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface: TMAGrid; Get the TMACoreObject for a specified grid location. Specified by:; getTMACore in interface TMAGrid; Parameters:; row - ; col - ; Returns:. getTMACoreList; public List<TMACoreObject> getTMACoreList(); Description copied from interface: TMAGrid; Get an unmodifiable list of all TMA core objects. Specified by:; getTMACoreList in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(String coreName); Description copied from interface: TMAGrid; Retrieve a TMA core based upon its name.; ; The behavior is undefined if multiple cores have the same name. Specified by:; getTMACore in interface TMAGrid; Parameters:; coreName - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:533,Modifiability,extend,extends,533,". DefaultTMAGrid (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy; Class DefaultTMAGrid. java.lang.Object; qupath.lib.objects.hierarchy.DefaultTMAGrid. All Implemented Interfaces:; Serializable, TMAGrid. public class DefaultTMAGrid; extends Object; implements TMAGrid; Default implementation of a TMAGrid. Author:; Pete Bankhead; See Also:. Serialized Form. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static TMAGrid; create(List<TMACoreObject> cores,; int gridWidth). Create a new TMAGrid based on a list of cores and grid width. int; getGridHeight(). Number of cores along the vertical axis of the grid. int; getGridWidth(). Number of cores along the horizontal axis of the grid. TMACoreObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:1411,Modifiability,inherit,inherited,1411,"bjects.hierarchy.DefaultTMAGrid. All Implemented Interfaces:; Serializable, TMAGrid. public class DefaultTMAGrid; extends Object; implements TMAGrid; Default implementation of a TMAGrid. Author:; Pete Bankhead; See Also:. Serialized Form. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static TMAGrid; create(List<TMACoreObject> cores,; int gridWidth). Create a new TMAGrid based on a list of cores and grid width. int; getGridHeight(). Number of cores along the vertical axis of the grid. int; getGridWidth(). Number of cores along the horizontal axis of the grid. TMACoreObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html:1485,Security,hash,hashCode,1485,"lizable, TMAGrid. public class DefaultTMAGrid; extends Object; implements TMAGrid; Default implementation of a TMAGrid. Author:; Pete Bankhead; See Also:. Serialized Form. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static TMAGrid; create(List<TMACoreObject> cores,; int gridWidth). Create a new TMAGrid based on a list of cores and grid width. int; getGridHeight(). Number of cores along the vertical axis of the grid. int; getGridWidth(). Number of cores along the horizontal axis of the grid. TMACoreObject; getTMACore(int row,; int col). Get the TMACoreObject for a specified grid location. TMACoreObject; getTMACore(String coreName). Retrieve a TMA core based upon its name. List<TMACoreObject>; getTMACoreList(). Get an unmodifiable list of all TMA core objects. int; nCores(). Total number of cores in the TMA grid. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static TMAGrid create(List<TMACoreObject> cores,; int gridWidth); Create a new TMAGrid based on a list of cores and grid width.; ; It is assumed that the grid height may be calculated as cores.size() / gridWidth. Parameters:; cores - ; gridWidth - ; Returns:. nCores; public int nCores(); Description copied from interface: TMAGrid; Total number of cores in the TMA grid. Specified by:; nCores in interface TMAGrid; Returns:. getGridWidth; public int getGridWidth(); Description copied from interface: TMAGrid; Number of cores along the horizontal axis of the grid. Specified by:; getGridWidth in interface TMAGrid; Returns:. getGridHeight; public int getGridHeight(); Description copied from interface: TMAGrid; Number of cores along the vertical axis of the grid. Specified by:; getGridHeight in interface TMAGrid; Returns:. getTMACore; public TMACoreObject getTMACore(int row,; int col); Description copied from interface",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/DefaultTMAGrid.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3464,Deployability,update,update,3464,"ultiple objects to the hierarchy. boolean; addPathObject(PathObject pathObject). Deprecated.; since v0.4.0; use addObject(PathObject) instead (for naming consistency). boolean; addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject>",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3608,Deployability,update,update,3608,". boolean; addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean i",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3832,Deployability,update,update,3832," addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4008,Deployability,update,update,4008,"in individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4202,Deployability,update,update,4202,"ate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<Pat",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4364,Deployability,update,update,4364,"ects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4535,Deployability,update,update,4535,"ource,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:8084,Deployability,update,updateObject,8084,"ject from the hierarchy, firing a remove event. void; removeObjects(Collection<? extends PathObject> pathObjects,; boolean keepChildren). Remove a collection of objects, firing a single 'hierarchy changed' event afterwards to notify listeners if anything happened; (i.e. boolean; removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, without firing a remove event. void; removePathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). void; resolveHierarchy(). Attempt to resolve the parent-child relationships between all objects within the hierarchy. void; setHierarchy(PathObjectHierarchy hierarchy). Set the contents of this hierarchy to be the same as that of another hierarchy. void; setTMAGrid(TMAGrid tmaGrid). Set the tma grid for this hierarchy. String; toString();  ; void; updateObject(PathObject pathObject,; boolean isChanging). Update an object that is already in the hierarchy (e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HIERARCHY_COMPARATOR; public static final Comparator<PathObject> HIERARCHY_COMPARATOR; Comparator to use when looking for a parent annotation in the hierarchy.; The logic is:; ; Sort by area (smallest first); Sort by hierarchy level (deepest first); Sort by DefaultPathObjectComparator. In practice, one expects an object to be placed inside the smallest containing annotation - ; identical areas are likely to be rare, unless obtained by duplication. Constructor Details. PathObjectHierarchy; public PathObjectHierarchy(); Default constructor, creates an empty hierarchy. Method Details. isEmpty; public boolean isEmpty(); Check if the hierarchy is empty (i.e. no objects apart from the root object, no feature maps). Returns:. addListener; public void ad",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16681,Deployability,update,updateObject,16681,"t ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeR",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16707,Deployability,update,updateObject,16707,"t ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeR",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16891,Deployability,update,update,16891,"bjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeRoot - ; Returns:; Since:; v0.4.0. nObjects; public int nObjects(); Number of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void se",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:17028,Deployability,update,update,17028,"etectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeRoot - ; Returns:; Since:; v0.4.0. nObjects; public int nObjects(); Number of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void setHierarchy(PathObjectHierarchy hierarchy); Set the contents of this hierarchy to be the same as that of anot",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:19642,Deployability,update,update,19642,"getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,;",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:19918,Deployability,update,update,19918,"ict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20194,Deployability,update,update,20194,"ame as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathOb",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20430,Deployability,update,update,20430," filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of i",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20672,Deployability,update,update,20672," void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of if one is unsure what exactly ; has changed. Parameters:; source - . toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:21006,Deployability,update,update,21006," void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of if one is unsure what exactly ; has changed. Parameters:; source - . toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:21243,Deployability,update,update,21243," void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of if one is unsure what exactly ; has changed. Parameters:; source - . toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:550,Modifiability,extend,extends,550,". PathObjectHierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy; Class PathObjectHierarchy. java.lang.Object; qupath.lib.objects.hierarchy.PathObjectHierarchy. All Implemented Interfaces:; Serializable. public final class PathObjectHierarchy; extends Object; implements Serializable; A basic hierarchy in which to store PathObjects.; ; This essentially contains a single PathRootObject from which all other objects can be reached using the child object lists.; However, by adding/removing objects via this hierarchy (rather than through the child lists directly), it is possible; to maintain a more consistent structure (e.g. by automatically inserting objects as children of the objects whose ROI completely; contains the object to be added), along with a spatial cache so that objects can be extracted if their ROIs overlap with a specified region.; ; Note: Be cautious when deserializing - it may not result in a hierarchy in a valid state.; As a workaround, you can construct a new PathObjectHierarchy and call setHierarchy(deserializedHierarchy) to; ensure that you have a properly-constructed hierarchy with the same data within it. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; static final Comparator<PathObject>; HIERARCHY_COMPARATOR. Comparator to use when looking for a parent annotation in the hierarchy. Constructor Summary; Constructors. Constructor; Description; PathObjectHierarchy(). Default constructor, creates an empty hierarchy. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; void; addListener(PathObjectHierarchyListener listener). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:2443,Modifiability,extend,extends,2443,"it. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; static final Comparator<PathObject>; HIERARCHY_COMPARATOR. Comparator to use when looking for a parent annotation in the hierarchy. Constructor Summary; Constructors. Constructor; Description; PathObjectHierarchy(). Default constructor, creates an empty hierarchy. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; void; addListener(PathObjectHierarchyListener listener). Add a hierarchy change listener. boolean; addObject(PathObject pathObject). Add an object to the hierarchy, firing an event. boolean; addObject(PathObject pathObject,; boolean fireUpdate). Add an object to the hierarchy, optionally firing an event. boolean; addObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Add path object as descendant of the requested parent. boolean; addObjects(Collection<? extends PathObject> pathObjects). Add multiple objects to the hierarchy. boolean; addPathObject(PathObject pathObject). Deprecated.; since v0.4.0; use addObject(PathObject) instead (for naming consistency). boolean; addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object sourc",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3089,Modifiability,extend,extends,3089,"ject to the hierarchy, firing an event. boolean; addObject(PathObject pathObject,; boolean fireUpdate). Add an object to the hierarchy, optionally firing an event. boolean; addObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Add path object as descendant of the requested parent. boolean; addObjects(Collection<? extends PathObject> pathObjects). Add multiple objects to the hierarchy. boolean; addPathObject(PathObject pathObject). Deprecated.; since v0.4.0; use addObject(PathObject) instead (for naming consistency). boolean; addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurement",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3781,Modifiability,extend,extends,3781,"eprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>;",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3957,Modifiability,extend,extends,3957,"(the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; ge",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4130,Modifiability,extend,extends,4130,". Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4313,Modifiability,extend,extends,4313,"boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObj",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4463,Modifiability,extend,extends,4463,"chy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:5285,Modifiability,extend,extends,5285,"d; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects). Get the objects overlapping or close to a specified region. Collection<PathObject>; getObjectsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; getSelectionModel(). Get the selection model, which handles the selection status of objects. Collection<PathObject>; getTileObjects(). Get all tile objects in the hierarchy. TMAGrid; getTMAGrid(). Get the TMAGrid, or null if there is no TMA grid associated wi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:5481,Modifiability,extend,extends,5481," boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects). Get the objects overlapping or close to a specified region. Collection<PathObject>; getObjectsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; getSelectionModel(). Get the selection model, which handles the selection status of objects. Collection<PathObject>; getTileObjects(). Get all tile objects in the hierarchy. TMAGrid; getTMAGrid(). Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. boolean; hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region). Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a speci",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:5674,Modifiability,extend,extends,5674,"all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects). Get the objects overlapping or close to a specified region. Collection<PathObject>; getObjectsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; getSelectionModel(). Get the selection model, which handles the selection status of objects. Collection<PathObject>; getTileObjects(). Get all tile objects in the hierarchy. TMAGrid; getTMAGrid(). Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. boolean; hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region). Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. boolean; insertPathObject(PathObject pathObject,; boolean fireChangeEvents). Insert an object into the hierarchy. boolean; insertPathObjects(Collection<? extend",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:5859,Modifiability,extend,extends,5859,"bject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects). Get the objects overlapping or close to a specified region. Collection<PathObject>; getObjectsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; getSelectionModel(). Get the selection model, which handles the selection status of objects. Collection<PathObject>; getTileObjects(). Get all tile objects in the hierarchy. TMAGrid; getTMAGrid(). Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. boolean; hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region). Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. boolean; insertPathObject(PathObject pathObject,; boolean fireChangeEvents). Insert an object into the hierarchy. boolean; insertPathObjects(Collection<? extends PathObject> pathObjects). Insert a collection of objects into the hierarchy, firing a change event on completion. boolean; isEmpty(). Check if the hierarchy is empty (i.e. int; n",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:6313,Modifiability,extend,extends,6313,"l objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects). Get the objects overlapping or close to a specified region. Collection<PathObject>; getObjectsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; getSelectionModel(). Get the selection model, which handles the selection status of objects. Collection<PathObject>; getTileObjects(). Get all tile objects in the hierarchy. TMAGrid; getTMAGrid(). Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. boolean; hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region). Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. boolean; insertPathObject(PathObject pathObject,; boolean fireChangeEvents). Insert an object into the hierarchy. boolean; insertPathObjects(Collection<? extends PathObject> pathObjects). Insert a collection of objects into the hierarchy, firing a change event on completion. boolean; isEmpty(). Check if the hierarchy is empty (i.e. int; nObjects(). Number of objects in the hierarchy, excluding the root. void; removeListener(PathObjectHierarchyListener listener). Remove a hierarchy change listener. boolean; removeObject(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, firing a remove event. void; removeObjects(Collection<? extends PathObject> pathObjects,; boolean keepChildren). Remove a collection of objects, firing a single 'hierarchy changed' event afterwar",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:6661,Modifiability,extend,extends,6661,"tsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; getSelectionModel(). Get the selection model, which handles the selection status of objects. Collection<PathObject>; getTileObjects(). Get all tile objects in the hierarchy. TMAGrid; getTMAGrid(). Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. boolean; hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region). Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. boolean; insertPathObject(PathObject pathObject,; boolean fireChangeEvents). Insert an object into the hierarchy. boolean; insertPathObjects(Collection<? extends PathObject> pathObjects). Insert a collection of objects into the hierarchy, firing a change event on completion. boolean; isEmpty(). Check if the hierarchy is empty (i.e. int; nObjects(). Number of objects in the hierarchy, excluding the root. void; removeListener(PathObjectHierarchyListener listener). Remove a hierarchy change listener. boolean; removeObject(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, firing a remove event. void; removeObjects(Collection<? extends PathObject> pathObjects,; boolean keepChildren). Remove a collection of objects, firing a single 'hierarchy changed' event afterwards to notify listeners if anything happened; (i.e. boolean; removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, without firing a remove event. void; removePathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wa",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:7178,Modifiability,extend,extends,7178,"id(). Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. boolean; hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region). Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. boolean; insertPathObject(PathObject pathObject,; boolean fireChangeEvents). Insert an object into the hierarchy. boolean; insertPathObjects(Collection<? extends PathObject> pathObjects). Insert a collection of objects into the hierarchy, firing a change event on completion. boolean; isEmpty(). Check if the hierarchy is empty (i.e. int; nObjects(). Number of objects in the hierarchy, excluding the root. void; removeListener(PathObjectHierarchyListener listener). Remove a hierarchy change listener. boolean; removeObject(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, firing a remove event. void; removeObjects(Collection<? extends PathObject> pathObjects,; boolean keepChildren). Remove a collection of objects, firing a single 'hierarchy changed' event afterwards to notify listeners if anything happened; (i.e. boolean; removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, without firing a remove event. void; removePathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). void; resolveHierarchy(). Attempt to resolve the parent-child relationships between all objects within the hierarchy. void; setHierarchy(PathObjectHierarchy hierarchy). Set the contents of this hierarchy to be the same as that of another hierarchy. void; setTMAGrid(TMAGrid tmaGrid). Set the tma grid for this hierarchy. String; toString();  ; void; updateObject(PathObject pathObject,; boolean isChanging). Update an object that is already in the hierarc",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:8206,Modifiability,inherit,inherited,8206,"olean keepChildren). Remove a collection of objects, firing a single 'hierarchy changed' event afterwards to notify listeners if anything happened; (i.e. boolean; removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, without firing a remove event. void; removePathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). void; resolveHierarchy(). Attempt to resolve the parent-child relationships between all objects within the hierarchy. void; setHierarchy(PathObjectHierarchy hierarchy). Set the contents of this hierarchy to be the same as that of another hierarchy. void; setTMAGrid(TMAGrid tmaGrid). Set the tma grid for this hierarchy. String; toString();  ; void; updateObject(PathObject pathObject,; boolean isChanging). Update an object that is already in the hierarchy (e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HIERARCHY_COMPARATOR; public static final Comparator<PathObject> HIERARCHY_COMPARATOR; Comparator to use when looking for a parent annotation in the hierarchy.; The logic is:; ; Sort by area (smallest first); Sort by hierarchy level (deepest first); Sort by DefaultPathObjectComparator. In practice, one expects an object to be placed inside the smallest containing annotation - ; identical areas are likely to be rare, unless obtained by duplication. Constructor Details. PathObjectHierarchy; public PathObjectHierarchy(); Default constructor, creates an empty hierarchy. Method Details. isEmpty; public boolean isEmpty(); Check if the hierarchy is empty (i.e. no objects apart from the root object, no feature maps). Returns:. addListener; public void addListener(PathObjectHierarchyListener listener); Add a hierarchy change listener. Parameters:; listener - ; Since:; v",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:11623,Modifiability,extend,extends,11623," which handles the selection status of objects. Returns:. setTMAGrid; public void setTMAGrid(TMAGrid tmaGrid); Set the tma grid for this hierarchy.; If identical to the current TMA grid, nothing will happen.; Otherwise, if null then any existing TMA grid will be removed. Parameters:; tmaGrid - . insertPathObject; public boolean insertPathObject(PathObject pathObject,; boolean fireChangeEvents); Insert an object into the hierarchy. This differs from addObject(PathObject, boolean) in that it will seek to ; place the object in an appropriate location relative to existing objects, using the logic of HIERARCHY_COMPARATOR. Parameters:; pathObject - the object to add; fireChangeEvents - if true, an event will be added after adding the object. Choose false if a single event should be added after making multiple changes.; Returns:; true if the hierarchy changed as a result of this call, false otherwise. insertPathObjects; public boolean insertPathObjects(Collection<? extends PathObject> pathObjects); Insert a collection of objects into the hierarchy, firing a change event on completion.; This differs from addObjects(Collection) in that it will seek to ; place the object in an appropriate location relative to existing objects, using the logic of HIERARCHY_COMPARATOR. Parameters:; pathObjects - the objects to add; Returns:; true if the hierarchy changed as a result of this call, false otherwise. resolveHierarchy; public void resolveHierarchy(); Attempt to resolve the parent-child relationships between all objects within the hierarchy. removeObject; public boolean removeObject(PathObject pathObject,; boolean keepChildren); Remove a single object from the hierarchy, firing a remove event. Parameters:; pathObject - the object to remove; keepChildren - if true, retain all children and descendants of the object being removed; if false, remove these also; Returns:. removeObjectWithoutUpdate; public boolean removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren); Remov",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:12950,Modifiability,extend,extends,12950,"s a result of this call, false otherwise. resolveHierarchy; public void resolveHierarchy(); Attempt to resolve the parent-child relationships between all objects within the hierarchy. removeObject; public boolean removeObject(PathObject pathObject,; boolean keepChildren); Remove a single object from the hierarchy, firing a remove event. Parameters:; pathObject - the object to remove; keepChildren - if true, retain all children and descendants of the object being removed; if false, remove these also; Returns:. removeObjectWithoutUpdate; public boolean removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren); Remove a single object from the hierarchy, without firing a remove event. Parameters:; pathObject - the object to remove; keepChildren - if true, retain all children and descendants of the object being removed; if false, remove these also; Returns:. removeObjects; public void removeObjects(Collection<? extends PathObject> pathObjects,; boolean keepChildren); Remove a collection of objects, firing a single 'hierarchy changed' event afterwards to notify listeners if anything happened; (i.e. if any of the objects really were found within the hierarchy) & removed. Parameters:; pathObjects - the objects to remove; keepChildren - if true, retain children and descendants of the objects being removed. addObject; public boolean addObject(PathObject pathObject); Add an object to the hierarchy, firing an event. Parameters:; pathObject - ; Returns:. addObject; public boolean addObject(PathObject pathObject,; boolean fireUpdate); Add an object to the hierarchy, optionally firing an event. Parameters:; pathObject - ; fireUpdate - ; Returns:; Since:; v0.4.0; replaces addPathObjectWithoutUpdate(PathObject). addPathObject; @Deprecated; public boolean addPathObject(PathObject pathObject); Deprecated.; since v0.4.0; use addObject(PathObject) instead (for naming consistency). Legacy method to add an object to the hierarchy, firing an event. Parameters:; pathObject - ;",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:15121,Modifiability,extend,extends,15121,"); Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). Legacy method to add an object to the hierarchy, without firing an event. Parameters:; pathObject - ; Returns:. addPathObjectBelowParent; @Deprecated; public boolean addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate); Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). Legacy method to path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:. addObjectBelowParent; public boolean addObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate); Add path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:; Since:; v0.4.0 (replaces addPathObjectBelowParent(PathObject, PathObject, boolean). addObjects; public boolean addObjects(Collection<? extends PathObject> pathObjects); Add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:; Since:; v0.4.0; replaces addPathObjects(Collection). addPathObjects; @Deprecated; public boolean addPathObjects(Collection<? extends PathObject> pathObjects); Deprecated.; since v0.4.0; use addObjects(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:15358,Modifiability,extend,extends,15358,"dPathObjectBelowParent; @Deprecated; public boolean addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate); Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). Legacy method to path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:. addObjectBelowParent; public boolean addObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate); Add path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:; Since:; v0.4.0 (replaces addPathObjectBelowParent(PathObject, PathObject, boolean). addObjects; public boolean addObjects(Collection<? extends PathObject> pathObjects); Add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:; Since:; v0.4.0; replaces addPathObjects(Collection). addPathObjects; @Deprecated; public boolean addPathObjects(Collection<? extends PathObject> pathObjects); Deprecated.; since v0.4.0; use addObjects(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<Pat",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:15694,Modifiability,extend,extends,15694,"bject - ; fireUpdate - ; Returns:. addObjectBelowParent; public boolean addObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate); Add path object as descendant of the requested parent. Parameters:; pathObjectParent - ; pathObject - ; fireUpdate - ; Returns:; Since:; v0.4.0 (replaces addPathObjectBelowParent(PathObject, PathObject, boolean). addObjects; public boolean addObjects(Collection<? extends PathObject> pathObjects); Add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:; Since:; v0.4.0; replaces addPathObjects(Collection). addPathObjects; @Deprecated; public boolean addPathObjects(Collection<? extends PathObject> pathObjects); Deprecated.; since v0.4.0; use addObjects(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateOb",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16409,Modifiability,extend,extends,16409,"ts(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObj",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:18213,Modifiability,extend,extends,18213,"the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeRoot - ; Returns:; Since:; v0.4.0. nObjects; public int nObjects(); Number of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void setHierarchy(PathObjectHierarchy hierarchy); Set the contents of this hierarchy to be the same as that of another hierarchy.; In practice, this means copying the root and TMA grid of the second hierarchy. Parameters:; hierarchy - . getObjectsForROI; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls,; ROI roi); Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. ; This relies on centroids for detections, and a 'covers' rule for others. Parameters:; cls - class of PathObjects (e.g. PathDetectionObject), or null to accept all; roi - ; Returns:. getObjectsForRegion; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? e",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:18613,Modifiability,extend,extends,18613,"eRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeRoot - ; Returns:; Since:; v0.4.0. nObjects; public int nObjects(); Number of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void setHierarchy(PathObjectHierarchy hierarchy); Set the contents of this hierarchy to be the same as that of another hierarchy.; In practice, this means copying the root and TMA grid of the second hierarchy. Parameters:; hierarchy - . getObjectsForROI; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls,; ROI roi); Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. ; This relies on centroids for detections, and a 'covers' rule for others. Parameters:; cls - class of PathObjects (e.g. PathDetectionObject), or null to accept all; roi - ; Returns:. getObjectsForRegion; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy upd",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:19243,Modifiability,extend,extends,19243,"general rules for resolving the hierarchy. ; This relies on centroids for detections, and a 'covers' rule for others. Parameters:; cls - class of PathObjects (e.g. PathDetectionObject), or null to accept all; roi - ; Returns:. getObjectsForRegion; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChanged",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:19591,Modifiability,extend,extends,19591,"getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,;",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:19846,Modifiability,extend,extends,19846,"ict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20143,Modifiability,extend,extends,20143,"ame as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathOb",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20379,Modifiability,extend,extends,20379," filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of i",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20600,Modifiability,extend,extends,20600," void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of if one is unsure what exactly ; has changed. Parameters:; source - . toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:1072,Performance,cache,cache,1072,"ript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy; Class PathObjectHierarchy. java.lang.Object; qupath.lib.objects.hierarchy.PathObjectHierarchy. All Implemented Interfaces:; Serializable. public final class PathObjectHierarchy; extends Object; implements Serializable; A basic hierarchy in which to store PathObjects.; ; This essentially contains a single PathRootObject from which all other objects can be reached using the child object lists.; However, by adding/removing objects via this hierarchy (rather than through the child lists directly), it is possible; to maintain a more consistent structure (e.g. by automatically inserting objects as children of the objects whose ROI completely; contains the object to be added), along with a spatial cache so that objects can be extracted if their ROIs overlap with a specified region.; ; Note: Be cautious when deserializing - it may not result in a hierarchy in a valid state.; As a workaround, you can construct a new PathObjectHierarchy and call setHierarchy(deserializedHierarchy) to; ensure that you have a properly-constructed hierarchy with the same data within it. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; static final Comparator<PathObject>; HIERARCHY_COMPARATOR. Comparator to use when looking for a parent annotation in the hierarchy. Constructor Summary; Constructors. Constructor; Description; PathObjectHierarchy(). Default constructor, creates an empty hierarchy. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; void; addListener(PathObjectHierarchyListener listener). Add a hierarchy change listener. boolean; ad",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:18773,Performance,perform,performs,18773,"r of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void setHierarchy(PathObjectHierarchy hierarchy); Set the contents of this hierarchy to be the same as that of another hierarchy.; In practice, this means copying the root and TMA grid of the second hierarchy. Parameters:; hierarchy - . getObjectsForROI; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls,; ROI roi); Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. ; This relies on centroids for detections, and a 'covers' rule for others. Parameters:; cls - class of PathObjects (e.g. PathDetectionObject), or null to accept all; roi - ; Returns:. getObjectsForRegion; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Objec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4967,Safety,detect,detection,4967,"ierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects). Get the objects overlapping or close to a specified region. Collection<PathObject>; getObjectsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; g",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:5028,Safety,detect,detections,5028,"ierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects). Get the objects overlapping or close to a specified region. Collection<PathObject>; getObjectsForROI(Class<? extends PathObject> cls,; ROI roi). Get the objects within a specified ROI, as defined by the general rules for resolving the hierarchy. Collection<PathObject>; getPointObjects(Class<? extends PathObject> cls). Get objects that contain Point ROIs. PathObject; getRootObject(). Get the root object. PathObjectSelectionModel; g",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16096,Safety,detect,detection,16096,"olean addObjects(Collection<? extends PathObject> pathObjects); Add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:; Since:; v0.4.0; replaces addPathObjects(Collection). addPathObjects; @Deprecated; public boolean addPathObjects(Collection<? extends PathObject> pathObjects); Deprecated.; since v0.4.0; use addObjects(Collection) instead. Legacy method to add multiple objects to the hierarchy. Parameters:; pathObjects - ; Returns:. clearAll; public void clearAll(); Remove all objects from the hierarchy. getPointObjects; public Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); Get objects that contain Point ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList;",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html
