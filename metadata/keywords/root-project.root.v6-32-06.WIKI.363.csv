id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html532/TSQLFile.html:398,Integrability,interface,interface,398,". TSQLFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » SQL; » TSQLFile. class TSQLFile: public TFile. The main motivation for the TSQLFile development is to have; ""transparent"" access to SQL data base via standard TFile interface. The main approach that each class (but not each object) has one or two tables; with names like $(CLASSNAME)_ver$(VERSION) and $(CLASSNAME)_raw$(VERSION); For example: TAxis_ver8 or TList_raw5; Second kind of tables appears, when some of class members can not be converted to; normalized form or when class has custom streamer.; For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4; Most of memebers are stored in TH1_ver4 table columnwise, and only memeber:. Double_t* fBuffer; //[fBufferSize]. can not be represented as column while size of array is not known apriory.; Therefore, fBuffer will be written as list of values in TH1_raw4 table. All objects, stored in the DB, will be registered in table ""ObjectsTable"".; In this there are following columns:; ""key:id"" - key identifier to which belong object; ""obj:id"" - object identifier; ""Class"" - object class name; ""Version"" - object class version; Data in each ""ObjectsTable"" row uniqly identify, in which table; and which column object is stored. In normal situation all class data should be sorted columnwise.; Up to now following member are supported:; 1) Basic data types; Here is everything clear. Column SQL type will be as much as possible; close to the original type of value.; 2) Fixed array of basic data types; In this case n columns like fArr[0], fArr[1] and so on will be created.; If there is multidimensional array, names will be fArr2[1][2][1] and so on; 3) Parent class; In this case version of parent class is stored and; data of parent class will be stored with the same obj:id in corrspondent table",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:31089,Integrability,interface,interface,31089,"of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tfQuerisCounter! how many query was applied; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TSQLServer*fSQL! interface to SQL database ; TList*fSQLClassInfos! list of SQL class infos; Int_tfSQLIOversion! version of SQL I/O which is stored in configurations; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfStmtCounter! count numbers of active statements; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal cl",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:46913,Integrability,Interface,Interface,46913," sqlinfo); Method return request results for specified objid from _streamer_ classtable; Data returned in form of statement, where direct access to values are possible. Long64_t StoreObjectInTables(Long64_t keyid, const void* obj, const TClass* cl); Store object in database. Return stored object id or -1 if error. const char* SQLCompatibleType(Int_t typ) const; returns sql type name which is most closer to ROOT basic type; typ should be from TVirtualStreamerInfo:: constansts like TVirtualStreamerInfo::kInt. const char* SQLIntType() const; return SQL integer type. Long64_t DirCreateEntry(TDirectory* ); Create entry for directory in database. Int_t DirReadKeys(TDirectory* ); Read directory list of keys from database. void DirWriteKeys(TDirectory* ); Write directory keys list to database. void DirWriteHeader(TDirectory* ); Update dir header in the file. void Streamer(TBuffer& b); streamer for TSQLFile class; stores only data for TDirectory. Int_t SysOpen(const char* , Int_t , UInt_t ); Interface to basic system I/O routines, suppressed. { return 0; }. Int_t SysClose(Int_t ); { return 0; }. Int_t SysRead(Int_t , void* , Int_t ); { return 0; }. Int_t SysWrite(Int_t , const void* , Int_t ); { return 0; }. Long64_t SysSeek(Int_t , Long64_t , Int_t ); { return 0; }. Int_t SysStat(Int_t , Long_t* , Long64_t* , Long_t* , Long_t* ); { return 0; }. Int_t SysSync(Int_t ); { return 0; }. const char* SQLSmallTextType() const; { return fOtherTypes[0]; }. Int_t SQLSmallTextTypeLimit() const; { return atoi(fOtherTypes[1]); }. const char* SQLBigTextType() const; { return fOtherTypes[2]; }. const char* SQLDatetimeType() const; { return fOtherTypes[3]; }. const char* SQLIdentifierQuote() const; { return fOtherTypes[4]; }. const char* SQLDirIdColumn() const; { return fOtherTypes[5]; }. const char* SQLKeyIdColumn() const; { return fOtherTypes[6]; }. const char* SQLObjectIdColumn() const; { return fOtherTypes[7]; }. const char* SQLRawIdColumn() const; { return fOtherTypes[8]; }. const char",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:46943,Integrability,rout,routines,46943," sqlinfo); Method return request results for specified objid from _streamer_ classtable; Data returned in form of statement, where direct access to values are possible. Long64_t StoreObjectInTables(Long64_t keyid, const void* obj, const TClass* cl); Store object in database. Return stored object id or -1 if error. const char* SQLCompatibleType(Int_t typ) const; returns sql type name which is most closer to ROOT basic type; typ should be from TVirtualStreamerInfo:: constansts like TVirtualStreamerInfo::kInt. const char* SQLIntType() const; return SQL integer type. Long64_t DirCreateEntry(TDirectory* ); Create entry for directory in database. Int_t DirReadKeys(TDirectory* ); Read directory list of keys from database. void DirWriteKeys(TDirectory* ); Write directory keys list to database. void DirWriteHeader(TDirectory* ); Update dir header in the file. void Streamer(TBuffer& b); streamer for TSQLFile class; stores only data for TDirectory. Int_t SysOpen(const char* , Int_t , UInt_t ); Interface to basic system I/O routines, suppressed. { return 0; }. Int_t SysClose(Int_t ); { return 0; }. Int_t SysRead(Int_t , void* , Int_t ); { return 0; }. Int_t SysWrite(Int_t , const void* , Int_t ); { return 0; }. Long64_t SysSeek(Int_t , Long64_t , Int_t ); { return 0; }. Int_t SysStat(Int_t , Long_t* , Long64_t* , Long_t* , Long_t* ); { return 0; }. Int_t SysSync(Int_t ); { return 0; }. const char* SQLSmallTextType() const; { return fOtherTypes[0]; }. Int_t SQLSmallTextTypeLimit() const; { return atoi(fOtherTypes[1]); }. const char* SQLBigTextType() const; { return fOtherTypes[2]; }. const char* SQLDatetimeType() const; { return fOtherTypes[3]; }. const char* SQLIdentifierQuote() const; { return fOtherTypes[4]; }. const char* SQLDirIdColumn() const; { return fOtherTypes[5]; }. const char* SQLKeyIdColumn() const; { return fOtherTypes[6]; }. const char* SQLObjectIdColumn() const; { return fOtherTypes[7]; }. const char* SQLRawIdColumn() const; { return fOtherTypes[8]; }. const char",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:14735,Modifiability,Inherit,InheritsFrom,14735,"rtual Long64_tTDirectoryFile::GetSeekDir() const; virtual Long64_tGetSeekFree() const; virtual Long64_tGetSeekInfo() const; virtual Long64_tTDirectoryFile::GetSeekKeys() const; virtual Long64_tTDirectoryFile::GetSeekParent() const; virtual Long64_tGetSize() const; const TList*TFile::GetStreamerInfoCache(); virtual TList*GetStreamerInfoList(); const char*GetTablesType() const; virtual const char*TNamed::GetTitle() const; static TFile::EFileTypeTFile::GetType(const char* name, Option_t* option = """", TString* prefix = 0); virtual UInt_tTObject::GetUniqueID() const; Int_tGetUseIndexes() const; Bool_tGetUseSuffixes() const; Int_tGetUseTransactions() const; TUUIDTDirectory::GetUUID() const; Int_tTFile::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidTFile::IncrementFileCounter(); virtual voidTFile::IncrementProcessIDs(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTFile::IsArchive() const; Bool_tTFile::IsBinary() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTDirectory::IsFolder() const; virtual Bool_tTDirectoryFile::IsModified() const; Bool_tIsMySQL() const; Bool_tIsODBC() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOpen() const; Bool_tIsOracle() const; Bool_tTFile::IsRaw() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectoryFile::IsWritable() const; Bool_tTObject::IsZombie() const; virtual voidTFile::ls(Option_t* option = """") const; virtual voidMakeFree(Long64_t, Long64_t); virtual voidMakeProject(const char*, const char* = ""*"", Option_t* = ""new"")MENU ; TStringMakeSelectQuery(TClass* cl); virtual voidMap(); virtual Bool_tTFile::Matches(const char* name); voidTObject:",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:14801,Modifiability,Inherit,InheritsFrom,14801,"GetSeekFree() const; virtual Long64_tGetSeekInfo() const; virtual Long64_tTDirectoryFile::GetSeekKeys() const; virtual Long64_tTDirectoryFile::GetSeekParent() const; virtual Long64_tGetSize() const; const TList*TFile::GetStreamerInfoCache(); virtual TList*GetStreamerInfoList(); const char*GetTablesType() const; virtual const char*TNamed::GetTitle() const; static TFile::EFileTypeTFile::GetType(const char* name, Option_t* option = """", TString* prefix = 0); virtual UInt_tTObject::GetUniqueID() const; Int_tGetUseIndexes() const; Bool_tGetUseSuffixes() const; Int_tGetUseTransactions() const; TUUIDTDirectory::GetUUID() const; Int_tTFile::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidTFile::IncrementFileCounter(); virtual voidTFile::IncrementProcessIDs(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTFile::IsArchive() const; Bool_tTFile::IsBinary() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTDirectory::IsFolder() const; virtual Bool_tTDirectoryFile::IsModified() const; Bool_tIsMySQL() const; Bool_tIsODBC() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOpen() const; Bool_tIsOracle() const; Bool_tTFile::IsRaw() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectoryFile::IsWritable() const; Bool_tTObject::IsZombie() const; virtual voidTFile::ls(Option_t* option = """") const; virtual voidMakeFree(Long64_t, Long64_t); virtual voidMakeProject(const char*, const char* = ""*"", Option_t* = ""new"")MENU ; TStringMakeSelectQuery(TClass* cl); virtual voidMap(); virtual Bool_tTFile::Matches(const char* name); voidTObject::MayNotUse(const char* method) const; virtual TDirectory*TDirector",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:28678,Modifiability,variab,variable,28678,,MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:28710,Modifiability,config,configuration,28710,,MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:31222,Modifiability,config,configurations,31222,"ucture; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tfQuerisCounter! how many query was applied; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TSQLServer*fSQL! interface to SQL database ; TList*fSQLClassInfos! list of SQL class infos; Int_tfSQLIOversion! version of SQL I/O which is stored in configurations; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfStmtCounter! count numbers of active statements; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables; Bool_tfUseSuffixes! use suffixes in column names like fValue:Int_t or fObject:pointer; Int_tfUseTransactions",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:33658,Modifiability,Inherit,Inheritance,33658,"equests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLFile(); default TSQLFile constructor. TSQLFile(const char* dbname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a mom",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:33671,Modifiability,Inherit,Inherited,33671,"equests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLFile(); default TSQLFile constructor. TSQLFile(const char* dbname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a mom",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:38668,Modifiability,config,configurations,38668,"Indexes in general should increase speed of access to objects data,; but they required more operations and more disk space on server side. const char* GetDataBaseName() const; Return name of data base on the host; For Oracle always return 0. void Close(Option_t* option = """"); Close a SQL file; For more comments see TFile::Close() function. ~TSQLFile(); destructor of TSQLFile object. void operator=(const TSQLFile& ); make private to exclude copy operator. Bool_t IsOpen() const; return kTRUE if file is opened and can be accessed. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; See TFile::Open() for details. TKey* CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); create SQL key, which will store object in data base. TKey* CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); create SQL key, which will store object in data base. void WriteHeader(); Write file info like configurations, title, UUID and other. void WriteStreamerInfo(); Store all TVirtualStreamerInfo, used in file, in sql database. Bool_t WriteSpecialObject(Long64_t keyid, TObject* obj, const char* name, const char* title); write special kind of object like streamer infos or file itself; keys for that objects should exist in tables but not indicated in list of keys,; therefore users can not get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = 0); Read data of special kind of objects. TList* GetStreamerInfoList(); Read back streamer infos from database; List of streamer infos is always stored with key:id 0,; which is not shown in normal keys list. void SaveToDatabase(); save data which is not yet in Database; Typically this is streamerinfos structures or. Int_t StreamKeysForDirectory(TDirectory* dir, Bool_t doupdate, Long64_t specialkeyid = -1, TKeySQL** specialkey = 0); read keys for specified directory (when update == kFALSE); or update",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:39937,Modifiability,config,configurations,39937," infos or file itself; keys for that objects should exist in tables but not indicated in list of keys,; therefore users can not get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = 0); Read data of special kind of objects. TList* GetStreamerInfoList(); Read back streamer infos from database; List of streamer infos is always stored with key:id 0,; which is not shown in normal keys list. void SaveToDatabase(); save data which is not yet in Database; Typically this is streamerinfos structures or. Int_t StreamKeysForDirectory(TDirectory* dir, Bool_t doupdate, Long64_t specialkeyid = -1, TKeySQL** specialkey = 0); read keys for specified directory (when update == kFALSE); or update value for modified keys when update == kTRUE; Returns number of succesfully read keys or -1 if error. void InitSqlDatabase(Bool_t create); initialize sql database and correspondent structures; identical to TFile::Init() function. Bool_t ReadConfigurations(); read table configurations as special table. void CreateBasicTables(); Creates initial tables in database; This is table with configurations and table with keys; Function called once when first object is stored to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClass",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:40051,Modifiability,config,configurations,40051,"t get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = 0); Read data of special kind of objects. TList* GetStreamerInfoList(); Read back streamer infos from database; List of streamer infos is always stored with key:id 0,; which is not shown in normal keys list. void SaveToDatabase(); save data which is not yet in Database; Typically this is streamerinfos structures or. Int_t StreamKeysForDirectory(TDirectory* dir, Bool_t doupdate, Long64_t specialkeyid = -1, TKeySQL** specialkey = 0); read keys for specified directory (when update == kFALSE); or update value for modified keys when update == kTRUE; Returns number of succesfully read keys or -1 if error. void InitSqlDatabase(Bool_t create); initialize sql database and correspondent structures; identical to TFile::Init() function. Bool_t ReadConfigurations(); read table configurations as special table. void CreateBasicTables(); Creates initial tables in database; This is table with configurations and table with keys; Function called once when first object is stored to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); ",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:40214,Modifiability,config,config,40214,"nfoList(); Read back streamer infos from database; List of streamer infos is always stored with key:id 0,; which is not shown in normal keys list. void SaveToDatabase(); save data which is not yet in Database; Typically this is streamerinfos structures or. Int_t StreamKeysForDirectory(TDirectory* dir, Bool_t doupdate, Long64_t specialkeyid = -1, TKeySQL** specialkey = 0); read keys for specified directory (when update == kFALSE); or update value for modified keys when update == kTRUE; Returns number of succesfully read keys or -1 if error. void InitSqlDatabase(Bool_t create); initialize sql database and correspondent structures; identical to TFile::Init() function. Bool_t ReadConfigurations(); read table configurations as special table. void CreateBasicTables(); Creates initial tables in database; This is table with configurations and table with keys; Function called once when first object is stored to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); Checks if main keys table is existing. Bool_t IsWriteAccess(); Checkis, if lock is free in configuration tables. void SetLocking(Int_t mode); Set locking mode for cu",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:41150,Modifiability,config,configuration,41150,"d to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); Checks if main keys table is existing. Bool_t IsWriteAccess(); Checkis, if lock is free in configuration tables. void SetLocking(Int_t mode); Set locking mode for current database. Int_t GetLocking(); Return current locking mode for that file. Bool_t IsReadAccess(); dummy, in future should check about read access to database. TSQLResult* SQLQuery(const char* cmd, Int_t flag = 0, Bool_t* res = 0); submits query to SQL server; if flag==0, result is not interesting and will be deleted; if flag==1, return result of submitted query; if flag==2, results is may be necessary for long time; Oracle plugin do not support working with several TSQLResult; objects, therefore explicit deep copy will be produced; If ok!=0, it will contains kTRUE is Query was successfull, otherwise kFALSE. Bool_t SQLCanStatement(); Test if DB support statement and number of open statements is not exceeded. TSQLStatement* SQLStatement(const char* cmd, Int_t bufsize = 1000); Produces SQL statement for currently conected DB server. void SQLDeleteStatement(TSQLStatement* stmt); delete statement a",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:41655,Modifiability,plugin,plugin,41655,"H1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); Checks if main keys table is existing. Bool_t IsWriteAccess(); Checkis, if lock is free in configuration tables. void SetLocking(Int_t mode); Set locking mode for current database. Int_t GetLocking(); Return current locking mode for that file. Bool_t IsReadAccess(); dummy, in future should check about read access to database. TSQLResult* SQLQuery(const char* cmd, Int_t flag = 0, Bool_t* res = 0); submits query to SQL server; if flag==0, result is not interesting and will be deleted; if flag==1, return result of submitted query; if flag==2, results is may be necessary for long time; Oracle plugin do not support working with several TSQLResult; objects, therefore explicit deep copy will be produced; If ok!=0, it will contains kTRUE is Query was successfull, otherwise kFALSE. Bool_t SQLCanStatement(); Test if DB support statement and number of open statements is not exceeded. TSQLStatement* SQLStatement(const char* cmd, Int_t bufsize = 1000); Produces SQL statement for currently conected DB server. void SQLDeleteStatement(TSQLStatement* stmt); delete statement and decrease counter. Bool_t SQLApplyCommands(TObjArray* cmds); supplies set of commands to server; Commands is stored as array of TObjString. Bool_t SQLTestTable(const char* tablename); Test, if table of specified name exists. Long64_t SQLMaximumValue(const char* tablename, const char* columnname); Returns maximum value, found in specified columnname of table tablename; Column type should be numeric. void SQLDeleteAllTables(); Delete all tables in database. Bool_t SQLStartTra",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:48201,Modifiability,config,configuration,48201,"nt_t SysStat(Int_t , Long_t* , Long64_t* , Long_t* , Long_t* ); { return 0; }. Int_t SysSync(Int_t ); { return 0; }. const char* SQLSmallTextType() const; { return fOtherTypes[0]; }. Int_t SQLSmallTextTypeLimit() const; { return atoi(fOtherTypes[1]); }. const char* SQLBigTextType() const; { return fOtherTypes[2]; }. const char* SQLDatetimeType() const; { return fOtherTypes[3]; }. const char* SQLIdentifierQuote() const; { return fOtherTypes[4]; }. const char* SQLDirIdColumn() const; { return fOtherTypes[5]; }. const char* SQLKeyIdColumn() const; { return fOtherTypes[6]; }. const char* SQLObjectIdColumn() const; { return fOtherTypes[7]; }. const char* SQLRawIdColumn() const; { return fOtherTypes[8]; }. const char* SQLStrIdColumn() const; { return fOtherTypes[9]; }. const char* SQLNameSeparator() const; { return fOtherTypes[10]; }. const char* SQLValueQuote() const; { return fOtherTypes[11]; }. const char* SQLDefaultTableType() const; { return fOtherTypes[12]; }. Bool_t GetUseSuffixes() const; configuration of SQL. { return fUseSuffixes; }. Int_t GetArrayLimit() const; { return fArrayLimit; }. void SkipArrayLimit(); { SetArrayLimit(-1); }. const char* GetTablesType() const; { return fTablesType.Data(); }. Int_t GetUseTransactions() const; { return fUseTransactions; }. Int_t GetUseIndexes() const; { return fUseIndexes; }. Int_t GetQuerisCounter() const; { return fQuerisCounter; }. void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char* = ""*"", Option_t* = ""new""); {}. void Map(); {}. void Pa",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:18569,Performance,cache,cacheDir,18569,"cover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); Bool_tRollback(); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidSeek(Long64_t, TFile::ERelativeTo = kBeg); voidSetArrayLimit(Int_t limit = 20); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFi",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:18696,Performance,cache,cache,18696,"pen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); Bool_tRollback(); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidSeek(Long64_t, TFile::ERelativeTo = kBeg); voidSetArrayLimit(Int_t limit = 20); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t ",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:18754,Performance,cache,cache,18754,"rMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); Bool_tRollback(); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidSeek(Long64_t, TFile::ERelativeTo = kBeg); voidSetArrayLimit(Int_t limit = 20); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_t* option = ",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:28566,Performance,cache,cache,28566,,MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:28638,Performance,cache,cache,28638,,MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:29384,Performance,Cache,Cached,29384,"umber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); Bool_tfCanChangeConfig! variable indicates can be basic configuration changed or not; TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tfIdsTableExists! indicate if IdsTable exists; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; ofstream*fLogFile! log file with SQL statements; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; Int_tfModifyCounter! indicates how many changes was done with database tables; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNby",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:30578,Performance,cache,cache,30578,"rue is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; ofstream*fLogFile! log file with SQL statements; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; Int_tfModifyCounter! indicates how many changes was done with database tables; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tfQuerisCounter! how many query was applied; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TSQLServer*fSQL! interface to SQL database ; TList*fSQLClassInfos! list of SQL class infos; Int_tfSQLIOversion! version of SQL I/O which is stored in configurations; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfS",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:30989,Performance,cache,cache,30989,"ory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tfQuerisCounter! how many query was applied; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TSQLServer*fSQL! interface to SQL database ; TList*fSQLClassInfos! list of SQL class infos; Int_tfSQLIOversion! version of SQL I/O which is stored in configurations; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfStmtCounter! count numbers of active statements; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!UR",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:33006,Performance,cache,cache,33006,"::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables; Bool_tfUseSuffixes! use suffixes in column names like fValue:Int_t or fObject:pointer; Int_tfUseTransactions! use transaction statements for writing data into the tables; TStringfUserName! user name, used to access objects from database; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size.",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:33036,Performance,cache,cached,33036,"::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables; Bool_tfUseSuffixes! use suffixes in column names like fValue:Int_t or fObject:pointer; Int_tfUseTransactions! use transaction statements for writing data into the tables; TStringfUserName! user name, used to access objects from database; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size.",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:33117,Performance,CACHE,CACHEREAD,33117,"::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables; Bool_tfUseSuffixes! use suffixes in column names like fValue:Int_t or fObject:pointer; Int_tfUseTransactions! use transaction statements for writing data into the tables; TStringfUserName! user name, used to access objects from database; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size.",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:2124,Safety,avoid,avoid,2124,"able ""ObjectsTable"".; In this there are following columns:; ""key:id"" - key identifier to which belong object; ""obj:id"" - object identifier; ""Class"" - object class name; ""Version"" - object class version; Data in each ""ObjectsTable"" row uniqly identify, in which table; and which column object is stored. In normal situation all class data should be sorted columnwise.; Up to now following member are supported:; 1) Basic data types; Here is everything clear. Column SQL type will be as much as possible; close to the original type of value.; 2) Fixed array of basic data types; In this case n columns like fArr[0], fArr[1] and so on will be created.; If there is multidimensional array, names will be fArr2[1][2][1] and so on; 3) Parent class; In this case version of parent class is stored and; data of parent class will be stored with the same obj:id in corrspondent table.; There is a special case, when parent store nothing (this is for instance TQObject).; In that case just -1 is written to avoid any extra checks if table exist or not.; 4) Object as data member.; In that case object is saved in normal way to data base and column; will contain id of this object.; 5) Pointer on object; Same as before. In case if object was already stored, just its id; will be placed in the column. For NULL pointer 0 is used.; 6) TString; Now column with limited width like VARCAHR(255) in MySQL is used.; Later this will be improved to support maximum possible strings; 7) Anything else.; Data will be converted to raw format and saved in _streamer_ table.; Each row supplied with obj:id and row:id, where row:id indicates; data, corresponding to this particular data member, and column; will contain this raw:id. All conversion to SQL statements are done with help of TSQLStructure class.; This is special hierarchical structure wich internally is very similar; to XML structures. TBufferSQL2 creates these structures, when object; data is streamed by ROOT and only afterwards all SQL statements will be pr",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:4365,Safety,detect,detects,4365,", column contain class version; *:object - other object, column contain object id; *:rawdata - raw data, column contains id of raw data from _streamer_ table; *:Int_t - column with integer value; Use TSQLFile::SetUseSuffixes(kFALSE) to disable suffixes usage. This and several other options can be changed only when; TSQLFile created with options ""CREATE"" or ""RECREATE"" and only before; first write operation. These options are:; SetUseSuffixes() - suffix usage in column names (default - on); SetArrayLimit() - defines maximum array size, which can; has column for each element (default 21); SetTablesType() - table type name in MySQL database (default ""InnoDB""); SetUseIndexes() - usage of indexes in database (default kIndexesBasic); Normally these functions should be called immidiately after TSQLFile constructor. When objects data written to database, by default START TRANSACTION/COMMIT; SQL commands are used before and after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function to hime. By default only indexes for basic tables are created.; In most cases usage of indexes increase perfomance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method. There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be usufull for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hop",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:19699,Safety,timeout,timeout,19699," virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_t* option = "">""); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); voidSetTablesType(const char* table_type); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseIndexes(Int_t use_type = kIndexesBasic); voidSetUseSuffixes(Bool_t on = kTRUE); voidSetUseTransactions(Int_t mode = kTransactionsAuto); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tSizeof() const; voidSkipArrayLimit(); voidStartLogFile(const char* fname)MENU ; Bool_tS",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:49407,Safety,Recover,Recover,49407,"UseSuffixes() const; configuration of SQL. { return fUseSuffixes; }. Int_t GetArrayLimit() const; { return fArrayLimit; }. void SkipArrayLimit(); { SetArrayLimit(-1); }. const char* GetTablesType() const; { return fTablesType.Data(); }. Int_t GetUseTransactions() const; { return fUseTransactions; }. Int_t GetUseIndexes() const; { return fUseIndexes; }. Int_t GetQuerisCounter() const; { return fQuerisCounter; }. void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char* = ""*"", Option_t* = ""new""); {}. void Map(); {}. void Paint(Option_t* = """"); {}. void Print(Option_t* = """") const; {}. Bool_t ReadBuffer(char* , Int_t ); { return kFALSE; }. Bool_t ReadBuffer(char* , Long64_t , Int_t ); { return kFALSE; }. void ReadFree(); {}. Int_t Recover(); { return 0; }. void Seek(Long64_t , TFile::ERelativeTo = kBeg); {}. void SetEND(Long64_t ); {}. Int_t Sizeof() const; { return 0; }. void UseCache(Int_t = 10, Int_t = 0); {}. Bool_t WriteBuffer(const char* , Int_t ); { return kFALSE; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0); { return 0; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0) const; { return 0; }. void WriteFree(); {}. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLFile.h 34444 2010-07-16 02:17:39Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:355,Security,access,access,355,". TSQLFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » SQL; » TSQLFile. class TSQLFile: public TFile. The main motivation for the TSQLFile development is to have; ""transparent"" access to SQL data base via standard TFile interface. The main approach that each class (but not each object) has one or two tables; with names like $(CLASSNAME)_ver$(VERSION) and $(CLASSNAME)_raw$(VERSION); For example: TAxis_ver8 or TList_raw5; Second kind of tables appears, when some of class members can not be converted to; normalized form or when class has custom streamer.; For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4; Most of memebers are stored in TH1_ver4 table columnwise, and only memeber:. Double_t* fBuffer; //[fBufferSize]. can not be represented as column while size of array is not known apriory.; Therefore, fBuffer will be written as list of values in TH1_raw4 table. All objects, stored in the DB, will be registered in table ""ObjectsTable"".; In this there are following columns:; ""key:id"" - key identifier to which belong object; ""obj:id"" - object identifier; ""Class"" - object class name; ""Version"" - object class version; Data in each ""ObjectsTable"" row uniqly identify, in which table; and which column object is stored. In normal situation all class data should be sorted columnwise.; Up to now following member are supported:; 1) Basic data types; Here is everything clear. Column SQL type will be as much as possible; close to the original type of value.; 2) Fixed array of basic data types; In this case n columns like fArr[0], fArr[1] and so on will be created.; If there is multidimensional array, names will be fArr2[1][2][1] and so on; 3) Parent class; In this case version of parent class is stored and; data of parent class will be stored with the same obj:id in corrspondent table",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:5276,Security,access,access,5276,"by default START TRANSACTION/COMMIT; SQL commands are used before and after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function to hime. By default only indexes for basic tables are created.; In most cases usage of indexes increase perfomance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method. There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be usufull for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straigthforward. Known problems and open questions.; 1) TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; 2) TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; 3) TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); 4) Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. Example how TSQLFile can be used:. example of a session saving data to a SQL data base. const char* dbname = ""mysql://host.domain:3306/dbname"";; const char* username = ""username"";; const char* userpass = ""userpass"";. // Clean data base and create primary tables; TSQLFile* f = ",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:5693,Security,access,accessed,5693,"ns function to hime. By default only indexes for basic tables are created.; In most cases usage of indexes increase perfomance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method. There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be usufull for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straigthforward. Known problems and open questions.; 1) TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; 2) TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; 3) TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); 4) Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. Example how TSQLFile can be used:. example of a session saving data to a SQL data base. const char* dbname = ""mysql://host.domain:3306/dbname"";; const char* username = ""username"";; const char* userpass = ""userpass"";. // Clean data base and create primary tables; TSQLFile* f = new TSQLFile(dbname, ""recreate"", username, userpass);; // Write with standard I/O functions; arr->Write(""arr"", TObject::kSingleKey);; h1->Write(""histo"");; // Close connection to DB; delete f;. example of a session read data from SQL data base. // Open database again in read-only mode; TSQLFile* f = new TSQLFile(dbname, ""open"", username, userpass);; //",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:14541,Security,Hash,Hash,14541,"virtual Int_tTFile::GetReadCalls() const; Int_tTFile::GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Long64_tTFile::GetRelOffset() const; virtual Long64_tTDirectoryFile::GetSeekDir() const; virtual Long64_tGetSeekFree() const; virtual Long64_tGetSeekInfo() const; virtual Long64_tTDirectoryFile::GetSeekKeys() const; virtual Long64_tTDirectoryFile::GetSeekParent() const; virtual Long64_tGetSize() const; const TList*TFile::GetStreamerInfoCache(); virtual TList*GetStreamerInfoList(); const char*GetTablesType() const; virtual const char*TNamed::GetTitle() const; static TFile::EFileTypeTFile::GetType(const char* name, Option_t* option = """", TString* prefix = 0); virtual UInt_tTObject::GetUniqueID() const; Int_tGetUseIndexes() const; Bool_tGetUseSuffixes() const; Int_tGetUseTransactions() const; TUUIDTDirectory::GetUUID() const; Int_tTFile::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidTFile::IncrementFileCounter(); virtual voidTFile::IncrementProcessIDs(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTFile::IsArchive() const; Bool_tTFile::IsBinary() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTDirectory::IsFolder() const; virtual Bool_tTDirectoryFile::IsModified() const; Bool_tIsMySQL() const; Bool_tIsODBC() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOpen() const; Bool_tIsOracle() const; Bool_tTFile::IsRaw() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectoryFile::IsWritable() const; Bool_tTObject::IsZombie() const; virtual voidTFile::ls(Option_t* option = """") const; virtual voidMakeFree(Long64_t, Long64_t)",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:32330,Security,access,access,32330," on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Int_tfStmtCounter! count numbers of active statements; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringfTablesType! type, used in CREATE TABLE statements; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; Int_tfUseIndexes! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables; Bool_tfUseSuffixes! use suffixes in column names like fValue:Int_t or fObject:pointer; Int_tfUseTransactions! use transaction statements for writing data into the tables; TStringfUserName! user name, used to access objects from database; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:34364,Security,access,access,34364,"0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLFile(); default TSQLFile constructor. TSQLFile(const char* dbname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a moment TSQLFile does not support TTree objects and subdirectories. void StartLogFile(const char* fname); start logging of all SQL statements in specified file. void StopLogFile(); close logging file. Bool_t IsMySQL() const; checks, if MySQL database. Bool_t IsOracle() const; checks, if Oracle database. Bool_t IsODBC() const; checks, if ODBC driver used for database connection. void SetUseSuffixes(Bool_t on = kTRUE); enable/disable uasge of suffixes in columns names; can be changed before first object is saved into file. void SetArrayLimit(Int_t limit = 20); Defines maximum number of columns for array representation; If array size bigger than limit, array data will be converted to raw format; Thi",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:34544,Security,access,access,34544,"eadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLFile(); default TSQLFile constructor. TSQLFile(const char* dbname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a moment TSQLFile does not support TTree objects and subdirectories. void StartLogFile(const char* fname); start logging of all SQL statements in specified file. void StopLogFile(); close logging file. Bool_t IsMySQL() const; checks, if MySQL database. Bool_t IsOracle() const; checks, if Oracle database. Bool_t IsODBC() const; checks, if ODBC driver used for database connection. void SetUseSuffixes(Bool_t on = kTRUE); enable/disable uasge of suffixes in columns names; can be changed before first object is saved into file. void SetArrayLimit(Int_t limit = 20); Defines maximum number of columns for array representation; If array size bigger than limit, array data will be converted to raw format; This is usefull to prevent tables with very big number of columns; If limit==0, all arrays will be stored in raw format; If limit<0, ",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:37710,Security,access,access,37710,"This can be usesfull, when big number of objects should be stored in; data base and commitment required only if all operations were succesfull.; In that case in the end of all operations method Commit() should be; called. If operation on user-level is looks like not successfull,; method Rollback() will return database data and TSQLFile instance to; previous state.; In MySQL not all tables types support transaction mode of operation.; See SetTablesType() method for details . Bool_t Commit(); Commit transaction, started by StartTransaction() call.; Only after that call data will be written and visible on database side. Bool_t Rollback(); Rollback all operations, done after StartTransaction() call.; Database should return to initial state. void SetUseIndexes(Int_t use_type = kIndexesBasic); Specify usage of indexes for data tables; kIndexesNone = 0 - no indexes are used; kIndexesBasic = 1 - indexes used only for keys list and; objects list tables (default); kIndexesClass = 2 - index also created for every normal class table; kIndexesAll = 3 - index created for every table, including _streamer_ tables; Indexes in general should increase speed of access to objects data,; but they required more operations and more disk space on server side. const char* GetDataBaseName() const; Return name of data base on the host; For Oracle always return 0. void Close(Option_t* option = """"); Close a SQL file; For more comments see TFile::Close() function. ~TSQLFile(); destructor of TSQLFile object. void operator=(const TSQLFile& ); make private to exclude copy operator. Bool_t IsOpen() const; return kTRUE if file is opened and can be accessed. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; See TFile::Open() for details. TKey* CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); create SQL key, which will store object in data base. TKey* CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char*",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:38190,Security,access,accessed,38190,"atabase side. Bool_t Rollback(); Rollback all operations, done after StartTransaction() call.; Database should return to initial state. void SetUseIndexes(Int_t use_type = kIndexesBasic); Specify usage of indexes for data tables; kIndexesNone = 0 - no indexes are used; kIndexesBasic = 1 - indexes used only for keys list and; objects list tables (default); kIndexesClass = 2 - index also created for every normal class table; kIndexesAll = 3 - index created for every table, including _streamer_ tables; Indexes in general should increase speed of access to objects data,; but they required more operations and more disk space on server side. const char* GetDataBaseName() const; Return name of data base on the host; For Oracle always return 0. void Close(Option_t* option = """"); Close a SQL file; For more comments see TFile::Close() function. ~TSQLFile(); destructor of TSQLFile object. void operator=(const TSQLFile& ); make private to exclude copy operator. Bool_t IsOpen() const; return kTRUE if file is opened and can be accessed. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; See TFile::Open() for details. TKey* CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); create SQL key, which will store object in data base. TKey* CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); create SQL key, which will store object in data base. void WriteHeader(); Write file info like configurations, title, UUID and other. void WriteStreamerInfo(); Store all TVirtualStreamerInfo, used in file, in sql database. Bool_t WriteSpecialObject(Long64_t keyid, TObject* obj, const char* name, const char* title); write special kind of object like streamer infos or file itself; keys for that objects should exist in tables but not indicated in list of keys,; therefore users can not get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = ",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:38261,Security,access,access,38261,"ase should return to initial state. void SetUseIndexes(Int_t use_type = kIndexesBasic); Specify usage of indexes for data tables; kIndexesNone = 0 - no indexes are used; kIndexesBasic = 1 - indexes used only for keys list and; objects list tables (default); kIndexesClass = 2 - index also created for every normal class table; kIndexesAll = 3 - index created for every table, including _streamer_ tables; Indexes in general should increase speed of access to objects data,; but they required more operations and more disk space on server side. const char* GetDataBaseName() const; Return name of data base on the host; For Oracle always return 0. void Close(Option_t* option = """"); Close a SQL file; For more comments see TFile::Close() function. ~TSQLFile(); destructor of TSQLFile object. void operator=(const TSQLFile& ); make private to exclude copy operator. Bool_t IsOpen() const; return kTRUE if file is opened and can be accessed. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; See TFile::Open() for details. TKey* CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); create SQL key, which will store object in data base. TKey* CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); create SQL key, which will store object in data base. void WriteHeader(); Write file info like configurations, title, UUID and other. void WriteStreamerInfo(); Store all TVirtualStreamerInfo, used in file, in sql database. Bool_t WriteSpecialObject(Long64_t keyid, TObject* obj, const char* name, const char* title); write special kind of object like streamer infos or file itself; keys for that objects should exist in tables but not indicated in list of keys,; therefore users can not get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = 0); Read data of special kind of objects. TList* GetStreamerInfoList(); Read back streamer infos fr",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:41367,Security,access,access,41367,"TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); Checks if main keys table is existing. Bool_t IsWriteAccess(); Checkis, if lock is free in configuration tables. void SetLocking(Int_t mode); Set locking mode for current database. Int_t GetLocking(); Return current locking mode for that file. Bool_t IsReadAccess(); dummy, in future should check about read access to database. TSQLResult* SQLQuery(const char* cmd, Int_t flag = 0, Bool_t* res = 0); submits query to SQL server; if flag==0, result is not interesting and will be deleted; if flag==1, return result of submitted query; if flag==2, results is may be necessary for long time; Oracle plugin do not support working with several TSQLResult; objects, therefore explicit deep copy will be produced; If ok!=0, it will contains kTRUE is Query was successfull, otherwise kFALSE. Bool_t SQLCanStatement(); Test if DB support statement and number of open statements is not exceeded. TSQLStatement* SQLStatement(const char* cmd, Int_t bufsize = 1000); Produces SQL statement for currently conected DB server. void SQLDeleteStatement(TSQLStatement* stmt); delete statement and decrease counter. Bool_t SQLApplyCommands(TObjArray* cmds); supplies set of commands to server; Commands is stored as array of TObjString. Bool_t SQLTestTable(const char* tablename); Test, if table of specif",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:46053,Security,access,access,46053,"); Checks that objects table is exists; If not, table will be created; Returns maximum value for existing objects id. Bool_t SQLObjectInfo(Long64_t objid, TString& clname, Version_t& version); Read from objects table data for specified objectid. TObjArray* SQLObjectsInfo(Long64_t keyid); Produce array of TSQLObjectInfo objects for all objects, belong to that key; Array should be deleted by calling function afterwards. TSQLResult* GetNormalClassData(Long64_t objid, TSQLClassInfo* sqlinfo); Method return request result for specified objid from normal classtable. TSQLResult* GetNormalClassDataAll(Long64_t minobjid, Long64_t maxobjid, TSQLClassInfo* sqlinfo); return data for several objects from the range from normal class table. TSQLResult* GetBlobClassData(Long64_t objid, TSQLClassInfo* sqlinfo); Method return request results for specified objid from _streamer_ classtable. TSQLStatement* GetBlobClassDataStmt(Long64_t objid, TSQLClassInfo* sqlinfo); Method return request results for specified objid from _streamer_ classtable; Data returned in form of statement, where direct access to values are possible. Long64_t StoreObjectInTables(Long64_t keyid, const void* obj, const TClass* cl); Store object in database. Return stored object id or -1 if error. const char* SQLCompatibleType(Int_t typ) const; returns sql type name which is most closer to ROOT basic type; typ should be from TVirtualStreamerInfo:: constansts like TVirtualStreamerInfo::kInt. const char* SQLIntType() const; return SQL integer type. Long64_t DirCreateEntry(TDirectory* ); Create entry for directory in database. Int_t DirReadKeys(TDirectory* ); Read directory list of keys from database. void DirWriteKeys(TDirectory* ); Write directory keys list to database. void DirWriteHeader(TDirectory* ); Update dir header in the file. void Streamer(TBuffer& b); streamer for TSQLFile class; stores only data for TDirectory. Int_t SysOpen(const char* , Int_t , UInt_t ); Interface to basic system I/O routines, suppressed. {",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:5339,Testability,test,tested,5339," after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function to hime. By default only indexes for basic tables are created.; In most cases usage of indexes increase perfomance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method. There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be usufull for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straigthforward. Known problems and open questions.; 1) TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; 2) TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; 3) TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); 4) Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. Example how TSQLFile can be used:. example of a session saving data to a SQL data base. const char* dbname = ""mysql://host.domain:3306/dbname"";; const char* username = ""username"";; const char* userpass = ""userpass"";. // Clean data base and create primary tables; TSQLFile* f = new TSQLFile(dbname, ""recreate"", username, userpass);; // Write with",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:20943,Testability,Test,TestBit,20943,"l voidTDirectoryFile::SetSeekDir(Long64_t v); voidSetTablesType(const char* table_type); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseIndexes(Int_t use_type = kIndexesBasic); voidSetUseSuffixes(Bool_t on = kTRUE); voidSetUseTransactions(Int_t mode = kTransactionsAuto); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tSizeof() const; voidSkipArrayLimit(); voidStartLogFile(const char* fname)MENU ; Bool_tStartTransaction(); voidStopLogFile()MENU ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUseCache(Int_t = 10, Int_t = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* = 0, Int_t = 0, Int_t = 0); virtual Int_tWrite(const char* = 0, Int_t = 0, Int_t = 0) const; virtual Bool_tWriteBuffer(const char*, Int_t); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidWriteFree(); virtual voidWriteHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual UShort_tTFile::WriteProcessID(TProcessID* pid); virtual voidWriteStr",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:20982,Testability,Test,TestBits,20982,"_t v); voidSetTablesType(const char* table_type); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseIndexes(Int_t use_type = kIndexesBasic); voidSetUseSuffixes(Bool_t on = kTRUE); voidSetUseTransactions(Int_t mode = kTransactionsAuto); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tSizeof() const; voidSkipArrayLimit(); voidStartLogFile(const char* fname)MENU ; Bool_tStartTransaction(); voidStopLogFile()MENU ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUseCache(Int_t = 10, Int_t = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* = 0, Int_t = 0, Int_t = 0); virtual Int_tWrite(const char* = 0, Int_t = 0, Int_t = 0) const; virtual Bool_tWriteBuffer(const char*, Int_t); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidWriteFree(); virtual voidWriteHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual UShort_tTFile::WriteProcessID(TProcessID* pid); virtual voidWriteStreamerInfo(); virtual Int_tTDirectoryFile",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:29757,Testability,log,log,29757,"ssIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tfIdsTableExists! indicate if IdsTable exists; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; ofstream*fLogFile! log file with SQL statements; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; Int_tfModifyCounter! indicates how many changes was done with database tables; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; const char**fOtherTypes! pointer on list of other SQL types like TEXT or blob; TStrin",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:34792,Testability,log,logging,34792,"har* dbname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a moment TSQLFile does not support TTree objects and subdirectories. void StartLogFile(const char* fname); start logging of all SQL statements in specified file. void StopLogFile(); close logging file. Bool_t IsMySQL() const; checks, if MySQL database. Bool_t IsOracle() const; checks, if Oracle database. Bool_t IsODBC() const; checks, if ODBC driver used for database connection. void SetUseSuffixes(Bool_t on = kTRUE); enable/disable uasge of suffixes in columns names; can be changed before first object is saved into file. void SetArrayLimit(Int_t limit = 20); Defines maximum number of columns for array representation; If array size bigger than limit, array data will be converted to raw format; This is usefull to prevent tables with very big number of columns; If limit==0, all arrays will be stored in raw format; If limit<0, all array values will be stored in column form; Default value is 21. void SetTablesType(const char* table_type); Defines tables type, which is used in CREATE TABLE statements; Now is only used for MySQL database, where following types are supported:; ""BDB"", ""HEAP"", ""ISAM"", ""Inno",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:34867,Testability,log,logging,34867,"const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a moment TSQLFile does not support TTree objects and subdirectories. void StartLogFile(const char* fname); start logging of all SQL statements in specified file. void StopLogFile(); close logging file. Bool_t IsMySQL() const; checks, if MySQL database. Bool_t IsOracle() const; checks, if Oracle database. Bool_t IsODBC() const; checks, if ODBC driver used for database connection. void SetUseSuffixes(Bool_t on = kTRUE); enable/disable uasge of suffixes in columns names; can be changed before first object is saved into file. void SetArrayLimit(Int_t limit = 20); Defines maximum number of columns for array representation; If array size bigger than limit, array data will be converted to raw format; This is usefull to prevent tables with very big number of columns; If limit==0, all arrays will be stored in raw format; If limit<0, all array values will be stored in column form; Default value is 21. void SetTablesType(const char* table_type); Defines tables type, which is used in CREATE TABLE statements; Now is only used for MySQL database, where following types are supported:; ""BDB"", ""HEAP"", ""ISAM"", ""InnoDB"", ""MERGE"", ""MRG_MYISAM"", ""MYISAM""; Default for TSQLFile is ""Inn",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:41869,Testability,Test,Test,41869,"les, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); Checks if main keys table is existing. Bool_t IsWriteAccess(); Checkis, if lock is free in configuration tables. void SetLocking(Int_t mode); Set locking mode for current database. Int_t GetLocking(); Return current locking mode for that file. Bool_t IsReadAccess(); dummy, in future should check about read access to database. TSQLResult* SQLQuery(const char* cmd, Int_t flag = 0, Bool_t* res = 0); submits query to SQL server; if flag==0, result is not interesting and will be deleted; if flag==1, return result of submitted query; if flag==2, results is may be necessary for long time; Oracle plugin do not support working with several TSQLResult; objects, therefore explicit deep copy will be produced; If ok!=0, it will contains kTRUE is Query was successfull, otherwise kFALSE. Bool_t SQLCanStatement(); Test if DB support statement and number of open statements is not exceeded. TSQLStatement* SQLStatement(const char* cmd, Int_t bufsize = 1000); Produces SQL statement for currently conected DB server. void SQLDeleteStatement(TSQLStatement* stmt); delete statement and decrease counter. Bool_t SQLApplyCommands(TObjArray* cmds); supplies set of commands to server; Commands is stored as array of TObjString. Bool_t SQLTestTable(const char* tablename); Test, if table of specified name exists. Long64_t SQLMaximumValue(const char* tablename, const char* columnname); Returns maximum value, found in specified columnname of table tablename; Column type should be numeric. void SQLDeleteAllTables(); Delete all tables in database. Bool_t SQLStartTransaction(); Start SQL transaction. Bool_t SQLCommit(); Commit SQL transaction. Bool_t SQLRollback(); Rollback all SQL operations, done after start transaction. Int_t SQLMaxIdentifierLength(); returns maximum allowed length of identifiers. void DeleteKeyFromDB(Long64_t keyid); re",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:42320,Testability,Test,Test,42320,"ccess(); dummy, in future should check about read access to database. TSQLResult* SQLQuery(const char* cmd, Int_t flag = 0, Bool_t* res = 0); submits query to SQL server; if flag==0, result is not interesting and will be deleted; if flag==1, return result of submitted query; if flag==2, results is may be necessary for long time; Oracle plugin do not support working with several TSQLResult; objects, therefore explicit deep copy will be produced; If ok!=0, it will contains kTRUE is Query was successfull, otherwise kFALSE. Bool_t SQLCanStatement(); Test if DB support statement and number of open statements is not exceeded. TSQLStatement* SQLStatement(const char* cmd, Int_t bufsize = 1000); Produces SQL statement for currently conected DB server. void SQLDeleteStatement(TSQLStatement* stmt); delete statement and decrease counter. Bool_t SQLApplyCommands(TObjArray* cmds); supplies set of commands to server; Commands is stored as array of TObjString. Bool_t SQLTestTable(const char* tablename); Test, if table of specified name exists. Long64_t SQLMaximumValue(const char* tablename, const char* columnname); Returns maximum value, found in specified columnname of table tablename; Column type should be numeric. void SQLDeleteAllTables(); Delete all tables in database. Bool_t SQLStartTransaction(); Start SQL transaction. Bool_t SQLCommit(); Commit SQL transaction. Bool_t SQLRollback(); Rollback all SQL operations, done after start transaction. Int_t SQLMaxIdentifierLength(); returns maximum allowed length of identifiers. void DeleteKeyFromDB(Long64_t keyid); remove key with specified id from keys table; also removes all objects data, related to this table. TKeySQL* FindSQLKey(TDirectory* dir, Long64_t keyid); Search for TKeySQL object with specified keyid. Bool_t WriteKeyData(TKeySQL* key); add entry into keys table. Bool_t UpdateKeyData(TKeySQL* key); updates (overwrites) key data in KeysTable. Long64_t DefineNextKeyId(); Returns next possible key identifier. TSQLClassInfo* Fi",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:43838,Testability,test,test,43838,"gth of identifiers. void DeleteKeyFromDB(Long64_t keyid); remove key with specified id from keys table; also removes all objects data, related to this table. TKeySQL* FindSQLKey(TDirectory* dir, Long64_t keyid); Search for TKeySQL object with specified keyid. Bool_t WriteKeyData(TKeySQL* key); add entry into keys table. Bool_t UpdateKeyData(TKeySQL* key); updates (overwrites) key data in KeysTable. Long64_t DefineNextKeyId(); Returns next possible key identifier. TSQLClassInfo* FindSQLClassInfo(const char* clname, Int_t version); return (if exists) TSQLClassInfo for specified class name and version. TSQLClassInfo* FindSQLClassInfo(const TClass* cl); return (if exists) TSQLClassInfo for specified class. TSQLClassInfo* RequestSQLClassInfo(const char* clname, Int_t version); search in database tables for specified class and return TSQLClassInfo object. TString DefineTableName(const char* clname, Int_t version, Bool_t rawtable); proposes table name for class. Bool_t HasTable(const char* name); test if table name exists. TSQLClassInfo* RequestSQLClassInfo(const TClass* cl); search in database tables for specified class and return TSQLClassInfo object. void ReadSQLClassInfos(); Read all class infos from IdsTable. void AddIdEntry(Long64_t tableid, Int_t subid, Int_t type, const char* name, const char* sqlname, const char* info); Add entry into IdsTable, where all tables names and columns names are listed. Bool_t CreateClassTable(TSQLClassInfo* sqlinfo, TObjArray* colinfos); Create normal class table if required. Bool_t CreateRawTable(TSQLClassInfo* sqlinfo); create the raw table. Bool_t VerifyLongStringTable(); Checks that table for big strings is exists; If not, will be created. TString CodeLongString(Long64_t objid, Int_t strid); produces id which will be placed in column instead of string itself. Int_t IsLongStringCode(Long64_t objid, const char* value); checks if this is long string code; returns 0, if not or string id. Bool_t GetLongString(Long64_t objid, Int_t strid,",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:1579,Usability,clear,clear,1579,"ASSNAME)_raw$(VERSION); For example: TAxis_ver8 or TList_raw5; Second kind of tables appears, when some of class members can not be converted to; normalized form or when class has custom streamer.; For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4; Most of memebers are stored in TH1_ver4 table columnwise, and only memeber:. Double_t* fBuffer; //[fBufferSize]. can not be represented as column while size of array is not known apriory.; Therefore, fBuffer will be written as list of values in TH1_raw4 table. All objects, stored in the DB, will be registered in table ""ObjectsTable"".; In this there are following columns:; ""key:id"" - key identifier to which belong object; ""obj:id"" - object identifier; ""Class"" - object class name; ""Version"" - object class version; Data in each ""ObjectsTable"" row uniqly identify, in which table; and which column object is stored. In normal situation all class data should be sorted columnwise.; Up to now following member are supported:; 1) Basic data types; Here is everything clear. Column SQL type will be as much as possible; close to the original type of value.; 2) Fixed array of basic data types; In this case n columns like fArr[0], fArr[1] and so on will be created.; If there is multidimensional array, names will be fArr2[1][2][1] and so on; 3) Parent class; In this case version of parent class is stored and; data of parent class will be stored with the same obj:id in corrspondent table.; There is a special case, when parent store nothing (this is for instance TQObject).; In that case just -1 is written to avoid any extra checks if table exist or not.; 4) Object as data member.; In that case object is saved in normal way to data base and column; will contain id of this object.; 5) Pointer on object; Same as before. In case if object was already stored, just its id; will be placed in the column. For NULL pointer 0 is used.; 6) TString; Now column with limited width like VARCAHR(255) in MySQL is used.; Later this wil",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:5030,Usability,simpl,simple,5030,"fault kIndexesBasic); Normally these functions should be called immidiately after TSQLFile constructor. When objects data written to database, by default START TRANSACTION/COMMIT; SQL commands are used before and after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function to hime. By default only indexes for basic tables are created.; In most cases usage of indexes increase perfomance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method. There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be usufull for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straigthforward. Known problems and open questions.; 1) TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; 2) TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; 3) TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); 4) Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. Example how TSQLFile can be used:. example of a session saving data to a SQL data base. const char* dbname = ""mysql://host.domain:330",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLFile.html:8095,Usability,Clear,Clear,8095,"bname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); virtual~TSQLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; Bool_tCommit(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtu",MatchSource.WIKI,root/html532/TSQLFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLFile.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:1331,Availability,Error,Error,1331," TSQLMonitoringWriter(const char* serv, const char* user, const char* pass, const char* table); virtual~TSQLMonitoringWriter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:1460,Availability,error,error,1460," char* user, const char* pass, const char* table); virtual~TSQLMonitoringWriter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:1544,Availability,error,error,1544,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:6840,Deployability,toggle,toggle,6840,"le(); virtual voidVerbose(Bool_t onoff); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSQLMonitoringWriter(const TSQLMonitoringWriter&); TSQLMonitoringWriter&operator=(const TSQLMonitoringWriter&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TList*TVirtualMonitoringWriter::fTmpOpenPhasesTo store open phases when there is not yet an object. private:. TSQLServer*fDBSQL database where to write; Long64_tfMaxBulkSizeMax packet size for insertions; TStringfTableSQL table name; Bool_tfVerboseVerbosity toggle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLMonitoringWriter(const TSQLMonitoringWriter& ). TSQLMonitoringWriter& operator=(const TSQLMonitoringWriter& ). TSQLMonitoringWriter(const char* serv, const char* user, const char* pass, const char* table). virtual ~TSQLMonitoringWriter(). Bool_t SendParameters(TList* values, const char* ). void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: J.F. Grosse-Oetringhaus, G.Ganis » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLMonitoring.h 40576 2011-08-12 10:33:08Z ganis $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:2468,Modifiability,Inherit,InheritsFrom,2468,"rtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:2534,Modifiability,Inherit,InheritsFrom,2534,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Pain",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:6862,Modifiability,Inherit,Inheritance,6862,"le(); virtual voidVerbose(Bool_t onoff); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSQLMonitoringWriter(const TSQLMonitoringWriter&); TSQLMonitoringWriter&operator=(const TSQLMonitoringWriter&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TList*TVirtualMonitoringWriter::fTmpOpenPhasesTo store open phases when there is not yet an object. private:. TSQLServer*fDBSQL database where to write; Long64_tfMaxBulkSizeMax packet size for insertions; TStringfTableSQL table name; Bool_tfVerboseVerbosity toggle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLMonitoringWriter(const TSQLMonitoringWriter& ). TSQLMonitoringWriter& operator=(const TSQLMonitoringWriter& ). TSQLMonitoringWriter(const char* serv, const char* user, const char* pass, const char* table). virtual ~TSQLMonitoringWriter(). Bool_t SendParameters(TList* values, const char* ). void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: J.F. Grosse-Oetringhaus, G.Ganis » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLMonitoring.h 40576 2011-08-12 10:33:08Z ganis $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:6875,Modifiability,Inherit,Inherited,6875,"le(); virtual voidVerbose(Bool_t onoff); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSQLMonitoringWriter(const TSQLMonitoringWriter&); TSQLMonitoringWriter&operator=(const TSQLMonitoringWriter&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TList*TVirtualMonitoringWriter::fTmpOpenPhasesTo store open phases when there is not yet an object. private:. TSQLServer*fDBSQL database where to write; Long64_tfMaxBulkSizeMax packet size for insertions; TStringfTableSQL table name; Bool_tfVerboseVerbosity toggle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLMonitoringWriter(const TSQLMonitoringWriter& ). TSQLMonitoringWriter& operator=(const TSQLMonitoringWriter& ). TSQLMonitoringWriter(const char* serv, const char* user, const char* pass, const char* table). virtual ~TSQLMonitoringWriter(). Bool_t SendParameters(TList* values, const char* ). void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: J.F. Grosse-Oetringhaus, G.Ganis » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLMonitoring.h 40576 2011-08-12 10:33:08Z ganis $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:2358,Security,Hash,Hash,2358,"st char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:5563,Testability,Test,TestBit,5563,"TVirtualMonitoringWriter::SendFileCloseEvent(TFile*); virtual Bool_tTVirtualMonitoringWriter::SendFileOpenProgress(TFile*, TList*, const char*, Bool_t = kFALSE); virtual Bool_tTVirtualMonitoringWriter::SendFileReadProgress(TFile*); virtual Bool_tTVirtualMonitoringWriter::SendFileWriteProgress(TFile*); virtual Bool_tTVirtualMonitoringWriter::SendInfoDescription(const char*); virtual Bool_tTVirtualMonitoringWriter::SendInfoStatus(const char*); virtual Bool_tTVirtualMonitoringWriter::SendInfoTime(); virtual Bool_tTVirtualMonitoringWriter::SendInfoUser(const char* = 0); virtual Bool_tSendParameters(TList* values, const char*); virtual Bool_tTVirtualMonitoringWriter::SendProcessingProgress(Double_t, Double_t, Bool_t = kFALSE); virtual Bool_tTVirtualMonitoringWriter::SendProcessingStatus(const char*, Bool_t = kFALSE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTVirtualMonitoringWriter::SetLogLevel(const char* = ""WARNING""); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidVerbose(Bool_t onoff); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:5602,Testability,Test,TestBits,5602,"TVirtualMonitoringWriter::SendFileCloseEvent(TFile*); virtual Bool_tTVirtualMonitoringWriter::SendFileOpenProgress(TFile*, TList*, const char*, Bool_t = kFALSE); virtual Bool_tTVirtualMonitoringWriter::SendFileReadProgress(TFile*); virtual Bool_tTVirtualMonitoringWriter::SendFileWriteProgress(TFile*); virtual Bool_tTVirtualMonitoringWriter::SendInfoDescription(const char*); virtual Bool_tTVirtualMonitoringWriter::SendInfoStatus(const char*); virtual Bool_tTVirtualMonitoringWriter::SendInfoTime(); virtual Bool_tTVirtualMonitoringWriter::SendInfoUser(const char* = 0); virtual Bool_tSendParameters(TList* values, const char*); virtual Bool_tTVirtualMonitoringWriter::SendProcessingProgress(Double_t, Double_t, Bool_t = kFALSE); virtual Bool_tTVirtualMonitoringWriter::SendProcessingStatus(const char*, Bool_t = kFALSE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTVirtualMonitoringWriter::SetLogLevel(const char* = ""WARNING""); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidVerbose(Bool_t onoff); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLMonitoringWriter.html:788,Usability,Clear,Clear,788," TSQLMonitoringWriter(const char* serv, const char* user, const char* pass, const char* table); virtual~TSQLMonitoringWriter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html532/TSQLMonitoringWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLMonitoringWriter.html
https://root.cern/root/html532/TSQLObjectData.html:1794,Availability,Error,Error,1794,"esult* classdata, TSQLRow* classrow, TSQLResult* blobdata, TSQLStatement* blobstmt); virtual~TSQLObjectData(); voidTObject::AbstractMethod(const char* method) const; voidAddUnpack(const char* tname, const char* value); voidAddUnpackInt(const char* tname, Int_t value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBlobPrefixName() const; const char*GetBlobTypeName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TSQLClassInfo*GetInfo() const; const char*GetLocatedField() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; virtual Option_t*TObject::GetOption() const; virtual const char",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:1923,Availability,error,error,1923,"actMethod(const char* method) const; voidAddUnpack(const char* tname, const char* value); voidAddUnpackInt(const char* tname, Int_t value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBlobPrefixName() const; const char*GetBlobTypeName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TSQLClassInfo*GetInfo() const; const char*GetLocatedField() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; virtual Bool_tTObject::Handl",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:2007,Availability,error,error,2007,"lue); voidAddUnpackInt(const char* tname, Int_t value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBlobPrefixName() const; const char*GetBlobTypeName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TSQLClassInfo*GetInfo() const; const char*GetLocatedField() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::In",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:5390,Availability,error,errormsg,5390,"se(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Bool_tPrepareForRawData(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidShiftToNextValue(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); Bool_tVerifyDataType(const char* tname, Bool_t errormsg = kTRUE); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:7723,Availability,error,errormsg,7723,"udes; Libraries. Function documentation; TSQLObjectData(); default contrsuctor. TSQLObjectData(TSQLClassInfo* sqlinfo, Long64_t objid, TSQLResult* classdata, TSQLRow* classrow, TSQLResult* blobdata, TSQLStatement* blobstmt); normal contrsuctor,. ~TSQLObjectData(); destructor of TSQLObjectData object. Int_t GetNumClassFields(); return number of columns in class table result. const char* GetClassFieldName(Int_t n); get name of class table column. Bool_t LocateColumn(const char* colname, Bool_t isblob = kFALSE); locate column of that name in results. Bool_t ShiftBlobRow(); shift cursor to next blob value. Bool_t ExtractBlobValues(); extract from curent blob row value and names identifiers. void AddUnpack(const char* tname, const char* value); add emulated data; this used to place version or TObject raw data, read from normal tables. void AddUnpackInt(const char* tname, Int_t value); emulate integer value in raw data. void ShiftToNextValue(); shift to next column or next row in blob data. Bool_t VerifyDataType(const char* tname, Bool_t errormsg = kTRUE); checks if data type corresponds to that stored in raw table. Bool_t PrepareForRawData(); prepare to read data from raw table. Long64_t GetObjId() const; { return fObjId; }. TSQLObjectData(). TSQLClassInfo* GetInfo() const; { return fInfo; }. Bool_t IsBlobData() const; { return fCurrentBlob || (fUnpack!=0); }. const char* GetValue() const; { return fLocatedValue; }. const char* GetLocatedField() const; { return fLocatedField; }. const char* GetBlobPrefixName() const; { return fBlobPrefixName; }. const char* GetBlobTypeName() const; { return fBlobTypeName; }. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLObjectData.h 34907 2010-08-20 17:51:15Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:3083,Modifiability,Inherit,InheritsFrom,3083,"rtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBlobPrefixName() const; const char*GetBlobTypeName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TSQLClassInfo*GetInfo() const; const char*GetLocatedField() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBlobData() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Bool_tLocateColumn(const char* colname, Bool_t isblob = kFALSE); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TO",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:3149,Modifiability,Inherit,InheritsFrom,3149,"onst; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBlobPrefixName() const; const char*GetBlobTypeName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TSQLClassInfo*GetInfo() const; const char*GetLocatedField() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBlobData() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Bool_tLocateColumn(const char* colname, Bool_t isblob = kFALSE); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator n",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:6639,Modifiability,Inherit,Inheritance,6639,"t. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExtractBlobValues(); const char*GetClassFieldName(Int_t n); Int_tGetNumClassFields(); voidTObject::MakeZombie(); Bool_tShiftBlobRow(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSQLResult*fBlobData!; const char*fBlobPrefixName! name prefix in current blob row; TSQLRow*fBlobRow!; TSQLStatement*fBlobStmt!; const char*fBlobTypeName! name type (without prefix) in current blob row; TSQLResult*fClassData!; TSQLRow*fClassRow!; Bool_tfCurrentBlob!; TSQLClassInfo*fInfo!; Int_tfLocatedColumn!; const char*fLocatedField!; const char*fLocatedValue!; Long64_tfObjId!; Bool_tfOwner!; TObjArray*fUnpack! . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLObjectData(); default contrsuctor. TSQLObjectData(TSQLClassInfo* sqlinfo, Long64_t objid, TSQLResult* classdata, TSQLRow* classrow, TSQLResult* blobdata, TSQLStatement* blobstmt); normal contrsuctor,. ~TSQLObjectData(); destructor of TSQLObjectData object. Int_t GetNumClassFields(); return number of columns in class table result. const char* GetClassFieldName(Int_t n); get name of class table column. Bool_t LocateColumn(const char* colname, Bool_t isblob = kFALSE); locate column of that name in results. Bool_t ShiftBlobRow(); shift cursor to next blob value. Bool_t ExtractBlobValues(); extract from curent blob row value and names identifiers. void AddUnpack(const char* tname, const char* value); add emulated data; this used to place version or TObject raw data, read from normal tables. void AddUnpackInt(const char* tname, Int_t value); emulate integer value in raw data. void ShiftToNextValue(); shift to next column or next row in b",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:6652,Modifiability,Inherit,Inherited,6652,"t. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExtractBlobValues(); const char*GetClassFieldName(Int_t n); Int_tGetNumClassFields(); voidTObject::MakeZombie(); Bool_tShiftBlobRow(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSQLResult*fBlobData!; const char*fBlobPrefixName! name prefix in current blob row; TSQLRow*fBlobRow!; TSQLStatement*fBlobStmt!; const char*fBlobTypeName! name type (without prefix) in current blob row; TSQLResult*fClassData!; TSQLRow*fClassRow!; Bool_tfCurrentBlob!; TSQLClassInfo*fInfo!; Int_tfLocatedColumn!; const char*fLocatedField!; const char*fLocatedValue!; Long64_tfObjId!; Bool_tfOwner!; TObjArray*fUnpack! . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLObjectData(); default contrsuctor. TSQLObjectData(TSQLClassInfo* sqlinfo, Long64_t objid, TSQLResult* classdata, TSQLRow* classrow, TSQLResult* blobdata, TSQLStatement* blobstmt); normal contrsuctor,. ~TSQLObjectData(); destructor of TSQLObjectData object. Int_t GetNumClassFields(); return number of columns in class table result. const char* GetClassFieldName(Int_t n); get name of class table column. Bool_t LocateColumn(const char* colname, Bool_t isblob = kFALSE); locate column of that name in results. Bool_t ShiftBlobRow(); shift cursor to next blob value. Bool_t ExtractBlobValues(); extract from curent blob row value and names identifiers. void AddUnpack(const char* tname, const char* value); add emulated data; this used to place version or TObject raw data, read from normal tables. void AddUnpackInt(const char* tname, Int_t value); emulate integer value in raw data. void ShiftToNextValue(); shift to next column or next row in b",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:2973,Security,Hash,Hash,2973,"thod, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBlobPrefixName() const; const char*GetBlobTypeName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TSQLClassInfo*GetInfo() const; const char*GetLocatedField() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBlobData() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Bool_tLocateColumn(const char* colname, Bool_t isblob = kFALSE); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:5238,Testability,Test,TestBit,5238,"se(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Bool_tPrepareForRawData(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidShiftToNextValue(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); Bool_tVerifyDataType(const char* tname, Bool_t errormsg = kTRUE); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:5277,Testability,Test,TestBits,5277,"se(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Bool_tPrepareForRawData(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidShiftToNextValue(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); Bool_tVerifyDataType(const char* tname, Bool_t errormsg = kTRUE); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectData.html:1254,Usability,Clear,Clear,1254," TSQLObjectData(); TSQLObjectData(const TSQLObjectData&); TSQLObjectData(TSQLClassInfo* sqlinfo, Long64_t objid, TSQLResult* classdata, TSQLRow* classrow, TSQLResult* blobdata, TSQLStatement* blobstmt); virtual~TSQLObjectData(); voidTObject::AbstractMethod(const char* method) const; voidAddUnpack(const char* tname, const char* value); voidAddUnpackInt(const char* tname, Int_t value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, I",MatchSource.WIKI,root/html532/TSQLObjectData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectData.html
https://root.cern/root/html532/TSQLObjectDataPool.html:1608,Availability,Error,Error,1608," TSQLObjectDataPool(); TSQLObjectDataPool(const TSQLObjectDataPool&); TSQLObjectDataPool(TSQLClassInfo* info, TSQLResult* data); virtual~TSQLObjectDataPool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::F",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:1737,Availability,error,error,1737,"ObjectDataPool(TSQLClassInfo* info, TSQLResult* data); virtual~TSQLObjectDataPool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSQLResult*GetClassData() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TSQLRow*GetObjectRow(Long64_t objid); static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLClassInfo*GetSqlInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(cons",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:1821,Availability,error,error,1821," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSQLResult*GetClassData() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TSQLRow*GetObjectRow(Long64_t objid); static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLClassInfo*GetSqlInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:2806,Modifiability,Inherit,InheritsFrom,2806,", Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSQLResult*GetClassData() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TSQLRow*GetObjectRow(Long64_t objid); static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLClassInfo*GetSqlInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:2872,Modifiability,Inherit,InheritsFrom,2872,", Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSQLResult*GetClassData() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TSQLRow*GetObjectRow(Long64_t objid); static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLClassInfo*GetSqlInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLObjectDataPool&oper",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:5875,Modifiability,Inherit,Inheritance,5875,"rtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSQLResult*fClassData! results with request to selected table; TSQLClassInfo*fInfo! classinfo, for which pool is created; Bool_tfIsMoreRows! indicates if class data has not yet read rows; TList*fRowsPool! pool of extrcted, but didnot used rows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLObjectDataPool(). TSQLObjectDataPool(TSQLClassInfo* info, TSQLResult* data). ~TSQLObjectDataPool(); Destructor of TSQLObjectDataPool class; Deletes not used rows and class data table. TSQLRow* GetObjectRow(Long64_t objid); Returns single sql row with object data for that class. TSQLObjectDataPool(). TSQLClassInfo* GetSqlInfo() const; { return fInfo; }. TSQLResult* GetClassData() const; { return fClassData; }. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLObjectData.h 34907 2010-08-20 17:51:15Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:5888,Modifiability,Inherit,Inherited,5888,"rtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSQLResult*fClassData! results with request to selected table; TSQLClassInfo*fInfo! classinfo, for which pool is created; Bool_tfIsMoreRows! indicates if class data has not yet read rows; TList*fRowsPool! pool of extrcted, but didnot used rows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLObjectDataPool(). TSQLObjectDataPool(TSQLClassInfo* info, TSQLResult* data). ~TSQLObjectDataPool(); Destructor of TSQLObjectDataPool class; Deletes not used rows and class data table. TSQLRow* GetObjectRow(Long64_t objid); Returns single sql row with object data for that class. TSQLObjectDataPool(). TSQLClassInfo* GetSqlInfo() const; { return fInfo; }. TSQLResult* GetClassData() const; { return fClassData; }. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLObjectData.h 34907 2010-08-20 17:51:15Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:514,Performance,optimiz,optimize,514,". TSQLObjectDataPool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » SQL; » TSQLObjectDataPool. class TSQLObjectDataPool: public TObject. TSQLObjectDataPool contains list (pool) of data from single class table; for differents objects, all belonging to the same key.; This is typical situation when list of objects stored as single key.; To optimize reading of such data, one query is submitted and results of that; query kept in TSQLObjectDataPool object. Function Members (Methods); public:. TSQLObjectDataPool(); TSQLObjectDataPool(const TSQLObjectDataPool&); TSQLObjectDataPool(TSQLClassInfo* info, TSQLResult* data); virtual~TSQLObjectDataPool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::F",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:2696,Security,Hash,Hash,2696,"ar* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSQLResult*GetClassData() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TSQLRow*GetObjectRow(Long64_t objid); static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLClassInfo*GetSqlInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:4828,Testability,Test,TestBit,4828," Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLObjectDataPool&operator=(const TSQLObjectDataPool&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:4867,Testability,Test,TestBits,4867," Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLObjectDataPool&operator=(const TSQLObjectDataPool&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectDataPool.html:1068,Usability,Clear,Clear,1068," TSQLObjectDataPool(); TSQLObjectDataPool(const TSQLObjectDataPool&); TSQLObjectDataPool(TSQLClassInfo* info, TSQLResult* data); virtual~TSQLObjectDataPool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::F",MatchSource.WIKI,root/html532/TSQLObjectDataPool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectDataPool.html
https://root.cern/root/html532/TSQLObjectInfo.html:1620,Availability,Error,Error,1620," TSQLObjectInfo(); TSQLObjectInfo(const TSQLObjectInfo&); TSQLObjectInfo(Long64_t objid, const char* classname, Version_t version); virtual~TSQLObjectInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObjec",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:1749,Availability,error,error,1749,"Long64_t objid, const char* classname, Version_t version); virtual~TSQLObjectInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetObjClassName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; Version_tGetObjVersion() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* met",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:1833,Availability,error,error,1833," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetObjClassName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; Version_tGetObjVersion() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* clas",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:2807,Modifiability,Inherit,InheritsFrom,2807,"ray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetObjClassName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; Version_tGetObjVersion() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:2873,Modifiability,Inherit,InheritsFrom,2873,"Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetObjClassName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; Version_tGetObjVersion() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLObjectInfo&operator",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:5677,Modifiability,Inherit,Inheritance,5677,"TObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassName; Long64_tfObjId; Version_tfVersion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLObjectInfo(). TSQLObjectInfo(Long64_t objid, const char* classname, Version_t version). ~TSQLObjectInfo(). TSQLObjectInfo(). Long64_t GetObjId() const; { return fObjId; }. const char* GetObjClassName() const; { return fClassName.Data(); }. Version_t GetObjVersion() const; { return fVersion; }. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLObjectData.h 34907 2010-08-20 17:51:15Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:5690,Modifiability,Inherit,Inherited,5690,"TObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassName; Long64_tfObjId; Version_tfVersion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLObjectInfo(). TSQLObjectInfo(Long64_t objid, const char* classname, Version_t version). ~TSQLObjectInfo(). TSQLObjectInfo(). Long64_t GetObjId() const; { return fObjId; }. const char* GetObjClassName() const; { return fClassName.Data(); }. Version_t GetObjVersion() const; { return fVersion; }. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLObjectData.h 34907 2010-08-20 17:51:15Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:2697,Security,Hash,Hash,2697,"te(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetObjClassName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; Version_tGetObjVersion() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:4821,Testability,Test,TestBit,4821,") const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLObjectInfo&operator=(const TSQLObjectInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:4860,Testability,Test,TestBits,4860,") const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLObjectInfo&operator=(const TSQLObjectInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLObjectInfo.html:1080,Usability,Clear,Clear,1080," TSQLObjectInfo(); TSQLObjectInfo(const TSQLObjectInfo&); TSQLObjectInfo(Long64_t objid, const char* classname, Version_t version); virtual~TSQLObjectInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObjec",MatchSource.WIKI,root/html532/TSQLObjectInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLObjectInfo.html
https://root.cern/root/html532/TSQLResult.html:599,Availability,avail,available,599,". TSQLResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLResult. class TSQLResult: public TObject. TSQLResult. Abstract base class defining interface to a SQL query result.; Objects of this class are created by TSQLServer methods. Related classes are TSQLServer and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:1480,Availability,Error,Error,1480," virtual~TSQLResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:1609,Availability,error,error,1609," virtual~TSQLResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:1693,Availability,error,error,1693,"ethod) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFieldCount(); virtual const char*GetFieldName(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetRowCount() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:330,Integrability,interface,interface,330,". TSQLResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLResult. class TSQLResult: public TObject. TSQLResult. Abstract base class defining interface to a SQL query result.; Objects of this class are created by TSQLServer methods. Related classes are TSQLServer and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:2683,Modifiability,Inherit,InheritsFrom,2683,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFieldCount(); virtual const char*GetFieldName(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetRowCount() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TSQLRow*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:2749,Modifiability,Inherit,InheritsFrom,2749,"_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFieldCount(); virtual const char*GetFieldName(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetRowCount() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TSQLRow*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp);",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:5555,Modifiability,Inherit,Inheritance,5555,"(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfRowCountnumber of rows in result. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TSQLResult(); { }. void Close(Option_t* option = """"). Int_t GetFieldCount(). const char * GetFieldName(Int_t field). Int_t GetRowCount() const; { return fRowCount; }. TSQLRow * Next(). » Author: Fons Rademakers 25/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLResult.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:5568,Modifiability,Inherit,Inherited,5568,"(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfRowCountnumber of rows in result. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TSQLResult(); { }. void Close(Option_t* option = """"). Int_t GetFieldCount(). const char * GetFieldName(Int_t field). Int_t GetRowCount() const; { return fRowCount; }. TSQLRow * Next(). » Author: Fons Rademakers 25/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLResult.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:2573,Security,Hash,Hash,2573,"ethod, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFieldCount(); virtual const char*GetFieldName(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetRowCount() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TSQLRow*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp);",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:4713,Testability,Test,TestBit,4713,"Object::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TSQLRow*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLResult&operator=(const TSQLResult&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:4752,Testability,Test,TestBits,4752,"Object::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TSQLRow*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLResult&operator=(const TSQLResult&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLResult.html:898,Usability,Clear,Clear,898," virtual~TSQLResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html532/TSQLResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLResult.html
https://root.cern/root/html532/TSQLRow.html:599,Availability,avail,available,599,". TSQLRow. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLRow. class TSQLRow: public TObject. TSQLRow. Abstract base class defining interface to a row of a SQL query; result. Objects of this class are created by TSQLResult methods. Related classes are TSQLServer and TSQLResult. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLRow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDraw",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:1477,Availability,Error,Error,1477," virtual~TSQLRow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDraw",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:1606,Availability,error,error,1606," virtual~TSQLRow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDraw",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:1690,Availability,error,error,1690,"ethod) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetField(Int_t field); virtual ULong_tGetFieldLength(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) c",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:318,Integrability,interface,interface,318,". TSQLRow. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLRow. class TSQLRow: public TObject. TSQLRow. Abstract base class defining interface to a row of a SQL query; result. Objects of this class are created by TSQLResult methods. Related classes are TSQLServer and TSQLResult. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLRow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDraw",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:2656,Modifiability,Inherit,InheritsFrom,2656,", TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetField(Int_t field); virtual ULong_tGetFieldLength(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:2722,Modifiability,Inherit,InheritsFrom,2722,"teEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetField(Int_t field); virtual ULong_tGetFieldLength(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLRow&operator=(const",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:5482,Modifiability,Inherit,Inheritance,5482,""") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TSQLRow(); { }. void Close(Option_t* option = """"). ULong_t GetFieldLength(Int_t field). const char * GetField(Int_t field). const char * operator[](Int_t field); { return GetField(field); }. » Author: Fons Rademakers 25/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLRow.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:5495,Modifiability,Inherit,Inherited,5495,""") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TSQLRow(); { }. void Close(Option_t* option = """"). ULong_t GetFieldLength(Int_t field). const char * GetField(Int_t field). const char * operator[](Int_t field); { return GetField(field); }. » Author: Fons Rademakers 25/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLRow.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:2546,Security,Hash,Hash,2546,"t::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetField(Int_t field); virtual ULong_tGetFieldLength(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:4692,Testability,Test,TestBit,4692,"::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLRow&operator=(const TSQLRow&); const char*operator[](Int_t field); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:4731,Testability,Test,TestBits,4731,"::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLRow&operator=(const TSQLRow&); const char*operator[](Int_t field); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLRow.html:895,Usability,Clear,Clear,895," virtual~TSQLRow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDraw",MatchSource.WIKI,root/html532/TSQLRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLRow.html
https://root.cern/root/html532/TSQLServer.html:879,Availability,avail,available,879,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:2006,Availability,Error,Error,2006,"::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_tExec(const char* sql); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSQLResult*GetColumns(const char* dbname, const char* table, const char* wild = 0); virtual TSQLResult*GetDataBases(const char* wild = 0); const char*GetDB() const; const char*GetDBMS() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetErrorCode() const; virtual const char*GetErrorMsg() const; static const char*GetFloatFormat(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:2172,Availability,error,error,2172,"t::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_tExec(const char* sql); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSQLResult*GetColumns(const char* dbname, const char* table, const char* wild = 0); virtual TSQLResult*GetDataBases(const char* wild = 0); const char*GetDB() const; const char*GetDBMS() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetErrorCode() const; virtual const char*GetErrorMsg() const; static const char*GetFloatFormat(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetMaxIdentifierLength(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObjec",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:2256,Availability,error,error,2256,"onst; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_tExec(const char* sql); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSQLResult*GetColumns(const char* dbname, const char* table, const char* wild = 0); virtual TSQLResult*GetDataBases(const char* wild = 0); const char*GetDB() const; const char*GetDBMS() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetErrorCode() const; virtual const char*GetErrorMsg() const; static const char*GetFloatFormat(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetMaxIdentifierLength(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() cons",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:7431,Availability,error,error,7431," msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum ESQLDataTypes { kSQL_NONE; kSQL_CHAR; kSQL_VARCHAR; kSQL_INTEGER; kSQL_FLOAT; kSQL_DOUBLE; kSQL_NUMERIC; kSQL_BINARY; kSQL_TIMESTAMP; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetE",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8415,Availability,error,error,8415," Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8458,Availability,error,error,8458,"rt to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wild",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8502,Availability,error,error,8502,"rt to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wild",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8569,Availability,error,error,8569,"rt to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wild",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8624,Availability,error,error,8624,"or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8663,Availability,error,errors,8663,"or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8741,Availability,error,error,8741,"or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8782,Availability,error,error,8782,"ocumentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8883,Availability,error,error,8883,"ould be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8930,Availability,error,error,8930,"ould be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:9135,Availability,Rollback,Rollback,9135,"the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetF",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:9155,Availability,ROLLBACK,ROLLBACK,9155,"the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetF",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:9561,Availability,avail,available,9561," own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetFloatFormat(const char* fmt = ""%e""); set printf format for float/double members, default ""%e"". const char* GetFloatFormat(); return current printf format for float/double members, default ""%e"". virtual ~TSQLServer(); { }. void Close(Option_t* option = """"). TSQLResult * Query(const char* sql). Bool_t HasStatement() const; { return kFALSE; }. Int_t SelectDataBase(const char* dbname). TSQLResult ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:11348,Availability,Ping,PingVerify,11348,"bj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetFloatFormat(const char* fmt = ""%e""); set printf format for float/double members, default ""%e"". const char* GetFloatFormat(); return current printf format for float/double members, default ""%e"". virtual ~TSQLServer(); { }. void Close(Option_t* option = """"). TSQLResult * Query(const char* sql). Bool_t HasStatement() const; { return kFALSE; }. Int_t SelectDataBase(const char* dbname). TSQLResult * GetDataBases(const char* wild = 0). TSQLResult * GetTables(const char* dbname, const char* wild = 0). TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0). Int_t GetMaxIdentifierLength(); { return 20; }. Int_t CreateDataBase(const char* dbname). Int_t DropDataBase(const char* dbname). Int_t Reload(). Int_t Shutdown(). const char * ServerInfo(). Bool_t IsConnected() const; { return fPort == -1 ? kFALSE : kTRUE; }. const char * GetDBMS() const; { return fType.Data(); }. const char * GetDB() const; { return fDB.Data(); }. const char * GetHost() const; { return fHost.Data(); }. Int_t GetPort() const; { return fPort; }. Bool_t IsError() const; { return GetErrorCode()!=0; }. void EnableErrorOutput(Bool_t on = kTRUE); { fErrorOut = on; }. Bool_t PingVerify(); { return kFALSE; }. Int_t Ping(); { return -9999; }. » Author: Fons Rademakers 25/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLServer.h 29321 2009-07-03 10:42:10Z brun $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:11388,Availability,Ping,Ping,11388,"bj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetFloatFormat(const char* fmt = ""%e""); set printf format for float/double members, default ""%e"". const char* GetFloatFormat(); return current printf format for float/double members, default ""%e"". virtual ~TSQLServer(); { }. void Close(Option_t* option = """"). TSQLResult * Query(const char* sql). Bool_t HasStatement() const; { return kFALSE; }. Int_t SelectDataBase(const char* dbname). TSQLResult * GetDataBases(const char* wild = 0). TSQLResult * GetTables(const char* dbname, const char* wild = 0). TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0). Int_t GetMaxIdentifierLength(); { return 20; }. Int_t CreateDataBase(const char* dbname). Int_t DropDataBase(const char* dbname). Int_t Reload(). Int_t Shutdown(). const char * ServerInfo(). Bool_t IsConnected() const; { return fPort == -1 ? kFALSE : kTRUE; }. const char * GetDBMS() const; { return fType.Data(); }. const char * GetDB() const; { return fDB.Data(); }. const char * GetHost() const; { return fHost.Data(); }. Int_t GetPort() const; { return fPort; }. Bool_t IsError() const; { return GetErrorCode()!=0; }. void EnableErrorOutput(Bool_t on = kTRUE); { fErrorOut = on; }. Bool_t PingVerify(); { return kFALSE; }. Int_t Ping(); { return -9999; }. » Author: Fons Rademakers 25/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLServer.h 29321 2009-07-03 10:42:10Z brun $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:9135,Deployability,Rollback,Rollback,9135,"the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetF",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:9155,Deployability,ROLLBACK,ROLLBACK,9155,"the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetF",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:330,Integrability,interface,interface,330,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:582,Integrability,Depend,Depending,582,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:690,Integrability,interface,interface,690,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:7382,Integrability,message,message,7382," msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum ESQLDataTypes { kSQL_NONE; kSQL_CHAR; kSQL_VARCHAR; kSQL_INTEGER; kSQL_FLOAT; kSQL_DOUBLE; kSQL_NUMERIC; kSQL_BINARY; kSQL_TIMESTAMP; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetE",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8112,Integrability,Depend,Depending,8112,"; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROL",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8630,Integrability,message,message,8630,"or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8747,Integrability,message,messages,8747,"or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8936,Integrability,message,message,8936,"ould be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:631,Modifiability,plugin,plugin,631,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:3802,Modifiability,Inherit,InheritsFrom,3802,"tDtorOnly(); virtual Int_tGetErrorCode() const; virtual const char*GetErrorMsg() const; static const char*GetFloatFormat(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetMaxIdentifierLength(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; virtual TSQLTableInfo*GetTableInfo(const char* tablename); virtual TSQLResult*GetTables(const char* dbname, const char* wild = 0); virtual TList*GetTablesList(const char* wild = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Bool_tHasStatement() const; virtual Bool_tHasTable(const char* tablename); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsConnected() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsError() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:3868,Modifiability,Inherit,InheritsFrom,3868,"*GetErrorMsg() const; static const char*GetFloatFormat(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetMaxIdentifierLength(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; virtual TSQLTableInfo*GetTableInfo(const char* tablename); virtual TSQLResult*GetTables(const char* dbname, const char* wild = 0); virtual TList*GetTablesList(const char* wild = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Bool_tHasStatement() const; virtual Bool_tHasTable(const char* tablename); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsConnected() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsError() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:7712,Modifiability,Inherit,Inheritance,7712," va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum ESQLDataTypes { kSQL_NONE; kSQL_CHAR; kSQL_VARCHAR; kSQL_INTEGER; kSQL_FLOAT; kSQL_DOUBLE; kSQL_NUMERIC; kSQL_BINARY; kSQL_TIMESTAMP; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its o",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:7725,Modifiability,Inherit,Inherited,7725," va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum ESQLDataTypes { kSQL_NONE; kSQL_CHAR; kSQL_VARCHAR; kSQL_INTEGER; kSQL_FLOAT; kSQL_DOUBLE; kSQL_NUMERIC; kSQL_BINARY; kSQL_TIMESTAMP; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its o",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8156,Modifiability,plugin,plugin,8156,"; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROL",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:655,Performance,load,loaded,655,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8197,Performance,load,loaded,8197,"; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROL",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:3609,Security,Hash,Hash,3609,"ar* wild = 0); virtual TSQLResult*GetDataBases(const char* wild = 0); const char*GetDB() const; const char*GetDBMS() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetErrorCode() const; virtual const char*GetErrorMsg() const; static const char*GetFloatFormat(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetMaxIdentifierLength(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; virtual TSQLTableInfo*GetTableInfo(const char* tablename); virtual TSQLResult*GetTables(const char* dbname, const char* wild = 0); virtual TList*GetTablesList(const char* wild = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Bool_tHasStatement() const; virtual Bool_tHasTable(const char* tablename); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsConnected() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsError() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8062,Security,password,password,8062,"p; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); subm",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:543,Testability,test,test,543,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:6266,Testability,Test,TestBit,6266," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLServer&operator=(const TSQLServer&); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tPing(); virtual Bool_tPingVerify(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TSQLResult*Query(const char* sql); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReload(); voidTObject::ResetBit(UInt_t f); virtual Bool_tRollback(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelectDataBase(const char* dbname); virtual const char*ServerInfo(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetFloatFormat(const char* fmt = ""%e""); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tShutdown(); virtual Bool_tStartTransaction(); virtual TSQLStatement*Statement(const char*, Int_t = 100); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:6305,Testability,Test,TestBits,6305," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLServer&operator=(const TSQLServer&); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tPing(); virtual Bool_tPingVerify(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TSQLResult*Query(const char* sql); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReload(); voidTObject::ResetBit(UInt_t f); virtual Bool_tRollback(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelectDataBase(const char* dbname); virtual const char*ServerInfo(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetFloatFormat(const char* fmt = ""%e""); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tShutdown(); virtual Bool_tStartTransaction(); virtual TSQLStatement*Statement(const char*, Int_t = 100); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:7964,Testability,test,test,7964,"kSQL_NUMERIC; kSQL_BINARY; kSQL_TIMESTAMP; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction()",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:9905,Testability,Test,Tests,9905,"splays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_t HasTable(const char* tablename); Tests if table of that name exists in database; Return kTRUE, if table exists. TSQLTableInfo* GetTableInfo(const char* tablename); Producec TSQLTableInfo object, which contain info about; table itself and each table column; Object must be deleted by user. void SetFloatFormat(const char* fmt = ""%e""); set printf format for float/double members, default ""%e"". const char* GetFloatFormat(); return current printf format for float/double members, default ""%e"". virtual ~TSQLServer(); { }. void Close(Option_t* option = """"). TSQLResult * Query(const char* sql). Bool_t HasStatement() const; { return kFALSE; }. Int_t SelectDataBase(const char* dbname). TSQLResult * GetDataBases(const char* wild = 0). TSQLResult * GetTables(const char* dbname, const char* wild = 0). TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0). Int_t GetMaxIdentifierLength(); { return 20; }. Int_t CreateDataBase(const char* dbname). Int_t DropDataBase(const char* dbname). Int_t Reload(). Int_t Shutdown(). const",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:1178,Usability,Clear,Clear,1178," virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLServer.html:8762,Usability,Clear,ClearError,8762,"ocumentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject",MatchSource.WIKI,root/html532/TSQLServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLServer.html
https://root.cern/root/html532/TSQLStatement.html:8805,Availability,avail,available,8805,"or time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLStatement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method,",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:9697,Availability,Error,Error,9697,,MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:9826,Availability,error,error,9826,,MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:9910,Availability,error,error,9910,"onst; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Bool_tGetBinary(Int_t, void*&, Long_t&); virtual Int_tGetBufferLength() const; virtual Bool_tGetDate(Int_t, Int_t&, Int_t&, Int_t&); TDatimeGetDatime(Int_t); virtual Bool_tGetDatime(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&); Int_tGetDay(Int_t); virtual Double_tGetDouble(Int_t); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetErrorCode() const; virtual const char*GetErrorMsg() const; virtual const char*GetFieldName(Int_t); Int_tGetHour(Int_t); virtual const char*TObject::GetIconName() const; virtual Int_tGetInt(Int_t); virtual Long_tGetLong(Int_t); virtual Long64_tGetLong64(Int_t); Int_tGetMinute(Int_t); Int_tGetMonth(Int_t); virtual const cha",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:15861,Availability,error,error,15861,"(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime obj",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16003,Availability,error,error,16003,"* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16047,Availability,error,error,16047,"* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16117,Availability,error,error,16117,"* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16172,Availability,error,error,16172,"size = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDa",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16211,Availability,error,errors,16211,"size = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDa",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16292,Availability,error,error,16292,"size = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDa",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16333,Availability,error,error,16333," const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for par",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16434,Availability,error,error,16434,"t char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for parameter (if applicable). Int_t GetMinute(Int_t ); return minutes value for parameter (if appl",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16478,Availability,error,error,16478,"t char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for parameter (if applicable). Int_t GetMinute(Int_t ); return minutes value for parameter (if appl",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:3862,Deployability,update,update,3862,"here is one limitation - once parameter set as integer via; SetInt(), for all other rows should be specified as integer. At the end,; TSQLStatement::Process() should be called. Here a small example:. // first, create statement; TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. for (int n=0;n<357;n++); if (stmt->NextIteration()) {; stmt->SetInt(0, 123);; stmt->SetUInt(1, n+10);; stmt->SetString(2, Form(""name %d"",n), 200);; stmt->SetString(3, Form(""value %d"", n+10), 200);; }. stmt->Process();; delete stmt;. Second argument in TSQLServer::Statement() method specifies depth of; of buffers, used to keep parameter values (100 in example). It is not; a limitation of rows number, which can be inserted with the statement.; When buffers are filled, they will be submitted to database and can be; reused again. This happens transparent to the user in NextIteration(); method. Oracle and some ODBC drivers support buffering of parameter values and,; as a result, bulk insert (update) operation. MySQL (native driver and; MyODBC 3) does not support such mode of operation, therefore adding; new rows will result in communication loop to database. One should also mention difference between Oracle and ODBC SQL syntax for; parameters. ODBC (and MySQL) uses question marks to specify position,; where parameters should be inserted (as shown in the example). Oracle uses; :1, :2 and so on marks for specify position of parameter 0, 1, and so on.; Therefore, similar to example query will look like:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (:1, :2, :3, :4)"", 100);. There is a possibility to set parameter value to NULL with SetNull() method.; If this method called for first iteration, before one should call other Set...; to identify actual parameter type, which will be used for parameter later. 3. Getting data from database. To request data from data base, SELECT statement shoul",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:6013,Energy Efficiency,allocate,allocate,6013,"buffers with TSQLStatement::StoreResult(); method. Information about selected fields (columns); can be obtained with GetNumFields() and GetFieldName() methods.; To recieve data for next result row, NextResultRow() method should be called.; Value from each column can be taken with the GetInt(), GetDouble(),; GetString() and other methods. There are no strict limitation which method should be used; to get column values. GetString() can be used as generic method,; which should always return correct result, but also convertion between most; basic data types are supported. For instance, if column contains integer; values, GetInt(), GetLong64(), GetDouble() and GetString() methods can be used.; If column has float point format, GetDouble() and GetString() methods can; be used without loss of precision while GetInt() or GetLong64() will return; integer part of the value. One also can test, if value is NULL with IsNull(); method. Buffer length, specified for statement in TSQLServer::Statement() call,; will also be used to allocate buffers for column values. Usage of these; buffers is transparent for users and does not limit number of rows,; which can be accessed with one statement. Example of select query:. stmt = serv->Statement(""SELECT * FROM TESTTABLE"", 100);; // process statement; if (stmt->Process()) {; // store result of statement in buffer; stmt->StoreResult();. // display info about selected field; cout << ""NumFields = "" << stmt->GetNumFields() << endl;; for (int n=0;n<stmt->GetNumFields();n++); cout << ""Field "" << n << "" = "" << stmt->GetFieldName(n) << endl;. // extract rows one after another; while (stmt->NextResultRow()) {; Double_t id1 = stmt->GetDouble(0);; UInt_t id2 = stmt->GetUInt(1);; const char* name1 = stmt->GetString(2);; const char* name2 = stmt->GetString(3);; cout << id1 << "" - "" << id2 << "" "" << name1 << "" "" << name2 << endl;; }; }. 4. Working with date/time parameters. Current implementation supports date, time, date&time and timestamp; data (all ti",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:937,Integrability,Depend,Depending,937,". TSQLStatement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLStatement. class TSQLStatement: public TObject. TSQLStatement. Abstract base class defining SQL statements, which can be submitted; in bulk to DB server. This is alternative to TSQLServer::Query() method, which allows only pure; text queries and pure text result in TSQLResult classes.; TSQLStatement is designed to support following features:; - usage of basic data type (like int or double) as parameters; in SQL statements; - bulk operation when inserting/updating/selecting data in data base; - uasge of basic data types when accessing result set of executed query. 1. Creation of statement. To create instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (10",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:7770,Integrability,interface,interface,7770,"const char* name1 = stmt->GetString(2);; const char* name2 = stmt->GetString(3);; cout << id1 << "" - "" << id2 << "" "" << name1 << "" "" << name2 << endl;; }; }. 4. Working with date/time parameters. Current implementation supports date, time, date&time and timestamp; data (all time intervals not supported yet). To set or get date/time values,; following methods should be used:; SetTime()/GetTime() - only time (hour:min:sec),; SetDate()/GetDate() - only date (year-month-day),; SetDatime()/GetDatime() - date and time; SetTimestamp()/GetTimestamp() - timestamp with seconds fraction; For some of these methods TDatime type can be used as parameter / return value.; Be aware, that TDatime supports only dates after 1995-01-01.; There are also methods to get separately year, month, day, hour, minutes and seconds. Different SQL databases has different treatement of date/time types.; For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; ODBC interface provides access for time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      Thi",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:15812,Integrability,message,message,15812,"(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime obj",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16178,Integrability,message,message,16178,"size = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDa",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16298,Integrability,message,messages,16298,"size = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDa",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16484,Integrability,message,message,16484,"t char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for parameter (if applicable). Int_t GetMinute(Int_t ); return minutes value for parameter (if appl",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:8305,Modifiability,plugin,plugins,8305,"amp with seconds fraction; For some of these methods TDatime type can be used as parameter / return value.; Be aware, that TDatime supports only dates after 1995-01-01.; There are also methods to get separately year, month, day, hour, minutes and seconds. Different SQL databases has different treatement of date/time types.; For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; ODBC interface provides access for time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLStatement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidT",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:11780,Modifiability,Inherit,InheritsFrom,11780," virtual Long_tGetLong(Int_t); virtual Long64_tGetLong64(Int_t); Int_tGetMinute(Int_t); Int_tGetMonth(Int_t); virtual const char*TObject::GetName() const; virtual Int_tGetNumAffectedRows(); virtual Int_tGetNumFields(); virtual Int_tGetNumParameters(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSecond(Int_t); virtual const char*GetString(Int_t); virtual Bool_tGetTime(Int_t, Int_t&, Int_t&, Int_t&); TDatimeGetTimestamp(Int_t); virtual Bool_tGetTimestamp(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&); virtual const char*TObject::GetTitle() const; virtual UInt_tGetUInt(Int_t); virtual ULong64_tGetULong64(Int_t); virtual UInt_tTObject::GetUniqueID() const; Int_tGetYear(Int_t); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsError() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsNull(Int_t); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNextIteration(); virtual Bool_tNextResultRow(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::o",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:11846,Modifiability,Inherit,InheritsFrom,11846,"nt_tGetMinute(Int_t); Int_tGetMonth(Int_t); virtual const char*TObject::GetName() const; virtual Int_tGetNumAffectedRows(); virtual Int_tGetNumFields(); virtual Int_tGetNumParameters(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSecond(Int_t); virtual const char*GetString(Int_t); virtual Bool_tGetTime(Int_t, Int_t&, Int_t&, Int_t&); TDatimeGetTimestamp(Int_t); virtual Bool_tGetTimestamp(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&); virtual const char*TObject::GetTitle() const; virtual UInt_tGetUInt(Int_t); virtual ULong64_tGetULong64(Int_t); virtual UInt_tTObject::GetUniqueID() const; Int_tGetYear(Int_t); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsError() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsNull(Int_t); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNextIteration(); virtual Bool_tNextResultRow(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:15890,Modifiability,Inherit,Inheritance,15890,"Bits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatim",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:15903,Modifiability,Inherit,Inherited,15903,"Bits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatim",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:780,Security,access,accessing,780,". TSQLStatement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLStatement. class TSQLStatement: public TObject. TSQLStatement. Abstract base class defining SQL statements, which can be submitted; in bulk to DB server. This is alternative to TSQLServer::Query() method, which allows only pure; text queries and pure text result in TSQLResult classes.; TSQLStatement is designed to support following features:; - usage of basic data type (like int or double) as parameters; in SQL statements; - bulk operation when inserting/updating/selecting data in data base; - uasge of basic data types when accessing result set of executed query. 1. Creation of statement. To create instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (10",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:6147,Security,access,accessed,6147,"s() and GetFieldName() methods.; To recieve data for next result row, NextResultRow() method should be called.; Value from each column can be taken with the GetInt(), GetDouble(),; GetString() and other methods. There are no strict limitation which method should be used; to get column values. GetString() can be used as generic method,; which should always return correct result, but also convertion between most; basic data types are supported. For instance, if column contains integer; values, GetInt(), GetLong64(), GetDouble() and GetString() methods can be used.; If column has float point format, GetDouble() and GetString() methods can; be used without loss of precision while GetInt() or GetLong64() will return; integer part of the value. One also can test, if value is NULL with IsNull(); method. Buffer length, specified for statement in TSQLServer::Statement() call,; will also be used to allocate buffers for column values. Usage of these; buffers is transparent for users and does not limit number of rows,; which can be accessed with one statement. Example of select query:. stmt = serv->Statement(""SELECT * FROM TESTTABLE"", 100);; // process statement; if (stmt->Process()) {; // store result of statement in buffer; stmt->StoreResult();. // display info about selected field; cout << ""NumFields = "" << stmt->GetNumFields() << endl;; for (int n=0;n<stmt->GetNumFields();n++); cout << ""Field "" << n << "" = "" << stmt->GetFieldName(n) << endl;. // extract rows one after another; while (stmt->NextResultRow()) {; Double_t id1 = stmt->GetDouble(0);; UInt_t id2 = stmt->GetUInt(1);; const char* name1 = stmt->GetString(2);; const char* name2 = stmt->GetString(3);; cout << id1 << "" - "" << id2 << "" "" << name1 << "" "" << name2 << endl;; }; }. 4. Working with date/time parameters. Current implementation supports date, time, date&time and timestamp; data (all time intervals not supported yet). To set or get date/time values,; following methods should be used:; SetTime()/GetTime() - only t",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:7789,Security,access,access,7789,"const char* name1 = stmt->GetString(2);; const char* name2 = stmt->GetString(3);; cout << id1 << "" - "" << id2 << "" "" << name1 << "" "" << name2 << endl;; }; }. 4. Working with date/time parameters. Current implementation supports date, time, date&time and timestamp; data (all time intervals not supported yet). To set or get date/time values,; following methods should be used:; SetTime()/GetTime() - only time (hour:min:sec),; SetDate()/GetDate() - only date (year-month-day),; SetDatime()/GetDatime() - date and time; SetTimestamp()/GetTimestamp() - timestamp with seconds fraction; For some of these methods TDatime type can be used as parameter / return value.; Be aware, that TDatime supports only dates after 1995-01-01.; There are also methods to get separately year, month, day, hour, minutes and seconds. Different SQL databases has different treatement of date/time types.; For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; ODBC interface provides access for time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      Thi",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:7873,Security,access,access,7873,"}; }. 4. Working with date/time parameters. Current implementation supports date, time, date&time and timestamp; data (all time intervals not supported yet). To set or get date/time values,; following methods should be used:; SetTime()/GetTime() - only time (hour:min:sec),; SetDate()/GetDate() - only date (year-month-day),; SetDatime()/GetDatime() - date and time; SetTimestamp()/GetTimestamp() - timestamp with seconds fraction; For some of these methods TDatime type can be used as parameter / return value.; Be aware, that TDatime supports only dates after 1995-01-01.; There are also methods to get separately year, month, day, hour, minutes and seconds. Different SQL databases has different treatement of date/time types.; For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; ODBC interface provides access for time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLStateme",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:7974,Security,access,access,7974," timestamp; data (all time intervals not supported yet). To set or get date/time values,; following methods should be used:; SetTime()/GetTime() - only time (hour:min:sec),; SetDate()/GetDate() - only date (year-month-day),; SetDatime()/GetDatime() - date and time; SetTimestamp()/GetTimestamp() - timestamp with seconds fraction; For some of these methods TDatime type can be used as parameter / return value.; Be aware, that TDatime supports only dates after 1995-01-01.; There are also methods to get separately year, month, day, hour, minutes and seconds. Different SQL databases has different treatement of date/time types.; For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; ODBC interface provides access for time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLStatement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* ",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:8431,Security,access,access,8431,"rately year, month, day, hour, minutes and seconds. Different SQL databases has different treatement of date/time types.; For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; ODBC interface provides access for time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLStatement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:11670,Security,Hash,Hash,11670,"ieldName(Int_t); Int_tGetHour(Int_t); virtual const char*TObject::GetIconName() const; virtual Int_tGetInt(Int_t); virtual Long_tGetLong(Int_t); virtual Long64_tGetLong64(Int_t); Int_tGetMinute(Int_t); Int_tGetMonth(Int_t); virtual const char*TObject::GetName() const; virtual Int_tGetNumAffectedRows(); virtual Int_tGetNumFields(); virtual Int_tGetNumParameters(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSecond(Int_t); virtual const char*GetString(Int_t); virtual Bool_tGetTime(Int_t, Int_t&, Int_t&, Int_t&); TDatimeGetTimestamp(Int_t); virtual Bool_tGetTimestamp(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&); virtual const char*TObject::GetTitle() const; virtual UInt_tGetUInt(Int_t); virtual ULong64_tGetULong64(Int_t); virtual UInt_tTObject::GetUniqueID() const; Int_tGetYear(Int_t); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsError() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsNull(Int_t); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNextIteration(); virtual Bool_tNextResultRow(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static void",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:1332,Testability,test,test,1332,"ure text result in TSQLResult classes.; TSQLStatement is designed to support following features:; - usage of basic data type (like int or double) as parameters; in SQL statements; - bulk operation when inserting/updating/selecting data in data base; - uasge of basic data types when accessing result set of executed query. 1. Creation of statement. To create instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be insert",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:1511,Testability,TEST,TESTTABLE,1511,"ure text result in TSQLResult classes.; TSQLStatement is designed to support following features:; - usage of basic data type (like int or double) as parameters; in SQL statements; - bulk operation when inserting/updating/selecting data in data base; - uasge of basic data types when accessing result set of executed query. 1. Creation of statement. To create instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be insert",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:1830,Testability,TEST,TESTTABLE,1830,"ate instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be inserted.; To specify values of parameters, SetInt(), SetDouble(), SetString() and other; methods of TSQLStatement class should be used. Before parameters values; can be specified, NextIteration() method of statement class should be called.; For each new row first, NextIteration() called, that parameters values are; specified. There is one limitation - once pa",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:1934,Testability,TEST,TESTTABLE,1934,"g of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be inserted.; To specify values of parameters, SetInt(), SetDouble(), SetString() and other; methods of TSQLStatement class should be used. Before parameters values; can be specified, NextIteration() method of statement class should be called.; For each new row first, NextIteration() called, that parameters values are; specified. There is one limitation - once parameter set as integer via; SetInt(), for all other rows should be specified as integer. At t",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:2357,Testability,TEST,TESTTABLE,2357,"eck if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be inserted.; To specify values of parameters, SetInt(), SetDouble(), SetString() and other; methods of TSQLStatement class should be used. Before parameters values; can be specified, NextIteration() method of statement class should be called.; For each new row first, NextIteration() called, that parameters values are; specified. There is one limitation - once parameter set as integer via; SetInt(), for all other rows should be specified as integer. At the end,; TSQLStatement::Process() should be called. Here a small example:. // first, create statement; TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. for (int n=0;n<357;n++); if (stmt->NextIteration()) {; stmt->SetInt(0, 123);; stmt->SetUInt(1, n+10);; stmt->SetString(2, Form(""name %d"",n), 200);; stmt->SetString(3, Form(""value %d"", n+10), 200);; ",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:3100,Testability,TEST,TESTTABLE,3100,"ication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be inserted.; To specify values of parameters, SetInt(), SetDouble(), SetString() and other; methods of TSQLStatement class should be used. Before parameters values; can be specified, NextIteration() method of statement class should be called.; For each new row first, NextIteration() called, that parameters values are; specified. There is one limitation - once parameter set as integer via; SetInt(), for all other rows should be specified as integer. At the end,; TSQLStatement::Process() should be called. Here a small example:. // first, create statement; TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. for (int n=0;n<357;n++); if (stmt->NextIteration()) {; stmt->SetInt(0, 123);; stmt->SetUInt(1, n+10);; stmt->SetString(2, Form(""name %d"",n), 200);; stmt->SetString(3, Form(""value %d"", n+10), 200);; }. stmt->Process();; delete stmt;. Second argument in TSQLServer::Statement() method specifies depth of; of buffers, used to keep parameter values (100 in example). It is not; a limitation of rows number, which can be inserted with the statement.; When buffers are filled, they will be submitted to database and can be; reused again. This happens transparent to the user in NextIteration(); method. Oracle and some ODBC drivers support buffering of parameter values and,; as a result, bulk insert (update) operation. MySQL (native driver and; MyODBC 3) does not support such mode of operation, therefore adding; new rows will result in communication loop to database. One should also mention difference between Oracle and ODBC SQ",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:4433,Testability,TEST,TESTTABLE,4433," method specifies depth of; of buffers, used to keep parameter values (100 in example). It is not; a limitation of rows number, which can be inserted with the statement.; When buffers are filled, they will be submitted to database and can be; reused again. This happens transparent to the user in NextIteration(); method. Oracle and some ODBC drivers support buffering of parameter values and,; as a result, bulk insert (update) operation. MySQL (native driver and; MyODBC 3) does not support such mode of operation, therefore adding; new rows will result in communication loop to database. One should also mention difference between Oracle and ODBC SQL syntax for; parameters. ODBC (and MySQL) uses question marks to specify position,; where parameters should be inserted (as shown in the example). Oracle uses; :1, :2 and so on marks for specify position of parameter 0, 1, and so on.; Therefore, similar to example query will look like:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (:1, :2, :3, :4)"", 100);. There is a possibility to set parameter value to NULL with SetNull() method.; If this method called for first iteration, before one should call other Set...; to identify actual parameter type, which will be used for parameter later. 3. Getting data from database. To request data from data base, SELECT statement should be used.; After SELECT statement is created, it must be processed; (with TSQLStatement::Process()) method and result of statement; should be stored in internal buffers with TSQLStatement::StoreResult(); method. Information about selected fields (columns); can be obtained with GetNumFields() and GetFieldName() methods.; To recieve data for next result row, NextResultRow() method should be called.; Value from each column can be taken with the GetInt(), GetDouble(),; GetString() and other methods. There are no strict limitation which method should be used; to get column values. GetString() can be used as generic me",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:5873,Testability,test,test,5873,"; (with TSQLStatement::Process()) method and result of statement; should be stored in internal buffers with TSQLStatement::StoreResult(); method. Information about selected fields (columns); can be obtained with GetNumFields() and GetFieldName() methods.; To recieve data for next result row, NextResultRow() method should be called.; Value from each column can be taken with the GetInt(), GetDouble(),; GetString() and other methods. There are no strict limitation which method should be used; to get column values. GetString() can be used as generic method,; which should always return correct result, but also convertion between most; basic data types are supported. For instance, if column contains integer; values, GetInt(), GetLong64(), GetDouble() and GetString() methods can be used.; If column has float point format, GetDouble() and GetString() methods can; be used without loss of precision while GetInt() or GetLong64() will return; integer part of the value. One also can test, if value is NULL with IsNull(); method. Buffer length, specified for statement in TSQLServer::Statement() call,; will also be used to allocate buffers for column values. Usage of these; buffers is transparent for users and does not limit number of rows,; which can be accessed with one statement. Example of select query:. stmt = serv->Statement(""SELECT * FROM TESTTABLE"", 100);; // process statement; if (stmt->Process()) {; // store result of statement in buffer; stmt->StoreResult();. // display info about selected field; cout << ""NumFields = "" << stmt->GetNumFields() << endl;; for (int n=0;n<stmt->GetNumFields();n++); cout << ""Field "" << n << "" = "" << stmt->GetFieldName(n) << endl;. // extract rows one after another; while (stmt->NextResultRow()) {; Double_t id1 = stmt->GetDouble(0);; UInt_t id2 = stmt->GetUInt(1);; const char* name1 = stmt->GetString(2);; const char* name2 = stmt->GetString(3);; cout << id1 << "" - "" << id2 << "" "" << name1 << "" "" << name2 << endl;; }; }. 4. Working with date/time",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:6240,Testability,TEST,TESTTABLE,6240,"uble(),; GetString() and other methods. There are no strict limitation which method should be used; to get column values. GetString() can be used as generic method,; which should always return correct result, but also convertion between most; basic data types are supported. For instance, if column contains integer; values, GetInt(), GetLong64(), GetDouble() and GetString() methods can be used.; If column has float point format, GetDouble() and GetString() methods can; be used without loss of precision while GetInt() or GetLong64() will return; integer part of the value. One also can test, if value is NULL with IsNull(); method. Buffer length, specified for statement in TSQLServer::Statement() call,; will also be used to allocate buffers for column values. Usage of these; buffers is transparent for users and does not limit number of rows,; which can be accessed with one statement. Example of select query:. stmt = serv->Statement(""SELECT * FROM TESTTABLE"", 100);; // process statement; if (stmt->Process()) {; // store result of statement in buffer; stmt->StoreResult();. // display info about selected field; cout << ""NumFields = "" << stmt->GetNumFields() << endl;; for (int n=0;n<stmt->GetNumFields();n++); cout << ""Field "" << n << "" = "" << stmt->GetFieldName(n) << endl;. // extract rows one after another; while (stmt->NextResultRow()) {; Double_t id1 = stmt->GetDouble(0);; UInt_t id2 = stmt->GetUInt(1);; const char* name1 = stmt->GetString(2);; const char* name2 = stmt->GetString(3);; cout << id1 << "" - "" << id2 << "" "" << name1 << "" "" << name2 << endl;; }; }. 4. Working with date/time parameters. Current implementation supports date, time, date&time and timestamp; data (all time intervals not supported yet). To set or get date/time values,; following methods should be used:; SetTime()/GetTime() - only time (hour:min:sec),; SetDate()/GetDate() - only date (year-month-day),; SetDatime()/GetDatime() - date and time; SetTimestamp()/GetTimestamp() - timestamp with seconds frac",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:14872,Testability,Test,TestBit,14872,"iveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSetBinary(Int_t, void*, Long_t, Long_t = 0x1000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Bool_tSetDate(Int_t, const TDatime&); virtual Bool_tSetDate(Int_t, Int_t, Int_t, Int_t); Bool_tSetDatime(Int_t, const TDatime&); virtual Bool_tSetDatime(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t); virtual Bool_tSetDouble(Int_t, Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetInt(Int_t, Int_t); virtual Bool_tSetLong(Int_t, Long_t); virtual Bool_tSetLong64(Int_t, Long64_t); virtual Bool_tSetMaxFieldSize(Int_t, Long_t); virtual Bool_tSetNull(Int_t); static voidTObject::SetObjectStat(Bool_t stat); virtual Bool_tSetString(Int_t, const char*, Int_t = 256); Bool_tSetTime(Int_t, const TDatime&); virtual Bool_tSetTime(Int_t, Int_t, Int_t, Int_t); virtual voidSetTimeFormating(const char*); Bool_tSetTimestamp(Int_t, const TDatime&); virtual Bool_tSetTimestamp(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t = 0); virtual Bool_tSetUInt(Int_t, UInt_t); virtual Bool_tSetULong64(Int_t, ULong64_t); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tStoreResult(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:14911,Testability,Test,TestBits,14911,"iveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSetBinary(Int_t, void*, Long_t, Long_t = 0x1000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Bool_tSetDate(Int_t, const TDatime&); virtual Bool_tSetDate(Int_t, Int_t, Int_t, Int_t); Bool_tSetDatime(Int_t, const TDatime&); virtual Bool_tSetDatime(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t); virtual Bool_tSetDouble(Int_t, Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetInt(Int_t, Int_t); virtual Bool_tSetLong(Int_t, Long_t); virtual Bool_tSetLong64(Int_t, Long64_t); virtual Bool_tSetMaxFieldSize(Int_t, Long_t); virtual Bool_tSetNull(Int_t); static voidTObject::SetObjectStat(Bool_t stat); virtual Bool_tSetString(Int_t, const char*, Int_t = 256); Bool_tSetTime(Int_t, const TDatime&); virtual Bool_tSetTime(Int_t, Int_t, Int_t, Int_t); virtual voidSetTimeFormating(const char*); Bool_tSetTimestamp(Int_t, const TDatime&); virtual Bool_tSetTimestamp(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t = 0); virtual Bool_tSetUInt(Int_t, UInt_t); virtual Bool_tSetULong64(Int_t, ULong64_t); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tStoreResult(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:1881,Usability,simpl,simply,1881,"ate instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be inserted.; To specify values of parameters, SetInt(), SetDouble(), SetString() and other; methods of TSQLStatement class should be used. Before parameters values; can be specified, NextIteration() method of statement class should be called.; For each new row first, NextIteration() called, that parameters values are; specified. There is one limitation - once pa",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:9107,Usability,Clear,Clear,9107,,MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStatement.html:16313,Usability,Clear,ClearError,16313," const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for par",MatchSource.WIKI,root/html532/TSQLStatement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStatement.html
https://root.cern/root/html532/TSQLStructure.html:2180,Availability,Error,Error,2180,"geValueOnly(const char* value); voidChildArrayIndex(Int_t index, Int_t cnt = 1); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); virtual voidTObject::Copy(TObject& object) const; static TStringDefineElementColumnName(TStreamerElement* elem, TSQLFile* f, Int_t indx = 0); static Int_tDefineElementColumnType(TStreamerElement* elem, TSQLFile* f); Long64_tDefineObjectId(Bool_t recursive = kTRUE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayIndex() const; TSQLStructure*GetChild(Int_t n) const; Bool_tGetClassInfo(TClass*& cl, Version_t& version); TClass*GetCustomClass() const; Version_tGetCustomClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStreamerElement*GetElement() const; Int_tGetElementNumber() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TClass*GetObjectClass() const; TSQLObjectData*GetObjectData(Bool_t search",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:2309,Availability,error,error,2309,"t::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); virtual voidTObject::Copy(TObject& object) const; static TStringDefineElementColumnName(TStreamerElement* elem, TSQLFile* f, Int_t indx = 0); static Int_tDefineElementColumnType(TStreamerElement* elem, TSQLFile* f); Long64_tDefineObjectId(Bool_t recursive = kTRUE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayIndex() const; TSQLStructure*GetChild(Int_t n) const; Bool_tGetClassInfo(TClass*& cl, Version_t& version); TClass*GetCustomClass() const; Version_tGetCustomClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStreamerElement*GetElement() const; Int_tGetElementNumber() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TClass*GetObjectClass() const; TSQLObjectData*GetObjectData(Bool_t search = false); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:2393,Availability,error,error,2393,"bject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); virtual voidTObject::Copy(TObject& object) const; static TStringDefineElementColumnName(TStreamerElement* elem, TSQLFile* f, Int_t indx = 0); static Int_tDefineElementColumnType(TStreamerElement* elem, TSQLFile* f); Long64_tDefineObjectId(Bool_t recursive = kTRUE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayIndex() const; TSQLStructure*GetChild(Int_t n) const; Bool_tGetClassInfo(TClass*& cl, Version_t& version); TClass*GetCustomClass() const; Version_tGetCustomClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStreamerElement*GetElement() const; Int_tGetElementNumber() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TClass*GetObjectClass() const; TSQLObjectData*GetObjectData(Bool_t search = false); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLStructure*GetParent() const; Int_tGetRepeatCounter(",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:3883,Modifiability,Inherit,InheritsFrom,3883,"etDrawOption() const; static Long_tTObject::GetDtorOnly(); TStreamerElement*GetElement() const; Int_tGetElementNumber() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TClass*GetObjectClass() const; TSQLObjectData*GetObjectData(Bool_t search = false); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLStructure*GetParent() const; Int_tGetRepeatCounter() const; static const char*GetSimpleTypeName(Int_t typ); TStreamerInfo*GetStreamerInfo() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; const char*GetValueType() const; TClass*GetVersionClass() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsNumericType(Int_t typ); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Int_tLocateElementColumn(TSQLFile* f, TBufferSQL2* buf, TSQLObjectData* data); virtual voidTObject::ls(Option_t* option = """") const; static TStringMakeArrayIndex(TStreamerElement* elem, Int_t n); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumChilds() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:3949,Modifiability,Inherit,InheritsFrom,3949,"erElement*GetElement() const; Int_tGetElementNumber() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TClass*GetObjectClass() const; TSQLObjectData*GetObjectData(Bool_t search = false); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLStructure*GetParent() const; Int_tGetRepeatCounter() const; static const char*GetSimpleTypeName(Int_t typ); TStreamerInfo*GetStreamerInfo() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; const char*GetValueType() const; TClass*GetVersionClass() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsNumericType(Int_t typ); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Int_tLocateElementColumn(TSQLFile* f, TBufferSQL2* buf, TSQLObjectData* data); virtual voidTObject::ls(Option_t* option = """") const; static TStringMakeArrayIndex(TStreamerElement* elem, Int_t n); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumChilds() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp)",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:9015,Modifiability,Inherit,Inheritance,9015,"ry* reg); Bool_tStoreTString(TSqlRegistry* reg); Bool_tTryConvertObjectArray(TSqlRegistry* reg, TSqlRawBuffer* blobs). Data Members; public:. enum ESQLTypes { kSqlObject; kSqlPointer; kSqlVersion; kSqlStreamerInfo; kSqlClassStreamer; kSqlElement; kSqlValue; kSqlArray; kSqlObjectData; kSqlCustomClass; kSqlCustomElement; };; enum ESQLColumns { kColUnknown; kColSimple; kColSimpleArray; kColParent; kColObject; kColObjectArray; kColNormObject; kColNormObjectArray; kColObjectPtr; kColTString; kColRawData; };; enum ESQLIdType { kIdTable; kIdRawTable; kIdColumn; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfArrayIndex!; TObjArrayfChilds!; TSQLStructure*fParent!; const void*fPointer!; Int_tfRepeatCnt!; Int_tfType!; TStringfValue!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLStructure(); default constructor. ~TSQLStructure(); destructor. Int_t NumChilds() const; number of child structures. TSQLStructure* GetChild(Int_t n) const; return child structure of index n. void SetObjectRef(Long64_t refid, const TClass* cl); set structure type as kSqlObject. void SetObjectPointer(Long64_t ptrid); set structure type as kSqlPointer. void SetVersion(const TClass* cl, Int_t version = -100); set structure type as kSqlVersion. void SetClassStreamer(const TClass* cl); set structure type as kSqlClassStreamer. void SetStreamerInfo(const TStreamerInfo* info); set structure type as kSqlStreamerInfo. void SetStreamerElement(const TStreamerElement* elem, Int_t number); set structure type as kSqlElement. void SetCustomClass(const TClass* cl, Version_t version); set structure type as kSqlCustomClass. void SetCustomElement(TStreamerElement* elem); set structure type as kSqlCustomElement. void SetValue(const char* value, const c",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:9028,Modifiability,Inherit,Inherited,9028,"ry* reg); Bool_tStoreTString(TSqlRegistry* reg); Bool_tTryConvertObjectArray(TSqlRegistry* reg, TSqlRawBuffer* blobs). Data Members; public:. enum ESQLTypes { kSqlObject; kSqlPointer; kSqlVersion; kSqlStreamerInfo; kSqlClassStreamer; kSqlElement; kSqlValue; kSqlArray; kSqlObjectData; kSqlCustomClass; kSqlCustomElement; };; enum ESQLColumns { kColUnknown; kColSimple; kColSimpleArray; kColParent; kColObject; kColObjectArray; kColNormObject; kColNormObjectArray; kColObjectPtr; kColTString; kColRawData; };; enum ESQLIdType { kIdTable; kIdRawTable; kIdColumn; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfArrayIndex!; TObjArrayfChilds!; TSQLStructure*fParent!; const void*fPointer!; Int_tfRepeatCnt!; Int_tfType!; TStringfValue!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLStructure(); default constructor. ~TSQLStructure(); destructor. Int_t NumChilds() const; number of child structures. TSQLStructure* GetChild(Int_t n) const; return child structure of index n. void SetObjectRef(Long64_t refid, const TClass* cl); set structure type as kSqlObject. void SetObjectPointer(Long64_t ptrid); set structure type as kSqlPointer. void SetVersion(const TClass* cl, Int_t version = -100); set structure type as kSqlVersion. void SetClassStreamer(const TClass* cl); set structure type as kSqlClassStreamer. void SetStreamerInfo(const TStreamerInfo* info); set structure type as kSqlStreamerInfo. void SetStreamerElement(const TStreamerElement* elem, Int_t number); set structure type as kSqlElement. void SetCustomClass(const TClass* cl, Version_t version); set structure type as kSqlCustomClass. void SetCustomElement(TStreamerElement* elem); set structure type as kSqlCustomElement. void SetValue(const char* value, const c",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:12862,Performance,Perform,PerformConversion,12862," data. void AddObjectData(TSQLObjectData* objdata); add element with pointer to object data. TSQLObjectData* GetObjectData(Bool_t search = false); searchs for objects data. void Print(Option_t* option = """") const; print content of complete structure. void PrintLevel(Int_t level) const; print content of current structure. Bool_t IsNumericType(Int_t typ); defines if value is numeric and not requires quotes when writing. const char* GetSimpleTypeName(Int_t typ); provides name for basic types; used as suffix for column name or field suffix in raw table. Long64_t FindMaxObjectId(); define maximum reference id, used for objects. Bool_t ConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); Convert structure to sql statements; This function is called immidiately after TBufferSQL2 produces; this structure with object data; Should be only called for toplevel structure. void PerformConversion(TSqlRegistry* reg, TSqlRawBuffer* blobs, const char* topname, Bool_t useblob = kFALSE); perform conversion of structure to sql statements; first tries convert it to normal form; if fails, produces data for raw table. Bool_t StoreObject(TSqlRegistry* reg, Long64_t objid, TClass* cl, Bool_t registerobj = kTRUE); convert object data to sql statements; if normal (columnwise) representation is not possible,; complete object will be converted to raw format. Bool_t StoreObjectInNormalForm(TSqlRegistry* reg); this function verify object child elements and; calls transformation to class table. Bool_t StoreClassInNormalForm(TSqlRegistry* reg); produces data for complete class table; where not possible, raw data for some elements are created. TString MakeArrayIndex(TStreamerElement* elem, Int_t n); produce string with complete index like [1][2][0]. Bool_t StoreElementInNormalForm(TSqlRegistry* reg, TSQLTableData* columns); tries to store element data in column. Bool_t TryConvertObjectArray(TSqlRegistry* reg, TSqlRawBuffer* blobs); tries to write array of objects as lis of object refereneces",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:12968,Performance,perform,perform,12968," data. void AddObjectData(TSQLObjectData* objdata); add element with pointer to object data. TSQLObjectData* GetObjectData(Bool_t search = false); searchs for objects data. void Print(Option_t* option = """") const; print content of complete structure. void PrintLevel(Int_t level) const; print content of current structure. Bool_t IsNumericType(Int_t typ); defines if value is numeric and not requires quotes when writing. const char* GetSimpleTypeName(Int_t typ); provides name for basic types; used as suffix for column name or field suffix in raw table. Long64_t FindMaxObjectId(); define maximum reference id, used for objects. Bool_t ConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); Convert structure to sql statements; This function is called immidiately after TBufferSQL2 produces; this structure with object data; Should be only called for toplevel structure. void PerformConversion(TSqlRegistry* reg, TSqlRawBuffer* blobs, const char* topname, Bool_t useblob = kFALSE); perform conversion of structure to sql statements; first tries convert it to normal form; if fails, produces data for raw table. Bool_t StoreObject(TSqlRegistry* reg, Long64_t objid, TClass* cl, Bool_t registerobj = kTRUE); convert object data to sql statements; if normal (columnwise) representation is not possible,; complete object will be converted to raw format. Bool_t StoreObjectInNormalForm(TSqlRegistry* reg); this function verify object child elements and; calls transformation to class table. Bool_t StoreClassInNormalForm(TSqlRegistry* reg); produces data for complete class table; where not possible, raw data for some elements are created. TString MakeArrayIndex(TStreamerElement* elem, Int_t n); produce string with complete index like [1][2][0]. Bool_t StoreElementInNormalForm(TSqlRegistry* reg, TSQLTableData* columns); tries to store element data in column. Bool_t TryConvertObjectArray(TSqlRegistry* reg, TSqlRawBuffer* blobs); tries to write array of objects as lis of object refereneces",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:3773,Security,Hash,Hash,3773,"on_t& version); TClass*GetCustomClass() const; Version_tGetCustomClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStreamerElement*GetElement() const; Int_tGetElementNumber() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TClass*GetObjectClass() const; TSQLObjectData*GetObjectData(Bool_t search = false); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLStructure*GetParent() const; Int_tGetRepeatCounter() const; static const char*GetSimpleTypeName(Int_t typ); TStreamerInfo*GetStreamerInfo() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; const char*GetValueType() const; TClass*GetVersionClass() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsNumericType(Int_t typ); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Int_tLocateElementColumn(TSQLFile* f, TBufferSQL2* buf, TSQLObjectData* data); virtual voidTObject::ls(Option_t* option = """") const; static TStringMakeArrayIndex(TStreamerElement* elem, Int_t n); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); Int_tNumChilds() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delet",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:6764,Testability,Test,TestBit,6764,"al Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetArray(Int_t sz = -1); voidSetArrayIndex(Int_t indx, Int_t cnt = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClassStreamer(const TClass* cl); voidSetCustomClass(const TClass* cl, Version_t version); voidSetCustomElement(TStreamerElement* elem); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetObjectData(TSQLObjectData* objdata); voidSetObjectPointer(Long64_t ptrid); voidSetObjectRef(Long64_t refid, const TClass* cl); static voidTObject::SetObjectStat(Bool_t stat); voidSetParent(TSQLStructure* p); voidSetStreamerElement(const TStreamerElement* elem, Int_t number); voidSetStreamerInfo(const TStreamerInfo* info); voidSetType(Int_t typ); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValue(const char* value, const char* tname = 0); voidSetVersion(const TClass* cl, Int_t version = -100); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static Bool_tUnpackTObject(TSQLFile* f, TBufferSQL2* buf, TSQLObjectData* data, Long64_t objid, Int_t clversion); static Bool_tUnpackTString(TSQLFile* f, TBufferSQL2* buf, TSQLObjectData* data, Long64_t objid, Int_t clversion); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:6803,Testability,Test,TestBits,6803,"al Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetArray(Int_t sz = -1); voidSetArrayIndex(Int_t indx, Int_t cnt = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClassStreamer(const TClass* cl); voidSetCustomClass(const TClass* cl, Version_t version); voidSetCustomElement(TStreamerElement* elem); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetObjectData(TSQLObjectData* objdata); voidSetObjectPointer(Long64_t ptrid); voidSetObjectRef(Long64_t refid, const TClass* cl); static voidTObject::SetObjectStat(Bool_t stat); voidSetParent(TSQLStructure* p); voidSetStreamerElement(const TStreamerElement* elem, Int_t number); voidSetStreamerInfo(const TStreamerInfo* info); voidSetType(Int_t typ); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValue(const char* value, const char* tname = 0); voidSetVersion(const TClass* cl, Int_t version = -100); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static Bool_tUnpackTObject(TSQLFile* f, TBufferSQL2* buf, TSQLObjectData* data, Long64_t objid, Int_t clversion); static Bool_tUnpackTString(TSQLFile* f, TBufferSQL2* buf, TSQLObjectData* data, Long64_t objid, Int_t clversion); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLStructure.html:1355,Usability,Clear,Clear,1355," TSQLStructure(); virtual~TSQLStructure(); voidTObject::AbstractMethod(const char* method) const; voidAdd(TSQLStructure* child); voidAddObjectData(TSQLObjectData* objdata); static voidAddStrBrackets(TString& s, const char* quote); voidAddValue(const char* value, const char* tname = 0); voidAddVersion(const TClass* cl, Int_t version = -100); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidChangeValueOnly(const char* value); voidChildArrayIndex(Int_t index, Int_t cnt = 1); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); virtual voidTObject::Copy(TObject& object) const; static TStringDefineElementColumnName(TStreamerElement* elem, TSQLFile* f, Int_t indx = 0); static Int_tDefineElementColumnType(TStreamerElement* elem, TSQLFile* f); Long64_tDefineObjectId(Bool_t recursive = kTRUE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"",MatchSource.WIKI,root/html532/TSQLStructure.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLStructure.html
https://root.cern/root/html532/TSQLTableData.html:1739,Availability,Error,Error,1739,"bleData(TSQLFile* f = 0, TSQLClassInfo* info = 0); virtual~TSQLTableData(); voidTObject::AbstractMethod(const char* method) const; voidAddColumn(const char* name, Long64_t value); voidAddColumn(const char* name, const char* sqltype, const char* value, Bool_t numeric); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetColumn(Int_t n); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNumColumns(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer*",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:1868,Availability,error,error,1868,"; voidAddColumn(const char* name, Long64_t value); voidAddColumn(const char* name, const char* sqltype, const char* value, Bool_t numeric); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetColumn(Int_t n); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNumColumns(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:1952,Availability,error,error,1952,"onst char* sqltype, const char* value, Bool_t numeric); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetColumn(Int_t n); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNumColumns(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::Inhe",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:2885,Modifiability,Inherit,InheritsFrom,2885,"dTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetColumn(Int_t n); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNumColumns(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsNumeric(Int_t n); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:2951,Modifiability,Inherit,InheritsFrom,2951," = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetColumn(Int_t n); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNumColumns(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsNumeric(Int_t n); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:5999,Modifiability,Inherit,Inheritance,5999,"oidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TStringDefineSQLName(const char* fullname); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tHasSQLName(const char* sqlname); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArray*fColInfos! array with TSQLClassColumnInfo, used later for TSQLClassInfo; TObjArrayfColumns! collection of columns; TSQLFile*fFile!; TSQLClassInfo*fInfo!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLTableData(TSQLFile* f = 0, TSQLClassInfo* info = 0); normal constructor. ~TSQLTableData(); destructor. void AddColumn(const char* name, Long64_t value); Add INT column to list of columns. void AddColumn(const char* name, const char* sqltype, const char* value, Bool_t numeric); Add nomral column to list of columns. TString DefineSQLName(const char* fullname); produce suitable name for column, taking into account length limitation. Bool_t HasSQLName(const char* sqlname); checks if columns list already has that sql name. Int_t GetNumColumns(); returns number of columns in provided set. const char* GetColumn(Int_t n); returm column value. Bool_t IsNumeric(Int_t n); identifies if column has numeric value. TObjArray* TakeColInfos(); take ownership over colinfos. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLStructure.h 32337 2010-02-12 16:09:35Z pcanal $ »",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:6012,Modifiability,Inherit,Inherited,6012,"oidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TStringDefineSQLName(const char* fullname); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tHasSQLName(const char* sqlname); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArray*fColInfos! array with TSQLClassColumnInfo, used later for TSQLClassInfo; TObjArrayfColumns! collection of columns; TSQLFile*fFile!; TSQLClassInfo*fInfo!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLTableData(TSQLFile* f = 0, TSQLClassInfo* info = 0); normal constructor. ~TSQLTableData(); destructor. void AddColumn(const char* name, Long64_t value); Add INT column to list of columns. void AddColumn(const char* name, const char* sqltype, const char* value, Bool_t numeric); Add nomral column to list of columns. TString DefineSQLName(const char* fullname); produce suitable name for column, taking into account length limitation. Bool_t HasSQLName(const char* sqlname); checks if columns list already has that sql name. Int_t GetNumColumns(); returns number of columns in provided set. const char* GetColumn(Int_t n); returm column value. Bool_t IsNumeric(Int_t n); identifies if column has numeric value. TObjArray* TakeColInfos(); take ownership over colinfos. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id: TSQLStructure.h 32337 2010-02-12 16:09:35Z pcanal $ »",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:2775,Security,Hash,Hash,2775,"msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetColumn(Int_t n); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNumColumns(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsNumeric(Int_t n); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:4950,Testability,Test,TestBit,4950,"sZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TObjArray*TakeColInfos(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:4989,Testability,Test,TestBits,4989,"sZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TObjArray*TakeColInfos(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableData.html:1199,Usability,Clear,Clear,1199," TSQLTableData(TSQLFile* f = 0, TSQLClassInfo* info = 0); virtual~TSQLTableData(); voidTObject::AbstractMethod(const char* method) const; voidAddColumn(const char* name, Long64_t value); voidAddColumn(const char* name, const char* sqltype, const char* value, Bool_t numeric); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int",MatchSource.WIKI,root/html532/TSQLTableData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableData.html
https://root.cern/root/html532/TSQLTableInfo.html:1532,Availability,Error,Error,1532,"SQLTableInfo&); TSQLTableInfo(const char* tablename, TList* columns, const char* comment = ""SQL table"", const char* engine = 0, const char* create_time = 0, const char* update_time = 0); virtual~TSQLTableInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetColumns() const; const char*GetCreateTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetEngine() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:1661,Availability,error,error,1661,"onst char* create_time = 0, const char* update_time = 0); virtual~TSQLTableInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetColumns() const; const char*GetCreateTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetEngine() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUpdateTime() const; virt",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:1745,Availability,error,error,1745,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetColumns() const; const char*GetCreateTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetEngine() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUpdateTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; ",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:435,Deployability,update,update,435,". TSQLTableInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLTableInfo. class TSQLTableInfo: public TNamed. TSQLTableInfo. Contains information about table and table columns.; For MySQL additional information like engine type,; creation and last update time is provided. Function Members (Methods); public:. TSQLTableInfo(); TSQLTableInfo(const TSQLTableInfo&); TSQLTableInfo(const char* tablename, TList* columns, const char* comment = ""SQL table"", const char* engine = 0, const char* create_time = 0, const char* update_time = 0); virtual~TSQLTableInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virt",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:6112,Deployability,update,update,6112,"ject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*fColumns! list of TSQLColumnInfo objects, describing each table column; TStringfCreateTime! table creation time ; TStringfEngine! SQL tables engine name; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TStringfUpdateTime! table update time. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLTableInfo(); default constructor. TSQLTableInfo(const char* tablename, TList* columns, const char* comment = ""SQL table"", const char* engine = 0, const char* create_time = 0, const char* update_time = 0); normal constructor. ~TSQLTableInfo(); destructor. void Print(Option_t* option = """") const; Prints table and table columns info. TSQLColumnInfo* FindColumn(const char* columnname); Return column info object of given name. TSQLTableInfo(). TList* GetColumns() const; { return fColumns; }. const char* GetEngine() const; { return fEngine.Data(); }. const char* GetCreateTime() const; { return fCreateTime.Data(); }. const char* GetUpdateTime() const; { return fUpdateTime.Data(); }. » Author: Sergey Linev 31/05/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rad",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:2844,Modifiability,Inherit,InheritsFrom,2844,"l(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetColumns() const; const char*GetCreateTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetEngine() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUpdateTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:2910,Modifiability,Inherit,InheritsFrom,2910,"d::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetColumns() const; const char*GetCreateTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetEngine() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUpdateTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLTableInfo&operator=(c",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:6139,Modifiability,Inherit,Inheritance,6139,"e(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*fColumns! list of TSQLColumnInfo objects, describing each table column; TStringfCreateTime! table creation time ; TStringfEngine! SQL tables engine name; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TStringfUpdateTime! table update time. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLTableInfo(); default constructor. TSQLTableInfo(const char* tablename, TList* columns, const char* comment = ""SQL table"", const char* engine = 0, const char* create_time = 0, const char* update_time = 0); normal constructor. ~TSQLTableInfo(); destructor. void Print(Option_t* option = """") const; Prints table and table columns info. TSQLColumnInfo* FindColumn(const char* columnname); Return column info object of given name. TSQLTableInfo(). TList* GetColumns() const; { return fColumns; }. const char* GetEngine() const; { return fEngine.Data(); }. const char* GetCreateTime() const; { return fCreateTime.Data(); }. const char* GetUpdateTime() const; { return fUpdateTime.Data(); }. » Author: Sergey Linev 31/05/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLTableInfo.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For co",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:6152,Modifiability,Inherit,Inherited,6152,"e(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*fColumns! list of TSQLColumnInfo objects, describing each table column; TStringfCreateTime! table creation time ; TStringfEngine! SQL tables engine name; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TStringfUpdateTime! table update time. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLTableInfo(); default constructor. TSQLTableInfo(const char* tablename, TList* columns, const char* comment = ""SQL table"", const char* engine = 0, const char* create_time = 0, const char* update_time = 0); normal constructor. ~TSQLTableInfo(); destructor. void Print(Option_t* option = """") const; Prints table and table columns info. TSQLColumnInfo* FindColumn(const char* columnname); Return column info object of given name. TSQLTableInfo(). TList* GetColumns() const; { return fColumns; }. const char* GetEngine() const; { return fEngine.Data(); }. const char* GetCreateTime() const; { return fCreateTime.Data(); }. const char* GetUpdateTime() const; { return fUpdateTime.Data(); }. » Author: Sergey Linev 31/05/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TSQLTableInfo.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For co",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:2734,Security,Hash,Hash,2734,", Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetColumns() const; const char*GetCreateTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetEngine() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUpdateTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:5064,Testability,Test,TestBit,5064,"har* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLTableInfo&operator=(const TSQLTableInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:5103,Testability,Test,TestBits,5103,"har* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLTableInfo&operator=(const TSQLTableInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSQLTableInfo.html:989,Usability,Clear,Clear,989," TSQLTableInfo(); TSQLTableInfo(const TSQLTableInfo&); TSQLTableInfo(const char* tablename, TList* columns, const char* comment = ""SQL table"", const char* engine = 0, const char* create_time = 0, const char* update_time = 0); virtual~TSQLTableInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TSQLColumnInfo*FindColumn(const char* columnname); virt",MatchSource.WIKI,root/html532/TSQLTableInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSQLTableInfo.html
https://root.cern/root/html532/TSSLSocket.html:1941,Availability,Error,Error,1941,"ct::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:2070,Availability,error,error,2070,"* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTSocket::GetLocalInetAddre",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:2154,Availability,error,error,2154,"al voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTSocket::GetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() con",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:4621,Availability,error,error,4621,":GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:11210,Deployability,configurat,configuration,11210,"gClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. TSSLSocket(); {}. Int_t Recv(TMessage*& mess); The rest of the Send and Recv calls rely ultimately on these,; so it is enough to overload them. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); Issue with hidden method :(. { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. » Author: Alejandro Alvarez 16/09/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$I",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:311,Integrability,wrap,wrapped,311,". TSSLSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSSLSocket. class TSSLSocket: public TSocket. TSSLSocket. A TSocket wrapped in by SSL. Function Members (Methods); public:. TSSLSocket(const char* sockpath); TSSLSocket(Int_t desc); TSSLSocket(const TSSLSocket& s); TSSLSocket(Int_t desc, const char* sockpath); TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1); TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1); TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1); TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1); virtual~TSSLSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:10189,Integrability,protocol,protocol,10189,"t { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TIn",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:10488,Integrability,Wrap,WrapWithSSL,10488,"of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefa",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:10507,Integrability,Wrap,Wraps,10507,"of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefa",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:3960,Modifiability,Inherit,InheritsFrom,3960,"::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTSocket::GetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, ",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:4026,Modifiability,Inherit,InheritsFrom,4026,"al TInetAddressTSocket::GetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::op",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:10406,Modifiability,Inherit,Inheritance,10406,"ed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t Send",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:10419,Modifiability,Inherit,Inherited,10419,"ed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t Send",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:11210,Modifiability,config,configuration,11210,"gClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. TSSLSocket(); {}. Int_t Recv(TMessage*& mess); The rest of the Send and Recv calls rely ultimately on these,; so it is enough to overload them. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); Issue with hidden method :(. { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. » Author: Alejandro Alvarez 16/09/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$I",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:11224,Modifiability,variab,variables,11224,"gClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1). TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1). TSSLSocket(const char* sockpath). TSSLSocket(Int_t desc). TSSLSocket(Int_t desc, const char* sockpath). TSSLSocket(const TSSLSocket& s). ~TSSLSocket(); Close gracefully the connection, and free SSL structures. void Close(Option_t* option = """"); Close the SSL connection. void SetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); Set up the static configuration variables. Int_t Recv(TMessage*& mess). Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t Send(const TMessage& mess). Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. TSSLSocket(); {}. Int_t Recv(TMessage*& mess); The rest of the Send and Recv calls rely ultimately on these,; so it is enough to overload them. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); Issue with hidden method :(. { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. » Author: Alejandro Alvarez 16/09/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$I",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:5990,Safety,timeout,timeout,5990,"erator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocke",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:3850,Security,Hash,Hash,3850,"orOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTSocket::GetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* p",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:8025,Security,Authenticat,Authenticate,8025,"t uid); static voidSetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TSSLSocket(); Bool_tTSocket::Authenticate(const char* user); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); Bool_tTSocket::RecvProcessIDs(TMessage* mess); Bool_tTSocket::RecvStreamerInfos(TMessage* mess); voidTSocket::SendProcessIDs(const TMessage& mess); voidTSocket::SendStreamerInfos(const TMessage& mess); voidTSocket::SetDescriptor(Int_t desc). private:. voidWrapWithSSL(). Data Members; public:. enum TSocket::EStatusBits { kIsUnix; kBrokenConn; };; enum TSocket::EInterest { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level an",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:9566,Security,Authenticat,Authenticate,9566,"t { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TIn",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:9964,Security,authenticat,authentication,9964,"t { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. ssl_st*fSSL; ssl_ctx_st*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSocket(TIn",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:7599,Testability,Test,TestBit,7599," Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); static voidSetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:7638,Testability,Test,TestBits,7638," Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); static voidSetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TSSLSocket.html:1059,Usability,Clear,Clear,1059," TSSLSocket(const char* sockpath); TSSLSocket(Int_t desc); TSSLSocket(const TSSLSocket& s); TSSLSocket(Int_t desc, const char* sockpath); TSSLSocket(TInetAddress addr, const char* service, Int_t tcpwindowsize = -1); TSSLSocket(TInetAddress addr, Int_t port, Int_t tcpwindowsize = -1); TSSLSocket(const char* host, const char* service, Int_t tcpwindowsize = -1); TSSLSocket(const char* url, Int_t port, Int_t tcpwindowsize = -1); virtual~TSSLSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual",MatchSource.WIKI,root/html532/TSSLSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSSLSocket.html
https://root.cern/root/html532/TStatus.html:364,Availability,error,error,364,". TStatus. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TStatus. class TStatus: public TNamed. TStatus. This class holds the status of an ongoing operation and collects; error messages. It provides a Merge() operation allowing it to; be used in PROOF to monitor status in the slaves.; No messages indicates success. Function Members (Methods); public:. TStatus(); TStatus(const TStatus&); virtual~TStatus(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:1414,Availability,Error,Error,1414," TStatus(); TStatus(const TStatus&); virtual~TStatus(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:1543,Availability,error,error,1543," TStatus(); TStatus(const TStatus&); virtual~TStatus(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long_tGetResMemMax(Bool_t master = kFALSE) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long_tGetVirtMemMax(Bool_t master = kFALSE) const; virtual Bool_tTObject::HandleTimer(TTimer* timer);",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:1627,Availability,error,error,1627,"const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long_tGetResMemMax(Bool_t master = kFALSE) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long_tGetVirtMemMax(Bool_t master = kFALSE) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6152,Availability,error,error,6152,":UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE)",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6550,Availability,error,error,6550," fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TStatus.h 40186 2011-07-11 12:00:50Z ganis $ » Last generated: 2011-11-03 20:23; This page has been automati",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:448,Energy Efficiency,monitor,monitor,448,". TStatus. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TStatus. class TStatus: public TNamed. TStatus. This class holds the status of an ongoing operation and collects; error messages. It provides a Merge() operation allowing it to; be used in PROOF to monitor status in the slaves.; No messages indicates success. Function Members (Methods); public:. TStatus(); TStatus(const TStatus&); virtual~TStatus(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:370,Integrability,message,messages,370,". TStatus. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TStatus. class TStatus: public TNamed. TStatus. This class holds the status of an ongoing operation and collects; error messages. It provides a Merge() operation allowing it to; be used in PROOF to monitor status in the slaves.; No messages indicates success. Function Members (Methods); public:. TStatus(); TStatus(const TStatus&); virtual~TStatus(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:482,Integrability,message,messages,482,". TStatus. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TStatus. class TStatus: public TNamed. TStatus. This class holds the status of an ongoing operation and collects; error messages. It provides a Merge() operation allowing it to; be used in PROOF to monitor status in the slaves.; No messages indicates success. Function Members (Methods); public:. TStatus(); TStatus(const TStatus&); virtual~TStatus(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6118,Integrability,message,messages,6118,":UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE)",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6158,Integrability,message,messages,6158,":UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE)",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6556,Integrability,message,message,6556," fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TStatus.h 40186 2011-07-11 12:00:50Z ganis $ » Last generated: 2011-11-03 20:23; This page has been automati",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6727,Integrability,message,messages,6727," kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TStatus.h 40186 2011-07-11 12:00:50Z ganis $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6778,Integrability,message,message,6778," kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TStatus.h 40186 2011-07-11 12:00:50Z ganis $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:2680,Modifiability,Inherit,InheritsFrom,2680,"Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long_tGetResMemMax(Bool_t master = kFALSE) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long_tGetVirtMemMax(Bool_t master = kFALSE) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsOk() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); const char*NextMesg(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::oper",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:2746,Modifiability,Inherit,InheritsFrom,2746,", const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long_tGetResMemMax(Bool_t master = kFALSE) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long_tGetVirtMemMax(Bool_t master = kFALSE) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsOk() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); const char*NextMesg(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6406,Modifiability,Inherit,Inheritance,6406,"_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: T",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:6419,Modifiability,Inherit,Inherited,6419,"_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; set<string,less<string>,allocator<string> >::iteratorfIter!iterator in messages; set<string>fMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. TStatus(). virtual ~TStatus(); { }. Bool_t IsOk() const; { return fMsgs.empty(); }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: T",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:2570,Security,Hash,Hash,2570,"ct::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long_tGetResMemMax(Bool_t master = kFALSE) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long_tGetVirtMemMax(Bool_t master = kFALSE) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsOk() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); const char*NextMesg(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); sta",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:5091,Testability,Test,TestBit,5091,"id* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStatus&operator=(const TStatus&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExitStatus(Int_t est); voidSetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:5130,Testability,Test,TestBits,5130,"id* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStatus&operator=(const TStatus&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExitStatus(Int_t est); voidSetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStatus.html:871,Usability,Clear,Clear,871," TStatus(); TStatus(const TStatus&); virtual~TStatus(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; ",MatchSource.WIKI,root/html532/TStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStatus.html
https://root.cern/root/html532/TStdExceptionHandler.html:526,Availability,avail,available,526,". TStdExceptionHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TStdExceptionHandler. class TStdExceptionHandler: public TSysEvtHandler. TSysEvtHandler. Abstract base class for handling system events. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TStdExceptionHandler(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidAdd(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidTSysEvtHandler::DeActivate(); virtual voidTSysEvtHandler::DeActivated()SIGNAL ; virtual voidTOb",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:3751,Availability,Error,Error,3751,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virt",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:3880,Availability,error,error,3880,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TStdExceptionHandler::EStatusHandle(exception& exc); virtual Bool_tTObject::Handl",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:3964,Availability,error,error,3964,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TStdExceptionHandler::EStatusHandle(exception& exc); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:5906,Integrability,Message,Message,5906,"ual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); ",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:5198,Modifiability,Inherit,InheritsFrom,5198,"FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TStdExceptionHandler::EStatusHandle(exception& exc); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) co",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:5264,Modifiability,Inherit,InheritsFrom,5264,"tDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TStdExceptionHandler::EStatusHandle(exception& exc); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTO",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:9298,Modifiability,Inherit,Inheritance,9298,") const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). Data Members; public:. enum EStatus { kSEProceed; kSEHandled; kSEAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Add(); Add std::exception handler to system handler list. void Remove(); Remove std::exception handler from system handler list. Bool_t Notify(); Notify when signal occurs. virtual ~TStdExceptionHandler(); { }. EStatus Handle(exception& exc). » Author: Fons Rademakers 16/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TSysEvtHandler.h 21455 2007-12-18 15:44:33Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:9311,Modifiability,Inherit,Inherited,9311,") const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). Data Members; public:. enum EStatus { kSEProceed; kSEHandled; kSEAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Add(); Add std::exception handler to system handler list. void Remove(); Remove std::exception handler from system handler list. Bool_t Notify(); Notify when signal occurs. virtual ~TStdExceptionHandler(); { }. EStatus Handle(exception& exc). » Author: Fons Rademakers 16/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TSysEvtHandler.h 21455 2007-12-18 15:44:33Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:5000,Security,Hash,Hash,5000,"teEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TStdExceptionHandler::EStatusHandle(exception& exc); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNot",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:7637,Testability,Test,TestBit,7637,"_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:7676,Testability,Test,TestBits,7676,"_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStdExceptionHandler.html:1218,Usability,Clear,Clear,1218," virtual~TStdExceptionHandler(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidAdd(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidTSysEvtHandler::DeActivate(); virtual voidTSysEvtHandler::DeActivated()SIGNAL ; virtual voidTOb",MatchSource.WIKI,root/html532/TStdExceptionHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStdExceptionHandler.html
https://root.cern/root/html532/TStopwatch.html:1334,Availability,Error,Error,1334," TStopwatch(); TStopwatch(const TStopwatch&); ~TStopwatch(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidContinue(); virtual voidTObject::Copy(TObject& object) const; Int_tCounter() const; Double_tCpuTime(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() con",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:1463,Availability,error,error,1463,"Stopwatch&); ~TStopwatch(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidContinue(); virtual voidTObject::Copy(TObject& object) const; Int_tCounter() const; Double_tCpuTime(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:1547,Availability,error,error,1547,"irtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidContinue(); virtual voidTObject::Copy(TObject& object) const; Int_tCounter() const; Double_tCpuTime(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:2427,Modifiability,Inherit,InheritsFrom,2427,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:2493,Modifiability,Inherit,InheritsFrom,2493,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStopwatch&operator=(co",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:5829,Modifiability,Inherit,Inheritance,5829,"Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. static Double_tGetCPUTime(); static Double_tGetRealTime(). Data Members; public:. enum EState { kUndefined; kStopped; kRunning; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Int_tfCounternumber of times the stopwatch was started; Double_tfStartCpuTimecpu start time; Double_tfStartRealTimewall clock start time; TStopwatch::EStatefStatestopwatch state; Double_tfStopCpuTimecpu stop time; Double_tfStopRealTimewall clock stop time; Double_tfTotalCpuTimetotal cpu time; Double_tfTotalRealTimetotal real time. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStopwatch(); Create a stopwatch and start it. void Start(Bool_t reset = kTRUE); Start the stopwatch. If reset is kTRUE reset the stopwatch before; starting it (including the stopwatch counter).; Use kFALSE to continue timing after a Stop() without; resetting the stopwatch. void Stop(); Stop the stopwatch. void Continue(); Resume a stopped stopwatch. The stopwatch continues counting from the last; Start() onwards (this is like the laptimer function). Double_t RealTime(); Stop the stopwatch (if it is running) and return the realtime (in; seconds) passed between the start and stop events. Double_t CpuTime(); Stop the stopwatch (if it is running) and return the cputime (in; seconds) passed between the start and stop events. Double_t GetRealTime(); Private static method returning system realtime. Double_t GetCPUTime(); Private static method returning system CPU time. void Print(Option_t* option = """") const; Print the real and cpu time pass",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:5842,Modifiability,Inherit,Inherited,5842,"Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. static Double_tGetCPUTime(); static Double_tGetRealTime(). Data Members; public:. enum EState { kUndefined; kStopped; kRunning; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Int_tfCounternumber of times the stopwatch was started; Double_tfStartCpuTimecpu start time; Double_tfStartRealTimewall clock start time; TStopwatch::EStatefStatestopwatch state; Double_tfStopCpuTimecpu stop time; Double_tfStopRealTimewall clock stop time; Double_tfTotalCpuTimetotal cpu time; Double_tfTotalRealTimetotal real time. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStopwatch(); Create a stopwatch and start it. void Start(Bool_t reset = kTRUE); Start the stopwatch. If reset is kTRUE reset the stopwatch before; starting it (including the stopwatch counter).; Use kFALSE to continue timing after a Stop() without; resetting the stopwatch. void Stop(); Stop the stopwatch. void Continue(); Resume a stopped stopwatch. The stopwatch continues counting from the last; Start() onwards (this is like the laptimer function). Double_t RealTime(); Stop the stopwatch (if it is running) and return the realtime (in; seconds) passed between the start and stop events. Double_t CpuTime(); Stop the stopwatch (if it is running) and return the cputime (in; seconds) passed between the start and stop events. Double_t GetRealTime(); Private static method returning system realtime. Double_t GetCPUTime(); Private static method returning system CPU time. void Print(Option_t* option = """") const; Print the real and cpu time pass",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:2317,Security,Hash,Hash,2317,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:4577,Testability,Test,TestBit,4577,"d) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStopwatch&operator=(const TStopwatch&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); Double_tRealTime(); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); voidResetCpuTime(Double_t time = 0); voidResetRealTime(Double_t time = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); voidStart(Bool_t reset = kTRUE); voidStop(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:4616,Testability,Test,TestBits,4616,"d) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStopwatch&operator=(const TStopwatch&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); Double_tRealTime(); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); voidResetCpuTime(Double_t time = 0); voidResetRealTime(Double_t time = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); voidStart(Bool_t reset = kTRUE); voidStop(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:737,Usability,Clear,Clear,737," TStopwatch(); TStopwatch(const TStopwatch&); ~TStopwatch(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidContinue(); virtual voidTObject::Copy(TObject& object) const; Int_tCounter() const; Double_tCpuTime(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() con",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStopwatch.html:6231,Usability,Resume,Resume,6231,"tatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Int_tfCounternumber of times the stopwatch was started; Double_tfStartCpuTimecpu start time; Double_tfStartRealTimewall clock start time; TStopwatch::EStatefStatestopwatch state; Double_tfStopCpuTimecpu stop time; Double_tfStopRealTimewall clock stop time; Double_tfTotalCpuTimetotal cpu time; Double_tfTotalRealTimetotal real time. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStopwatch(); Create a stopwatch and start it. void Start(Bool_t reset = kTRUE); Start the stopwatch. If reset is kTRUE reset the stopwatch before; starting it (including the stopwatch counter).; Use kFALSE to continue timing after a Stop() without; resetting the stopwatch. void Stop(); Stop the stopwatch. void Continue(); Resume a stopped stopwatch. The stopwatch continues counting from the last; Start() onwards (this is like the laptimer function). Double_t RealTime(); Stop the stopwatch (if it is running) and return the realtime (in; seconds) passed between the start and stop events. Double_t CpuTime(); Stop the stopwatch (if it is running) and return the cputime (in; seconds) passed between the start and stop events. Double_t GetRealTime(); Private static method returning system realtime. Double_t GetCPUTime(); Private static method returning system CPU time. void Print(Option_t* option = """") const; Print the real and cpu time passed between the start and stop events.; and the number of times (slices) this TStopwatch was called; (if this number > 1). If opt=""m"" print out realtime in milli second; precision. If opt=""u"" print out realtime in micro second precision. TStopwatch(). Int_t Counter() const; { return fCounter; }. void Reset(); { ResetCpuTime(); ResetRealTime(); }. void ResetCpuTime(Double_t time =",MatchSource.WIKI,root/html532/TStopwatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStopwatch.html
https://root.cern/root/html532/TStorage.html:742,Deployability,toggle,toggle,742,". TStorage. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TStorage. class TStorage. TStorage. Storage manager. The storage manager works best in conjunction with; the custom ROOT new and delete operators defined in the file; NewDelete.cxx (libNew.so). Only when using the custom allocation; operators will memory usage statistics be gathered using the; TStorage EnterStat(), RemoveStat(), etc. functions.; Memory checking is by default enabled (when using libNew.so) and; usage statistics is gathered. Using the resource (in .rootrc):; Root.MemStat one can toggle statistics gathering on or off. More; specifically on can trap the allocation of a block of memory of a; certain size. This can be specified using the resource:; Root.MemStat.size, using the resource Root.MemStat.cnt one can; specify after how many allocations of this size the trap should; occur.; Set the compile option R__NOSTATS to de-activate all memory checking; and statistics gathering in the system. Function Members (Methods); public:. TStorage(); TStorage(const TStorage&); virtual~TStorage(); static voidAddToHeap(ULong_t begin, ULong_t end); static void*Alloc(size_t size); static TClass*Class(); static voidDealloc(void* ptr); static voidEnableStatistics(int size = -1, int ix = -1); static voidEnterStat(size_t size, void* p); static FreeHookFun_tGetFreeHook(); static void*GetFreeHookData(); static ULong_tGetHeapBegin(); static ULong_tGetHeapEnd(); static size_tGetMaxBlockSize(); static Bool_tHasCustomNewDelete(); virtual TClass*IsA() const; static Bool_tIsOnHeap(void* p); static void*ObjectAlloc(size_t size); static void*ObjectAlloc(size_t size, void* vp); static voidObjectDealloc(void* vp); static voidObjectDealloc(void* vp, void* ptr); TStorage&operator=(const TStorage&); static voidPrintStatistics(); static void*ReAlloc(voi",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:2891,Energy Efficiency,allocate,allocated,2891,"lloc(size_t size, void* vp); static voidObjectDealloc(void* vp); static voidObjectDealloc(void* vp, void* ptr); TStorage&operator=(const TStorage&); static voidPrintStatistics(); static void*ReAlloc(void* vp, size_t size); static void*ReAlloc(void* vp, size_t size, size_t oldsize); static char*ReAllocChar(char* vp, size_t size, size_t oldsize); static Int_t*ReAllocInt(Int_t* vp, size_t size, size_t oldsize); static voidRemoveStat(void* p); static voidSetCustomNewDelete(); static voidSetFreeHook(FreeHookFun_t func, void* data); static voidSetMaxBlockSize(size_t size); static voidSetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. static FreeHookFun_tfgFreeHookfunction called on free; static void*fgFreeHookDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static ULong_tfgHeapBeginbegin address of heap; static ULong_tfgHeapEndend address of heap; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAll",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:3529,Energy Efficiency,Allocate,Allocate,3529,"b). Data Members; private:. static FreeHookFun_tfgFreeHookfunction called on free; static void*fgFreeHookDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static ULong_tfgHeapBeginbegin address of heap; static ULong_tfgHeapEndend address of heap; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:3639,Energy Efficiency,allocate,allocate,3639,"okDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static ULong_tfgHeapBeginbegin address of heap; static ULong_tfgHeapEndend address of heap; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. v",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:3674,Energy Efficiency,allocate,allocated,3674,"okDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static ULong_tfgHeapBeginbegin address of heap; static ULong_tfgHeapEndend address of heap; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. v",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:4312,Energy Efficiency,allocate,allocate,4312,"on is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. vp is already allocated (maybe on heap, maybe on; stack) so just return. void ObjectDealloc(void* vp); Used to deallocate a TObject on the heap (via TObject::operator delete()). void ObjectDealloc(void* vp, void* ptr); Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). void SetFreeHook(FreeHookFun_t func, void* data); Set a free handler. void SetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); Set a custom ReAlloc handlers. This function is typically; called via a static object in the ROOT libNew.so shared library. void PrintStatistics(); Print memory usage statistics. void EnableStatistics(int size = -1, int ix = -1",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:4567,Energy Efficiency,allocate,allocate,4567,"ing; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. vp is already allocated (maybe on heap, maybe on; stack) so just return. void ObjectDealloc(void* vp); Used to deallocate a TObject on the heap (via TObject::operator delete()). void ObjectDealloc(void* vp, void* ptr); Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). void SetFreeHook(FreeHookFun_t func, void* data); Set a free handler. void SetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); Set a custom ReAlloc handlers. This function is typically; called via a static object in the ROOT libNew.so shared library. void PrintStatistics(); Print memory usage statistics. void EnableStatistics(int size = -1, int ix = -1); Enable memory usage statistics gathering. Size is the size of the memory; block that should be trapped and ix is after how many such allocations; the trap should happen. ULong_t GetHeapBegin(); return begin of heap. ULong_t GetHeapEnd(); return end of heap. voi",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:4671,Energy Efficiency,allocate,allocated,4671,"rage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. vp is already allocated (maybe on heap, maybe on; stack) so just return. void ObjectDealloc(void* vp); Used to deallocate a TObject on the heap (via TObject::operator delete()). void ObjectDealloc(void* vp, void* ptr); Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). void SetFreeHook(FreeHookFun_t func, void* data); Set a free handler. void SetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); Set a custom ReAlloc handlers. This function is typically; called via a static object in the ROOT libNew.so shared library. void PrintStatistics(); Print memory usage statistics. void EnableStatistics(int size = -1, int ix = -1); Enable memory usage statistics gathering. Size is the size of the memory; block that should be trapped and ix is after how many such allocations; the trap should happen. ULong_t GetHeapBegin(); return begin of heap. ULong_t GetHeapEnd(); return end of heap. void * GetFreeHookData(); return static free hook data. Bool_t HasCustomNewDelete(); return the has custom del",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:4395,Integrability,rout,routine,4395,"tion is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. vp is already allocated (maybe on heap, maybe on; stack) so just return. void ObjectDealloc(void* vp); Used to deallocate a TObject on the heap (via TObject::operator delete()). void ObjectDealloc(void* vp, void* ptr); Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). void SetFreeHook(FreeHookFun_t func, void* data); Set a free handler. void SetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); Set a custom ReAlloc handlers. This function is typically; called via a static object in the ROOT libNew.so shared library. void PrintStatistics(); Print memory usage statistics. void EnableStatistics(int size = -1, int ix = -1); Enable memory usage statistics gathering. Size is the size of the memory; block that should be trapped and ix is after ",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:3032,Modifiability,Inherit,Inheritance,3032,"t size, size_t oldsize); static char*ReAllocChar(char* vp, size_t size, size_t oldsize); static Int_t*ReAllocInt(Int_t* vp, size_t size, size_t oldsize); static voidRemoveStat(void* p); static voidSetCustomNewDelete(); static voidSetFreeHook(FreeHookFun_t func, void* data); static voidSetMaxBlockSize(size_t size); static voidSetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. static FreeHookFun_tfgFreeHookfunction called on free; static void*fgFreeHookDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static ULong_tfgHeapBeginbegin address of heap; static ULong_tfgHeapEndend address of heap; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of char",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStorage.html:3045,Modifiability,Inherit,Inherited,3045,"t size, size_t oldsize); static char*ReAllocChar(char* vp, size_t size, size_t oldsize); static Int_t*ReAllocInt(Int_t* vp, size_t size, size_t oldsize); static voidRemoveStat(void* p); static voidSetCustomNewDelete(); static voidSetFreeHook(FreeHookFun_t func, void* data); static voidSetMaxBlockSize(size_t size); static voidSetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. static FreeHookFun_tfgFreeHookfunction called on free; static void*fgFreeHookDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static ULong_tfgHeapBeginbegin address of heap; static ULong_tfgHeapEndend address of heap; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of char",MatchSource.WIKI,root/html532/TStorage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStorage.html
https://root.cern/root/html532/TStreamerArtificial.html:1378,Availability,Error,Error,1378," TStreamerArtificial(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); ~TStreamerArtificial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() c",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:1507,Availability,error,error,1507,"ame); ~TStreamerArtificial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*TStreamerElement::GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtua",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:1591,Availability,error,error,1591," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*TStreamerElement::GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() c",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:6897,Deployability,Update,Update,6897,"oidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); voidSetReadFunc(ROOT::TSchemaRule::ReadFuncPtr_t val); voidSetReadRawFunc(ROOT::TSchemaRule::ReadRawFuncPtr_t val); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:3686,Modifiability,Inherit,InheritsFrom,3686,"tual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; ROOT::TSchemaRule::ReadFuncPtr_tGetReadFunc(); ROOT::TSchemaRule::ReadRawFuncPtr_tGetReadRawFunc(); virtual Int_tTStreamerElement::GetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObj",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:3752,Modifiability,Inherit,InheritsFrom,3752," Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; ROOT::TSchemaRule::ReadFuncPtr_tGetReadFunc(); ROOT::TSchemaRule::ReadRawFuncPtr_tGetReadRawFunc(); virtual Int_tTStreamerElement::GetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator de",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:8874,Modifiability,inherit,inherits,8874,"Lmultimap; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; void*fReadFunc!; void*fReadRawFunc!; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerElement& operator=(const TStreamerArtificial& ). TStreamerArtificial(const TStreamerArtificial& ). TStreamerArtificial(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); TStreamerArtificial() : fReadFunc(0),fReadRawFunc(0) {}. {}. void SetReadFunc(ROOT::TSchemaRul",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:9244,Modifiability,Inherit,Inheritance,9244,"_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; void*fReadFunc!; void*fReadRawFunc!; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerElement& operator=(const TStreamerArtificial& ). TStreamerArtificial(const TStreamerArtificial& ). TStreamerArtificial(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); TStreamerArtificial() : fReadFunc(0),fReadRawFunc(0) {}. {}. void SetReadFunc(ROOT::TSchemaRule::ReadFuncPtr_t val); { fReadFunc = val; }. void SetReadRawFunc(ROOT::TSchemaRule::ReadRawFuncPtr_t val); { fReadRawFunc = val; }. ROOT::TSchemaRule::ReadFuncPtr_t GetReadFunc(). ROOT::TSchemaRule::ReadRawFuncPtr_t GetReadRawFunc(). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:9257,Modifiability,Inherit,Inherited,9257,"_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; void*fReadFunc!; void*fReadRawFunc!; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerElement& operator=(const TStreamerArtificial& ). TStreamerArtificial(const TStreamerArtificial& ). TStreamerArtificial(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); TStreamerArtificial() : fReadFunc(0),fReadRawFunc(0) {}. {}. void SetReadFunc(ROOT::TSchemaRule::ReadFuncPtr_t val); { fReadFunc = val; }. void SetReadRawFunc(ROOT::TSchemaRule::ReadRawFuncPtr_t val); { fReadRawFunc = val; }. ROOT::TSchemaRule::ReadFuncPtr_t GetReadFunc(). ROOT::TSchemaRule::ReadRawFuncPtr_t GetReadRawFunc(). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:3576,Security,Hash,Hash,3576,"med::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; ROOT::TSchemaRule::ReadFuncPtr_tGetReadFunc(); ROOT::TSchemaRule::ReadRawFuncPtr_tGetReadRawFunc(); virtual Int_tTStreamerElement::GetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static ",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:6802,Testability,Test,TestBit,6802,"oidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); voidSetReadFunc(ROOT::TSchemaRule::ReadFuncPtr_t val); voidSetReadRawFunc(ROOT::TSchemaRule::ReadRawFuncPtr_t val); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:6841,Testability,Test,TestBits,6841,"oidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); voidSetReadFunc(ROOT::TSchemaRule::ReadFuncPtr_t val); voidSetReadRawFunc(ROOT::TSchemaRule::ReadRawFuncPtr_t val); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerArtificial.html:835,Usability,Clear,Clear,835," TStreamerArtificial(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); ~TStreamerArtificial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() c",MatchSource.WIKI,root/html532/TStreamerArtificial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerArtificial.html
https://root.cern/root/html532/TStreamerBase.html:1348,Availability,Error,Error,1348," TStreamerBase(); TStreamerBase(const char* name, const char* title, Int_t offset); virtual~TStreamerBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; Int_tGetBaseVersion(); T",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:1477,Availability,error,error,1477,"et); virtual~TStreamerBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; Int_tGetBaseVersion(); TClass*TStreamerElement::GetClass() const; virtual TClass*GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tGetM",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:1561,Availability,error,error,1561," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; Int_tGetBaseVersion(); TClass*TStreamerElement::GetClass() const; virtual TClass*GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*GetNewBaseClass();",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:10105,Deployability,Update,Update,10105,"ype name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBase(); Default ctor. TStreamerBase(const char* name, const char* title, Int_t offset); Create a TStreamerBase object. ~TStreamerBase(); TStreamerBase dtor. TClass * GetClassPointer() const; Returns a pointer to the TClass of this element. Int_t GetSize() const; Returns size of baseclass in bytes. void Init(TObject* obj = 0); Setup the element. Bool_t IsBase() const; Return kTRUE if the element represent a base class. const char * GetInclude() const; Return the proper include for this element. void ls(Option_t* option = """") const; Print the content of the element. Int_t ReadBuffer(TBuffer& b, char* pointer); Read the content of the buffer. void Streamer(TBuffer& b); Stream an object of class TStreamerBase. void Update(const TClass* oldClass, TClass* newClass); Function called by the TClass constructor when replacing an emulated class; by the real class. Int_t WriteBuffer(TBuffer& b, char* pointer); Write the base class into the buffer. TStreamerElement& operator=(const TStreamerBase& ). ULong_t GetMethod() const; {return ULong_t(fStreamer);}. TStreamerBase(const TStreamerBase& ). Int_t GetBaseVersion(); {return fBaseVersion;}. TClass * GetNewBaseClass(); { return fNewBaseClass; }. void SetNewBaseClass(TClass* cl); { fNewBaseClass = cl; }. void SetBaseVersion(Int_t v); {fBaseVersion = v;}. » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:8800,Integrability,wrap,wrapper,8800,"ESTLtype { kSTL; kSTLstring; kSTLvector; kSTLlist; kSTLdeque; kSTLmap; kSTLset; kSTLmultimap; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*fBaseClass!pointer to base class; Int_tfBaseVersionversion number of the base class FIXME: What for? What about the schema evolution issues?; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom streamer member function.; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Inc",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:3533,Modifiability,Inherit,InheritsFrom,3533,"TClass*GetNewBaseClass(); TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject:",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:3599,Modifiability,Inherit,InheritsFrom,3599,"onst; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:8928,Modifiability,inherit,inherits,8928,"the schema evolution issues?; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom streamer member function.; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBase(); Default ctor. TStreamerBase(const char* name, const char* title, Int_t offset); Create a TStreamerBase object. ~TStreamerBase(); TStreamerBase dtor. TClass * GetClassPointer() const; Returns a pointer to the TClass of this element. Int_t GetSize() const; Returns size of baseclass in bytes. void Init(TObject* obj = 0); Setup the element. Bool_t IsBase() const; Return kTRUE if the element represent a base class. const char * GetInclude() const; Return the proper include for this element. void ls(Option_t* option = """") const; Print the content of the element. Int_t ReadBuffer(TBuffer& b, char* pointer); Read the content of the buffer. void Streamer(TBuffer& b); Stream ",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:9298,Modifiability,Inherit,Inheritance,9298,"ex for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom streamer member function.; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBase(); Default ctor. TStreamerBase(const char* name, const char* title, Int_t offset); Create a TStreamerBase object. ~TStreamerBase(); TStreamerBase dtor. TClass * GetClassPointer() const; Returns a pointer to the TClass of this element. Int_t GetSize() const; Returns size of baseclass in bytes. void Init(TObject* obj = 0); Setup the element. Bool_t IsBase() const; Return kTRUE if the element represent a base class. const char * GetInclude() const; Return the proper include for this element. void ls(Option_t* option = """") const; Print the content of the element. Int_t ReadBuffer(TBuffer& b, char* pointer); Read the content of the buffer. void Streamer(TBuffer& b); Stream an object of class TStreamerBase. void Update(const TClass* oldClass, TClass* newClass); Function called by the TClass constructor when replacing an emulated class; by the real class. Int_t WriteBuffer(TBuffer& b, char* pointer); Write the base class into th",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:9311,Modifiability,Inherit,Inherited,9311,"ex for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom streamer member function.; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBase(); Default ctor. TStreamerBase(const char* name, const char* title, Int_t offset); Create a TStreamerBase object. ~TStreamerBase(); TStreamerBase dtor. TClass * GetClassPointer() const; Returns a pointer to the TClass of this element. Int_t GetSize() const; Returns size of baseclass in bytes. void Init(TObject* obj = 0); Setup the element. Bool_t IsBase() const; Return kTRUE if the element represent a base class. const char * GetInclude() const; Return the proper include for this element. void ls(Option_t* option = """") const; Print the content of the element. Int_t ReadBuffer(TBuffer& b, char* pointer); Read the content of the buffer. void Streamer(TBuffer& b); Stream an object of class TStreamerBase. void Update(const TClass* oldClass, TClass* newClass); Function called by the TClass constructor when replacing an emulated class; by the real class. Int_t WriteBuffer(TBuffer& b, char* pointer); Write the base class into th",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:3423,Security,Hash,Hash,3423,"lement::GetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*GetNewBaseClass(); TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTO",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:6585,Testability,Test,TestBit,6585,"setBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidSetBaseVersion(Int_t v); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNewBaseClass(TClass* cl); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, char* pointer).",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:6624,Testability,Test,TestBits,6624,"setBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidSetBaseVersion(Int_t v); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNewBaseClass(TClass* cl); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, char* pointer).",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBase.html:805,Usability,Clear,Clear,805," TStreamerBase(); TStreamerBase(const char* name, const char* title, Int_t offset); virtual~TStreamerBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; Int_tGetBaseVersion(); T",MatchSource.WIKI,root/html532/TStreamerBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBase.html
https://root.cern/root/html532/TStreamerBasicPointer.html:1520,Availability,Error,Error,1520," char* title, Int_t offset, Int_t dtype, const char* countName, const char* countClass, Int_t version, const char* typeName); virtual~TStreamerBasicPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; const char*GetCountClass() const; const char*GetCountName() const; Int_tGetCountVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() co",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:1649,Availability,error,error,1649,"tual~TStreamerBasicPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; const char*GetCountClass() const; const char*GetCountName() const; Int_tGetCountVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const cha",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:1733,Availability,error,error,1733," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; const char*GetCountClass() const; const char*GetCountName() const; Int_tGetCountVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*TStreamerElement::GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) ",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:6921,Deployability,Update,Update,6921,"tBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:3771,Modifiability,Inherit,InheritsFrom,3771,"virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); s",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:3837,Modifiability,Inherit,InheritsFrom,3837,"t::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TO",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:9108,Modifiability,inherit,inherits,9108,"t; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; TStringfCountClassname of the class with the counter; TStringfCountNamename of data member holding the array count; Int_tfCountVersionversion number of the class with the counter; TStreamerBasicType*fCounter!pointer to basic type counter; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBasicPointer(); Default ctor. TStreamerBasicPointer(const char* name, const char* title, Int_t offset, Int_t dtype, const char* countName, const char* countClass, Int_t version, const char* typeName)",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:9478,Modifiability,Inherit,Inheritance,9478,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBasicPointer(); Default ctor. TStreamerBasicPointer(const char* name, const char* title, Int_t offset, Int_t dtype, const char* countName, const char* countClass, Int_t version, const char* typeName); Create a TStreamerBasicPointer object. ~TStreamerBasicPointer(); TStreamerBasicPointer dtor. ULong_t GetMethod() const; return offset of counter. Int_t GetSize() const; Returns size of basicpointer in bytes. void Init(TObject* obj = 0); Setup the element.; If directive is a StreamerInfo and it correspond to the; same class a 'countClass' the streamerInfo is used instead of the current StreamerInfo of the TClass; for 'countClass'. void SetArrayDim(Int_t dim); Set number of array dimensions. void Streamer(TBuffer& b); Stream an object of class TStreamerBasicPointer. TStreamerElement& operator=(const TStreamerBasicPointer& ). Bool_t IsaPointer() const; {return kFALSE;}. Bool_t HasCounter() const; {return kFALSE;}. TStreamerBasicPoin",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:9491,Modifiability,Inherit,Inherited,9491,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBasicPointer(); Default ctor. TStreamerBasicPointer(const char* name, const char* title, Int_t offset, Int_t dtype, const char* countName, const char* countClass, Int_t version, const char* typeName); Create a TStreamerBasicPointer object. ~TStreamerBasicPointer(); TStreamerBasicPointer dtor. ULong_t GetMethod() const; return offset of counter. Int_t GetSize() const; Returns size of basicpointer in bytes. void Init(TObject* obj = 0); Setup the element.; If directive is a StreamerInfo and it correspond to the; same class a 'countClass' the streamerInfo is used instead of the current StreamerInfo of the TClass; for 'countClass'. void SetArrayDim(Int_t dim); Set number of array dimensions. void Streamer(TBuffer& b); Stream an object of class TStreamerBasicPointer. TStreamerElement& operator=(const TStreamerBasicPointer& ). Bool_t IsaPointer() const; {return kFALSE;}. Bool_t HasCounter() const; {return kFALSE;}. TStreamerBasicPoin",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:3661,Security,Hash,Hash,3661,"Element::GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* p",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:6826,Testability,Test,TestBit,6826,"tBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:6865,Testability,Test,TestBits,6865,"tBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicPointer.html:977,Usability,Clear,Clear,977," TStreamerBasicPointer(); TStreamerBasicPointer(const char* name, const char* title, Int_t offset, Int_t dtype, const char* countName, const char* countClass, Int_t version, const char* typeName); virtual~TStreamerBasicPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtua",MatchSource.WIKI,root/html532/TStreamerBasicPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicPointer.html
https://root.cern/root/html532/TStreamerBasicType.html:1438,Availability,Error,Error,1438," TStreamerBasicType(); TStreamerBasicType(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); virtual~TStreamerBasicType(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tGetCounter() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual c",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:1567,Availability,error,error,1567,"virtual~TStreamerBasicType(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tGetCounter() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*TStreamerElement::GetInclude() const; Int_tTStreamerElement::GetMaxInd",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:1651,Availability,error,error,1651," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tGetCounter() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*TStreamerElement::GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetN",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:6730,Deployability,Update,Update,6730,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:3635,Modifiability,Inherit,InheritsFrom,3635,"*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObj",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:3701,Modifiability,Inherit,InheritsFrom,3701,"onst; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator de",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:8730,Modifiability,inherit,inherits,8730,"Lmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Int_tfCounter!value of data member when referenced by an array; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBasicType(); Default ctor. TStreamerBasicType(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); Create a TStreamerBasicType object. ~TStreamerBasicType(); TStreamerBasicType dtor. ULong_t GetMethod() const; return address of counter. Int_t GetSize()",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:9100,Modifiability,Inherit,Inheritance,9100," array; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBasicType(); Default ctor. TStreamerBasicType(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); Create a TStreamerBasicType object. ~TStreamerBasicType(); TStreamerBasicType dtor. ULong_t GetMethod() const; return address of counter. Int_t GetSize() const; Returns size of this element in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerBasicType. TStreamerElement& operator=(const TStreamerBasicType& ). TStreamerBasicType(const TStreamerBasicType& ). Int_t GetCounter() const; {return fCounter;}. » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:9113,Modifiability,Inherit,Inherited,9113," array; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerBasicType(); Default ctor. TStreamerBasicType(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); Create a TStreamerBasicType object. ~TStreamerBasicType(); TStreamerBasicType dtor. ULong_t GetMethod() const; return address of counter. Int_t GetSize() const; Returns size of this element in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerBasicType. TStreamerElement& operator=(const TStreamerBasicType& ). TStreamerBasicType(const TStreamerBasicType& ). Int_t GetCounter() const; {return fCounter;}. » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:3525,Security,Hash,Hash,3525,"e() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static ",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:6635,Testability,Test,TestBit,6635,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:6674,Testability,Test,TestBits,6674,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerBasicType.html:895,Usability,Clear,Clear,895," TStreamerBasicType(); TStreamerBasicType(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); virtual~TStreamerBasicType(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::Ge",MatchSource.WIKI,root/html532/TStreamerBasicType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerBasicType.html
https://root.cern/root/html532/TStreamerElement.html:1317,Availability,Error,Error,1317," TStreamerElement(); TStreamerElement(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); virtual~TStreamerElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayDim() const; Int_tGetArrayLength() const; TClass*GetClass() const; virtual TClass*GetClassPointer() const; virtual Option_t*TObject::",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:1446,Availability,error,error,1446,"st char* typeName); virtual~TStreamerElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayDim() const; Int_tGetArrayLength() const; TClass*GetClass() const; virtual TClass*GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetExecID() const; Double_tGetFactor() const; virtual const char*GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tGetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*GetNewClass() const; Int_tGetNewType() const; virtual char*TObject::GetObjectInfo(I",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:1530,Availability,error,error,1530,"ar* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayDim() const; Int_tGetArrayLength() const; TClass*GetClass() const; virtual TClass*GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetExecID() const; Double_tGetFactor() const; virtual const char*GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tGetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*GetNewClass() const; Int_tGetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset() co",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:9847,Deployability,Update,Update,9847," Return the local streamer object. const char * GetTypeNameBasic() const; Return type name of this element; in case the type name is not a standard basic type, return; the basic type name known to CINT. void Init(TObject* obj = 0); Initliaze the element. Bool_t IsOldFormat(const char* newTypeName); The early 3.00/00 and 3.01/01 versions used to store; dm->GetTypeName instead of dm->GetFullTypename; if this case is detected, the element type name is modified. Bool_t IsBase() const; Return kTRUE if the element represent a base class. void ls(Option_t* option = """") const; Print the content of the element. void SetArrayDim(Int_t dim); Set number of array dimensions. void SetMaxIndex(Int_t dim, Int_t max); set maximum index for array with dimension dim. void SetStreamer(TMemberStreamer* streamer); set pointer to Streamer function for this element. void Streamer(TBuffer& b); Stream an object of class TStreamerElement. void Update(const TClass* oldClass, TClass* newClass); function called by the TClass constructor when replacing an emulated class; by the real class. TStreamerElement(const TStreamerElement& ). TStreamerElement& operator=(const TStreamerElement& ). Int_t GetArrayDim() const; {return fArrayDim;}. Int_t GetArrayLength() const; {return fArrayLength;}. TClass * GetClass() const; {return GetClassPointer();}. const char * GetInclude() const; {return """";}. Int_t GetMaxIndex(Int_t i) const; {return fMaxIndex[i];}. ULong_t GetMethod() const; {return ULong_t(fStreamer);}. Int_t GetNewType() const; {return fNewType;}. TClass* GetNewClass() const; { return fNewClass; }. Int_t GetType() const; {return fType;}. Int_t GetOffset() const; {return fOffset;}. Int_t GetTObjectOffset() const; { return fTObjectOffset; }. const char * GetTypeName() const; {return fTypeName.Data();}. Double_t GetFactor() const; {return fFactor;}. Double_t GetXmin() const; {return fXmin;}. Double_t GetXmax() const; {return fXmax;}. Bool_t IsaPointer() const; {return kFALSE;}. Bool_t HasCounter() con",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:3129,Modifiability,Inherit,InheritsFrom,3129,"har*GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tGetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*GetNewClass() const; Int_tGetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tGetTObjectOffset() const; Int_tGetType() const; const char*GetTypeName() const; const char*GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXmax() const; Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* ",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:3195,Modifiability,Inherit,InheritsFrom,3195," const; virtual const char*GetInclude() const; Int_tGetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*GetNewClass() const; Int_tGetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tGetTObjectOffset() const; Int_tGetType() const; const char*GetTypeName() const; const char*GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXmax() const; Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:7620,Modifiability,inherit,inherits,7620,"reamerElement&); TStreamerElement&operator=(const TStreamerElement&). Data Members; public:. enum ESTLtype { kSTL; kSTLstring; kSTLvector; kSTLlist; kSTLdeque; kSTLmap; kSTLset; kSTLmultimap; kSTLmultiset; kSTLbitset; };; enum { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfArrayDimnumber of array dimensions; Int_tfArrayLengthcumulative size of all array dims; TClass*fClassObject!pointer to class of object; Double_tfFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tfMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewClass!new element class when reading; Int_tfNewType!new element type when reading; Int_tfOffset!element offset in class; Int_tfSizesizeof element; TMemberStreamer*fStreamer!pointer to element Streamer; Int_tfTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tfTypeelement type; TStringfTypeNameData type name of data member; Double_tfXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tfXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerElement(); Default ctor. TStreamerElement(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); Create a TStreamerElement object. ~TStreamerElement(); TStreamerElement dtor. Bool_t CannotSplit() const; Returns true if the element cannot be split, false otherwise.; An element cannot be split if the corresponding class member has; the special characters ""||"" as the first characters in the; comment field. TClass * GetCl",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:7918,Modifiability,Inherit,Inheritance,7918,"bie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfArrayDimnumber of array dimensions; Int_tfArrayLengthcumulative size of all array dims; TClass*fClassObject!pointer to class of object; Double_tfFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tfMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewClass!new element class when reading; Int_tfNewType!new element type when reading; Int_tfOffset!element offset in class; Int_tfSizesizeof element; TMemberStreamer*fStreamer!pointer to element Streamer; Int_tfTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tfTypeelement type; TStringfTypeNameData type name of data member; Double_tfXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tfXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerElement(); Default ctor. TStreamerElement(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); Create a TStreamerElement object. ~TStreamerElement(); TStreamerElement dtor. Bool_t CannotSplit() const; Returns true if the element cannot be split, false otherwise.; An element cannot be split if the corresponding class member has; the special characters ""||"" as the first characters in the; comment field. TClass * GetClassPointer() const; Returns a pointer to the TClass of this element. Int_t GetExecID() const; Returns the TExec id for the EXEC instruction in the comment field; of a TRef data member. const char * GetFullName() const; Return element name including dimensions, if any; Note that this function stores the name into a static array.; You should copy the result. Int_t GetSize() const; Returns size of this element in bytes. TMemberStreamer * GetStreamer() const; Return the local streamer o",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:7931,Modifiability,Inherit,Inherited,7931,"bie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfArrayDimnumber of array dimensions; Int_tfArrayLengthcumulative size of all array dims; TClass*fClassObject!pointer to class of object; Double_tfFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tfMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewClass!new element class when reading; Int_tfNewType!new element type when reading; Int_tfOffset!element offset in class; Int_tfSizesizeof element; TMemberStreamer*fStreamer!pointer to element Streamer; Int_tfTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tfTypeelement type; TStringfTypeNameData type name of data member; Double_tfXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tfXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerElement(); Default ctor. TStreamerElement(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); Create a TStreamerElement object. ~TStreamerElement(); TStreamerElement dtor. Bool_t CannotSplit() const; Returns true if the element cannot be split, false otherwise.; An element cannot be split if the corresponding class member has; the special characters ""||"" as the first characters in the; comment field. TClass * GetClassPointer() const; Returns a pointer to the TClass of this element. Int_t GetExecID() const; Returns the TExec id for the EXEC instruction in the comment field; of a TRef data member. const char * GetFullName() const; Return element name including dimensions, if any; Note that this function stores the name into a static array.; You should copy the result. Int_t GetSize() const; Returns size of this element in bytes. TMemberStreamer * GetStreamer() const; Return the local streamer o",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:9334,Safety,detect,detected,9334,"ent cannot be split if the corresponding class member has; the special characters ""||"" as the first characters in the; comment field. TClass * GetClassPointer() const; Returns a pointer to the TClass of this element. Int_t GetExecID() const; Returns the TExec id for the EXEC instruction in the comment field; of a TRef data member. const char * GetFullName() const; Return element name including dimensions, if any; Note that this function stores the name into a static array.; You should copy the result. Int_t GetSize() const; Returns size of this element in bytes. TMemberStreamer * GetStreamer() const; Return the local streamer object. const char * GetTypeNameBasic() const; Return type name of this element; in case the type name is not a standard basic type, return; the basic type name known to CINT. void Init(TObject* obj = 0); Initliaze the element. Bool_t IsOldFormat(const char* newTypeName); The early 3.00/00 and 3.01/01 versions used to store; dm->GetTypeName instead of dm->GetFullTypename; if this case is detected, the element type name is modified. Bool_t IsBase() const; Return kTRUE if the element represent a base class. void ls(Option_t* option = """") const; Print the content of the element. void SetArrayDim(Int_t dim); Set number of array dimensions. void SetMaxIndex(Int_t dim, Int_t max); set maximum index for array with dimension dim. void SetStreamer(TMemberStreamer* streamer); set pointer to Streamer function for this element. void Streamer(TBuffer& b); Stream an object of class TStreamerElement. void Update(const TClass* oldClass, TClass* newClass); function called by the TClass constructor when replacing an emulated class; by the real class. TStreamerElement(const TStreamerElement& ). TStreamerElement& operator=(const TStreamerElement& ). Int_t GetArrayDim() const; {return fArrayDim;}. Int_t GetArrayLength() const; {return fArrayLength;}. TClass * GetClass() const; {return GetClassPointer();}. const char * GetInclude() const; {return """";}. Int_t GetMaxI",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:3019,Security,Hash,Hash,3019,"t; static Long_tTObject::GetDtorOnly(); virtual Int_tGetExecID() const; Double_tGetFactor() const; virtual const char*GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tGetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*GetNewClass() const; Int_tGetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tGetTObjectOffset() const; Int_tGetType() const; const char*GetTypeName() const; const char*GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXmax() const; Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, vo",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:5859,Testability,Test,TestBit,5859,"::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNewClass(TClass* cl); virtual voidSetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset); virtual voidSetSize(Int_t dsize); virtual voidSetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTObjectOffset(Int_t tobjoffset); virtual voidSetType(Int_t dtype); virtual voidSetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:5898,Testability,Test,TestBits,5898,"::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNewClass(TClass* cl); virtual voidSetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset); virtual voidSetSize(Int_t dsize); virtual voidSetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTObjectOffset(Int_t tobjoffset); virtual voidSetType(Int_t dtype); virtual voidSetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerElement.html:774,Usability,Clear,Clear,774," TStreamerElement(); TStreamerElement(const char* name, const char* title, Int_t offset, Int_t dtype, const char* typeName); virtual~TStreamerElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayDim() const; Int_tGetArrayLength() const; TClass*GetClass() const; virtual TClass*GetClassPointer() const; virtual Option_t*TObject::",MatchSource.WIKI,root/html532/TStreamerElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerElement.html
https://root.cern/root/html532/TStreamerInfo.html:2421,Availability,Error,Error,2421,", TMemberInspector& insp) const; static Bool_tTVirtualStreamerInfo::CanDelete(); static Bool_tTVirtualStreamerInfo::CanOptimize(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t*); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Bool_tCompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); virtual voidCompile(); voidComputeSize(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static TVirtualStreamerInfo*TVirtualStreamerInfo::Factory(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TFile* file, Bool_t force = kFALSE); virtual TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); virtual TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); virtual Int_tGenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); virtual TClassStreamer*GenExplicitClassStreamer(con",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:2550,Availability,error,error,2550,"; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t*); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Bool_tCompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); virtual voidCompile(); voidComputeSize(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static TVirtualStreamerInfo*TVirtualStreamerInfo::Factory(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TFile* file, Bool_t force = kFALSE); virtual TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); virtual TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); virtual Int_tGenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); virtual TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual TVirtualCollectionProxy*GenExplicitProxy(const ROOT::TCollectionProxyIn",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:2634,Availability,error,error,2634,"Clear(Option_t*); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Bool_tCompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); virtual voidCompile(); voidComputeSize(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static TVirtualStreamerInfo*TVirtualStreamerInfo::Factory(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TFile* file, Bool_t force = kFALSE); virtual TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); virtual TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); virtual Int_tGenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); virtual TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual TVirtualCollectionProxy*GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual TClass*GetActualClass(const void* obj) const; virtual",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:16180,Availability,error,error,16180,"ass - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be call",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:13406,Deployability,update,update,13406,"elete; };. protected:. Bool_tTVirtualStreamerInfo::fIsBuilt! true if the StreamerInfo has been 'built'; TStringTNamed::fNameobject identifier; Bool_tTVirtualStreamerInfo::fOptimized! true if the Streamer has been optimized; TStringTNamed::fTitleobject title; static Bool_tTVirtualStreamerInfo::fgCanDeleteTrue if ReadBuffer can delete object; static TVirtualStreamerInfo*TVirtualStreamerInfo::fgInfoFactory; static Bool_tTVirtualStreamerInfo::fgOptimizeTrue if optimization on; static Bool_tTVirtualStreamerInfo::fgStreamMemberWiseTrue if the collections are to be stream ""member-wise"" (when possible). private:. UInt_tfCheckSumchecksum of original class; TClass*fClass!pointer to class; Int_tfClassVersionClass version identifier; TStreamerInfo::TCompInfo*fComp![fNdata] additional info; ULong_t*fElem![fNdata]; TObjArray*fElementsArray of TStreamerElements; Int_t*fLength![fNdata]; ULong_tfLiveCount! Number of outstanding pointer to this StreamerInfo.; ULong_t*fMethod![fNdata]; Int_tfNVirtualInfoLoc! Number of virtual info location to update.; Int_tfNdata!number of optmized types; Int_t*fNewType![fNdata]; Int_tfNumber!Unique identifier; Int_t*fOffset![fNdata]; Version_tfOldVersion! Version of the TStreamerInfo object read from the file; Int_tfOnFileClassVersion!Class version identifier as stored on file.; TStreamerInfoActions::TActionSequence*fReadMemberWise! List of read action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fReadObjectWise! List of read action resulting from the compilation.; Int_tfSize!size of the persistent class; Int_t*fType![fNdata]; ULong_t*fVirtualInfoLoc![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated); TStreamerInfoActions::TActionSequence*fWriteMemberWise! List of write action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fWriteObjectWise! List of write action resulting from the compilation",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:24719,Deployability,Update,Update,24719,"rint value of element i in a TClonesArray. void PrintValueSTL(const char* name, TVirtualCollectionProxy* cont, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; print value of element i in a TClonesArray. void Streamer(TBuffer& b); Stream an object of class TStreamerInfo. void TagFile(TFile* fFile); Mark the classindex of the current file as using this TStreamerInfo; This function is deprecated and its functionality is now done by; the overloads of TBuffer::TagStreamerInfo. void PrintValueAux(char* ladd, Int_t atype, TStreamerElement* aElement, Int_t aleng, Int_t* count); print value of element in object at pointer, type atype, leng aleng or *count; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer.; len is the number of elements to be printed starting at pointer. void Update(const TClass* oldClass, TClass* newClass); function called by the TClass constructor when replacing an emulated class; by the real class. GenEmulatedProxy(const char* class_name, Bool_t silent); Generate emulated collection proxy for a given class. GenEmulatedClassStreamer(const char* class_name, Bool_t silent); Generate emulated class streamer for a given collection class. GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate proxy from static functions. GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate class streamer from static functions. TCompInfo& operator=(const TStreamerInfo& ). TStreamerInfo(const TStreamerInfo& ). void AddReadAction(Int_t index, TStreamerElement* element). void AddWriteAction(Int_t index, TStreamerElement* element). void Compile(). TClass * GetClass() const; {return fClass;}. UInt_t GetCheckSum() const; {return fCheckSum;}. Int_t GetClassVersion() const; {return fClassVersion;}. TObjArray * GetElements() const; {return fElements;}. ULong_t * GetElems() const; ",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:22573,Energy Efficiency,allocate,allocate,22573,"ment number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer. Double_t GetValueClones(TClonesArray* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTLP(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. void InsertArtificialElements(const TObjArray* rules); Insert new members as expressed in the array of TSchemaRule(s). void ls(Option_t* option = """") const; List the TStreamerElement list and also the precomputed tables. void* New(void* obj = 0); An emulated object is created at address obj, if obj is null we; allocate memory for the object. void* NewArray(Long_t nElements, void* ary = 0); An array of emulated objects is created at address ary, if ary is null,; we allocate memory for the array. void DestructorImpl(void* p, Bool_t dtorOnly); Internal part of the destructor.; Destruct each of the datamembers in the same order; as the implicit destructor would. void Destructor(void* p, Bool_t dtorOnly = kFALSE); Emulated destructor for this class.; An emulated object is destroyed at address p.; Destruct each of the datamembers in the same order; as the implicit destructor would. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE); Destroy an array of emulated objects, with optional delete. void PrintValue(const char* name, char* pointer, Int_t i, Int_t len, Int_t lenmax = 1000) const; print value of element i in object at pointer; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 le",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:22730,Energy Efficiency,allocate,allocate,22730,"ay* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTLP(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. void InsertArtificialElements(const TObjArray* rules); Insert new members as expressed in the array of TSchemaRule(s). void ls(Option_t* option = """") const; List the TStreamerElement list and also the precomputed tables. void* New(void* obj = 0); An emulated object is created at address obj, if obj is null we; allocate memory for the object. void* NewArray(Long_t nElements, void* ary = 0); An array of emulated objects is created at address ary, if ary is null,; we allocate memory for the array. void DestructorImpl(void* p, Bool_t dtorOnly); Internal part of the destructor.; Destruct each of the datamembers in the same order; as the implicit destructor would. void Destructor(void* p, Bool_t dtorOnly = kFALSE); Emulated destructor for this class.; An emulated object is destroyed at address p.; Destruct each of the datamembers in the same order; as the implicit destructor would. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE); Destroy an array of emulated objects, with optional delete. void PrintValue(const char* name, char* pointer, Int_t i, Int_t len, Int_t lenmax = 1000) const; print value of element i in object at pointer; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer.; len is the number of elements to be printed starting at pointer. void Prin",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:16088,Integrability,message,message,16088,"merInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this stream",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:16498,Integrability,depend,dependencies,16498," TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The che",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:16552,Integrability,depend,dependencies,16552,"obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data member",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:17162,Integrability,rout,routine,17162,"nue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Algorithm from Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void GenerateDeclaration(FILE* fp, FILE* sfp, con",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:5933,Modifiability,Inherit,InheritsFrom,5933,"merElement(const char* datamember, Int_t& offset) const; TStreamerElement*GetStreamerElementReal(Int_t i, Int_t j) const; static Bool_tTVirtualStreamerInfo::GetStreamMemberWise(); virtual const char*TNamed::GetTitle() const; Int_t*GetTypes() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue(char* pointer, Int_t i, Int_t j, Int_t len) const; Double_tGetValueClones(TClonesArray* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; Double_tGetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; Double_tGetValueSTLP(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; TStreamerInfoActions::TActionSequence*GetWriteMemberWiseActions(Bool_t forCollection); TStreamerInfoActions::TActionSequence*GetWriteObjectWiseActions(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTVirtualStreamerInfo::IsBuilt() const; Bool_tTVirtualStreamerInfo::IsCompiled() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTVirtualStreamerInfo::IsOptimized() const; Int_tTVirtualStreamerInfo::IsRecovered() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual void*New(void* obj = 0); virtual void*NewArray(Long_t nElements, void* ary = 0); virtual TVirtualStreamerInfo*NewInfo(TClass* cl); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delet",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:5999,Modifiability,Inherit,InheritsFrom,5999,"Element*GetStreamerElementReal(Int_t i, Int_t j) const; static Bool_tTVirtualStreamerInfo::GetStreamMemberWise(); virtual const char*TNamed::GetTitle() const; Int_t*GetTypes() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue(char* pointer, Int_t i, Int_t j, Int_t len) const; Double_tGetValueClones(TClonesArray* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; Double_tGetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; Double_tGetValueSTLP(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; TStreamerInfoActions::TActionSequence*GetWriteMemberWiseActions(Bool_t forCollection); TStreamerInfoActions::TActionSequence*GetWriteObjectWiseActions(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTVirtualStreamerInfo::IsBuilt() const; Bool_tTVirtualStreamerInfo::IsCompiled() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTVirtualStreamerInfo::IsOptimized() const; Int_tTVirtualStreamerInfo::IsRecovered() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual void*New(void* obj = 0); virtual void*NewArray(Long_t nElements, void* ary = 0); virtual TVirtualStreamerInfo*NewInfo(TClass* cl); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void*",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:14508,Modifiability,Inherit,Inheritance,14508," Version_tfOldVersion! Version of the TStreamerInfo object read from the file; Int_tfOnFileClassVersion!Class version identifier as stored on file.; TStreamerInfoActions::TActionSequence*fReadMemberWise! List of read action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fReadObjectWise! List of read action resulting from the compilation.; Int_tfSize!size of the persistent class; Int_t*fType![fNdata]; ULong_t*fVirtualInfoLoc![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated); TStreamerInfoActions::TActionSequence*fWriteMemberWise! List of write action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fWriteObjectWise! List of write action resulting from the compilation.; static Int_tfgCountNumber of TStreamerInfo instances; static TStreamerElement*fgElementPointer to current TStreamerElement. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerInfo(); Default ctor. TStreamerInfo(TClass* cl); Create a TStreamerInfo object. ~TStreamerInfo(); TStreamerInfo dtor. void Build(); Build the I/O data structure for the current class version.; A list of TStreamerElement derived classes is built by scanning; one by one the list of data members of the analyzed class. void BuildCheck(); Check if built and consistent with the class dictionary.; This method is called by TFile::ReadStreamerInfo. void BuildEmulated(TFile* file); Create an Emulation TStreamerInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers(",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:14521,Modifiability,Inherit,Inherited,14521," Version_tfOldVersion! Version of the TStreamerInfo object read from the file; Int_tfOnFileClassVersion!Class version identifier as stored on file.; TStreamerInfoActions::TActionSequence*fReadMemberWise! List of read action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fReadObjectWise! List of read action resulting from the compilation.; Int_tfSize!size of the persistent class; Int_t*fType![fNdata]; ULong_t*fVirtualInfoLoc![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated); TStreamerInfoActions::TActionSequence*fWriteMemberWise! List of write action resulting from the compilation for use in member wise streaming.; TStreamerInfoActions::TActionSequence*fWriteObjectWise! List of write action resulting from the compilation.; static Int_tfgCountNumber of TStreamerInfo instances; static TStreamerElement*fgElementPointer to current TStreamerElement. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerInfo(); Default ctor. TStreamerInfo(TClass* cl); Create a TStreamerInfo object. ~TStreamerInfo(); TStreamerInfo dtor. void Build(); Build the I/O data structure for the current class version.; A list of TStreamerElement derived classes is built by scanning; one by one the list of data members of the analyzed class. void BuildCheck(); Check if built and consistent with the class dictionary.; This method is called by TFile::ReadStreamerInfo. void BuildEmulated(TFile* file); Create an Emulation TStreamerInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers(",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:21618,Modifiability,variab,variable,21618," the data member. This function can be used to return a pointer; to the original TStreamerElement object corresponding to the j-th; element of a compressed array in fElems. parameters description:; - i: the serial number in array fElem; - j: the element number in the array of consecutive types; In the above example the class TAttLine has 3 consecutive data members; of the same type ""short"". Compile makes one single array of 3 elements.; To access the TStreamerElement for the second element; of this array, one can call:; TStreamerElement *el = GetStreamerElementReal(0,1);; const char* membername = el->GetName();; This function is typically called from Tbuffer, TXmlBuffer. Double_t GetValueAux(Int_t type, void* ladd, int k, Int_t len); Get the value from inside a collection. Double_t GetValue(char* pointer, Int_t i, Int_t j, Int_t len) const; return value of element i in object at pointer.; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer. Double_t GetValueClones(TClonesArray* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTLP(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. void InsertArtificialElements(const TObjArray* rules); Insert new members as expressed in the array of TSchemaRule(s). void ls(Option_t* option = """") const; List the TStreamerElement list and also the precomputed tables. void* New(void* obj = 0); An emulated object is created at addres",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:23577,Modifiability,variab,variable,23577,"erElement list and also the precomputed tables. void* New(void* obj = 0); An emulated object is created at address obj, if obj is null we; allocate memory for the object. void* NewArray(Long_t nElements, void* ary = 0); An array of emulated objects is created at address ary, if ary is null,; we allocate memory for the array. void DestructorImpl(void* p, Bool_t dtorOnly); Internal part of the destructor.; Destruct each of the datamembers in the same order; as the implicit destructor would. void Destructor(void* p, Bool_t dtorOnly = kFALSE); Emulated destructor for this class.; An emulated object is destroyed at address p.; Destruct each of the datamembers in the same order; as the implicit destructor would. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE); Destroy an array of emulated objects, with optional delete. void PrintValue(const char* name, char* pointer, Int_t i, Int_t len, Int_t lenmax = 1000) const; print value of element i in object at pointer; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer.; len is the number of elements to be printed starting at pointer. void PrintValueClones(const char* name, TClonesArray* clones, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; print value of element i in a TClonesArray. void PrintValueSTL(const char* name, TVirtualCollectionProxy* cont, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; print value of element i in a TClonesArray. void Streamer(TBuffer& b); Stream an object of class TStreamerInfo. void TagFile(TFile* fFile); Mark the classindex of the current file as using this TStreamerInfo; This function is deprecated and its functionality is now done by; the overloads of TBuffer::TagStreamerInfo. void PrintValueAux(char* ladd, Int_t atype, TStreamerElement* aElement, Int_t aleng, Int_t* count); print value of element in object at pointer, type atype, leng ale",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:24618,Modifiability,variab,variable,24618,"len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer.; len is the number of elements to be printed starting at pointer. void PrintValueClones(const char* name, TClonesArray* clones, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; print value of element i in a TClonesArray. void PrintValueSTL(const char* name, TVirtualCollectionProxy* cont, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; print value of element i in a TClonesArray. void Streamer(TBuffer& b); Stream an object of class TStreamerInfo. void TagFile(TFile* fFile); Mark the classindex of the current file as using this TStreamerInfo; This function is deprecated and its functionality is now done by; the overloads of TBuffer::TagStreamerInfo. void PrintValueAux(char* ladd, Int_t atype, TStreamerElement* aElement, Int_t aleng, Int_t* count); print value of element in object at pointer, type atype, leng aleng or *count; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer.; len is the number of elements to be printed starting at pointer. void Update(const TClass* oldClass, TClass* newClass); function called by the TClass constructor when replacing an emulated class; by the real class. GenEmulatedProxy(const char* class_name, Bool_t silent); Generate emulated collection proxy for a given class. GenEmulatedClassStreamer(const char* class_name, Bool_t silent); Generate emulated class streamer for a given collection class. GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate proxy from static functions. GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate class streamer from static functions. TCompInfo& operator=(const TStreamerInfo& ). TStreamerInfo(const TStreamerInfo& ). void AddReadAction(Int_t index, TStream",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:7335,Performance,Optimiz,Optimize,7335,"tTObject::IsOnHeap() const; Bool_tTVirtualStreamerInfo::IsOptimized() const; Int_tTVirtualStreamerInfo::IsRecovered() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual void*New(void* obj = 0); virtual void*NewArray(Long_t nElements, void* ary = 0); virtual TVirtualStreamerInfo*NewInfo(TClass* cl); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); static voidTVirtualStreamerInfo::Optimize(Bool_t opt = kTRUE); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidPrintValue(const char* name, char* pointer, Int_t i, Int_t len, Int_t lenmax = 1000) const; voidPrintValueClones(const char* name, TClonesArray* clones, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; voidPrintValueSTL(const char* name, TVirtualCollectionProxy* cont, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; virtual Int_tTObject::Read(const char* name); Int_tReadBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset); Int_tReadBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UI",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:12579,Performance,optimiz,optimized,12579,"amerInfo::EReadWrite { kBase; kOffsetL; kOffsetP; kCounter; kCharStar; kChar; kShort; kInt; kLong; kFloat; kDouble; kDouble32; kUChar; kUShort; kUInt; kULong; kBits; kLong64; kULong64; kBool; kFloat16; kObject; kAny; kObjectp; kObjectP; kTString; kTObject; kTNamed; kAnyp; kAnyP; kAnyPnoVT; kSTLp; kSkip; kSkipL; kSkipP; kConv; kConvL; kConvP; kSTL; kSTLstring; kStreamer; kStreamLoop; kCache; kArtificial; kCacheNew; kCacheDelete; kMissing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTVirtualStreamerInfo::fIsBuilt! true if the StreamerInfo has been 'built'; TStringTNamed::fNameobject identifier; Bool_tTVirtualStreamerInfo::fOptimized! true if the Streamer has been optimized; TStringTNamed::fTitleobject title; static Bool_tTVirtualStreamerInfo::fgCanDeleteTrue if ReadBuffer can delete object; static TVirtualStreamerInfo*TVirtualStreamerInfo::fgInfoFactory; static Bool_tTVirtualStreamerInfo::fgOptimizeTrue if optimization on; static Bool_tTVirtualStreamerInfo::fgStreamMemberWiseTrue if the collections are to be stream ""member-wise"" (when possible). private:. UInt_tfCheckSumchecksum of original class; TClass*fClass!pointer to class; Int_tfClassVersionClass version identifier; TStreamerInfo::TCompInfo*fComp![fNdata] additional info; ULong_t*fElem![fNdata]; TObjArray*fElementsArray of TStreamerElements; Int_t*fLength![fNdata]; ULong_tfLiveCount! Number of outstanding pointer to this StreamerInfo.; ULong_t*fMethod![fNdata]; Int_tfNVirtualInfoLoc! Number of virtual info location to update.; Int_tfNdata!number of optmized types; Int_t*fNewType![fNdata]; Int_tfNumber!Unique identifier; Int_t*fOffset![fNdata]; Version_tfOldVersion! Version of the TStreamerInfo object read from the file; Int_tfOnFileClassVersion!Class version identifier as stored on fil",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:12827,Performance,optimiz,optimization,12827,"amerInfo::EReadWrite { kBase; kOffsetL; kOffsetP; kCounter; kCharStar; kChar; kShort; kInt; kLong; kFloat; kDouble; kDouble32; kUChar; kUShort; kUInt; kULong; kBits; kLong64; kULong64; kBool; kFloat16; kObject; kAny; kObjectp; kObjectP; kTString; kTObject; kTNamed; kAnyp; kAnyP; kAnyPnoVT; kSTLp; kSkip; kSkipL; kSkipP; kConv; kConvL; kConvP; kSTL; kSTLstring; kStreamer; kStreamLoop; kCache; kArtificial; kCacheNew; kCacheDelete; kMissing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTVirtualStreamerInfo::fIsBuilt! true if the StreamerInfo has been 'built'; TStringTNamed::fNameobject identifier; Bool_tTVirtualStreamerInfo::fOptimized! true if the Streamer has been optimized; TStringTNamed::fTitleobject title; static Bool_tTVirtualStreamerInfo::fgCanDeleteTrue if ReadBuffer can delete object; static TVirtualStreamerInfo*TVirtualStreamerInfo::fgInfoFactory; static Bool_tTVirtualStreamerInfo::fgOptimizeTrue if optimization on; static Bool_tTVirtualStreamerInfo::fgStreamMemberWiseTrue if the collections are to be stream ""member-wise"" (when possible). private:. UInt_tfCheckSumchecksum of original class; TClass*fClass!pointer to class; Int_tfClassVersionClass version identifier; TStreamerInfo::TCompInfo*fComp![fNdata] additional info; ULong_t*fElem![fNdata]; TObjArray*fElementsArray of TStreamerElements; Int_t*fLength![fNdata]; ULong_tfLiveCount! Number of outstanding pointer to this StreamerInfo.; ULong_t*fMethod![fNdata]; Int_tfNVirtualInfoLoc! Number of virtual info location to update.; Int_tfNdata!number of optmized types; Int_t*fNewType![fNdata]; Int_tfNumber!Unique identifier; Int_t*fOffset![fNdata]; Version_tfOldVersion! Version of the TStreamerInfo object read from the file; Int_tfOnFileClassVersion!Class version identifier as stored on fil",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:5823,Security,Hash,Hash,5823,"ObjectWiseActions(); virtual Int_tGetSize() const; Int_tGetSizeElements() const; virtual TStreamerElement*GetStreamerElement(const char* datamember, Int_t& offset) const; TStreamerElement*GetStreamerElementReal(Int_t i, Int_t j) const; static Bool_tTVirtualStreamerInfo::GetStreamMemberWise(); virtual const char*TNamed::GetTitle() const; Int_t*GetTypes() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue(char* pointer, Int_t i, Int_t j, Int_t len) const; Double_tGetValueClones(TClonesArray* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; Double_tGetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; Double_tGetValueSTLP(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; TStreamerInfoActions::TActionSequence*GetWriteMemberWiseActions(Bool_t forCollection); TStreamerInfoActions::TActionSequence*GetWriteObjectWiseActions(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTVirtualStreamerInfo::IsBuilt() const; Bool_tTVirtualStreamerInfo::IsCompiled() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTVirtualStreamerInfo::IsOptimized() const; Int_tTVirtualStreamerInfo::IsRecovered() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual void*New(void* obj = 0); virtual void*NewArray(Long_t nElements, void* ary = 0); virtual TVirtualStreamerInfo*NewInfo(TClass* cl); virtual Bool_tTObject::Notify(); voidTObject::Obsolet",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:8490,Security,checksum,checksum,8490,"onst; voidPrintValue(const char* name, char* pointer, Int_t i, Int_t len, Int_t lenmax = 1000) const; voidPrintValueClones(const char* name, TClonesArray* clones, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; voidPrintValueSTL(const char* name, TVirtualCollectionProxy* cont, Int_t i, Int_t eoffset, Int_t lenmax = 1000) const; virtual Int_tTObject::Read(const char* name); Int_tReadBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset); Int_tReadBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidTVirtualStreamerInfo::SetCanDelete(Bool_t opt = kTRUE); virtual voidSetCheckSum(UInt_t checksum); virtual voidSetClass(TClass* cl); virtual voidSetClassVersion(Int_t vers); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTVirtualStreamerInfo::SetFactory(TVirtualStreamerInfo* factory); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); static Bool_tTVirtualStreamerInfo::SetStreamMemberWise(Bool_t enable = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTagFile(TFile* fFile); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* o",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:17306,Security,checksum,checksum,17306,"ements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Algorithm from Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void GenerateDeclaration(FILE* fp, FILE* sfp, const TList* subClasses, Bool_t top = kTRUE); Write the Declaration of class. UInt_t GenerateIncludes(F",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:17660,Security,checksum,checksum,17660,"ass; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Algorithm from Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void GenerateDeclaration(FILE* fp, FILE* sfp, const TList* subClasses, Bool_t top = kTRUE); Write the Declaration of class. UInt_t GenerateIncludes(FILE* fp, char* inclist, const TList* extrainfos); Add to the header file, the #include need for this class. Int_t GenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); Generate header file for the class described by this TStreamerInfo; the function is called by TFile::MakeProject for each class in the file. TStreamerElement * GetCurrentElement();",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:17692,Security,checksum,checksum,17692,"ass; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be called if the class decribed by this; StreamerInfo is 'emulated'. UInt_t GetCheckSum(UInt_t code) const; Recalculate the checksum of this TStreamerInfo based on its code. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Algorithm from Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void GenerateDeclaration(FILE* fp, FILE* sfp, const TList* subClasses, Bool_t top = kTRUE); Write the Declaration of class. UInt_t GenerateIncludes(FILE* fp, char* inclist, const TList* extrainfos); Add to the header file, the #include need for this class. Int_t GenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); Generate header file for the class described by this TStreamerInfo; the function is called by TFile::MakeProject for each class in the file. TStreamerElement * GetCurrentElement();",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:20990,Security,access,access,20990,"e single element in fElems. example with the class TAttLine; TClass::GetClass(""TAttLine"")->GetStreamerInfo()->ls(); produces;; StreamerInfo for class: TAttLine, version=1; short fLineColor offset= 4 type= 2 line color; short fLineStyle offset= 6 type= 2 line style; short fLineWidth offset= 8 type= 2 line width; i= 0, fLineColor type= 22, offset= 4, len=3, method=0; For I/O implementations (eg. XML) , one has to know the original name; of the data member. This function can be used to return a pointer; to the original TStreamerElement object corresponding to the j-th; element of a compressed array in fElems. parameters description:; - i: the serial number in array fElem; - j: the element number in the array of consecutive types; In the above example the class TAttLine has 3 consecutive data members; of the same type ""short"". Compile makes one single array of 3 elements.; To access the TStreamerElement for the second element; of this array, one can call:; TStreamerElement *el = GetStreamerElementReal(0,1);; const char* membername = el->GetName();; This function is typically called from Tbuffer, TXmlBuffer. Double_t GetValueAux(Int_t type, void* ladd, int k, Int_t len); Get the value from inside a collection. Double_t GetValue(char* pointer, Int_t i, Int_t j, Int_t len) const; return value of element i in object at pointer.; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer. Double_t GetValueClones(TClonesArray* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTLP(TVirtualCollectionProxy* cont",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:27050,Security,checksum,checksum,27050,"? fReadMemberWise : fReadObjectWise; }. TStreamerInfoActions::TActionSequence * GetReadObjectWiseActions(); { return fReadObjectWise; }. TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(Bool_t forCollection); { return forCollection ? fWriteMemberWise : fWriteObjectWise; }. TStreamerInfoActions::TActionSequence * GetWriteObjectWiseActions(); { return fWriteObjectWise; }. Int_t GetNdata() const; {return fNdata;}. Int_t GetNumber() const; {return fNumber;}. Int_t * GetLengths() const; {return fLength;}. ULong_t * GetMethods() const; {return fMethod;}. Int_t * GetNewTypes() const; {return fNewType;}. Int_t * GetOffsets() const; {return fOffset;}. Version_t GetOldVersion() const; {return fOldVersion;}. Int_t GetOnFileClassVersion() const; {return fOnFileClassVersion;}. Int_t * GetTypes() const; {return fType;}. TVirtualStreamerInfo * NewInfo(TClass* cl); {return new TStreamerInfo(cl);}. Int_t ReadBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset). Int_t ReadBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). void SetCheckSum(UInt_t checksum); {fCheckSum = checksum;}. void SetClass(TClass* cl); {fClass = cl;}. void SetClassVersion(Int_t vers); {fClassVersion=vers;}. Int_t WriteBuffer(TBuffer& b, char* pointer, Int_t first). Int_t WriteBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset). Int_t WriteBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). Int_t WriteBufferSTLPtrs(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfo.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:27074,Security,checksum,checksum,27074,"? fReadMemberWise : fReadObjectWise; }. TStreamerInfoActions::TActionSequence * GetReadObjectWiseActions(); { return fReadObjectWise; }. TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(Bool_t forCollection); { return forCollection ? fWriteMemberWise : fWriteObjectWise; }. TStreamerInfoActions::TActionSequence * GetWriteObjectWiseActions(); { return fWriteObjectWise; }. Int_t GetNdata() const; {return fNdata;}. Int_t GetNumber() const; {return fNumber;}. Int_t * GetLengths() const; {return fLength;}. ULong_t * GetMethods() const; {return fMethod;}. Int_t * GetNewTypes() const; {return fNewType;}. Int_t * GetOffsets() const; {return fOffset;}. Version_t GetOldVersion() const; {return fOldVersion;}. Int_t GetOnFileClassVersion() const; {return fOnFileClassVersion;}. Int_t * GetTypes() const; {return fType;}. TVirtualStreamerInfo * NewInfo(TClass* cl); {return new TStreamerInfo(cl);}. Int_t ReadBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset). Int_t ReadBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). void SetCheckSum(UInt_t checksum); {fCheckSum = checksum;}. void SetClass(TClass* cl); {fClass = cl;}. void SetClassVersion(Int_t vers); {fClassVersion=vers;}. Int_t WriteBuffer(TBuffer& b, char* pointer, Int_t first). Int_t WriteBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset). Int_t WriteBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). Int_t WriteBufferSTLPtrs(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfo.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:9396,Testability,Test,TestBit,9396,"s(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidTVirtualStreamerInfo::SetCanDelete(Bool_t opt = kTRUE); virtual voidSetCheckSum(UInt_t checksum); virtual voidSetClass(TClass* cl); virtual voidSetClassVersion(Int_t vers); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTVirtualStreamerInfo::SetFactory(TVirtualStreamerInfo* factory); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); static Bool_tTVirtualStreamerInfo::SetStreamMemberWise(Bool_t enable = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTagFile(TFile* fFile); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, char* pointer, Int_t first); Int_tWriteBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset); Int_tWriteBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset); Int_tWriteBufferSTLPtrs(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset).",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:9435,Testability,Test,TestBits,9435,"s(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidTVirtualStreamerInfo::SetCanDelete(Bool_t opt = kTRUE); virtual voidSetCheckSum(UInt_t checksum); virtual voidSetClass(TClass* cl); virtual voidSetClassVersion(Int_t vers); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTVirtualStreamerInfo::SetFactory(TVirtualStreamerInfo* factory); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); static Bool_tTVirtualStreamerInfo::SetStreamMemberWise(Bool_t enable = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTagFile(TFile* fFile); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, char* pointer, Int_t first); Int_tWriteBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset); Int_tWriteBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset); Int_tWriteBufferSTLPtrs(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset).",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfo.html:15289,Usability,Clear,Clear,15289,"ation.; static Int_tfgCountNumber of TStreamerInfo instances; static TStreamerElement*fgElementPointer to current TStreamerElement. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerInfo(); Default ctor. TStreamerInfo(TClass* cl); Create a TStreamerInfo object. ~TStreamerInfo(); TStreamerInfo dtor. void Build(); Build the I/O data structure for the current class version.; A list of TStreamerElement derived classes is built by scanning; one by one the list of data members of the analyzed class. void BuildCheck(); Check if built and consistent with the class dictionary.; This method is called by TFile::ReadStreamerInfo. void BuildEmulated(TFile* file); Create an Emulation TStreamerInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t ",MatchSource.WIKI,root/html532/TStreamerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:1718,Availability,Error,Error,1718,") const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; TStreamerInfoActions::TActionSequence*CreateCopy(); static TStreamerInfoActions::TActionSequence*CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); TStreamerInfoActions::TActionSequence*CreateSubSequence(const vector<Int_t>& element_ids, size_t offset); static TStreamerInfoActions::TActionSequence*CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtua",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:1847,Availability,error,error,1847,"tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; TStreamerInfoActions::TActionSequence*CreateCopy(); static TStreamerInfoActions::TActionSequence*CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); TStreamerInfoActions::TActionSequence*CreateSubSequence(const vector<Int_t>& element_ids, size_t offset); static TStreamerInfoActions::TActionSequence*CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:1931,Availability,error,error,1931,"ct) const; TStreamerInfoActions::TActionSequence*CreateCopy(); static TStreamerInfoActions::TActionSequence*CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); TStreamerInfoActions::TActionSequence*CreateSubSequence(const vector<Int_t>& element_ids, size_t offset); static TStreamerInfoActions::TActionSequence*CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:2811,Modifiability,Inherit,InheritsFrom,2811,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:2877,Modifiability,Inherit,InheritsFrom,2877,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStreamerInfoActions::T",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:6062,Modifiability,config,configures,6062,"ata); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TStreamerInfoActions::TActionSequenceTActionSequence(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::ActionContainer_tfActions; TStreamerInfoActions::TLoopConfiguration*fLoopConfigIf this is a bundle of memberwise streaming action, this configures the looping; TVirtualStreamerInfo*fStreamerInfoStreamerInfo used to derive these actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddToOffset(Int_t delta). void Print(). TActionSequence(); {}. TActionSequence(TVirtualStreamerInfo* info, UInt_t maxdata); { fActions.reserve(maxdata); }. ~TActionSequence(). void AddAction( action_t action, TConfiguration *conf ). TActionSequence * CreateCopy(). TActionSequence * CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy). TActionSequence * CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy). TActionSequence * CreateSubSequence(const vector<Int_t>& element_ids, size_t offset). » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:6177,Modifiability,Inherit,Inheritance,6177," method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TStreamerInfoActions::TActionSequenceTActionSequence(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::ActionContainer_tfActions; TStreamerInfoActions::TLoopConfiguration*fLoopConfigIf this is a bundle of memberwise streaming action, this configures the looping; TVirtualStreamerInfo*fStreamerInfoStreamerInfo used to derive these actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddToOffset(Int_t delta). void Print(). TActionSequence(); {}. TActionSequence(TVirtualStreamerInfo* info, UInt_t maxdata); { fActions.reserve(maxdata); }. ~TActionSequence(). void AddAction( action_t action, TConfiguration *conf ). TActionSequence * CreateCopy(). TActionSequence * CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy). TActionSequence * CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy). TActionSequence * CreateSubSequence(const vector<Int_t>& element_ids, size_t offset). » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:6190,Modifiability,Inherit,Inherited,6190," method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TStreamerInfoActions::TActionSequenceTActionSequence(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::ActionContainer_tfActions; TStreamerInfoActions::TLoopConfiguration*fLoopConfigIf this is a bundle of memberwise streaming action, this configures the looping; TVirtualStreamerInfo*fStreamerInfoStreamerInfo used to derive these actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddToOffset(Int_t delta). void Print(). TActionSequence(); {}. TActionSequence(TVirtualStreamerInfo* info, UInt_t maxdata); { fActions.reserve(maxdata); }. ~TActionSequence(). void AddAction( action_t action, TConfiguration *conf ). TActionSequence * CreateCopy(). TActionSequence * CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy). TActionSequence * CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy). TActionSequence * CreateSubSequence(const vector<Int_t>& element_ids, size_t offset). » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:2701,Security,Hash,Hash,2701,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:5053,Testability,Test,TestBit,5053,"har* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStreamerInfoActions::TActionSequence&operator=(const TStreamerInfoActions::TActionSequence&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TStreamerInfoActions::TActionSequenceTActionSequence(const TStreamerInfoActions::TActionSequence&); TStreamerInfoActions::TActionSequenceTActionSequence(TVirtualStreamerInfo* info, UInt_t maxdata); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:5092,Testability,Test,TestBits,5092,"har* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStreamerInfoActions::TActionSequence&operator=(const TStreamerInfoActions::TActionSequence&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TStreamerInfoActions::TActionSequenceTActionSequence(const TStreamerInfoActions::TActionSequence&); TStreamerInfoActions::TActionSequenceTActionSequence(TVirtualStreamerInfo* info, UInt_t maxdata); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:751,Usability,Clear,Clear,751," virtual~TActionSequence(); voidTObject::AbstractMethod(const char* method) const; voidAddAction(const TStreamerInfoActions::TConfiguredAction& action); voidAddToOffset(Int_t delta); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; TStreamerInfoActions::TActionSequence*CreateCopy(); static TStreamerInfoActions::TActionSequence*CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); TStreamerInfoActions::TActionSequence*CreateSubSequence(const vector<Int_t>& element_ids, size_t offset); static TStreamerInfoActions::TActionSequence*CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, I",MatchSource.WIKI,root/html532/TStreamerInfoActions__TActionSequence.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguration.html:1237,Modifiability,Inherit,Inheritance,1237,"nks:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TStreamerInfoActions::TConfiguration. class TStreamerInfoActions::TConfiguration. Function Members (Methods); public:. virtual~TConfiguration(); virtual voidAddToOffset(Int_t delta); virtual TStreamerInfoActions::TConfiguration*Copy(); TStreamerInfoActions::TConfiguration&operator=(const TStreamerInfoActions::TConfiguration&); virtual voidPrint() const; virtual voidPrintDebug(TBuffer& buffer, void* object) const; TStreamerInfoActions::TConfigurationTConfiguration(const TStreamerInfoActions::TConfiguration&); TStreamerInfoActions::TConfigurationTConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset); TStreamerInfoActions::TConfigurationTConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset, UInt_t length). Data Members; public:. UInt_tfElemIdIdentifier of the TStreamerElement; TVirtualStreamerInfo*fInfoTStreamerInfo form which the action is derived; UInt_tfLengthNumber of element in a fixed length array.; Int_tfOffsetOffset within the object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset); {}. TConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset, UInt_t length); {}. virtual ~TConfiguration(); {}. void AddToOffset(Int_t delta). TConfiguration * Copy(); { return new TConfiguration(*this); }. void Print() const. void PrintDebug(TBuffer& buffer, void* object) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguration.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguration.html:1250,Modifiability,Inherit,Inherited,1250,"nks:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TStreamerInfoActions::TConfiguration. class TStreamerInfoActions::TConfiguration. Function Members (Methods); public:. virtual~TConfiguration(); virtual voidAddToOffset(Int_t delta); virtual TStreamerInfoActions::TConfiguration*Copy(); TStreamerInfoActions::TConfiguration&operator=(const TStreamerInfoActions::TConfiguration&); virtual voidPrint() const; virtual voidPrintDebug(TBuffer& buffer, void* object) const; TStreamerInfoActions::TConfigurationTConfiguration(const TStreamerInfoActions::TConfiguration&); TStreamerInfoActions::TConfigurationTConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset); TStreamerInfoActions::TConfigurationTConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset, UInt_t length). Data Members; public:. UInt_tfElemIdIdentifier of the TStreamerElement; TVirtualStreamerInfo*fInfoTStreamerInfo form which the action is derived; UInt_tfLengthNumber of element in a fixed length array.; Int_tfOffsetOffset within the object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset); {}. TConfiguration(TVirtualStreamerInfo* info, UInt_t id, Int_t offset, UInt_t length); {}. virtual ~TConfiguration(); {}. void AddToOffset(Int_t delta). TConfiguration * Copy(); { return new TConfiguration(*this); }. void Print() const. void PrintDebug(TBuffer& buffer, void* object) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguration.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:1199,Availability,Error,Error,1199," virtual~TConfiguredAction(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::Get",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:1328,Availability,error,error,1328," virtual~TConfiguredAction(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::Get",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:1412,Availability,error,error,1412," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:6530,Deployability,configurat,configuration,6530,"name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::TStreamerInfoAction_tfAction; TStreamerInfoActions::TConfiguration*fConfiguration; TStreamerInfoActions::TStreamerInfoLoopAction_tfLoopAction; TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_tfVecPtrLoopAction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void PrintDebug(TBuffer& buffer, void* object) const. TConfiguredAction(); {}. TConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); Technically this is a move constructor ... TConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Usual constructor. ~TConfiguredAction(); Usual destructor.; Idea: the configuration ownership might be moved to a single list so that; we can shared them between the optimized and non-optimized list of actions. Int_t operator()(TBuffer& buffer, void* object) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:2292,Modifiability,Inherit,InheritsFrom,2292,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:2358,Modifiability,Inherit,InheritsFrom,2358,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Int_toperator()(TBuffer",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:6070,Modifiability,Inherit,Inheritance,6070,"st; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::TStreamerInfoAction_tfAction; TStreamerInfoActions::TConfiguration*fConfiguration; TStreamerInfoActions::TStreamerInfoLoopAction_tfLoopAction; TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_tfVecPtrLoopAction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void PrintDebug(TBuffer& buffer, void* object) const. TConfiguredAction(); {}. TConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); Technically this is a move constructor ... TConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Usual constructor. ~TConfiguredAction(); Usual destructor.; Idea: the configuration ownership might be moved to a single list so that; we can shared them between the optimized and non-optimized list of actions. Int_t operator()(TBuffer& buffer, void* object) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TSt",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:6083,Modifiability,Inherit,Inherited,6083,"st; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::TStreamerInfoAction_tfAction; TStreamerInfoActions::TConfiguration*fConfiguration; TStreamerInfoActions::TStreamerInfoLoopAction_tfLoopAction; TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_tfVecPtrLoopAction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void PrintDebug(TBuffer& buffer, void* object) const. TConfiguredAction(); {}. TConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); Technically this is a move constructor ... TConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Usual constructor. ~TConfiguredAction(); Usual destructor.; Idea: the configuration ownership might be moved to a single list so that; we can shared them between the optimized and non-optimized list of actions. Int_t operator()(TBuffer& buffer, void* object) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TSt",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:6530,Modifiability,config,configuration,6530,"name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::TStreamerInfoAction_tfAction; TStreamerInfoActions::TConfiguration*fConfiguration; TStreamerInfoActions::TStreamerInfoLoopAction_tfLoopAction; TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_tfVecPtrLoopAction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void PrintDebug(TBuffer& buffer, void* object) const. TConfiguredAction(); {}. TConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); Technically this is a move constructor ... TConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Usual constructor. ~TConfiguredAction(); Usual destructor.; Idea: the configuration ownership might be moved to a single list so that; we can shared them between the optimized and non-optimized list of actions. Int_t operator()(TBuffer& buffer, void* object) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:6626,Performance,optimiz,optimized,6626,"name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::TStreamerInfoAction_tfAction; TStreamerInfoActions::TConfiguration*fConfiguration; TStreamerInfoActions::TStreamerInfoLoopAction_tfLoopAction; TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_tfVecPtrLoopAction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void PrintDebug(TBuffer& buffer, void* object) const. TConfiguredAction(); {}. TConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); Technically this is a move constructor ... TConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Usual constructor. ~TConfiguredAction(); Usual destructor.; Idea: the configuration ownership might be moved to a single list so that; we can shared them between the optimized and non-optimized list of actions. Int_t operator()(TBuffer& buffer, void* object) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:6644,Performance,optimiz,optimized,6644,"name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStreamerInfoActions::TStreamerInfoAction_tfAction; TStreamerInfoActions::TConfiguration*fConfiguration; TStreamerInfoActions::TStreamerInfoLoopAction_tfLoopAction; TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_tfVecPtrLoopAction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void PrintDebug(TBuffer& buffer, void* object) const. TConfiguredAction(); {}. TConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); Technically this is a move constructor ... TConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Usual constructor. ~TConfiguredAction(); Usual destructor.; Idea: the configuration ownership might be moved to a single list so that; we can shared them between the optimized and non-optimized list of actions. Int_t operator()(TBuffer& buffer, void* object) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection) const. Int_t operator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfoActions.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:2182,Security,Hash,Hash,2182,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:5034,Testability,Test,TestBit,5034," Int_toperator()(TBuffer& buffer, void* start_collection, const void* end_collection) const; Int_toperator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const; TStreamerInfoActions::TConfiguredAction&operator=(const TStreamerInfoActions::TConfiguredAction&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidPrintDebug(TBuffer& buffer, void* object) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TStreamerInfoActions::TConfiguredActionTConfiguredAction(); TStreamerInfoActions::TConfiguredActionTConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); TStreamerInfoActions::TConfiguredActionTConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:5073,Testability,Test,TestBits,5073," Int_toperator()(TBuffer& buffer, void* start_collection, const void* end_collection) const; Int_toperator()(TBuffer& buffer, void* start_collection, const void* end_collection, const TStreamerInfoActions::TLoopConfiguration* loopconf) const; TStreamerInfoActions::TConfiguredAction&operator=(const TStreamerInfoActions::TConfiguredAction&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidPrintDebug(TBuffer& buffer, void* object) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TStreamerInfoActions::TConfiguredActionTConfiguredAction(); TStreamerInfoActions::TConfiguredActionTConfiguredAction(const TStreamerInfoActions::TConfiguredAction& rval); TStreamerInfoActions::TConfiguredActionTConfiguredAction(TStreamerInfoActions::TStreamerInfoLoopAction_t action, TStreamerInfoActions::TConfiguration* conf); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html:659,Usability,Clear,Clear,659," virtual~TConfiguredAction(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::Get",MatchSource.WIKI,root/html532/TStreamerInfoActions__TConfiguredAction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TConfiguredAction.html
https://root.cern/root/html532/TStreamerLoop.html:1527,Availability,Error,Error,1527,"nst char* name, const char* title, Int_t offset, const char* countName, const char* countClass, Int_t version, const char* typeName); virtual~TStreamerLoop(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; const char*GetCountClass() const; const char*GetCountName() const; Int_tGetCountVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() co",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:1656,Availability,error,error,1656,"me); virtual~TStreamerLoop(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; const char*GetCountClass() const; const char*GetCountName() const; Int_tGetCountVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const cha",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:1740,Availability,error,error,1740," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; const char*GetCountClass() const; const char*GetCountName() const; Int_tGetCountVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULo",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:6928,Deployability,Update,Update,6928,"rtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:3760,Modifiability,Inherit,InheritsFrom,3760,"virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); s",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:3826,Modifiability,Inherit,InheritsFrom,3826,"t::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TO",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:9083,Modifiability,inherit,inherits,9083,"t; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; TStringfCountClassname of the class with the counter; TStringfCountNamename of data member holding the array count; Int_tfCountVersionversion number of the class with the counter; TStreamerBasicType*fCounter!pointer to basic type counter; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerLoop(); Default ctor. TStreamerLoop(const char* name, const char* title, Int_t offset, const char* countName, const char* countClass, Int_t version, const char* typeName); Create a TStreamerLoop obje",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:9453,Modifiability,Inherit,Inheritance,9453,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerLoop(); Default ctor. TStreamerLoop(const char* name, const char* title, Int_t offset, const char* countName, const char* countClass, Int_t version, const char* typeName); Create a TStreamerLoop object. ~TStreamerLoop(); TStreamerLoop dtor. ULong_t GetMethod() const; return address of counter. Int_t GetSize() const; Returns size of counter in bytes. void Init(TObject* obj = 0); Setup the element.; If directive is a StreamerInfo and it correspond to the; same class a 'countClass' the streamerInfo is used instead of the current StreamerInfo of the TClass; for 'countClass'. const char * GetInclude() const; Return the proper include for this element. void Streamer(TBuffer& b); Stream an object of class TStreamerLoop. TStreamerElement& operator=(const TStreamerLoop& ). Bool_t IsaPointer() const; {return kFALSE;}. Bool_t HasCounter() const; {return kFALSE;}. const char * GetCountClass() const; {return fCountClass.Data();}. const cha",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:9466,Modifiability,Inherit,Inherited,9466,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerLoop(); Default ctor. TStreamerLoop(const char* name, const char* title, Int_t offset, const char* countName, const char* countClass, Int_t version, const char* typeName); Create a TStreamerLoop object. ~TStreamerLoop(); TStreamerLoop dtor. ULong_t GetMethod() const; return address of counter. Int_t GetSize() const; Returns size of counter in bytes. void Init(TObject* obj = 0); Setup the element.; If directive is a StreamerInfo and it correspond to the; same class a 'countClass' the streamerInfo is used instead of the current StreamerInfo of the TClass; for 'countClass'. const char * GetInclude() const; Return the proper include for this element. void Streamer(TBuffer& b); Stream an object of class TStreamerLoop. TStreamerElement& operator=(const TStreamerLoop& ). Bool_t IsaPointer() const; {return kFALSE;}. Bool_t HasCounter() const; {return kFALSE;}. const char * GetCountClass() const; {return fCountClass.Data();}. const cha",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:3650,Security,Hash,Hash,3650,"nst char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tGetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* p",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:6833,Testability,Test,TestBit,6833,"rtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:6872,Testability,Test,TestBits,6872,"rtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerLoop.html:984,Usability,Clear,Clear,984," TStreamerLoop(); TStreamerLoop(const char* name, const char* title, Int_t offset, const char* countName, const char* countClass, Int_t version, const char* typeName); virtual~TStreamerLoop(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const;",MatchSource.WIKI,root/html532/TStreamerLoop.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerLoop.html
https://root.cern/root/html532/TStreamerObject.html:1418,Availability,Error,Error,1418," TStreamerObject(); TStreamerObject(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; I",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:1547,Availability,error,error,1547,"); virtual~TStreamerObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamer",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:1631,Availability,error,error,1631," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStre",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:6667,Deployability,Update,Update,6667,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:384,Modifiability,inherit,inherits,384,". TStreamerObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TStreamerObject. class TStreamerObject: public TStreamerElement. TStreamerObject implements streaming of embedded objects whose type; inherits from TObject. Function Members (Methods); public:. TStreamerObject(); TStreamerObject(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; I",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:3590,Modifiability,Inherit,InheritsFrom,3590,"*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator dele",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:3656,Modifiability,Inherit,InheritsFrom,3656,"onst; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, ",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:8591,Modifiability,inherit,inherits,8591,"Lmap; kSTLset; kSTLmultimap; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObject(); Default ctor. TStreamerObject(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObject object. ~TStreamerObject(); TStreamerObject dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:8961,Modifiability,Inherit,Inheritance,8961,"er to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObject(); Default ctor. TStreamerObject(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObject object. ~TStreamerObject(); TStreamerObject dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of object class in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerObject. TStreamerElement& operator=(const TStreamerObject& ). TStreamerObject(const TStreamerObject& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:8974,Modifiability,Inherit,Inherited,8974,"er to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObject(); Default ctor. TStreamerObject(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObject object. ~TStreamerObject(); TStreamerObject dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of object class in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerObject. TStreamerElement& operator=(const TStreamerObject& ). TStreamerObject(const TStreamerObject& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:3480,Security,Hash,Hash,3480,"treamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::opera",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:6572,Testability,Test,TestBit,6572,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:6611,Testability,Test,TestBits,6611,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObject.html:875,Usability,Clear,Clear,875," TStreamerObject(); TStreamerObject(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; I",MatchSource.WIKI,root/html532/TStreamerObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObject.html
https://root.cern/root/html532/TStreamerObjectAny.html:1432,Availability,Error,Error,1432," TStreamerObjectAny(); TStreamerObjectAny(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectAny(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArray",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:1561,Availability,error,error,1561,"virtual~TStreamerObjectAny(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamer",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:1645,Availability,error,error,1645," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStre",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:6681,Deployability,Update,Update,6681,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:387,Modifiability,inherit,inheriting,387,". TStreamerObjectAny. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TStreamerObjectAny. class TStreamerObjectAny: public TStreamerElement. TStreamerObjectAny implement streaming of embedded object not; inheriting from TObject. Function Members (Methods); public:. TStreamerObjectAny(); TStreamerObjectAny(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectAny(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArray",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:3604,Modifiability,Inherit,InheritsFrom,3604,"*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator dele",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:3670,Modifiability,Inherit,InheritsFrom,3670,"onst; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, ",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:8617,Modifiability,inherit,inherits,8617,"Lmap; kSTLset; kSTLmultimap; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectAny(); Default ctor. TStreamerObjectAny(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectAny object. ~TStreamerObjectAny(); TStreamerObjectAny dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for thi",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:8987,Modifiability,Inherit,Inheritance,8987,"Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectAny(); Default ctor. TStreamerObjectAny(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectAny object. ~TStreamerObjectAny(); TStreamerObjectAny dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of anyclass in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerObjectAny. TStreamerElement& operator=(const TStreamerObjectAny& ). TStreamerObjectAny(const TStreamerObjectAny& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:9000,Modifiability,Inherit,Inherited,9000,"Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectAny(); Default ctor. TStreamerObjectAny(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectAny object. ~TStreamerObjectAny(); TStreamerObjectAny dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of anyclass in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerObjectAny. TStreamerElement& operator=(const TStreamerObjectAny& ). TStreamerObjectAny(const TStreamerObjectAny& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:3494,Security,Hash,Hash,3494,"treamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::opera",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:6586,Testability,Test,TestBit,6586,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:6625,Testability,Test,TestBits,6625,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAny.html:889,Usability,Clear,Clear,889," TStreamerObjectAny(); TStreamerObjectAny(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectAny(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArray",MatchSource.WIKI,root/html532/TStreamerObjectAny.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAny.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:1484,Availability,Error,Error,1484,"erObjectAnyPointer(); TStreamerObjectAnyPointer(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectAnyPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIco",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:1613,Availability,error,error,1613,"~TStreamerObjectAnyPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamer",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:1697,Availability,error,error,1697," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStre",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:6697,Deployability,Update,Update,6697,"l Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:418,Modifiability,inherit,inheriting,418,". TStreamerObjectAnyPointer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TStreamerObjectAnyPointer. class TStreamerObjectAnyPointer: public TStreamerElement. TStreamerObjectPointerAny implements streaming of pointer to object; not inheriting from TObject. Function Members (Methods); public:. TStreamerObjectAnyPointer(); TStreamerObjectAnyPointer(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectAnyPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const ",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:3656,Modifiability,Inherit,InheritsFrom,3656,"*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); s",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:3722,Modifiability,Inherit,InheritsFrom,3722,"onst; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TO",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:8661,Modifiability,inherit,inherits,8661,"Lmap; kSTLset; kSTLmultimap; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectAnyPointer(); Default ctor. TStreamerObjectAnyPointer(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectAnyPointer object. ~TStreamerObjectAnyPointer(); TStreamerObjectAnyPointer dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:9031,Modifiability,Inherit,Inheritance,9031,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectAnyPointer(); Default ctor. TStreamerObjectAnyPointer(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectAnyPointer object. ~TStreamerObjectAnyPointer(); TStreamerObjectAnyPointer dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of objectpointer in bytes. void SetArrayDim(Int_t dim); Set number of array dimensions. void Streamer(TBuffer& b); Stream an object of class TStreamerObjectAnyPointer. TStreamerElement& operator=(const TStreamerObjectAnyPointer& ). Bool_t IsaPointer() const; {return kFALSE;}. TStreamerObjectAnyPointer(const TStreamerObjectAnyPointer& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:9044,Modifiability,Inherit,Inherited,9044,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectAnyPointer(); Default ctor. TStreamerObjectAnyPointer(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectAnyPointer object. ~TStreamerObjectAnyPointer(); TStreamerObjectAnyPointer dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of objectpointer in bytes. void SetArrayDim(Int_t dim); Set number of array dimensions. void Streamer(TBuffer& b); Stream an object of class TStreamerObjectAnyPointer. TStreamerElement& operator=(const TStreamerObjectAnyPointer& ). Bool_t IsaPointer() const; {return kFALSE;}. TStreamerObjectAnyPointer(const TStreamerObjectAnyPointer& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:3546,Security,Hash,Hash,3546,"treamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* p",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:6602,Testability,Test,TestBit,6602,"l Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:6641,Testability,Test,TestBits,6641,"l Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectAnyPointer.html:941,Usability,Clear,Clear,941," TStreamerObjectAnyPointer(); TStreamerObjectAnyPointer(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectAnyPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const ",MatchSource.WIKI,root/html532/TStreamerObjectAnyPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectAnyPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:1459,Availability,Error,Error,1459," TStreamerObjectPointer(); TStreamerObjectPointer(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:1588,Availability,error,error,1588,"ual~TStreamerObjectPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamer",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:1672,Availability,error,error,1672," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStre",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:6672,Deployability,Update,Update,6672,"l Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:402,Modifiability,inherit,inheriting,402,". TStreamerObjectPointer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TStreamerObjectPointer. class TStreamerObjectPointer: public TStreamerElement. TStreamerObjectPointer implements streaming of pointer to object; inheriting from TObject. Function Members (Methods); public:. TStreamerObjectPointer(); TStreamerObjectPointer(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:3631,Modifiability,Inherit,InheritsFrom,3631,"*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); s",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:3697,Modifiability,Inherit,InheritsFrom,3697,"onst; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TO",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:8624,Modifiability,inherit,inherits,8624,"Lmap; kSTLset; kSTLmultimap; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectPointer(); Default ctor. TStreamerObjectPointer(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectPointer object. ~TStreamerObjectPointer(); TStreamerObjectPointer dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the pr",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:8994,Modifiability,Inherit,Inheritance,8994,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectPointer(); Default ctor. TStreamerObjectPointer(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectPointer object. ~TStreamerObjectPointer(); TStreamerObjectPointer dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of objectpointer in bytes. void SetArrayDim(Int_t dim); Set number of array dimensions. void Streamer(TBuffer& b); Stream an object of class TStreamerObjectPointer. TStreamerElement& operator=(const TStreamerObjectPointer& ). Bool_t IsaPointer() const; {return kFALSE;}. TStreamerObjectPointer(const TStreamerObjectPointer& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has ",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:9007,Modifiability,Inherit,Inherited,9007,"e_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerObjectPointer(); Default ctor. TStreamerObjectPointer(const char* name, const char* title, Int_t offset, const char* typeName); Create a TStreamerObjectPointer object. ~TStreamerObjectPointer(); TStreamerObjectPointer dtor. void Init(TObject* obj = 0); Setup the element. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of objectpointer in bytes. void SetArrayDim(Int_t dim); Set number of array dimensions. void Streamer(TBuffer& b); Stream an object of class TStreamerObjectPointer. TStreamerElement& operator=(const TStreamerObjectPointer& ). Bool_t IsaPointer() const; {return kFALSE;}. TStreamerObjectPointer(const TStreamerObjectPointer& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has ",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:3521,Security,Hash,Hash,3521,"treamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* p",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:6577,Testability,Test,TestBit,6577,"l Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:6616,Testability,Test,TestBits,6616,"l Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerObjectPointer.html:916,Usability,Clear,Clear,916," TStreamerObjectPointer(); TStreamerObjectPointer(const char* name, const char* title, Int_t offset, const char* typeName); virtual~TStreamerObjectPointer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_",MatchSource.WIKI,root/html532/TStreamerObjectPointer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerObjectPointer.html
https://root.cern/root/html532/TStreamerSTL.html:1381,Availability,Error,Error,1381," TStreamerSTL(); TStreamerSTL(const char* name, const char* title, Int_t offset, const char* typeName, const char* trueType, Bool_t dmPointer); virtual~TStreamerSTL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength(",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:1510,Availability,error,error,1510,"ype, Bool_t dmPointer); virtual~TStreamerSTL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tGetCtype() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; v",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:1594,Availability,error,error,1594,"ar* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tGetCtype() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetNam",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:6672,Deployability,Update,Update,6672,"voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCtype(Int_t t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); voidSetSTLtype(Int_t t); virtual voidSetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:3601,Modifiability,Inherit,InheritsFrom,3601," TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; Int_tGetSTLtype() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject:",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:3667,Modifiability,Inherit,InheritsFrom,3667,"nt::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; Int_tGetSTLtype() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:8668,Modifiability,inherit,inherits,8668,"Lmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Int_tfCtypeSTL contained type; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tfSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTL(); Default ctor. TStreamerSTL(const char* name, const char* title, Int_t offset, const char* typeName, const char* trueType, Bool_t dmPointer); Create a TStreamerSTL object. ~TStreamerSTL(); TStreamerSTL dtor. Bool_t CannotSplit() const; We can not split STL's which are inside a va",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:9038,Modifiability,Inherit,Inheritance,9038,"ersion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tfSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTL(); Default ctor. TStreamerSTL(const char* name, const char* title, Int_t offset, const char* typeName, const char* trueType, Bool_t dmPointer); Create a TStreamerSTL object. ~TStreamerSTL(); TStreamerSTL dtor. Bool_t CannotSplit() const; We can not split STL's which are inside a variable size array.; At least for now. Bool_t IsaPointer() const; Return true if the data member is a pointer. Bool_t IsBase() const; Return kTRUE if the element represent a base class. Int_t GetSize() const; Returns size of STL container in bytes. void ls(Option_t* option = """") const; Print the content of the element. const char * GetInclude() const; Return the proper include for this element. void SetStreamer(TMemberStreamer* streamer); Set pointer to Streamer function for this element; NOTE: we do not take ownership. void Streamer(TBuffer& b); Stream an object of class TStreamerSTL. TStreamerElement& operator=(const TStreamerSTL& ). TStreamerST",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:9051,Modifiability,Inherit,Inherited,9051,"ersion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tfSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTL(); Default ctor. TStreamerSTL(const char* name, const char* title, Int_t offset, const char* typeName, const char* trueType, Bool_t dmPointer); Create a TStreamerSTL object. ~TStreamerSTL(); TStreamerSTL dtor. Bool_t CannotSplit() const; We can not split STL's which are inside a variable size array.; At least for now. Bool_t IsaPointer() const; Return true if the data member is a pointer. Bool_t IsBase() const; Return kTRUE if the element represent a base class. Int_t GetSize() const; Returns size of STL container in bytes. void ls(Option_t* option = """") const; Print the content of the element. const char * GetInclude() const; Return the proper include for this element. void SetStreamer(TMemberStreamer* streamer); Set pointer to Streamer function for this element; NOTE: we do not take ownership. void Streamer(TBuffer& b); Stream an object of class TStreamerSTL. TStreamerElement& operator=(const TStreamerSTL& ). TStreamerST",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:9408,Modifiability,variab,variable,9408,"g; Int_tTStreamerElement::fOffset!element offset in class; Int_tfSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTL(); Default ctor. TStreamerSTL(const char* name, const char* title, Int_t offset, const char* typeName, const char* trueType, Bool_t dmPointer); Create a TStreamerSTL object. ~TStreamerSTL(); TStreamerSTL dtor. Bool_t CannotSplit() const; We can not split STL's which are inside a variable size array.; At least for now. Bool_t IsaPointer() const; Return true if the data member is a pointer. Bool_t IsBase() const; Return kTRUE if the element represent a base class. Int_t GetSize() const; Returns size of STL container in bytes. void ls(Option_t* option = """") const; Print the content of the element. const char * GetInclude() const; Return the proper include for this element. void SetStreamer(TMemberStreamer* streamer); Set pointer to Streamer function for this element; NOTE: we do not take ownership. void Streamer(TBuffer& b); Stream an object of class TStreamerSTL. TStreamerElement& operator=(const TStreamerSTL& ). TStreamerSTL(const TStreamerSTL& ). Int_t GetSTLtype() const; {return fSTLtype;}. Int_t GetCtype() const; {return fCtype;}. void SetSTLtype(Int_t t); {fSTLtype = t;}. void SetCtype(Int_t t); {fCtype = t;}. » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: T",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:3491,Security,Hash,Hash,3491,"ex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; Int_tGetSTLtype() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsaPointer() const; virtual Bool_tIsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTO",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:6577,Testability,Test,TestBit,6577,"voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCtype(Int_t t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); voidSetSTLtype(Int_t t); virtual voidSetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:6616,Testability,Test,TestBits,6616,"voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCtype(Int_t t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); voidSetSTLtype(Int_t t); virtual voidSetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTL.html:838,Usability,Clear,Clear,838," TStreamerSTL(); TStreamerSTL(const char* name, const char* title, Int_t offset, const char* typeName, const char* trueType, Bool_t dmPointer); virtual~TStreamerSTL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength(",MatchSource.WIKI,root/html532/TStreamerSTL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTL.html
https://root.cern/root/html532/TStreamerSTLstring.html:1407,Availability,Error,Error,1407,"TStreamerSTLstring(); TStreamerSTLstring(const char* name, const char* title, Int_t offset, const char* typeName, Bool_t dmPointer); virtual~TStreamerSTLstring(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerSTL::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tTStreamerSTL::GetCtype() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() cons",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:1536,Availability,error,error,1536,"r); virtual~TStreamerSTLstring(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerSTL::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tTStreamerSTL::GetCtype() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:1620,Availability,error,error,1620,"nst; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerSTL::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tTStreamerSTL::GetCtype() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:6810,Deployability,Update,Update,6810,"; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTStreamerSTL::SetCtype(Int_t t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); voidTStreamerSTL::SetSTLtype(Int_t t); virtual voidTStreamerSTL::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:3655,Modifiability,Inherit,InheritsFrom,3655,"merElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; Int_tTStreamerSTL::GetSTLtype() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerSTL::IsaPointer() const; virtual Bool_tTStreamerSTL::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerSTL::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operato",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:3721,Modifiability,Inherit,InheritsFrom,3721,"() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; Int_tTStreamerSTL::GetSTLtype() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerSTL::IsaPointer() const; virtual Bool_tTStreamerSTL::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerSTL::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void*",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:8838,Modifiability,inherit,inherits,8838,"Lbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Int_tTStreamerSTL::fCtypeSTL contained type; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerSTL::fSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTLstring(); Default ctor. TStreamerSTLstring(const char* name, const char* title, Int_t offset, const char* typeName, Bool_t dmPointer); Create a TStreamerSTLstring object. ~TStreamerSTLstring(); TStreamerSTLstring dtor. const char * GetInclude() const; Return the proper",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:9208,Modifiability,Inherit,Inheritance,9208,"Element::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerSTL::fSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTLstring(); Default ctor. TStreamerSTLstring(const char* name, const char* title, Int_t offset, const char* typeName, Bool_t dmPointer); Create a TStreamerSTLstring object. ~TStreamerSTLstring(); TStreamerSTLstring dtor. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of anyclass in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerSTLstring. TStreamerElement& operator=(const TStreamerSTLstring& ). TStreamerSTLstring(const TStreamerSTLstring& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:9221,Modifiability,Inherit,Inherited,9221,"Element::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerSTL::fSTLtypetype of STL vector; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerSTLstring(); Default ctor. TStreamerSTLstring(const char* name, const char* title, Int_t offset, const char* typeName, Bool_t dmPointer); Create a TStreamerSTLstring object. ~TStreamerSTLstring(); TStreamerSTLstring dtor. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of anyclass in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerSTLstring. TStreamerElement& operator=(const TStreamerSTLstring& ). TStreamerSTLstring(const TStreamerSTLstring& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:3545,Security,Hash,Hash,3545,"nst; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; Int_tTStreamerSTL::GetSTLtype() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerSTL::IsaPointer() const; virtual Bool_tTStreamerSTL::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerSTL::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject:",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:6715,Testability,Test,TestBit,6715,"; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTStreamerSTL::SetCtype(Int_t t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); voidTStreamerSTL::SetSTLtype(Int_t t); virtual voidTStreamerSTL::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:6754,Testability,Test,TestBits,6754,"; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTStreamerSTL::SetCtype(Int_t t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); voidTStreamerSTL::SetSTLtype(Int_t t); virtual voidTStreamerSTL::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerSTLstring.html:864,Usability,Clear,Clear,864," TStreamerSTLstring(); TStreamerSTLstring(const char* name, const char* title, Int_t offset, const char* typeName, Bool_t dmPointer); virtual~TStreamerSTLstring(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerSTL::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStream",MatchSource.WIKI,root/html532/TStreamerSTLstring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerSTLstring.html
https://root.cern/root/html532/TStreamerString.html:1352,Availability,Error,Error,1352," TStreamerString(); TStreamerString(const char* name, const char* title, Int_t offset); virtual~TStreamerString(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElem",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:1481,Availability,error,error,1481,"); virtual~TStreamerString(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamer",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:1565,Availability,error,error,1565," virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStre",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:6619,Deployability,Update,Update,6619,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:3524,Modifiability,Inherit,InheritsFrom,3524,"*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObj",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:3590,Modifiability,Inherit,InheritsFrom,3590,"onst; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator de",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:8543,Modifiability,inherit,inherits,8543,"Lmap; kSTLset; kSTLmultimap; kSTLmultiset; kSTLbitset; };; enum TStreamerElement::[unnamed] { kHasRange; kCache; kRepeat; kRead; kWrite; kDoNotDelete; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerString(); Default ctor. TStreamerString(const char* name, const char* title, Int_t offset); Create a TStreamerString object. ~TStreamerString(); TStreamerString dtor. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of anyclass in bytes. void Streamer(TB",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:8913,Modifiability,Inherit,Inheritance,8913,"lative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerString(); Default ctor. TStreamerString(const char* name, const char* title, Int_t offset); Create a TStreamerString object. ~TStreamerString(); TStreamerString dtor. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of anyclass in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerString. TStreamerElement& operator=(const TStreamerString& ). TStreamerString(const TStreamerString& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:8926,Modifiability,Inherit,Inherited,8926,"lative size of all array dims; TClass*TStreamerElement::fClassObject!pointer to class of object; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTStreamerElement::fTypeNameData type name of data member; Double_tTStreamerElement::fXmax!Maximum of data member if a range is specified [xmin,xmax,nbits]; Double_tTStreamerElement::fXmin!Minimum of data member if a range is specified [xmin,xmax,nbits]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerString(); Default ctor. TStreamerString(const char* name, const char* title, Int_t offset); Create a TStreamerString object. ~TStreamerString(); TStreamerString dtor. const char * GetInclude() const; Return the proper include for this element. Int_t GetSize() const; Returns size of anyclass in bytes. void Streamer(TBuffer& b); Stream an object of class TStreamerString. TStreamerElement& operator=(const TStreamerString& ). TStreamerString(const TStreamerString& ). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TStreamerElement.h 36543 2010-11-08 17:51:01Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:3414,Security,Hash,Hash,3414,"treamerElement::GetMaxIndex(Int_t i) const; virtual ULong_tTStreamerElement::GetMethod() const; virtual const char*TNamed::GetName() const; TClass*TStreamerElement::GetNewClass() const; Int_tTStreamerElement::GetNewType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTStreamerElement::GetOffset() const; virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; TMemberStreamer*TStreamerElement::GetStreamer() const; virtual const char*TNamed::GetTitle() const; Int_tTStreamerElement::GetTObjectOffset() const; Int_tTStreamerElement::GetType() const; const char*TStreamerElement::GetTypeName() const; const char*TStreamerElement::GetTypeNameBasic() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTStreamerElement::GetXmax() const; Double_tTStreamerElement::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTStreamerElement::HasCounter() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTStreamerElement::Init(TObject* obj = 0); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTStreamerElement::IsaPointer() const; virtual Bool_tTStreamerElement::IsBase() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTStreamerElement::IsOldFormat(const char* newTypeName); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTStreamerElement::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static ",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:6524,Testability,Test,TestBit,6524,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:6563,Testability,Test,TestBits,6563,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TStreamerString.html:809,Usability,Clear,Clear,809," TStreamerString(); TStreamerString(const char* name, const char* title, Int_t offset); virtual~TStreamerString(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElem",MatchSource.WIKI,root/html532/TStreamerString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStreamerString.html
https://root.cern/root/html532/TString.html:24015,Integrability,interface,interface,24015,"ngSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fData = p; }. char * GetLongPointer(); { return fRep.fLong.fData; }. const char * GetLongPointer() const; { return fRep.fLong.fData; }. char * GetShortPointer(); { return fRep.fShort.fData; }. const char * GetShortPointer() const; { return fRep.fShort.fData; }. char * GetPointer(); { return IsLong() ? GetLongPointer() : GetShortPointer(); }. const char * GetPointer() const; { return IsLong() ? GetLongPointer() : GetShortPointer(); }. Ssiz_t MaxSize(); { return kMaxInt - 1; }. void UnLink() const; { if (IsLong()) delete [] fRep.fLong.fData; }. void Zero(). TString * ReadString(TBuffer& b, const TClass* clReq). Bool_t Gets(FILE* fp, Bool_t chop = kTRUE); C I/O interface. void Puts(FILE* fp). operator const char*() const; Type conversion. { return GetPointer(); }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. Ssiz_t Capacity() const; { return (IsLong() ? GetLongCap() : kMinCap) - 1; }. Ssiz_t Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t i = 0) const. Ssiz_t Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const. Bool_t IsWhitespace() const; { return (Length() == CountChar(' ')); }. istream & ReadFile(istream& str). istream & ReadLine(istream& str, Bool_t skipWhite = kTRUE). istream & ReadToDelim(istream& str, char delim = '\n'). istream & ReadToken(istream& str). TObjArray * Tokenize(const TString& delim) const. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TString",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:429,Modifiability,variab,variable,429,". TString. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TString. class TString. In what follows, fCap is the length of the underlying representation; vector. Hence, the capacity for a null terminated string held in this; vector is fCap-1. The variable fSize is the length of the held; string, excluding the terminating null. The algorithms make no assumptions about whether internal strings; hold embedded nulls. However, they do assume that any string; passed in as an argument that does not have a length count is null; terminated and therefore has no embedded nulls. The internal string is always null terminated. This class is also known as (typedefs to this class)vector<TString,allocator<TString> >::value_type. Function Members (Methods); public:. TString(); TString(Ssiz_t ic); TString(const TString& s); TString(const char* s); TString(const string& s); TString(char c); TString(const TSubString& sub); TString(const char* s, Ssiz_t n); TString(char c, Ssiz_t s); virtual~TString(); TString&Append(const char* cs); TString&Append(const TString& s); TString&Append(const char* cs, Ssiz_t n); TString&Append(const TString& s, Ssiz_t n); TString&Append(char c, Ssiz_t rep = 1); Double_tAtof() const; Int_tAtoi() const; Long64_tAtoll() const; Bool_tBeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tBeginsWith(const TString& pat, TString::ECaseCompare cmp = kExact) const; Ssiz_tCapacity() const; Ssiz_tCapacity(Ssiz_t n); TString&Chop(); static TClass*Class(); voidClear(); intCompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; intCompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Bool_tContains(const TRegexp& pat) const; Bool_tContains(TPRegexp& pat) const; Bool_tContains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tConta",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:7844,Modifiability,Inherit,Inheritance,7844,"ap); static Ssiz_tAlign(Ssiz_t s); voidAssertElement(Ssiz_t nc) const; voidClobber(Ssiz_t nc); voidInitChar(char c); static Ssiz_tRecommend(Ssiz_t s). private:. voidClone(Ssiz_t nc); voidFormImp(const char* fmt, va_list ap); Ssiz_tGetLongCap() const; char*GetLongPointer(); const char*GetLongPointer() const; Ssiz_tGetLongSize() const; char*GetPointer(); const char*GetPointer() const; char*GetShortPointer(); const char*GetShortPointer() const; Ssiz_tGetShortSize() const; UInt_tHashCase() const; UInt_tHashFoldCase() const; char*Init(Ssiz_t capacity, Ssiz_t nchar); Bool_tIsLong() const; static Ssiz_tMaxSize(); voidSetLongCap(Ssiz_t s); voidSetLongPointer(char* p); voidSetLongSize(Ssiz_t s); voidSetShortSize(Ssiz_t s); voidSetSize(Ssiz_t s); voidUnLink() const; voidZero(). Data Members; public:. enum { kShortMask; kLongMask; kMinCap; kNwords; kAlignment; };; enum EStripType { kLeading; kTrailing; kBoth; };; enum ECaseCompare { kExact; kIgnoreCase; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TString(); TString default ctor. TString(Ssiz_t ic); Create TString able to contain ic characters. TString(const char* s); Create TString and initialize it with string cs. TString(const std::string &s); Create TString and initialize it with string cs. TString(const char* s, Ssiz_t n); Create TString and initialize it with the first n characters of cs. void InitChar(char c); Initialize a string with a single character. TString(char c); Initialize a string with a single character. TString(char c, Ssiz_t s); Initialize the first n locations of a TString with character c. TString(const TString& s); Copy constructor. TString(const TSubString& sub); Copy a TSubString in a TString. TString(const char* a1, Ssiz_t n1, const char* a2, Ssiz_t n2); Special constructor to initialize with the concatenation of a1 and a2. ~TString(); Delete a TString. char * Init(Ssiz_t capacity, Ssiz_t nchar); Private member function returning an empty string represe",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:7857,Modifiability,Inherit,Inherited,7857,"ap); static Ssiz_tAlign(Ssiz_t s); voidAssertElement(Ssiz_t nc) const; voidClobber(Ssiz_t nc); voidInitChar(char c); static Ssiz_tRecommend(Ssiz_t s). private:. voidClone(Ssiz_t nc); voidFormImp(const char* fmt, va_list ap); Ssiz_tGetLongCap() const; char*GetLongPointer(); const char*GetLongPointer() const; Ssiz_tGetLongSize() const; char*GetPointer(); const char*GetPointer() const; char*GetShortPointer(); const char*GetShortPointer() const; Ssiz_tGetShortSize() const; UInt_tHashCase() const; UInt_tHashFoldCase() const; char*Init(Ssiz_t capacity, Ssiz_t nchar); Bool_tIsLong() const; static Ssiz_tMaxSize(); voidSetLongCap(Ssiz_t s); voidSetLongPointer(char* p); voidSetLongSize(Ssiz_t s); voidSetShortSize(Ssiz_t s); voidSetSize(Ssiz_t s); voidUnLink() const; voidZero(). Data Members; public:. enum { kShortMask; kLongMask; kMinCap; kNwords; kAlignment; };; enum EStripType { kLeading; kTrailing; kBoth; };; enum ECaseCompare { kExact; kIgnoreCase; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TString(); TString default ctor. TString(Ssiz_t ic); Create TString able to contain ic characters. TString(const char* s); Create TString and initialize it with string cs. TString(const std::string &s); Create TString and initialize it with string cs. TString(const char* s, Ssiz_t n); Create TString and initialize it with the first n characters of cs. void InitChar(char c); Initialize a string with a single character. TString(char c); Initialize a string with a single character. TString(char c, Ssiz_t s); Initialize the first n locations of a TString with character c. TString(const TString& s); Copy constructor. TString(const TSubString& sub); Copy a TSubString in a TString. TString(const char* a1, Ssiz_t n1, const char* a2, Ssiz_t n2); Special constructor to initialize with the concatenation of a1 and a2. ~TString(); Delete a TString. char * Init(Ssiz_t capacity, Ssiz_t nchar); Private member function returning an empty string represe",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:22551,Safety,detect,detecting,22551,", s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fData = p; }. char * GetLongPointer(); { return fRep.fLong.fData; }. const char * GetLongPointer() const; { return fRep.fLong.fData; }. char * GetShortPointer(); { return fRep.fShort.fData; }. const cha",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10494,Security,Hash,HashCase,10494,"Compare cmp = kExact) const; Compare a string to char *cs2. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for ",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10536,Security,hash,hash,10536,"Compare cmp = kExact) const; Compare a string to char *cs2. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for ",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10576,Security,Hash,HashFoldCase,10576,"he two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10624,Security,hash,hash,10624,"he two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10664,Security,Hash,Hash,10664,"t two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c)",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10719,Security,hash,hash,10719,"t two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c)",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10738,Security,Hash,Hash,10738,"er than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Retur",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10784,Security,hash,hash,10784,"er than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Retur",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:10993,Security,hash,hash,10993,"eturns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepen",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11024,Security,hash,hash,11024,"tween; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11094,Security,hash,hash,11094,"`\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from s",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11157,Security,Hash,Hash,11157,"`\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from s",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11166,Security,Hash,Hash,11166,"`\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from s",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11178,Security,Hash,Hash,11178,"CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceA",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11287,Security,Hash,Hash,11287,"Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if ",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11332,Security,Hash,Hash,11332,"Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if ",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11387,Security,Hash,Hash,11387,"Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if ",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:11187,Testability,test,tested,11187,"CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceA",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:12795,Testability,Assert,AssertElement,12795,"$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if any. TString & Remove(TString::EStripType s, char c); Remove char c at begin and/or end of string (like Strip()) but; modifies directly the string. void Resize(Ssiz_t n); Resize the string. Truncate or add blanks as necessary. TSubString Strip(TString::EStripType s = kTrailing, char c = ' ') const; Return a substring of self stripped at beginning and/or end. void ToLower(); Change string to lower-case. void ToUpper(); Change string to upper case. void AssertElement(Ssiz_t nc) const; Check to make sure a string index is in range. Ssiz_t AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); Calculate a nice capacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBu",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:22266,Testability,Assert,AssertElement,22266,", const char* cs); { return Replace(pos, n, cs, cs ? strlen(cs) : 0); }. TString & Replace(Ssiz_t pos, Ssiz_t n, const TString& s); { return Replace(pos, n, s.Data(), s.Length()); }. TString & Replace(Ssiz_t pos, Ssiz_t n1, const TString& s, Ssiz_t n2); { return Replace(pos, n1, s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return ",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:22346,Testability,Assert,AssertElement,22346,"ng & Replace(Ssiz_t pos, Ssiz_t n, const TString& s); { return Replace(pos, n, s.Data(), s.Length()); }. TString & Replace(Ssiz_t pos, Ssiz_t n1, const TString& s, Ssiz_t n2); { return Replace(pos, n1, s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fD",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:12991,Usability,Clear,Clear,12991,"to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if any. TString & Remove(TString::EStripType s, char c); Remove char c at begin and/or end of string (like Strip()) but; modifies directly the string. void Resize(Ssiz_t n); Resize the string. Truncate or add blanks as necessary. TSubString Strip(TString::EStripType s = kTrailing, char c = ' ') const; Return a substring of self stripped at beginning and/or end. void ToLower(); Change string to lower-case. void ToUpper(); Change string to upper case. void AssertElement(Ssiz_t nc) const; Check to make sure a string index is in range. Ssiz_t AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); Calculate a nice capacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to ha",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:13000,Usability,Clear,Clear,13000,"to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if any. TString & Remove(TString::EStripType s, char c); Remove char c at begin and/or end of string (like Strip()) but; modifies directly the string. void Resize(Ssiz_t n); Resize the string. Truncate or add blanks as necessary. TSubString Strip(TString::EStripType s = kTrailing, char c = ' ') const; Return a substring of self stripped at beginning and/or end. void ToLower(); Change string to lower-case. void ToUpper(); Change string to upper case. void AssertElement(Ssiz_t nc) const; Check to make sure a string index is in range. Ssiz_t AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); Calculate a nice capacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to ha",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:13069,Usability,Clear,Clear,13069,"siz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if any. TString & Remove(TString::EStripType s, char c); Remove char c at begin and/or end of string (like Strip()) but; modifies directly the string. void Resize(Ssiz_t n); Resize the string. Truncate or add blanks as necessary. TSubString Strip(TString::EStripType s = kTrailing, char c = ' ') const; Return a substring of self stripped at beginning and/or end. void ToLower(); Change string to lower-case. void ToUpper(); Change string to upper case. void AssertElement(Ssiz_t nc) const; Check to make sure a string index is in range. Ssiz_t AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); Calculate a nice capacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; ",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:13493,Usability,Simpl,Simplified,13493," blanks as necessary. TSubString Strip(TString::EStripType s = kTrailing, char c = ' ') const; Return a substring of self stripped at beginning and/or end. void ToLower(); Change string to lower-case. void ToUpper(); Change string to upper case. void AssertElement(Ssiz_t nc) const; Check to make sure a string index is in range. Ssiz_t AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); Calculate a nice capacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Ssiz_t GetInitialCapacity(). Ssiz_t GetResizeIncrement(). Ssiz_t GetMaxWaste(). Ssiz_t InitialCapacity(Ssiz_t ic = 15); Set default initial capacity for all TStrings. Default is 15. Ssiz_t ResizeIncrement(Ssiz_t ri = 16); Set default resize increment for all TStrings. Default is 16. Ssiz_t MaxWaste(Ssiz_t mw = 15); Set maximum space that may be wasted in a string before doing a resize.; Default is 15. TSubString operator()(Ssiz_t start, Ssiz_t len",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TString.html:13891,Usability,Simpl,Simplified,13891,"apacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Ssiz_t GetInitialCapacity(). Ssiz_t GetResizeIncrement(). Ssiz_t GetMaxWaste(). Ssiz_t InitialCapacity(Ssiz_t ic = 15); Set default initial capacity for all TStrings. Default is 15. Ssiz_t ResizeIncrement(Ssiz_t ri = 16); Set default resize increment for all TStrings. Default is 16. Ssiz_t MaxWaste(Ssiz_t mw = 15); Set maximum space that may be wasted in a string before doing a resize.; Default is 15. TSubString operator()(Ssiz_t start, Ssiz_t len) const; Return sub-string of string starting at start with length len. TSubString SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; Returns a substring matching ""pattern"", or the null substring; if there is no such match. It would be nice if this could be yet another; overloaded version of operator(), but this would result in a type; conversion ambiguity with",MatchSource.WIKI,root/html532/TString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TString.html
https://root.cern/root/html532/TStringLong.html:7859,Modifiability,Inherit,Inheritance,7859,"st; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringLong(); constructor. TStringLong(Ssiz_t ic); constructor. TStringLong(const TString& s); copy constructor. TStringLong(const char* s); copy constructor. TStringLong(const char* s, Ssiz_t n); constructor from a char*. TStringLong(char c); constructor from a char. TStringLong(char c, Ssiz_t s); constructor from a char. TStringLong(const TSubString& sub); constructor from a substring. ~TStringLong(); destructor. void FillBuffer(char*& buffer); Fill buffer. void ReadBuffer(char*& buffer); Read this string from the buffer. Int_t Sizeof() const; Return the sizeof the string. void Streamer(TBuffer& b); Stream a long (>255 characters) string object. TStringLong(). » Author: Rene Brun 15/11/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TStringLong.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root/html532/TStringLong.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringLong.html
https://root.cern/root/html532/TStringLong.html:7872,Modifiability,Inherit,Inherited,7872,"st; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringLong(); constructor. TStringLong(Ssiz_t ic); constructor. TStringLong(const TString& s); copy constructor. TStringLong(const char* s); copy constructor. TStringLong(const char* s, Ssiz_t n); constructor from a char*. TStringLong(char c); constructor from a char. TStringLong(char c, Ssiz_t s); constructor from a char. TStringLong(const TSubString& sub); constructor from a substring. ~TStringLong(); destructor. void FillBuffer(char*& buffer); Fill buffer. void ReadBuffer(char*& buffer); Read this string from the buffer. Int_t Sizeof() const; Return the sizeof the string. void Streamer(TBuffer& b); Stream a long (>255 characters) string object. TStringLong(). » Author: Rene Brun 15/11/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TStringLong.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root/html532/TStringLong.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringLong.html
https://root.cern/root/html532/TStringLong.html:2723,Security,Hash,Hash,2723,"tains(const TRegexp& pat) const; Bool_tTString::Contains(TPRegexp& pat) const; Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const; Int_tTString::CountChar(Int_t c) const; const char*TString::Data() const; Bool_tTString::EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const TString& st, TString::ECaseCompare cmp = kExact) const; virtual voidFillBuffer(char*& buffer); Ssiz_tTString::First(char c) const; Ssiz_tTString::First(const char* cs) const; voidTString::Form(const char* fmt); static TStringTString::Format(const char* fmt); static Ssiz_tTString::GetInitialCapacity(); static Ssiz_tTString::GetMaxWaste(); static Ssiz_tTString::GetResizeIncrement(); Bool_tTString::Gets(FILE* fp, Bool_t chop = kTRUE); UInt_tTString::Hash(TString::ECaseCompare cmp = kExact) const; static UInt_tTString::Hash(const void* txt, Int_t ntxt); Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TString& s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Ssiz_tTString::Index(const TString& pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; static Ssiz_tTString::InitialCapacity(Ssiz_t ic = 15); TString&TString::Insert(Ssiz_t pos, const char* cs); TString&TString::Insert(Ssiz_t pos, const TString& s); TString&TString::Insert(Ssiz_t pos, const char* cs, Ssiz_t n); TString&TString::Inser",MatchSource.WIKI,root/html532/TStringLong.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringLong.html
https://root.cern/root/html532/TStringLong.html:2793,Security,Hash,Hash,2793,") const; Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const; Int_tTString::CountChar(Int_t c) const; const char*TString::Data() const; Bool_tTString::EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const TString& st, TString::ECaseCompare cmp = kExact) const; virtual voidFillBuffer(char*& buffer); Ssiz_tTString::First(char c) const; Ssiz_tTString::First(const char* cs) const; voidTString::Form(const char* fmt); static TStringTString::Format(const char* fmt); static Ssiz_tTString::GetInitialCapacity(); static Ssiz_tTString::GetMaxWaste(); static Ssiz_tTString::GetResizeIncrement(); Bool_tTString::Gets(FILE* fp, Bool_t chop = kTRUE); UInt_tTString::Hash(TString::ECaseCompare cmp = kExact) const; static UInt_tTString::Hash(const void* txt, Int_t ntxt); Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TString& s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Ssiz_tTString::Index(const TString& pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; static Ssiz_tTString::InitialCapacity(Ssiz_t ic = 15); TString&TString::Insert(Ssiz_t pos, const char* cs); TString&TString::Insert(Ssiz_t pos, const TString& s); TString&TString::Insert(Ssiz_t pos, const char* cs, Ssiz_t n); TString&TString::Insert(Ssiz_t pos, const TString& s, Ssiz_t n); virtual TClass*IsA() const;",MatchSource.WIKI,root/html532/TStringLong.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringLong.html
https://root.cern/root/html532/TStringLong.html:7528,Testability,Assert,AssertElement,7528,"ceAll(const char* s1, const TString& s2); TString&TString::ReplaceAll(const char* s1, const char* s2); TString&TString::ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); voidTString::Resize(Ssiz_t n); static Ssiz_tTString::ResizeIncrement(Ssiz_t ri = 16); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringLong(); constructor. TStringLong(Ssiz_t ic); constructor. TStringLong(const TString& s); copy constructor. TStringLong(const char* s); copy constructor. TStringLong(const char* s, Ssiz_t n); constructor from a char*. TStringLong(char c); constructor from a char. TStringLong(char c, Ssiz_t s); constructor from a char. TStringLong(const TSubString& sub); constructor from a substring. ~TStringLong(); destructor. void FillBuffer(char*& buffer); Fill buffer. void ReadBuffer(char*& buffer); Read this string from the buffer. Int_t Sizeof() const; Return the sizeof the string. void Streamer(TBuf",MatchSource.WIKI,root/html532/TStringLong.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringLong.html
https://root.cern/root/html532/TStringLong.html:1533,Usability,Clear,Clear,1533," TStringLong(); TStringLong(Ssiz_t ic); TStringLong(const TString& s); TStringLong(const char* s); TStringLong(char c); TStringLong(const TSubString& sub); TStringLong(const TStringLong&); TStringLong(const char* s, Ssiz_t n); TStringLong(char c, Ssiz_t s); virtual~TStringLong(); TString&TString::Append(const char* cs); TString&TString::Append(const TString& s); TString&TString::Append(const char* cs, Ssiz_t n); TString&TString::Append(const TString& s, Ssiz_t n); TString&TString::Append(char c, Ssiz_t rep = 1); Double_tTString::Atof() const; Int_tTString::Atoi() const; Long64_tTString::Atoll() const; Bool_tTString::BeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::BeginsWith(const TString& pat, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Capacity() const; Ssiz_tTString::Capacity(Ssiz_t n); TString&TString::Chop(); static TClass*Class(); voidTString::Clear(); intTString::CompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; intTString::CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TRegexp& pat) const; Bool_tTString::Contains(TPRegexp& pat) const; Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const",MatchSource.WIKI,root/html532/TStringLong.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringLong.html
https://root.cern/root/html532/TStringToken.html:8428,Availability,avail,available,8428,"iz_t ri = 16); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTString::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. const TStringfFullStr; Int_tfPos; Bool_tfReturnVoid; TPRegexpfSplitRe. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE); Constructor. Bool_t NextToken(); Get the next token, it is stored in this TString.; Returns true if new token is available, false otherwise. TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE). virtual ~TStringToken(); {}. Bool_t AtEnd() const; { return fPos >= fFullStr.Length(); }. » Author: Eddy Offermann 24/06/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPRegexp.h 26600 2008-12-02 18:56:10Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStringToken.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringToken.html
https://root.cern/root/html532/TStringToken.html:8151,Modifiability,Inherit,Inheritance,8151,"iz_t ri = 16); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTString::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. const TStringfFullStr; Int_tfPos; Bool_tfReturnVoid; TPRegexpfSplitRe. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE); Constructor. Bool_t NextToken(); Get the next token, it is stored in this TString.; Returns true if new token is available, false otherwise. TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE). virtual ~TStringToken(); {}. Bool_t AtEnd() const; { return fPos >= fFullStr.Length(); }. » Author: Eddy Offermann 24/06/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPRegexp.h 26600 2008-12-02 18:56:10Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStringToken.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringToken.html
https://root.cern/root/html532/TStringToken.html:8164,Modifiability,Inherit,Inherited,8164,"iz_t ri = 16); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTString::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. const TStringfFullStr; Int_tfPos; Bool_tfReturnVoid; TPRegexpfSplitRe. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE); Constructor. Bool_t NextToken(); Get the next token, it is stored in this TString.; Returns true if new token is available, false otherwise. TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE). virtual ~TStringToken(); {}. Bool_t AtEnd() const; { return fPos >= fFullStr.Length(); }. » Author: Eddy Offermann 24/06/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPRegexp.h 26600 2008-12-02 18:56:10Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStringToken.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringToken.html
https://root.cern/root/html532/TStringToken.html:2719,Security,Hash,Hash,2719,"st TRegexp& pat) const; Bool_tTString::Contains(TPRegexp& pat) const; Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const; Int_tTString::CountChar(Int_t c) const; const char*TString::Data() const; Bool_tTString::EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const TString& st, TString::ECaseCompare cmp = kExact) const; virtual voidTString::FillBuffer(char*& buffer); Ssiz_tTString::First(char c) const; Ssiz_tTString::First(const char* cs) const; voidTString::Form(const char* fmt); static TStringTString::Format(const char* fmt); static Ssiz_tTString::GetInitialCapacity(); static Ssiz_tTString::GetMaxWaste(); static Ssiz_tTString::GetResizeIncrement(); Bool_tTString::Gets(FILE* fp, Bool_t chop = kTRUE); UInt_tTString::Hash(TString::ECaseCompare cmp = kExact) const; static UInt_tTString::Hash(const void* txt, Int_t ntxt); Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TString& s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Ssiz_tTString::Index(const TString& pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; static Ssiz_tTString::InitialCapacity(Ssiz_t ic = 15); TString&TString::Insert(Ssiz_t pos, const char* cs); TString&TString::Insert(Ssiz_t pos, const TString& s); TString&TString::Insert(Ssiz_t pos, const char* cs, Ssiz_t n); TString&TString::Inser",MatchSource.WIKI,root/html532/TStringToken.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringToken.html
https://root.cern/root/html532/TStringToken.html:2789,Security,Hash,Hash,2789,"Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const; Int_tTString::CountChar(Int_t c) const; const char*TString::Data() const; Bool_tTString::EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const TString& st, TString::ECaseCompare cmp = kExact) const; virtual voidTString::FillBuffer(char*& buffer); Ssiz_tTString::First(char c) const; Ssiz_tTString::First(const char* cs) const; voidTString::Form(const char* fmt); static TStringTString::Format(const char* fmt); static Ssiz_tTString::GetInitialCapacity(); static Ssiz_tTString::GetMaxWaste(); static Ssiz_tTString::GetResizeIncrement(); Bool_tTString::Gets(FILE* fp, Bool_t chop = kTRUE); UInt_tTString::Hash(TString::ECaseCompare cmp = kExact) const; static UInt_tTString::Hash(const void* txt, Int_t ntxt); Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TString& s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Index(const TRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(TPRegexp& pat, Ssiz_t* ext, Ssiz_t i = 0) const; Ssiz_tTString::Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Ssiz_tTString::Index(const TString& pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; static Ssiz_tTString::InitialCapacity(Ssiz_t ic = 15); TString&TString::Insert(Ssiz_t pos, const char* cs); TString&TString::Insert(Ssiz_t pos, const TString& s); TString&TString::Insert(Ssiz_t pos, const char* cs, Ssiz_t n); TString&TString::Insert(Ssiz_t pos, const TString& s, Ssiz_t n); virtual TClass*IsA() const;",MatchSource.WIKI,root/html532/TStringToken.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringToken.html
https://root.cern/root/html532/TStringToken.html:7737,Testability,Assert,AssertElement,7737,"st char* s1, const TString& s2); TString&TString::ReplaceAll(const char* s1, const char* s2); TString&TString::ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); voidTString::Resize(Ssiz_t n); static Ssiz_tTString::ResizeIncrement(Ssiz_t ri = 16); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTString::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. const TStringfFullStr; Int_tfPos; Bool_tfReturnVoid; TPRegexpfSplitRe. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE); Constructor. Bool_t NextToken(); Get the next token, it is stored in this TString.; Returns true if new token is available, false otherwise. TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE). virtual ~TStringToken(); {}. Bool_t AtEnd() const; { return fPos >= fFullStr.Length(); }. » Author: Eddy Offermann 24/06/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: ro",MatchSource.WIKI,root/html532/TStringToken.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringToken.html
https://root.cern/root/html532/TStringToken.html:1520,Usability,Clear,Clear,1520," TStringToken(const TStringToken&); TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE); virtual~TStringToken(); TString&TString::Append(const char* cs); TString&TString::Append(const TString& s); TString&TString::Append(const char* cs, Ssiz_t n); TString&TString::Append(const TString& s, Ssiz_t n); TString&TString::Append(char c, Ssiz_t rep = 1); Bool_tAtEnd() const; Double_tTString::Atof() const; Int_tTString::Atoi() const; Long64_tTString::Atoll() const; Bool_tTString::BeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::BeginsWith(const TString& pat, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Capacity() const; Ssiz_tTString::Capacity(Ssiz_t n); TString&TString::Chop(); static TClass*Class(); voidTString::Clear(); intTString::CompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; intTString::CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TRegexp& pat) const; Bool_tTString::Contains(TPRegexp& pat) const; Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const; Int_tTStrin",MatchSource.WIKI,root/html532/TStringToken.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStringToken.html
https://root.cern/root/html532/TStructNode.html:1730,Availability,Error,Error,1730," TStructNode(const TStructNode&); TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); virtual~TStructNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event,",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:1859,Availability,error,error,1859,"me, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); virtual~TStructNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ULong_tGetAllMembersCount() const; Float_tGetCenter() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetHeight() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; UInt_tGetMaxLevel() const; UInt_tGetMaxObjects() const; TList*GetMembers() const; ULong_tGetMembersCount() const; Float_tGetMiddle() const; virtual const char*GetName() const; ENodeTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStructNode*GetParent() const; void*GetPoi",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:1943,Availability,error,error,1943,"ctNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ULong_tGetAllMembersCount() const; Float_tGetCenter() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetHeight() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; UInt_tGetMaxLevel() const; UInt_tGetMaxObjects() const; TList*GetMembers() const; ULong_tGetMembersCount() const; Float_tGetMiddle() const; virtual const char*GetName() const; ENodeTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStructNode*GetParent() const; void*GetPointer() const; ULong_tGetRelativeMembersCount() const; ULong_tGetRelativeSize() const",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:7466,Energy Efficiency,allocate,allocated,7466,"; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. ULong_tfAllMembersCountNumber of all members (class and its daughters); Bool_tfCollapsedCondition - true if node is collapsed (we don't see dauthers); Float_tfHeightHeight of outlining box; UInt_tfLevelLevel number; UInt_tfMaxLevelNumber of levels displayed when the node is top node on scene; UInt_tfMaxObjectsNumber of objects displayed when the node is top node on scene; TList*fMembersList of daughter nodes; ULong_tfMembersCountNumber of members in class; TStringfNameName of node; ENodeTypefNodeTypeType of node; TStructNode*fParentPointer to parent node, NULL if not exist; void*fPointerPointer to data (address of variable); ULong_tfSizeMemory allocated by class without pointers and list elements; ULong_tfTotalSizeTotal allocated memory; TStringfTypeNameName of type; Bool_tfVisibleCondition - true if node is visible; Float_tfWidthWidth of outlining box; Float_tfXX coordinate in 3D space; Float_tfYY coordinate in 3D space; static EScalingTypefgScalBy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); Constructs node with name ""name"" of class ""typeName"" and given parent ""parent"" which represents pointer ""pointer"".; Size of node is set to ""size"" and type is set to ""type"". ~TStructNode(); Destructs list of nodes. Int_t Compare(const TObject* obj) const; Overrided method. Compare to objects of TStructNode class. U",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:7544,Energy Efficiency,allocate,allocated,7544,"; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. ULong_tfAllMembersCountNumber of all members (class and its daughters); Bool_tfCollapsedCondition - true if node is collapsed (we don't see dauthers); Float_tfHeightHeight of outlining box; UInt_tfLevelLevel number; UInt_tfMaxLevelNumber of levels displayed when the node is top node on scene; UInt_tfMaxObjectsNumber of objects displayed when the node is top node on scene; TList*fMembersList of daughter nodes; ULong_tfMembersCountNumber of members in class; TStringfNameName of node; ENodeTypefNodeTypeType of node; TStructNode*fParentPointer to parent node, NULL if not exist; void*fPointerPointer to data (address of variable); ULong_tfSizeMemory allocated by class without pointers and list elements; ULong_tfTotalSizeTotal allocated memory; TStringfTypeNameName of type; Bool_tfVisibleCondition - true if node is visible; Float_tfWidthWidth of outlining box; Float_tfXX coordinate in 3D space; Float_tfYY coordinate in 3D space; static EScalingTypefgScalBy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); Constructs node with name ""name"" of class ""typeName"" and given parent ""parent"" which represents pointer ""pointer"".; Size of node is set to ""size"" and type is set to ""type"". ~TStructNode(); Destructs list of nodes. Int_t Compare(const TObject* obj) const; Overrided method. Compare to objects of TStructNode class. U",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:10164,Energy Efficiency,allocate,allocated,10164,"e. void* GetPointer() const; Returns main pointer. ULong_t GetRelativeMembersCount() const; Returns relative numbers of members. If node is collapsed, then method returns number of all members,; it's node and its daughters, otherwise it returns number of members of node. ULong_t GetRelativeSize() const; Returns relative size of node. If node is collapsed, then function returns size of node and dauthers,; otherwise returns size of node only. ULong_t GetRelativeVolume() const; Returns size or number of members. If ScaleBy is set to kMembers and node is collapsed, then it; returns all number of members. If node isn't collapsed it returns number of members.; If Scaleby is set to kSize and node is collapsed, then it returns total size of node and daughters,; else it returns size of node, otherwise it returns 0. Float_t GetRelativeVolumeRatio(); Returns ratio - relative volume to area taken by utlining box. ULong_t GetSize() const; Returns size of node. ULong_t GetTotalSize() const; Returns total size of allocated memory in bytes. TString GetTypeName() const; Returns name of class. ULong_t GetVolume() const; Returns size or number of members. If ScaleBy is set to kMembers it returns all number of members.; If Scaleby is set to kSize then it returns total size of node and daughters, otherwise it returns 0. Float_t GetVolumeRatio(); Returns ratio - volme of node to area taken by outlining box. Float_t GetWidth() const; Returns width of outlining box. Float_t GetX() const; Returns X coordinate. Float_t GetY() const; Returns Y coordinate. Bool_t IsCollapsed() const; Returns true if node is colllapsed. Bool_t IsSortable() const; Returns true, because we have overrided method Compare. bool IsVisible() const; Returns true if node is visible. void SetAllMembersCount(ULong_t count); Sets numbers of all members to ""number"". void SetCollapsed(Bool_t collapsed); Sets collapsing of node to ""collapse"". void SetHeight(Float_t h); Sets width of outlining box to ""w"". void SetMaxLevel(UInt_",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:11785,Energy Efficiency,allocate,allocated,11785," taken by outlining box. Float_t GetWidth() const; Returns width of outlining box. Float_t GetX() const; Returns X coordinate. Float_t GetY() const; Returns Y coordinate. Bool_t IsCollapsed() const; Returns true if node is colllapsed. Bool_t IsSortable() const; Returns true, because we have overrided method Compare. bool IsVisible() const; Returns true if node is visible. void SetAllMembersCount(ULong_t count); Sets numbers of all members to ""number"". void SetCollapsed(Bool_t collapsed); Sets collapsing of node to ""collapse"". void SetHeight(Float_t h); Sets width of outlining box to ""w"". void SetMaxLevel(UInt_t level); Sets maximum number of leves displayed when the node is top node on scene. void SetMaxObjects(UInt_t max); Sets maximum number of objects displayed when the node is top node on scene. void SetMembers(TList* list); Sets list of dauther nodes to ""list"". void SetMembersCount(ULong_t count); Sets number of members to ""number"". void SetNodeType(ENodeType type); Sets type of node to ""type"". void SetPointer(void* pointer); Sets main pointer to ""pointer"". void SetScaleBy(EScalingType type); Sets scaling by to ""type"". void SetSize(ULong_t size); Sets size of node to ""size"". void SetTotalSize(ULong_t size); Sets total size of allocated memory in bytes to value ""size"". void SetVisible(bool visible); Sets visibility of node to ""visible"". void SetWidth(Float_t w); Sets width of outlining box to ""w"". void SetX(Float_t x); Sets X coordinate to ""x"". void SetY(Float_t y); Sets Y coordinate to ""y"". TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructNode.h 29985 2009-08-31 16:05:21Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:3489,Modifiability,Inherit,InheritsFrom,3489,"Int_tGetMaxObjects() const; TList*GetMembers() const; ULong_tGetMembersCount() const; Float_tGetMiddle() const; virtual const char*GetName() const; ENodeTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStructNode*GetParent() const; void*GetPointer() const; ULong_tGetRelativeMembersCount() const; ULong_tGetRelativeSize() const; ULong_tGetRelativeVolume() const; Float_tGetRelativeVolumeRatio(); ULong_tGetSize() const; virtual const char*TObject::GetTitle() const; ULong_tGetTotalSize() const; TStringGetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; ULong_tGetVolume() const; Float_tGetVolumeRatio(); Float_tGetWidth() const; Float_tGetX() const; Float_tGetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsCollapsed() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; boolIsVisible() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TOb",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:3555,Modifiability,Inherit,InheritsFrom,3555,"mbersCount() const; Float_tGetMiddle() const; virtual const char*GetName() const; ENodeTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStructNode*GetParent() const; void*GetPointer() const; ULong_tGetRelativeMembersCount() const; ULong_tGetRelativeSize() const; ULong_tGetRelativeVolume() const; Float_tGetRelativeVolumeRatio(); ULong_tGetSize() const; virtual const char*TObject::GetTitle() const; ULong_tGetTotalSize() const; TStringGetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; ULong_tGetVolume() const; Float_tGetVolumeRatio(); Float_tGetWidth() const; Float_tGetX() const; Float_tGetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsCollapsed() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; boolIsVisible() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:7436,Modifiability,variab,variable,7436,"; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. ULong_tfAllMembersCountNumber of all members (class and its daughters); Bool_tfCollapsedCondition - true if node is collapsed (we don't see dauthers); Float_tfHeightHeight of outlining box; UInt_tfLevelLevel number; UInt_tfMaxLevelNumber of levels displayed when the node is top node on scene; UInt_tfMaxObjectsNumber of objects displayed when the node is top node on scene; TList*fMembersList of daughter nodes; ULong_tfMembersCountNumber of members in class; TStringfNameName of node; ENodeTypefNodeTypeType of node; TStructNode*fParentPointer to parent node, NULL if not exist; void*fPointerPointer to data (address of variable); ULong_tfSizeMemory allocated by class without pointers and list elements; ULong_tfTotalSizeTotal allocated memory; TStringfTypeNameName of type; Bool_tfVisibleCondition - true if node is visible; Float_tfWidthWidth of outlining box; Float_tfXX coordinate in 3D space; Float_tfYY coordinate in 3D space; static EScalingTypefgScalBy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); Constructs node with name ""name"" of class ""typeName"" and given parent ""parent"" which represents pointer ""pointer"".; Size of node is set to ""size"" and type is set to ""type"". ~TStructNode(); Destructs list of nodes. Int_t Compare(const TObject* obj) const; Overrided method. Compare to objects of TStructNode class. U",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:7793,Modifiability,Inherit,Inheritance,7793,"g_tfAllMembersCountNumber of all members (class and its daughters); Bool_tfCollapsedCondition - true if node is collapsed (we don't see dauthers); Float_tfHeightHeight of outlining box; UInt_tfLevelLevel number; UInt_tfMaxLevelNumber of levels displayed when the node is top node on scene; UInt_tfMaxObjectsNumber of objects displayed when the node is top node on scene; TList*fMembersList of daughter nodes; ULong_tfMembersCountNumber of members in class; TStringfNameName of node; ENodeTypefNodeTypeType of node; TStructNode*fParentPointer to parent node, NULL if not exist; void*fPointerPointer to data (address of variable); ULong_tfSizeMemory allocated by class without pointers and list elements; ULong_tfTotalSizeTotal allocated memory; TStringfTypeNameName of type; Bool_tfVisibleCondition - true if node is visible; Float_tfWidthWidth of outlining box; Float_tfXX coordinate in 3D space; Float_tfYY coordinate in 3D space; static EScalingTypefgScalBy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); Constructs node with name ""name"" of class ""typeName"" and given parent ""parent"" which represents pointer ""pointer"".; Size of node is set to ""size"" and type is set to ""type"". ~TStructNode(); Destructs list of nodes. Int_t Compare(const TObject* obj) const; Overrided method. Compare to objects of TStructNode class. ULong_t GetAllMembersCount() const; Returns number of all members in node. Float_t GetCenter() const; Returns center of outlining box on x-axis. Float_t GetHeight() const; Returns height of outlining box. UInt_t GetLevel() const; Returns actual level of node. const char* GetName() const; Returns name of object. ENodeType GetNodeType() const; Returns type of node. UInt_t GetMaxLevel() const; Returns maximum number of leves displayed when the node is top node on scene. UInt_t GetMaxObjects() const; Returns maximum number",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:7806,Modifiability,Inherit,Inherited,7806,"g_tfAllMembersCountNumber of all members (class and its daughters); Bool_tfCollapsedCondition - true if node is collapsed (we don't see dauthers); Float_tfHeightHeight of outlining box; UInt_tfLevelLevel number; UInt_tfMaxLevelNumber of levels displayed when the node is top node on scene; UInt_tfMaxObjectsNumber of objects displayed when the node is top node on scene; TList*fMembersList of daughter nodes; ULong_tfMembersCountNumber of members in class; TStringfNameName of node; ENodeTypefNodeTypeType of node; TStructNode*fParentPointer to parent node, NULL if not exist; void*fPointerPointer to data (address of variable); ULong_tfSizeMemory allocated by class without pointers and list elements; ULong_tfTotalSizeTotal allocated memory; TStringfTypeNameName of type; Bool_tfVisibleCondition - true if node is visible; Float_tfWidthWidth of outlining box; Float_tfXX coordinate in 3D space; Float_tfYY coordinate in 3D space; static EScalingTypefgScalBy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); Constructs node with name ""name"" of class ""typeName"" and given parent ""parent"" which represents pointer ""pointer"".; Size of node is set to ""size"" and type is set to ""type"". ~TStructNode(); Destructs list of nodes. Int_t Compare(const TObject* obj) const; Overrided method. Compare to objects of TStructNode class. ULong_t GetAllMembersCount() const; Returns number of all members in node. Float_t GetCenter() const; Returns center of outlining box on x-axis. Float_t GetHeight() const; Returns height of outlining box. UInt_t GetLevel() const; Returns actual level of node. const char* GetName() const; Returns name of object. ENodeType GetNodeType() const; Returns type of node. UInt_t GetMaxLevel() const; Returns maximum number of leves displayed when the node is top node on scene. UInt_t GetMaxObjects() const; Returns maximum number",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:3379,Security,Hash,Hash,3379,"ght() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; UInt_tGetMaxLevel() const; UInt_tGetMaxObjects() const; TList*GetMembers() const; ULong_tGetMembersCount() const; Float_tGetMiddle() const; virtual const char*GetName() const; ENodeTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStructNode*GetParent() const; void*GetPointer() const; ULong_tGetRelativeMembersCount() const; ULong_tGetRelativeSize() const; ULong_tGetRelativeVolume() const; Float_tGetRelativeVolumeRatio(); ULong_tGetSize() const; virtual const char*TObject::GetTitle() const; ULong_tGetTotalSize() const; TStringGetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; ULong_tGetVolume() const; Float_tGetVolumeRatio(); Float_tGetWidth() const; Float_tGetX() const; Float_tGetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsCollapsed() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; boolIsVisible() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:6028,Testability,Test,TestBit,6028,"void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStructNode&operator=(const TStructNode&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAllMembersCount(ULong_t count); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCollapsed(Bool_t collapsed); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHeight(Float_t h); voidSetMaxLevel(UInt_t level); voidSetMaxObjects(UInt_t max); voidSetMembers(TList* list); voidSetMembersCount(ULong_t count); voidSetNodeType(ENodeType type); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointer(void* pointer); static voidSetScaleBy(EScalingType type); voidSetSize(ULong_t size); voidSetTotalSize(ULong_t size); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVisible(bool visible); voidSetWidth(Float_t w); voidSetX(Float_t x); voidSetY(Float_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:6067,Testability,Test,TestBits,6067,"void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStructNode&operator=(const TStructNode&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAllMembersCount(ULong_t count); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCollapsed(Bool_t collapsed); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHeight(Float_t h); voidSetMaxLevel(UInt_t level); voidSetMaxObjects(UInt_t max); voidSetMembers(TList* list); voidSetMembersCount(ULong_t count); voidSetNodeType(ENodeType type); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointer(void* pointer); static voidSetScaleBy(EScalingType type); voidSetSize(ULong_t size); voidSetTotalSize(ULong_t size); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVisible(bool visible); voidSetWidth(Float_t w); voidSetX(Float_t x); voidSetY(Float_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNode.html:1199,Usability,Clear,Clear,1199," TStructNode(const TStructNode&); TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); virtual~TStructNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event,",MatchSource.WIKI,root/html532/TStructNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNode.html
https://root.cern/root/html532/TStructNodeEditor.html:4702,Availability,Error,Error,4702,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:4831,Availability,error,error,4831,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:4915,Availability,error,error,4915,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:18115,Availability,mask,mask,18115,,MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:17606,Deployability,update,update,17606,,MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:22075,Deployability,Update,Update,22075,"me::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNodeEditor(TList* colors, const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of node attributes GUI. ~TStructNodeEditor(); Destructor of node editor. void ApplyButtonSlot(); ApplyButton Slot. Activated when user press Apply button. Sets properties of a node. void AutoRefreshButtonSlot(Bool_t on); Activated when user chage condition. void ColorSelectedSlot(Pixel_t color); Slot connected to the fill area color. void DefaultButtonSlot(); Slot for Defaulf button. Sets color of class to default. TStructNodeProperty* FindNodeProperty(TStructNode* node); Retruns property associated to the class of given node ""node"". If property isn't found; then returns NULL. TStructNodeProperty* GetDefaultProperty(); Returns property with default color. void Init(); Enables button and fields. void MaxLevelsValueSetSlot(Long_t ); Emmited when user changes maximum number of levels. void MaxObjectsValueSetSlot(Long_t ); Emmited when user changes maximum number of objects. void SetModel(TObject* obj); Pick up the used node attributes. void Update(); Signal emmited when color or other property like number of level is changed; without camera reset. void Update(Bool_t resetCamera); Signal emmited when color or other property like number of level is changed.; If ""resetCamera"" is true, then current camera is reset. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructNodeEditor.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:22189,Deployability,Update,Update,22189,"me::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNodeEditor(TList* colors, const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of node attributes GUI. ~TStructNodeEditor(); Destructor of node editor. void ApplyButtonSlot(); ApplyButton Slot. Activated when user press Apply button. Sets properties of a node. void AutoRefreshButtonSlot(Bool_t on); Activated when user chage condition. void ColorSelectedSlot(Pixel_t color); Slot connected to the fill area color. void DefaultButtonSlot(); Slot for Defaulf button. Sets color of class to default. TStructNodeProperty* FindNodeProperty(TStructNode* node); Retruns property associated to the class of given node ""node"". If property isn't found; then returns NULL. TStructNodeProperty* GetDefaultProperty(); Returns property with default color. void Init(); Enables button and fields. void MaxLevelsValueSetSlot(Long_t ); Emmited when user changes maximum number of levels. void MaxObjectsValueSetSlot(Long_t ); Emmited when user changes maximum number of objects. void SetModel(TObject* obj); Pick up the used node attributes. void Update(); Signal emmited when color or other property like number of level is changed; without camera reset. void Update(Bool_t resetCamera); Signal emmited when color or other property like number of level is changed.; If ""resetCamera"" is true, then current camera is reset. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructNodeEditor.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:11079,Integrability,Message,Message,11079,") const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidMaxLevelsValueSetSlot(Long_t); voidMaxObjectsValueSetSlot(Long_t); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:9553,Modifiability,Inherit,InheritsFrom,9553,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:9619,Modifiability,Inherit,InheritsFrom,9619," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:20865,Modifiability,Inherit,Inheritance,20865," with name of type; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNodeEditor(TList* colors, const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of node attributes GUI. ~TStructNodeEditor(); Destructor of node editor. void ApplyButtonSlot(); ApplyButton Slot. Activated when user press Apply button. Sets properties of a node. void AutoRefreshButtonSlot(Bool_t on); Activated when user chage condition. void ColorSelectedSlot(Pixel_t color); Slot connected to the fill area color. void DefaultButtonSlot(); Slot for Defaulf button. Sets color of class to default. TStructNodeProperty* FindNodeProperty(TStructNode* node); Retruns property associated to the class of given node ""node"". If property isn't found; then returns NULL. TStructNodeProperty* GetDefaultProperty(); Returns property with default color. void Init(); Enables button and fields. void MaxLevelsValueSetSlot(Long_t ); Emmited when user changes m",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:20878,Modifiability,Inherit,Inherited,20878," with name of type; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNodeEditor(TList* colors, const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of node attributes GUI. ~TStructNodeEditor(); Destructor of node editor. void ApplyButtonSlot(); ApplyButton Slot. Activated when user press Apply button. Sets properties of a node. void AutoRefreshButtonSlot(Bool_t on); Activated when user chage condition. void ColorSelectedSlot(Pixel_t color); Slot connected to the fill area color. void DefaultButtonSlot(); Slot for Defaulf button. Sets color of class to default. TStructNodeProperty* FindNodeProperty(TStructNode* node); Retruns property associated to the class of given node ""node"". If property isn't found; then returns NULL. TStructNodeProperty* GetDefaultProperty(); Returns property with default color. void Init(); Enables button and fields. void MaxLevelsValueSetSlot(Long_t ); Emmited when user changes m",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:9263,Security,Hash,Hash,9263,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:15214,Testability,Test,TestBit,15214,"tic voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); voidUpdate(Bool_t resetCamera); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:15253,Testability,Test,TestBits,15253,"tic voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); voidUpdate(Bool_t resetCamera); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeEditor.html:1888,Usability,Clear,Clear,1888,"ct*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyButtonSlot(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidAutoRefreshButtonSlot(Bool_t on); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); voidColorSelectedSlot(Pixel_t color); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); voidDefaultButtonSlot(); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtu",MatchSource.WIKI,root/html532/TStructNodeEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeEditor.html
https://root.cern/root/html532/TStructNodeProperty.html:1371,Availability,Error,Error,1371," TStructNodeProperty(const TStructNodeProperty&); TStructNodeProperty(const char* name, Int_t color); TStructNodeProperty(const char* name, Pixel_t pixel); virtual~TStructNodeProperty(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:1500,Availability,error,error,1500,"lor); TStructNodeProperty(const char* name, Pixel_t pixel); virtual~TStructNodeProperty(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixel_tGetPixel() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* meth",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:1584,Availability,error,error,1584,"rty(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixel_tGetPixel() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* class",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:2557,Modifiability,Inherit,InheritsFrom,2557,"rray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixel_tGetPixel() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::oper",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:2623,Modifiability,Inherit,InheritsFrom,2623,"(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixel_tGetPixel() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStructNodeProperty&operator=(con",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:5796,Modifiability,Inherit,Inheritance,5796,"st char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TColorfColorColor of a class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNodeProperty(const char* name, Int_t color); Contructs a TStructNodeProperty with p as parent window for class ""name"" with color ""color"". TStructNodeProperty(const char* name, Pixel_t pixel); Contructs a TStructNodeProperty with p as parent window for class ""name"" with color ""pixel"". ~TStructNodeProperty(); Destructor. Int_t Compare(const TObject* obj) const; Overrided method. Compare two objects of TStructNodeProperty class. TColor GetColor() const; Returns color of class. Pixel_t GetPixel() const; Return color in Pixel_t format. Bool_t IsSortable() const; Retruns true, because we have overrided method Compare. void SetColor(const TColor& color); Sets the color to ""color"". void SetColor(Int_t color); Sets the color to ""color"". void SetColor(Pixel_t pixel); Sets the color to ""pixel"". TStructNodeProperty(const char* name, Int_t color). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *;",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:5809,Modifiability,Inherit,Inherited,5809,"st char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TColorfColorColor of a class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructNodeProperty(const char* name, Int_t color); Contructs a TStructNodeProperty with p as parent window for class ""name"" with color ""color"". TStructNodeProperty(const char* name, Pixel_t pixel); Contructs a TStructNodeProperty with p as parent window for class ""name"" with color ""pixel"". ~TStructNodeProperty(); Destructor. Int_t Compare(const TObject* obj) const; Overrided method. Compare two objects of TStructNodeProperty class. TColor GetColor() const; Returns color of class. Pixel_t GetPixel() const; Return color in Pixel_t format. Bool_t IsSortable() const; Retruns true, because we have overrided method Compare. void SetColor(const TColor& color); Sets the color to ""color"". void SetColor(Int_t color); Sets the color to ""color"". void SetColor(Pixel_t pixel); Sets the color to ""pixel"". TStructNodeProperty(const char* name, Int_t color). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *;",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:2447,Security,Hash,Hash,2447,"ute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixel_tGetPixel() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:4880,Testability,Test,TestBit,4880,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStructNodeProperty&operator=(const TStructNodeProperty&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetColor(const TColor& color); voidSetColor(Pixel_t pixel); voidSetColor(Int_t color); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:4919,Testability,Test,TestBits,4919,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStructNodeProperty&operator=(const TStructNodeProperty&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetColor(const TColor& color); voidSetColor(Pixel_t pixel); voidSetColor(Int_t color); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructNodeProperty.html:836,Usability,Clear,Clear,836," TStructNodeProperty(const TStructNodeProperty&); TStructNodeProperty(const char* name, Int_t color); TStructNodeProperty(const char* name, Pixel_t pixel); virtual~TStructNodeProperty(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html532/TStructNodeProperty.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructNodeProperty.html
https://root.cern/root/html532/TStructViewer.html:2441,Availability,Error,Error,2441," TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virt",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:2570,Availability,error,error,2570," TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virt",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:2654,Availability,error,error,2654,"Viewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas(); TColorGetColor(const char* typeName); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGMainFrame*GetFrame(); virtual const char*TObject::GetIconName() const; TExMapGetLevelMembersCount() const; TExMapGetLevelSize() const; Bool_tGetLinksVisibility() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; void*GetPointer() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidT",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:7868,Energy Efficiency,allocate,allocated,7868,"color nodes; TStructViewerGUI*fGUIPointer to GUI class; TObjArrayfLevelArrayArray with pointers to nodes on each level; TExMapfLevelMembersCountContains number of objects on each level; TExMapfLevelSizeContains total size in bytes of a level; void*fPointerMain pointer to represented object; TClass*fPointerClassTClass of a main pointer; TExMapfPointersMap of pointer to avoid circulation; TStructNode*fTopNodeMaster node for fPointer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructViewer(void* ptr = NULL, const char* clname = NULL); Default constructor. An argument ""ptr"" is a main pointer of type ""clname"", which should be shown in the viewer. ~TStructViewer(); Destructor. Clean all object after closing the viewer. void AddNode(TStructNode* node, ULong_t size); Find list with nodes on specified level and add node to this list and increment list of sizes and list of members. void CountMembers(TClass* cl, TStructNode* parent, void* pointer); Count allocated memory, increase member counters, find child nodes. void Draw(Option_t* option = """"); Draw object if there is valid pointer. TCanvas* GetCanvas(); Returns canvas used to keep TGeoVolumes. TGMainFrame* GetFrame(); Returns pointer to main window. void* GetPointer() const; Return main pointer. TExMap GetLevelMembersCount() const; Returns TExMap with pairs <level number, number of objects>. TExMap GetLevelSize() const; Returns TExMap with pairs <level number, size of level in bytes>. Bool_t GetLinksVisibility() const; Get visibility of links between objects. void Prepare(); Create top node and find all member nodes. void Reset(); Deleting nodes, maps and array. void SetColor(TString name, Int_t color); Sets color for the class ""name"" to color ""color"". void SetLinksVisibility(Bool_t val); ISets links visibility. void SetPointer(void* ptr, const char* clname = NULL); Set main pointer of class ""clname"". TColor GetColor(const char* typeName); Returns color associated with type ",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:523,Modifiability,inherit,inherit,523,". TStructViewer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GVIZ3D; » TStructViewer. class TStructViewer: public TObject. TStructViewer viewer represents class, struct or other type as an object in 3D space.; At the top of the scene we can see objects which is our pointer. Under it we see; pointers and collection elements. Collection must inherit from TCollection; or be STL collecion. We can change the number of visible levels or objects on the scene with the GUI or; methods. The size of geometry objects is proportional to the memory taken by this object; or to the number of members inside this object. An easy way to find some class in the viewer is to change the color of the type.; We can connect for example a TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operation are supported. In this picture we can see TStructViewer with pointer to TList which contains; other collections and objects of various classes. Other screenshot presents opened TStructNodeEditor. Function Members (Methods); public:. TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virt",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:952,Modifiability,inherit,inheriting,952,". TStructViewer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GVIZ3D; » TStructViewer. class TStructViewer: public TObject. TStructViewer viewer represents class, struct or other type as an object in 3D space.; At the top of the scene we can see objects which is our pointer. Under it we see; pointers and collection elements. Collection must inherit from TCollection; or be STL collecion. We can change the number of visible levels or objects on the scene with the GUI or; methods. The size of geometry objects is proportional to the memory taken by this object; or to the number of members inside this object. An easy way to find some class in the viewer is to change the color of the type.; We can connect for example a TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operation are supported. In this picture we can see TStructViewer with pointer to TList which contains; other collections and objects of various classes. Other screenshot presents opened TStructNodeEditor. Function Members (Methods); public:. TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virt",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:1051,Modifiability,inherit,inheriting,1051,"epage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GVIZ3D; » TStructViewer. class TStructViewer: public TObject. TStructViewer viewer represents class, struct or other type as an object in 3D space.; At the top of the scene we can see objects which is our pointer. Under it we see; pointers and collection elements. Collection must inherit from TCollection; or be STL collecion. We can change the number of visible levels or objects on the scene with the GUI or; methods. The size of geometry objects is proportional to the memory taken by this object; or to the number of members inside this object. An easy way to find some class in the viewer is to change the color of the type.; We can connect for example a TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operation are supported. In this picture we can see TStructViewer with pointer to TList which contains; other collections and objects of various classes. Other screenshot presents opened TStructNodeEditor. Function Members (Methods); public:. TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObjec",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:3740,Modifiability,Inherit,InheritsFrom,3740,"TObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas(); TColorGetColor(const char* typeName); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGMainFrame*GetFrame(); virtual const char*TObject::GetIconName() const; TExMapGetLevelMembersCount() const; TExMapGetLevelSize() const; Bool_tGetLinksVisibility() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; void*GetPointer() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:3806,Modifiability,Inherit,InheritsFrom,3806,"ual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas(); TColorGetColor(const char* typeName); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGMainFrame*GetFrame(); virtual const char*TObject::GetIconName() const; TExMapGetLevelMembersCount() const; TExMapGetLevelSize() const; Bool_tGetLinksVisibility() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; void*GetPointer() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operat",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:7311,Modifiability,Inherit,Inheritance,7311,", va_list va) const; voidTObject::MakeZombie(). private:. voidAddNode(TStructNode* node, ULong_t size); voidCountMembers(TClass* cl, TStructNode* parent, void* pointer); voidPrepare(); voidReset(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TListfColorsList with properties used to color nodes; TStructViewerGUI*fGUIPointer to GUI class; TObjArrayfLevelArrayArray with pointers to nodes on each level; TExMapfLevelMembersCountContains number of objects on each level; TExMapfLevelSizeContains total size in bytes of a level; void*fPointerMain pointer to represented object; TClass*fPointerClassTClass of a main pointer; TExMapfPointersMap of pointer to avoid circulation; TStructNode*fTopNodeMaster node for fPointer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructViewer(void* ptr = NULL, const char* clname = NULL); Default constructor. An argument ""ptr"" is a main pointer of type ""clname"", which should be shown in the viewer. ~TStructViewer(); Destructor. Clean all object after closing the viewer. void AddNode(TStructNode* node, ULong_t size); Find list with nodes on specified level and add node to this list and increment list of sizes and list of members. void CountMembers(TClass* cl, TStructNode* parent, void* pointer); Count allocated memory, increase member counters, find child nodes. void Draw(Option_t* option = """"); Draw object if there is valid pointer. TCanvas* GetCanvas(); Returns canvas used to keep TGeoVolumes. TGMainFrame* GetFrame(); Returns pointer to main window. void* GetPointer() const; Return main pointer. TExMap GetLevelMembersCount() const; Returns TExMap with pairs <level number, number of objects>. TExMap GetLevelSize() const; Returns TExMap with pairs <level number,",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:7324,Modifiability,Inherit,Inherited,7324,", va_list va) const; voidTObject::MakeZombie(). private:. voidAddNode(TStructNode* node, ULong_t size); voidCountMembers(TClass* cl, TStructNode* parent, void* pointer); voidPrepare(); voidReset(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TListfColorsList with properties used to color nodes; TStructViewerGUI*fGUIPointer to GUI class; TObjArrayfLevelArrayArray with pointers to nodes on each level; TExMapfLevelMembersCountContains number of objects on each level; TExMapfLevelSizeContains total size in bytes of a level; void*fPointerMain pointer to represented object; TClass*fPointerClassTClass of a main pointer; TExMapfPointersMap of pointer to avoid circulation; TStructNode*fTopNodeMaster node for fPointer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructViewer(void* ptr = NULL, const char* clname = NULL); Default constructor. An argument ""ptr"" is a main pointer of type ""clname"", which should be shown in the viewer. ~TStructViewer(); Destructor. Clean all object after closing the viewer. void AddNode(TStructNode* node, ULong_t size); Find list with nodes on specified level and add node to this list and increment list of sizes and list of members. void CountMembers(TClass* cl, TStructNode* parent, void* pointer); Count allocated memory, increase member counters, find child nodes. void Draw(Option_t* option = """"); Draw object if there is valid pointer. TCanvas* GetCanvas(); Returns canvas used to keep TGeoVolumes. TGMainFrame* GetFrame(); Returns pointer to main window. void* GetPointer() const; Return main pointer. TExMap GetLevelMembersCount() const; Returns TExMap with pairs <level number, number of objects>. TExMap GetLevelSize() const; Returns TExMap with pairs <level number,",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:7232,Safety,avoid,avoid,7232," const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidAddNode(TStructNode* node, ULong_t size); voidCountMembers(TClass* cl, TStructNode* parent, void* pointer); voidPrepare(); voidReset(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TListfColorsList with properties used to color nodes; TStructViewerGUI*fGUIPointer to GUI class; TObjArrayfLevelArrayArray with pointers to nodes on each level; TExMapfLevelMembersCountContains number of objects on each level; TExMapfLevelSizeContains total size in bytes of a level; void*fPointerMain pointer to represented object; TClass*fPointerClassTClass of a main pointer; TExMapfPointersMap of pointer to avoid circulation; TStructNode*fTopNodeMaster node for fPointer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructViewer(void* ptr = NULL, const char* clname = NULL); Default constructor. An argument ""ptr"" is a main pointer of type ""clname"", which should be shown in the viewer. ~TStructViewer(); Destructor. Clean all object after closing the viewer. void AddNode(TStructNode* node, ULong_t size); Find list with nodes on specified level and add node to this list and increment list of sizes and list of members. void CountMembers(TClass* cl, TStructNode* parent, void* pointer); Count allocated memory, increase member counters, find child nodes. void Draw(Option_t* option = """"); Draw object if there is valid pointer. TCanvas* GetCanvas(); Returns canvas used to keep TGeoV",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:3630,Security,Hash,Hash,3630,"Array* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas(); TColorGetColor(const char* typeName); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGMainFrame*GetFrame(); virtual const char*TObject::GetIconName() const; TExMapGetLevelMembersCount() const; TExMapGetLevelSize() const; Bool_tGetLinksVisibility() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; void*GetPointer() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:5884,Testability,Test,TestBit,5884," method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetColor(TString name, Int_t color); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLinksVisibility(Bool_t val); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointer(void* ptr, const char* clname = NULL); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:5923,Testability,Test,TestBits,5923," method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetColor(TString name, Int_t color); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLinksVisibility(Bool_t val); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointer(void* ptr, const char* clname = NULL); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:1113,Usability,simpl,simple,1113,"file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GVIZ3D; » TStructViewer. class TStructViewer: public TObject. TStructViewer viewer represents class, struct or other type as an object in 3D space.; At the top of the scene we can see objects which is our pointer. Under it we see; pointers and collection elements. Collection must inherit from TCollection; or be STL collecion. We can change the number of visible levels or objects on the scene with the GUI or; methods. The size of geometry objects is proportional to the memory taken by this object; or to the number of members inside this object. An easy way to find some class in the viewer is to change the color of the type.; We can connect for example a TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operation are supported. In this picture we can see TStructViewer with pointer to TList which contains; other collections and objects of various classes. Other screenshot presents opened TStructNodeEditor. Function Members (Methods); public:. TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual v",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:1325,Usability,Undo,Undo,1325,"struct or other type as an object in 3D space.; At the top of the scene we can see objects which is our pointer. Under it we see; pointers and collection elements. Collection must inherit from TCollection; or be STL collecion. We can change the number of visible levels or objects on the scene with the GUI or; methods. The size of geometry objects is proportional to the memory taken by this object; or to the number of members inside this object. An easy way to find some class in the viewer is to change the color of the type.; We can connect for example a TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operation are supported. In this picture we can see TStructViewer with pointer to TList which contains; other collections and objects of various classes. Other screenshot presents opened TStructNodeEditor. Function Members (Methods); public:. TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClon",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewer.html:1910,Usability,Clear,Clear,1910," TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virt",MatchSource.WIKI,root/html532/TStructViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewer.html
https://root.cern/root/html532/TStructViewerGUI.html:4749,Availability,Error,Error,4749,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TCanvas*GetCanvas(); voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; Int_tGetColor(TStructNode* node); stati",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:4878,Availability,error,error,4878,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TCanvas*GetCanvas(); voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; Int_tGetColor(TStructNode* node); static Int_tTGWindow::GetCounter(); TStructNodeProperty*GetDefaultColor(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:4962,Availability,error,error,4962,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TCanvas*GetCanvas(); voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; Int_tGetColor(TStructNode* node); static Int_tTGWindow::GetCounter(); TStructNodeProperty*GetDefaultColor(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefault",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:20057,Availability,mask,mask,20057,,MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:26234,Deployability,update,updates,26234,"given parent ""p"". Argument ""parent"" is a pointer to TStructViewer which contains this GUI.; This constructor build window with all controls, build map with colors, init OpenGL Viewer and create TGeoVolumes. ~TStructViewerGUI(); Destructor. void AutoRefreshButtonSlot(Bool_t on); Activated when user chage condition. void BoxHeightValueSetSlot(Long_t h); Emmited when user changes height of boxes. void CalculatePosistion(TStructNode* parent); Recursive method to calculating nodes posistion in 3D space. void CheckMaxObjects(TStructNode* parent); Check if all of nodes can be displayed on scene. Hides redendant nodes. void CloseWindow(); Delete window. void ColorSelectedSlot(Pixel_t pixel); Slot for default color selsect.; Sets default colot to ""pixel"". void Divide(TList* list, Float_t x1, Float_t x2, Float_t y1, Float_t y2); Divides rectangle where the outlining box is placed. void DoubleClickedSlot(); Activated when user double click on objects on 3D scene. Sets clicked node to top node; and updates scene with camers reset. void Draw(Option_t* option = """"); Check limits and draws nodes and links. void DrawLink(TStructNode* parent); Recursive method to draw links. void DrawNode(TStructNode* node); Creates and draws TGeoVolume from given ""node"". void DrawVolumes(TStructNode* visObj); Recursive method to draw GeoVolumes. TStructNodeProperty* FindNodeProperty(TStructNode* node); Returns pointer to property associated with node ""node"". If property is not found; then it returns default property. TCanvas* GetCanvas(); Returns canvas used to keep TGeoVolumes. Int_t GetColor(TStructNode* node); Returns color form fColors for given ""node"". TStructNodeProperty* GetDefaultColor(); Return default color for nodes. Bool_t GetLinksVisibility() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewe",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:27476,Deployability,update,updates,27476,"om given ""node"". void DrawVolumes(TStructNode* visObj); Recursive method to draw GeoVolumes. TStructNodeProperty* FindNodeProperty(TStructNode* node); Returns pointer to property associated with node ""node"". If property is not found; then it returns default property. TCanvas* GetCanvas(); Returns canvas used to keep TGeoVolumes. Int_t GetColor(TStructNode* node); Returns color form fColors for given ""node"". TStructNodeProperty* GetDefaultColor(); Return default color for nodes. Bool_t GetLinksVisibility() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:27833,Deployability,update,updates,27833,"_t GetColor(TStructNode* node); Returns color form fColors for given ""node"". TStructNodeProperty* GetDefaultColor(); Return default color for nodes. Bool_t GetLinksVisibility() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 201",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28138,Deployability,Update,Update,28138,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28174,Deployability,Update,Updates,28174,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28232,Deployability,update,update,28232,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28273,Deployability,Update,UpdateButtonSlot,28273,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28293,Deployability,Update,Update,28293,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28313,Deployability,Update,Updates,28313,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28333,Deployability,Update,UpdateLabels,28333,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:390,Integrability,interface,interface,390,". TStructViewerGUI. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GVIZ3D; » TStructViewerGUI. class TStructViewerGUI: public TGMainFrame. TStructViewerGUI is main window of TStructViewer. It provides graphical; interface. In the window we can find panel with tabs and frame with; GLViewer. Tab ""Info"" serves information about node and is used to naviagate; backward and forward. Second tab ""Options"" is used to set few options; such as links visibility, scaling method or setting a pointer.; Last tab ""Editor"" is tab when the TStructNodeEditor is placed. Function Members (Methods); public:. TStructViewerGUI(TStructViewer* parent, TStructNode* nodePtr, TList* colors, const TGWindow* p = NULL, UInt_t w = 800, UInt_t h = 600); virtual~TStructViewerGUI(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidAutoRefreshButtonSlot(Bool_t on); virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); voidBoxHeightValueSetSlot(Long_t h); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*T",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:11773,Integrability,Message,Message,11773,"_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLevelDistValueSetSlot(Long_t dist); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidMouseOverSlot(TGLPhysicalShape* shape); virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:10278,Modifiability,Inherit,InheritsFrom,10278,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:10344,Modifiability,Inherit,InheritsFrom,10344,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLevelDistValueSet",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:24964,Modifiability,Inherit,Inheritance,24964,"utton which can repeat last node change; TListfRedoListList with nodes pointers which were top nodes; TGRadioButton*fScaleByMembersButtonSets sorting method to members; TGRadioButton*fScaleBySizeButtonSets sorting method to size; TStructNode*fSelectedObjectPointer to actual selected object on scene; TGCheckButton*fShowLinksCheckButtonEnable/Disable lines between nodes; TGLabel*fSizeLabelLabel with size of node; TGToolTip*fToolTipToolTip is showed when user mouse is over the object; TGeoVolume*fTopVolumeMain volume containing all others volumes; TGLabel*fTotalSizeLabelLabel with size of node and daughters nodes; TGTextButton*fUndoButtonButton which can restore last top node; TListfUndoListList with nodes pointers which were top nodes; TListfVisibleObjectsList with pointer to nodes which are visible; TExMapfVolumesMap with pointers to Volumes associated with nodes; static UInt_tfgCounterVolume counter; static TGeoMedium*fgMediumMaterial and medium. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructViewerGUI(TStructViewer* parent, TStructNode* nodePtr, TList* colors, const TGWindow* p = NULL, UInt_t w = 800, UInt_t h = 600); Constructs window with ""w"" as width, ""h"" as height and given parent ""p"". Argument ""parent"" is a pointer to TStructViewer which contains this GUI.; This constructor build window with all controls, build map with colors, init OpenGL Viewer and create TGeoVolumes. ~TStructViewerGUI(); Destructor. void AutoRefreshButtonSlot(Bool_t on); Activated when user chage condition. void BoxHeightValueSetSlot(Long_t h); Emmited when user changes height of boxes. void CalculatePosistion(TStructNode* parent); Recursive method to calculating nodes posistion in 3D space. void CheckMaxObjects(TStructNode* parent); Check if all of nodes can be displayed on scene. Hides redendant nodes. void CloseWindow(); Delete window. void ColorSelectedSlot(Pixel_t pixel); Slot for default color selsect.; Sets default colot to ""pixel"". v",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:24977,Modifiability,Inherit,Inherited,24977,"utton which can repeat last node change; TListfRedoListList with nodes pointers which were top nodes; TGRadioButton*fScaleByMembersButtonSets sorting method to members; TGRadioButton*fScaleBySizeButtonSets sorting method to size; TStructNode*fSelectedObjectPointer to actual selected object on scene; TGCheckButton*fShowLinksCheckButtonEnable/Disable lines between nodes; TGLabel*fSizeLabelLabel with size of node; TGToolTip*fToolTipToolTip is showed when user mouse is over the object; TGeoVolume*fTopVolumeMain volume containing all others volumes; TGLabel*fTotalSizeLabelLabel with size of node and daughters nodes; TGTextButton*fUndoButtonButton which can restore last top node; TListfUndoListList with nodes pointers which were top nodes; TListfVisibleObjectsList with pointer to nodes which are visible; TExMapfVolumesMap with pointers to Volumes associated with nodes; static UInt_tfgCounterVolume counter; static TGeoMedium*fgMediumMaterial and medium. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStructViewerGUI(TStructViewer* parent, TStructNode* nodePtr, TList* colors, const TGWindow* p = NULL, UInt_t w = 800, UInt_t h = 600); Constructs window with ""w"" as width, ""h"" as height and given parent ""p"". Argument ""parent"" is a pointer to TStructViewer which contains this GUI.; This constructor build window with all controls, build map with colors, init OpenGL Viewer and create TGeoVolumes. ~TStructViewerGUI(); Destructor. void AutoRefreshButtonSlot(Bool_t on); Activated when user chage condition. void BoxHeightValueSetSlot(Long_t h); Emmited when user changes height of boxes. void CalculatePosistion(TStructNode* parent); Recursive method to calculating nodes posistion in 3D space. void CheckMaxObjects(TStructNode* parent); Check if all of nodes can be displayed on scene. Hides redendant nodes. void CloseWindow(); Delete window. void ColorSelectedSlot(Pixel_t pixel); Slot for default color selsect.; Sets default colot to ""pixel"". v",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:9988,Security,Hash,Hash,9988,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:16832,Testability,Test,TestBit,16832,"kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLinksVisibility(Bool_t val); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); voidSetNodePtr(TStructNode* val); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointerButtonSlot(); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowLinksToggled(Bool_t on); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); voidUndoButtonSlot(); virtual voidTGFrame::UnmapWindow(); voidUpdate(Bool_t resetCamera = false); voidUpdateButtonSlot(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:16871,Testability,Test,TestBits,16871,"kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLinksVisibility(Bool_t val); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); voidSetNodePtr(TStructNode* val); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointerButtonSlot(); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowLinksToggled(Bool_t on); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); voidUndoButtonSlot(); virtual voidTGFrame::UnmapWindow(); voidUpdate(Bool_t resetCamera = false); voidUpdateButtonSlot(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:1961,Usability,Clear,Clear,1961,"onst char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidAutoRefreshButtonSlot(Bool_t on); virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); voidBoxHeightValueSetSlot(Long_t h); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); voidColorSelectedSlot(Pixel_t pixel); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow();",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:27566,Usability,Undo,Undo,27566,". TStructNodeProperty* FindNodeProperty(TStructNode* node); Returns pointer to property associated with node ""node"". If property is not found; then it returns default property. TCanvas* GetCanvas(); Returns canvas used to keep TGeoVolumes. Int_t GetColor(TStructNode* node); Returns color form fColors for given ""node"". TStructNodeProperty* GetDefaultColor(); Return default color for nodes. Bool_t GetLinksVisibility() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28188,Usability,Clear,Clear,28188,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28434,Usability,Undo,UndoButtonSlot,28434,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28452,Usability,Undo,UndoButton,28452,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStructViewerGUI.html:28495,Usability,Undo,Undo,28495,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStructViewerGUI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html
https://root.cern/root/html532/TStyle.html:1783,Availability,Error,Error,1783,"ar* name, const char* title); virtual~TStyle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAxisChoice(Option_t* axis) const; virtual voidBrowse(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TAttText*GetAttDate(); Color_tGetAxisColor(Option_t* axis = ""X"") const; Float_tGetBarOffset() const; Float_tGetBarWidth() const; Int_tGetCanvasBorderMode() const; Width_tGetCanvasBorderSize() const; Color_tGetCanvasColor() const; Int_tGetCanvasDefH() const; Int_tGetCanvasDefW() const; Int_tGetCanvasDefX() const; Int_tGetCanvasDefY() const; Bool_tGetCanvasPreferGL() const; Int_tGetColorModelPS() const; Int_tGetColorPalette(Int_t i) const; Float_tGetDateX() const",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:1912,Availability,error,error,1912,"dPad(Option_t* option = """"); Int_tAxisChoice(Option_t* axis) const; virtual voidBrowse(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TAttText*GetAttDate(); Color_tGetAxisColor(Option_t* axis = ""X"") const; Float_tGetBarOffset() const; Float_tGetBarWidth() const; Int_tGetCanvasBorderMode() const; Width_tGetCanvasBorderSize() const; Color_tGetCanvasColor() const; Int_tGetCanvasDefH() const; Int_tGetCanvasDefW() const; Int_tGetCanvasDefX() const; Int_tGetCanvasDefY() const; Bool_tGetCanvasPreferGL() const; Int_tGetColorModelPS() const; Int_tGetColorPalette(Int_t i) const; Float_tGetDateX() const; Float_tGetDateY() const; Int_tGetDrawBorder() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::Get",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:1996,Availability,error,error,1996,"se(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TAttText*GetAttDate(); Color_tGetAxisColor(Option_t* axis = ""X"") const; Float_tGetBarOffset() const; Float_tGetBarWidth() const; Int_tGetCanvasBorderMode() const; Width_tGetCanvasBorderSize() const; Color_tGetCanvasColor() const; Int_tGetCanvasDefH() const; Int_tGetCanvasDefW() const; Int_tGetCanvasDefX() const; Int_tGetCanvasDefY() const; Bool_tGetCanvasPreferGL() const; Int_tGetColorModelPS() const; Int_tGetColorPalette(Int_t i) const; Float_tGetDateX() const; Float_tGetDateY() const; Int_tGetDrawBorder() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetEndErrorSize() const; Float_tGetErrorX() const; virtual Color_",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:10550,Availability,error,errorx,10550,"Primitive(ostream& out, Option_t* = """"); voidSaveSource(const char* filename, Option_t* option = 0); virtual voidTAttText::SaveTextAttributes(ostream& out, const char* name, Int_t alidef = 12, Float_t angdef = 0, Int_t coldef = 1, Int_t fondef = 61, Float_t sizdef = 1); voidSetAxisColor(Color_t color = 1, Option_t* axis = ""X""); voidSetBarOffset(Float_t baroff = 0.5); voidSetBarWidth(Float_t barwidth = 0.5); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCanvasBorderMode(Int_t mode = 1); voidSetCanvasBorderSize(Width_t size = 1); voidSetCanvasColor(Color_t color = 19); voidSetCanvasDefH(Int_t h = 500); voidSetCanvasDefW(Int_t w = 700); voidSetCanvasDefX(Int_t topx = 10); voidSetCanvasDefY(Int_t topy = 10); voidSetCanvasPreferGL(Bool_t prefer = kTRUE); voidSetColorModelPS(Int_t c = 0); voidSetDateX(Float_t x = 0.01); voidSetDateY(Float_t y = 0.01); voidSetDrawBorder(Int_t drawborder = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEndErrorSize(Float_t np = 2); voidSetErrorX(Float_t errorx = 0.5); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetFitFormat(const char* format = ""5.4g""); voidSetFrameBorderMode(Int_t mode = 1); voidSetFrameBorderSize(Width_t size = 1); voidSetFrameFillColor(Color_t color = 1); voidSetFrameFillStyle(Style_t styl = 0); voidSetFrameLineColor(Color_t color = 1); voidSetFrameLineStyle(Style_t styl = 0); voidSetFrameLineWidth(Width_t width = 1); voidSetFuncColor(Color_t color = 1); voidSetFuncStyle(Style_t style = 1); voidSetFuncWidth(Width_t width = 4); voidSetGridColor(Color_t color = 0); voidSetGridStyle(Style_t style = 3); voidSetGridWidth(Width_t width = 1); voidSetHatchesLineWidth(Int_t l); voidSetHatchesSpacing(Double_t h); voidSetHeaderPS(const char* header); voidSetHistFillColor(Color_t color = 1); voidSetHistFillStyle(Style",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:18233,Availability,error,error,18233,,MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:18285,Availability,error,errors,18285,,MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:27458,Availability,error,error,27458,"r model. void SetHistMinimumZero(Bool_t zero = kTRUE); If the argument zero=kTRUE the minimum value for the Y axis of 1-d histograms; is set to 0 if the minimum bin content is greater than 0 and TH1::SetMinimum; has not been called.; Otherwise the minimum is based on the minimum bin content. void SetNdivisions(Int_t n = 510, Option_t* axis = ""X""); Set the number of divisions to draw an axis.; ndiv : Number of divisions. n = N1 + 100*N2 + 10000*N3; N1=number of primary divisions.; N2=number of secondary divisions.; N3=number of 3rd divisions.; e.g.:; nndi=0 --> no tick marks.; nndi=2 --> 2 divisions, one tick mark in the middle; of the axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetAxisColor(Color_t color = 1, Option_t* axis = ""X""); Set color to draw the axis line and tick marks.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetEndErrorSize(Float_t np = 2); Set the size (in pixels) of the small lines drawn at the; end of the error bars (TH1 or TGraphErrors).; The default value is 2 pixels.; Set np=0 to remove these lines. void SetHeaderPS(const char* header); Define a string to be inserted in the Postscript header; The string in header will be added to the Postscript file; immediatly following the %%Page line; For example, this string may contain special Postscript instructions like; 200 200 translate; the following header string will print the string ""my annotation"" at the; bottom left corner of the page (outside the user area); ""gsave 100 -100 t 0 r 0 0 m /Helvetica-Bold findfont 56 sf 0 0 m ( my annotation ) show gr""; This information is used in TPostScript::Initialize. void SetIsReading(Bool_t reading = kTRUE); Sets the fIsReading member to reading (default=kTRUE); fIsReading (used via gStyle->IsReading()) can be used in; the functions myclass::UseCurrentStyle to read from the current style; or write to the current style. void SetTitlePS(const char* pstitle); Define",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:32494,Availability,error,errors,32494,"e controlled by:; gStyle->SetDateX(x); x in NDC; gStyle->SetDateY(y); y in NDC. The date text attributes can be changed with:; gStyle->GetAttDate()->SetTextFont(font=62);; gStyle->GetAttDate()->SetTextSize(size=0.025);; gStyle->GetAttDate()->SetTextAngle(angle=0);; gStyle->GetAttDate()->SetTextAlign(align=11);; gStyle->GetAttDate()->SetTextColor(color=1);. The current date attributes can be obtained via:; gStyle->GetAttDate()->GetTextxxxx();. When the date option is active, a text object is created when the pad; paint its list of primitives. The text object is named ""DATE"".; The DATE attributes can also be edited interactively (position; and attributes) via the normal context menu. void SetOptFit(Int_t fit = 1); The type of information about fit parameters printed in the histogram; statistics box can be selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:32649,Availability,error,errors,32649,"e controlled by:; gStyle->SetDateX(x); x in NDC; gStyle->SetDateY(y); y in NDC. The date text attributes can be changed with:; gStyle->GetAttDate()->SetTextFont(font=62);; gStyle->GetAttDate()->SetTextSize(size=0.025);; gStyle->GetAttDate()->SetTextAngle(angle=0);; gStyle->GetAttDate()->SetTextAlign(align=11);; gStyle->GetAttDate()->SetTextColor(color=1);. The current date attributes can be obtained via:; gStyle->GetAttDate()->GetTextxxxx();. When the date option is active, a text object is created when the pad; paint its list of primitives. The text object is named ""DATE"".; The DATE attributes can also be edited interactively (position; and attributes) via the normal context menu. void SetOptFit(Int_t fit = 1); The type of information about fit parameters printed in the histogram; statistics box can be selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:33141,Availability,error,error,33141,"selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis ",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:33210,Availability,error,error,33210,"selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis ",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:33370,Availability,error,error,33370,"selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis ",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:33433,Availability,error,error,33433,"selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis ",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:34318,Availability,error,error,34318,"r of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; Example: gStyle->SetOptStat(""ne"");; print only name of histogram and number of entries.; gStyle->SetOptStat(""n"") print only the name of the histogram; gStyle->SetOptStat(""nemr"") is the default. void SetPaperSize(TStyle::EPaperSize size); Set paper size for PostScript output. void SetPaperSize(Float_t xsize = 20, Float_t ysize = 26); Set paper size for PostScript output.; The paper size is specified in centimeters. Default is 20x26.; See also TPad::Print. void SetTickLength(Float_t length = 0.03, Option_t* axis = ""X""); Set the tick marks length for an axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetTitleColor(Color_t color = 1, Option_t* axis = ""X""); if axis ==""x"" set the X axis title color; if axis ==""y"" set the Y axis title color; i",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:34381,Availability,error,error,34381,"r of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; Example: gStyle->SetOptStat(""ne"");; print only name of histogram and number of entries.; gStyle->SetOptStat(""n"") print only the name of the histogram; gStyle->SetOptStat(""nemr"") is the default. void SetPaperSize(TStyle::EPaperSize size); Set paper size for PostScript output. void SetPaperSize(Float_t xsize = 20, Float_t ysize = 26); Set paper size for PostScript output.; The paper size is specified in centimeters. Default is 20x26.; See also TPad::Print. void SetTickLength(Float_t length = 0.03, Option_t* axis = ""X""); Set the tick marks length for an axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetTitleColor(Color_t color = 1, Option_t* axis = ""X""); if axis ==""x"" set the X axis title color; if axis ==""y"" set the Y axis title color; i",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:34526,Availability,error,error,34526,"r of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; Example: gStyle->SetOptStat(""ne"");; print only name of histogram and number of entries.; gStyle->SetOptStat(""n"") print only the name of the histogram; gStyle->SetOptStat(""nemr"") is the default. void SetPaperSize(TStyle::EPaperSize size); Set paper size for PostScript output. void SetPaperSize(Float_t xsize = 20, Float_t ysize = 26); Set paper size for PostScript output.; The paper size is specified in centimeters. Default is 20x26.; See also TPad::Print. void SetTickLength(Float_t length = 0.03, Option_t* axis = ""X""); Set the tick marks length for an axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetTitleColor(Color_t color = 1, Option_t* axis = ""X""); if axis ==""x"" set the X axis title color; if axis ==""y"" set the Y axis title color; i",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:34585,Availability,error,error,34585,"r of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; Example: gStyle->SetOptStat(""ne"");; print only name of histogram and number of entries.; gStyle->SetOptStat(""n"") print only the name of the histogram; gStyle->SetOptStat(""nemr"") is the default. void SetPaperSize(TStyle::EPaperSize size); Set paper size for PostScript output. void SetPaperSize(Float_t xsize = 20, Float_t ysize = 26); Set paper size for PostScript output.; The paper size is specified in centimeters. Default is 20x26.; See also TPad::Print. void SetTickLength(Float_t length = 0.03, Option_t* axis = ""X""); Set the tick marks length for an axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetTitleColor(Color_t color = 1, Option_t* axis = ""X""); if axis ==""x"" set the X axis title color; if axis ==""y"" set the Y axis title color; i",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:44361,Availability,error,errorx,44361,"ScalePS() const; {return fLineScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. void SetCanvasDefY(Int_t topy = 10); {fCanvasDefY = topy;}. void SetLegendBorderSize(Width_t size = 4); {fLegendBorderSize = size;}. void SetLegendFillColor(Color_t color = 0); {fLegendFillColor = color;}. void SetLegendFont(Style_t font = 62); {fLegendFont = font;}. void SetPadColor(Color_t color = 19); {fPadColor = color;}. void SetPadBorderSize(Width_t size = 1); {fPadBorderSize = size;}. void SetPadBorderMode(Int_t mode = 1);",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:44387,Availability,error,errorx,44387,"ScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. void SetCanvasDefY(Int_t topy = 10); {fCanvasDefY = topy;}. void SetLegendBorderSize(Width_t size = 4); {fLegendBorderSize = size;}. void SetLegendFillColor(Color_t color = 0); {fLegendFillColor = color;}. void SetLegendFont(Style_t font = 62); {fLegendFont = font;}. void SetPadColor(Color_t color = 19); {fPadColor = color;}. void SetPadBorderSize(Width_t size = 1); {fPadBorderSize = size;}. void SetPadBorderMode(Int_t mode = 1); {fPadBorderMode = mode;}. vo",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:48711,Deployability,Toggle,ToggleEventStatus,48711," = 19); {fStatColor=color;}. void SetStatTextColor(Int_t color = 1); {fStatTextColor=color;}. void SetStatStyle(Style_t style = 1001); {fStatStyle=style;}. void SetStatBorderSize(Width_t size = 2); {fStatBorderSize=size;}. void SetStatFont(Style_t font = 62); {fStatFont=font;}. void SetStatFontSize(Float_t size = 0); {fStatFontSize=size;}. void SetStatFormat(const char* format = ""6.4g""); {fStatFormat = format;}. void SetStatX(Float_t x = 0); {fStatX=x;}. void SetStatY(Float_t y = 0); {fStatY=y;}. void SetStatW(Float_t w = 0.19); {fStatW=w;}. void SetStatH(Float_t h = 0.1); {fStatH=h;}. void SetTitleAlign(Int_t a = 13); {fTitleAlign=a;}. void SetTitleFillColor(Color_t color = 1); {fTitleColor=color;}. void SetTitleTextColor(Color_t color = 1); {fTitleTextColor=color;}. void SetTitleStyle(Style_t style = 1001); {fTitleStyle=style;}. void SetTitleFontSize(Float_t size = 0); {fTitleFontSize=size;}. void SetTitleBorderSize(Width_t size = 2); {fTitleBorderSize=size;}. void SetTitleXOffset(Float_t offset = 1); {SetTitleOffset(offset,""X"");}. void SetTitleXSize(Float_t size = 0.02); {SetTitleSize(size,""X"");}. void SetTitleYOffset(Float_t offset = 1); {SetTitleOffset(offset,""Y"");}. void SetTitleYSize(Float_t size = 0.02); {SetTitleSize(size,""Y"");}. void SetTitleX(Float_t x = 0); {fTitleX=x;}. void SetTitleY(Float_t y = 0.985); {fTitleY=y;}. void SetTitleW(Float_t w = 0); {fTitleW=w;}. void SetTitleH(Float_t h = 0); {fTitleH=h;}. void ToggleEventStatus(); { fShowEventStatus = fShowEventStatus ? 0 : 1; }. void ToggleEditor(); { fShowEditor = fShowEditor ? 0 : 1; }. void ToggleToolBar(); { fShowToolBar = fShowToolBar ? 0 : 1; }. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TStyle.h 38506 2011-03-18 14:08:49Z couet $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:48787,Deployability,Toggle,ToggleEditor,48787," = 19); {fStatColor=color;}. void SetStatTextColor(Int_t color = 1); {fStatTextColor=color;}. void SetStatStyle(Style_t style = 1001); {fStatStyle=style;}. void SetStatBorderSize(Width_t size = 2); {fStatBorderSize=size;}. void SetStatFont(Style_t font = 62); {fStatFont=font;}. void SetStatFontSize(Float_t size = 0); {fStatFontSize=size;}. void SetStatFormat(const char* format = ""6.4g""); {fStatFormat = format;}. void SetStatX(Float_t x = 0); {fStatX=x;}. void SetStatY(Float_t y = 0); {fStatY=y;}. void SetStatW(Float_t w = 0.19); {fStatW=w;}. void SetStatH(Float_t h = 0.1); {fStatH=h;}. void SetTitleAlign(Int_t a = 13); {fTitleAlign=a;}. void SetTitleFillColor(Color_t color = 1); {fTitleColor=color;}. void SetTitleTextColor(Color_t color = 1); {fTitleTextColor=color;}. void SetTitleStyle(Style_t style = 1001); {fTitleStyle=style;}. void SetTitleFontSize(Float_t size = 0); {fTitleFontSize=size;}. void SetTitleBorderSize(Width_t size = 2); {fTitleBorderSize=size;}. void SetTitleXOffset(Float_t offset = 1); {SetTitleOffset(offset,""X"");}. void SetTitleXSize(Float_t size = 0.02); {SetTitleSize(size,""X"");}. void SetTitleYOffset(Float_t offset = 1); {SetTitleOffset(offset,""Y"");}. void SetTitleYSize(Float_t size = 0.02); {SetTitleSize(size,""Y"");}. void SetTitleX(Float_t x = 0); {fTitleX=x;}. void SetTitleY(Float_t y = 0.985); {fTitleY=y;}. void SetTitleW(Float_t w = 0); {fTitleW=w;}. void SetTitleH(Float_t h = 0); {fTitleH=h;}. void ToggleEventStatus(); { fShowEventStatus = fShowEventStatus ? 0 : 1; }. void ToggleEditor(); { fShowEditor = fShowEditor ? 0 : 1; }. void ToggleToolBar(); { fShowToolBar = fShowToolBar ? 0 : 1; }. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TStyle.h 38506 2011-03-18 14:08:49Z couet $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:48848,Deployability,Toggle,ToggleToolBar,48848," = 19); {fStatColor=color;}. void SetStatTextColor(Int_t color = 1); {fStatTextColor=color;}. void SetStatStyle(Style_t style = 1001); {fStatStyle=style;}. void SetStatBorderSize(Width_t size = 2); {fStatBorderSize=size;}. void SetStatFont(Style_t font = 62); {fStatFont=font;}. void SetStatFontSize(Float_t size = 0); {fStatFontSize=size;}. void SetStatFormat(const char* format = ""6.4g""); {fStatFormat = format;}. void SetStatX(Float_t x = 0); {fStatX=x;}. void SetStatY(Float_t y = 0); {fStatY=y;}. void SetStatW(Float_t w = 0.19); {fStatW=w;}. void SetStatH(Float_t h = 0.1); {fStatH=h;}. void SetTitleAlign(Int_t a = 13); {fTitleAlign=a;}. void SetTitleFillColor(Color_t color = 1); {fTitleColor=color;}. void SetTitleTextColor(Color_t color = 1); {fTitleTextColor=color;}. void SetTitleStyle(Style_t style = 1001); {fTitleStyle=style;}. void SetTitleFontSize(Float_t size = 0); {fTitleFontSize=size;}. void SetTitleBorderSize(Width_t size = 2); {fTitleBorderSize=size;}. void SetTitleXOffset(Float_t offset = 1); {SetTitleOffset(offset,""X"");}. void SetTitleXSize(Float_t size = 0.02); {SetTitleSize(size,""X"");}. void SetTitleYOffset(Float_t offset = 1); {SetTitleOffset(offset,""Y"");}. void SetTitleYSize(Float_t size = 0.02); {SetTitleSize(size,""Y"");}. void SetTitleX(Float_t x = 0); {fTitleX=x;}. void SetTitleY(Float_t y = 0.985); {fTitleY=y;}. void SetTitleW(Float_t w = 0); {fTitleW=w;}. void SetTitleH(Float_t h = 0); {fTitleH=h;}. void ToggleEventStatus(); { fShowEventStatus = fShowEventStatus ? 0 : 1; }. void ToggleEditor(); { fShowEditor = fShowEditor ? 0 : 1; }. void ToggleToolBar(); { fShowToolBar = fShowToolBar ? 0 : 1; }. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TStyle.h 38506 2011-03-18 14:08:49Z couet $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:26027,Energy Efficiency,Green,Green,26027,"tput. Float_t GetTickLength(Option_t* axis = ""X"") const; Return tick length. Color_t GetTitleColor(Option_t* axis = ""X"") const; Return title color. Style_t GetTitleFont(Option_t* axis = ""X"") const; Return title font. Float_t GetTitleOffset(Option_t* axis = ""X"") const; Return title offset. Float_t GetTitleSize(Option_t* axis = ""X"") const; Return title size. void Paint(Option_t* option = """"); Show the options from the current style; if (TClass::GetClass(""TStyleManager"")) gSystem->Load(""libGed"");. void SetColorModelPS(Int_t c = 0); Define the color model used by TPostScript and TPDF (RGB or CMYK).; CMY and CMYK models are subtractive color models unlike RGB which is; additive. They are mainly used for printing purposes. CMY means Cyan Magenta; Yellow. To convert RGB to CMY it is enough to do: C=1-R, M=1-G and Y=1-B.; CMYK has one more component K (black). The conversion from RGB to CMYK is:. Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; Double_t Cyan = (1-Red-Black)/(1-Black);; Double_t Magenta = (1-Green-Black)/(1-Black);; Double_t Yellow = (1-Blue-Black)/(1-Black);. CMYK adds the black component which allows better quality for black; printing. PostScript and PDF support the CMYK model. c = 0 means TPostScript and TPDF will use RGB color model (default); c = 1 means TPostScript and TPDF will use CMYK color model. void SetHistMinimumZero(Bool_t zero = kTRUE); If the argument zero=kTRUE the minimum value for the Y axis of 1-d histograms; is set to 0 if the minimum bin content is greater than 0 and TH1::SetMinimum; has not been called.; Otherwise the minimum is based on the minimum bin content. void SetNdivisions(Int_t n = 510, Option_t* axis = ""X""); Set the number of divisions to draw an axis.; ndiv : Number of divisions. n = N1 + 100*N2 + 10000*N3; N1=number of primary divisions.; N2=number of secondary divisions.; N3=number of 3rd divisions.; e.g.:; nndi=0 --> no tick marks.; nndi=2 --> 2 divisions, one tick mark in the middle; of the axis.; axis spe",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:26108,Energy Efficiency,Green,Green-Black,26108,"tput. Float_t GetTickLength(Option_t* axis = ""X"") const; Return tick length. Color_t GetTitleColor(Option_t* axis = ""X"") const; Return title color. Style_t GetTitleFont(Option_t* axis = ""X"") const; Return title font. Float_t GetTitleOffset(Option_t* axis = ""X"") const; Return title offset. Float_t GetTitleSize(Option_t* axis = ""X"") const; Return title size. void Paint(Option_t* option = """"); Show the options from the current style; if (TClass::GetClass(""TStyleManager"")) gSystem->Load(""libGed"");. void SetColorModelPS(Int_t c = 0); Define the color model used by TPostScript and TPDF (RGB or CMYK).; CMY and CMYK models are subtractive color models unlike RGB which is; additive. They are mainly used for printing purposes. CMY means Cyan Magenta; Yellow. To convert RGB to CMY it is enough to do: C=1-R, M=1-G and Y=1-B.; CMYK has one more component K (black). The conversion from RGB to CMYK is:. Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; Double_t Cyan = (1-Red-Black)/(1-Black);; Double_t Magenta = (1-Green-Black)/(1-Black);; Double_t Yellow = (1-Blue-Black)/(1-Black);. CMYK adds the black component which allows better quality for black; printing. PostScript and PDF support the CMYK model. c = 0 means TPostScript and TPDF will use RGB color model (default); c = 1 means TPostScript and TPDF will use CMYK color model. void SetHistMinimumZero(Bool_t zero = kTRUE); If the argument zero=kTRUE the minimum value for the Y axis of 1-d histograms; is set to 0 if the minimum bin content is greater than 0 and TH1::SetMinimum; has not been called.; Otherwise the minimum is based on the minimum bin content. void SetNdivisions(Int_t n = 510, Option_t* axis = ""X""); Set the number of divisions to draw an axis.; ndiv : Number of divisions. n = N1 + 100*N2 + 10000*N3; N1=number of primary divisions.; N2=number of secondary divisions.; N3=number of 3rd divisions.; e.g.:; nndi=0 --> no tick marks.; nndi=2 --> 2 divisions, one tick mark in the middle; of the axis.; axis spe",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:7244,Modifiability,Inherit,InheritsFrom,7244,"tGetTickLength(Option_t* axis = ""X"") const; Double_tGetTimeOffset() const; virtual const char*TNamed::GetTitle() const; Int_tGetTitleAlign(); Width_tGetTitleBorderSize() const; Color_tGetTitleColor(Option_t* axis = ""X"") const; Color_tGetTitleFillColor() const; Style_tGetTitleFont(Option_t* axis = ""X"") const; Float_tGetTitleFontSize() const; Float_tGetTitleH() const; Float_tGetTitleOffset(Option_t* axis = ""X"") const; const char*GetTitlePS() const; Float_tGetTitleSize(Option_t* axis = ""X"") const; Style_tGetTitleStyle() const; Color_tGetTitleTextColor() const; Float_tGetTitleW() const; Float_tGetTitleX() const; Float_tGetTitleXOffset() const; Float_tGetTitleXSize() const; Float_tGetTitleY() const; Float_tGetTitleYOffset() const; Float_tGetTitleYSize() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReading() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t s",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:7310,Modifiability,Inherit,InheritsFrom,7310,") const; virtual const char*TNamed::GetTitle() const; Int_tGetTitleAlign(); Width_tGetTitleBorderSize() const; Color_tGetTitleColor(Option_t* axis = ""X"") const; Color_tGetTitleFillColor() const; Style_tGetTitleFont(Option_t* axis = ""X"") const; Float_tGetTitleFontSize() const; Float_tGetTitleH() const; Float_tGetTitleOffset(Option_t* axis = ""X"") const; const char*GetTitlePS() const; Float_tGetTitleSize(Option_t* axis = ""X"") const; Style_tGetTitleStyle() const; Color_tGetTitleTextColor() const; Float_tGetTitleW() const; Float_tGetTitleX() const; Float_tGetTitleXOffset() const; Float_tGetTitleXSize() const; Float_tGetTitleY() const; Float_tGetTitleYOffset() const; Float_tGetTitleYSize() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReading() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject:",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:22381,Modifiability,Inherit,Inheritance,22381,"orstat text color; Float_tfStatWwidth of stat box; Float_tfStatXX position of top right corner of stat box; Float_tfStatYY position of top right corner of stat box; Bool_tfStripDecimalsStrip decimals in axis labels; Double_tfTimeOffsetTime offset to the beginning of an axis; Int_tfTitleAligntitle box alignment; Width_tfTitleBorderSizeborder size of Title PavelLabel; Color_tfTitleColortitle fill area color; Style_tfTitleFontfont style of Title PaveLabel; Float_tfTitleFontSizefont size in pixels for fonts with precision type 3; Float_tfTitleHheight of title box; TStringfTitlePSUser defined Postscript file title; Style_tfTitleStylefill area style of title PaveLabel; Color_tfTitleTextColortitle text color; Float_tfTitleWwidth of title box; Float_tfTitleXX position of top left corner of title box; Float_tfTitleYY position of top left corner of title box; TAttAxisfXaxisX axis attributes; TAttAxisfYaxisY axis attributes; TAttAxisfZaxisZ axis attributes. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyle(); Default constructor. TStyle(const char* name, const char* title); Create a new TStyle.; The following names are reserved to create special styles; -Classic: the default style set in TStyle::Reset; -Plain: a black&white oriented style; -Bold:; -Video;; -Pub:; -Modern:; (see the definition of these styles below). Note a side-effect of calling gStyle->SetFillColor(0). This is nearly; equivalent of selecting the ""Plain"" style. Many graphics attributes may be set via the TStyle, see in particular; - TStyle::SetNdivisions; - TStyle::SetAxisColor; - TStyle::SetHeaderPS; - TStyle::SetTitlePS; - TStyle::SetLabelColor; - TStyle::SetLabelFont; - TStyle::SetLabelOffset; - TStyle::SetLabelSize; - TStyle::SetOptDate; - TStyle::SetLineStyleString; - TStyle::SetOptFit; - TStyle::SetOptStat; - TStyle::SetPaperSize; - TStyle::SetTickLength; - TStyle::SetTitleOffset; - TStyle::SetTitleSize; - TStyle::SetPalette; - TStyle::SetTimeOffset; - TStyl",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:22394,Modifiability,Inherit,Inherited,22394,"orstat text color; Float_tfStatWwidth of stat box; Float_tfStatXX position of top right corner of stat box; Float_tfStatYY position of top right corner of stat box; Bool_tfStripDecimalsStrip decimals in axis labels; Double_tfTimeOffsetTime offset to the beginning of an axis; Int_tfTitleAligntitle box alignment; Width_tfTitleBorderSizeborder size of Title PavelLabel; Color_tfTitleColortitle fill area color; Style_tfTitleFontfont style of Title PaveLabel; Float_tfTitleFontSizefont size in pixels for fonts with precision type 3; Float_tfTitleHheight of title box; TStringfTitlePSUser defined Postscript file title; Style_tfTitleStylefill area style of title PaveLabel; Color_tfTitleTextColortitle text color; Float_tfTitleWwidth of title box; Float_tfTitleXX position of top left corner of title box; Float_tfTitleYY position of top left corner of title box; TAttAxisfXaxisX axis attributes; TAttAxisfYaxisY axis attributes; TAttAxisfZaxisZ axis attributes. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyle(); Default constructor. TStyle(const char* name, const char* title); Create a new TStyle.; The following names are reserved to create special styles; -Classic: the default style set in TStyle::Reset; -Plain: a black&white oriented style; -Bold:; -Video;; -Pub:; -Modern:; (see the definition of these styles below). Note a side-effect of calling gStyle->SetFillColor(0). This is nearly; equivalent of selecting the ""Plain"" style. Many graphics attributes may be set via the TStyle, see in particular; - TStyle::SetNdivisions; - TStyle::SetAxisColor; - TStyle::SetHeaderPS; - TStyle::SetTitlePS; - TStyle::SetLabelColor; - TStyle::SetLabelFont; - TStyle::SetLabelOffset; - TStyle::SetLabelSize; - TStyle::SetOptDate; - TStyle::SetLineStyleString; - TStyle::SetOptFit; - TStyle::SetOptStat; - TStyle::SetPaperSize; - TStyle::SetTickLength; - TStyle::SetTitleOffset; - TStyle::SetTitleSize; - TStyle::SetPalette; - TStyle::SetTimeOffset; - TStyl",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:25561,Performance,Load,Load,25561,"st; Return the label color number in the axis. Style_t GetLabelFont(Option_t* axis = ""X"") const; Return label font. Float_t GetLabelOffset(Option_t* axis = ""X"") const; Return label offset. Float_t GetLabelSize(Option_t* axis = ""X"") const; Return label size. const char * GetLineStyleString(Int_t i = 1) const; Return line style string (used by PostScript).; See SetLineStyleString for more explanations. Int_t GetNumberOfColors() const; Return number of colors in the color palette. void GetPaperSize(Float_t& xsize, Float_t& ysize) const; Set paper size for PostScript output. Float_t GetTickLength(Option_t* axis = ""X"") const; Return tick length. Color_t GetTitleColor(Option_t* axis = ""X"") const; Return title color. Style_t GetTitleFont(Option_t* axis = ""X"") const; Return title font. Float_t GetTitleOffset(Option_t* axis = ""X"") const; Return title offset. Float_t GetTitleSize(Option_t* axis = ""X"") const; Return title size. void Paint(Option_t* option = """"); Show the options from the current style; if (TClass::GetClass(""TStyleManager"")) gSystem->Load(""libGed"");. void SetColorModelPS(Int_t c = 0); Define the color model used by TPostScript and TPDF (RGB or CMYK).; CMY and CMYK models are subtractive color models unlike RGB which is; additive. They are mainly used for printing purposes. CMY means Cyan Magenta; Yellow. To convert RGB to CMY it is enough to do: C=1-R, M=1-G and Y=1-B.; CMYK has one more component K (black). The conversion from RGB to CMYK is:. Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; Double_t Cyan = (1-Red-Black)/(1-Black);; Double_t Magenta = (1-Green-Black)/(1-Black);; Double_t Yellow = (1-Blue-Black)/(1-Black);. CMYK adds the black component which allows better quality for black; printing. PostScript and PDF support the CMYK model. c = 0 means TPostScript and TPDF will use RGB color model (default); c = 1 means TPostScript and TPDF will use CMYK color model. void SetHistMinimumZero(Bool_t zero = kTRUE); If the argument zero=kTRUE the m",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:28979,Performance,scalab,scalable,28979,"er of the page (outside the user area); ""gsave 100 -100 t 0 r 0 0 m /Helvetica-Bold findfont 56 sf 0 0 m ( my annotation ) show gr""; This information is used in TPostScript::Initialize. void SetIsReading(Bool_t reading = kTRUE); Sets the fIsReading member to reading (default=kTRUE); fIsReading (used via gStyle->IsReading()) can be used in; the functions myclass::UseCurrentStyle to read from the current style; or write to the current style. void SetTitlePS(const char* pstitle); Define a string to be used in the %%Title of the Postscript files.; If this string is not defined, ROOT will use the canvas title. void SetLabelColor(Color_t color = 1, Option_t* axis = ""X""); Set axis labels color.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetLabelFont(Style_t font = 62, Option_t* axis = ""X""); Set font number used to draw axis labels.; font : Text font code = 10*fontnumber + precision; Font numbers must be between 1 and 14; precision = 1 fast hardware fonts (steps in the size); precision = 2 scalable and rotatable hardware fonts; The default font number is 62.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetLabelOffset(Float_t offset = 0.005, Option_t* axis = ""X""); Set offset between axis and axis labels.; The offset is expressed as a percent of the pad height.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetLabelSize(Float_t size = 0.04, Option_t* axis = ""X""); Set size of axis labels. The size is expressed as a percent of the pad height.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetLineStyleString(Int_t i, const char* text); Set line style string using the PostScript convention.; A line is a suite of segments, each segment is described by the number of; pixels. The initial and alternating elements (second, fourth, and so on); are the dashes, and the others spaces between dashes. Defaul",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:457,Security,access,accessed,457,". TStyle. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TStyle. class TStyle: public TNamed, public TAttLine, public TAttFill, public TAttMarker, public TAttText. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. Function Members (Methods); public:. TStyle(); TStyle(const TStyle& style); TStyle(const char* name, const char* title); virtual~TStyle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAxisChoice(Option_t* axis) const; virtual voidBrowse(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:7134,Security,Hash,Hash,7134,"xtColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; Float_tGetTickLength(Option_t* axis = ""X"") const; Double_tGetTimeOffset() const; virtual const char*TNamed::GetTitle() const; Int_tGetTitleAlign(); Width_tGetTitleBorderSize() const; Color_tGetTitleColor(Option_t* axis = ""X"") const; Color_tGetTitleFillColor() const; Style_tGetTitleFont(Option_t* axis = ""X"") const; Float_tGetTitleFontSize() const; Float_tGetTitleH() const; Float_tGetTitleOffset(Option_t* axis = ""X"") const; const char*GetTitlePS() const; Float_tGetTitleSize(Option_t* axis = ""X"") const; Style_tGetTitleStyle() const; Color_tGetTitleTextColor() const; Float_tGetTitleW() const; Float_tGetTitleX() const; Float_tGetTitleXOffset() const; Float_tGetTitleXSize() const; Float_tGetTitleY() const; Float_tGetTitleYOffset() const; Float_tGetTitleYSize() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReading() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator de",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:13033,Testability,log,logx,13033,"tLabelColor(Color_t color = 1, Option_t* axis = ""X""); voidSetLabelFont(Style_t font = 62, Option_t* axis = ""X""); voidSetLabelOffset(Float_t offset = 0.005, Option_t* axis = ""X""); voidSetLabelSize(Float_t size = 0.04, Option_t* axis = ""X""); voidSetLegendBorderSize(Width_t size = 4); voidSetLegendFillColor(Color_t color = 0); voidSetLegendFont(Style_t font = 62); voidSetLegoInnerR(Float_t rad = 0.5); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); voidSetLineScalePS(Float_t scale = 3); virtual voidTAttLine::SetLineStyle(Style_t lstyle); voidSetLineStyleString(Int_t i, const char* text); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); voidSetNumberContours(Int_t number = 20); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptDate(Int_t datefl = 1); voidSetOptFile(Int_t file = 1); voidSetOptFit(Int_t fit = 1); voidSetOptLogx(Int_t logx = 1); voidSetOptLogy(Int_t logy = 1); voidSetOptLogz(Int_t logz = 1); voidSetOptStat(Int_t stat = 1); voidSetOptStat(Option_t* stat); voidSetOptTitle(Int_t tit = 1); voidSetPadBorderMode(Int_t mode = 1); voidSetPadBorderSize(Width_t size = 1); voidSetPadBottomMargin(Float_t margin = 0.1); voidSetPadColor(Color_t color = 19); voidSetPadGridX(Bool_t gridx); voidSetPadGridY(Bool_t gridy); voidSetPadLeftMargin(Float_t margin = 0.1); voidSetPadRightMargin(Float_t margin = 0.1); voidSetPadTickX(Int_t tickx); voidSetPadTickY(Int_t ticky); voidSetPadTopMargin(Float_t margin = 0.1); voidSetPaintTextFormat(const char* format = ""g""); voidSetPalette(Int_t ncolors = 0, Int_t* colors = 0);",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:13065,Testability,log,logy,13065,"tLabelColor(Color_t color = 1, Option_t* axis = ""X""); voidSetLabelFont(Style_t font = 62, Option_t* axis = ""X""); voidSetLabelOffset(Float_t offset = 0.005, Option_t* axis = ""X""); voidSetLabelSize(Float_t size = 0.04, Option_t* axis = ""X""); voidSetLegendBorderSize(Width_t size = 4); voidSetLegendFillColor(Color_t color = 0); voidSetLegendFont(Style_t font = 62); voidSetLegoInnerR(Float_t rad = 0.5); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); voidSetLineScalePS(Float_t scale = 3); virtual voidTAttLine::SetLineStyle(Style_t lstyle); voidSetLineStyleString(Int_t i, const char* text); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); voidSetNumberContours(Int_t number = 20); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptDate(Int_t datefl = 1); voidSetOptFile(Int_t file = 1); voidSetOptFit(Int_t fit = 1); voidSetOptLogx(Int_t logx = 1); voidSetOptLogy(Int_t logy = 1); voidSetOptLogz(Int_t logz = 1); voidSetOptStat(Int_t stat = 1); voidSetOptStat(Option_t* stat); voidSetOptTitle(Int_t tit = 1); voidSetPadBorderMode(Int_t mode = 1); voidSetPadBorderSize(Width_t size = 1); voidSetPadBottomMargin(Float_t margin = 0.1); voidSetPadColor(Color_t color = 19); voidSetPadGridX(Bool_t gridx); voidSetPadGridY(Bool_t gridy); voidSetPadLeftMargin(Float_t margin = 0.1); voidSetPadRightMargin(Float_t margin = 0.1); voidSetPadTickX(Int_t tickx); voidSetPadTickY(Int_t ticky); voidSetPadTopMargin(Float_t margin = 0.1); voidSetPaintTextFormat(const char* format = ""g""); voidSetPalette(Int_t ncolors = 0, Int_t* colors = 0);",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:13097,Testability,log,logz,13097,"tLabelColor(Color_t color = 1, Option_t* axis = ""X""); voidSetLabelFont(Style_t font = 62, Option_t* axis = ""X""); voidSetLabelOffset(Float_t offset = 0.005, Option_t* axis = ""X""); voidSetLabelSize(Float_t size = 0.04, Option_t* axis = ""X""); voidSetLegendBorderSize(Width_t size = 4); voidSetLegendFillColor(Color_t color = 0); voidSetLegendFont(Style_t font = 62); voidSetLegoInnerR(Float_t rad = 0.5); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); voidSetLineScalePS(Float_t scale = 3); virtual voidTAttLine::SetLineStyle(Style_t lstyle); voidSetLineStyleString(Int_t i, const char* text); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); voidSetNumberContours(Int_t number = 20); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptDate(Int_t datefl = 1); voidSetOptFile(Int_t file = 1); voidSetOptFit(Int_t fit = 1); voidSetOptLogx(Int_t logx = 1); voidSetOptLogy(Int_t logy = 1); voidSetOptLogz(Int_t logz = 1); voidSetOptStat(Int_t stat = 1); voidSetOptStat(Option_t* stat); voidSetOptTitle(Int_t tit = 1); voidSetPadBorderMode(Int_t mode = 1); voidSetPadBorderSize(Width_t size = 1); voidSetPadBottomMargin(Float_t margin = 0.1); voidSetPadColor(Color_t color = 19); voidSetPadGridX(Bool_t gridx); voidSetPadGridY(Bool_t gridy); voidSetPadLeftMargin(Float_t margin = 0.1); voidSetPadRightMargin(Float_t margin = 0.1); voidSetPadTickX(Int_t tickx); voidSetPadTickY(Int_t ticky); voidSetPadTopMargin(Float_t margin = 0.1); voidSetPaintTextFormat(const char* format = ""g""); voidSetPalette(Int_t ncolors = 0, Int_t* colors = 0);",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:15951,Testability,Test,TestBit,15951,"_t color = 1); voidSetTitleFont(Style_t font = 62, Option_t* axis = ""X""); voidSetTitleFontSize(Float_t size = 0); voidSetTitleH(Float_t h = 0); voidSetTitleOffset(Float_t offset = 1, Option_t* axis = ""X""); voidSetTitlePS(const char* pstitle); voidSetTitleSize(Float_t size = 0.02, Option_t* axis = ""X""); voidSetTitleStyle(Style_t style = 1001); voidSetTitleTextColor(Color_t color = 1); voidSetTitleW(Float_t w = 0); voidSetTitleX(Float_t x = 0); voidSetTitleXOffset(Float_t offset = 1); voidSetTitleXSize(Float_t size = 0.02); voidSetTitleY(Float_t y = 0.985); voidSetTitleYOffset(Float_t offset = 1); voidSetTitleYSize(Float_t size = 0.02); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidToggleEditor(); voidToggleEventStatus(); voidToggleToolBar(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EPaperSize { kA4; kUSLetter; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tT",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:15990,Testability,Test,TestBits,15990,"_t color = 1); voidSetTitleFont(Style_t font = 62, Option_t* axis = ""X""); voidSetTitleFontSize(Float_t size = 0); voidSetTitleH(Float_t h = 0); voidSetTitleOffset(Float_t offset = 1, Option_t* axis = ""X""); voidSetTitlePS(const char* pstitle); voidSetTitleSize(Float_t size = 0.02, Option_t* axis = ""X""); voidSetTitleStyle(Style_t style = 1001); voidSetTitleTextColor(Color_t color = 1); voidSetTitleW(Float_t w = 0); voidSetTitleX(Float_t x = 0); voidSetTitleXOffset(Float_t offset = 1); voidSetTitleXSize(Float_t size = 0.02); voidSetTitleY(Float_t y = 0.985); voidSetTitleYOffset(Float_t offset = 1); voidSetTitleYSize(Float_t size = 0.02); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidToggleEditor(); voidToggleEventStatus(); voidToggleToolBar(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EPaperSize { kA4; kUSLetter; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tT",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:20079,Testability,log,log,20079,"der; Color_tfHistFillColorhistogram fill color; Style_tfHistFillStylehistogram fill style; Color_tfHistLineColorhistogram line color; Style_tfHistLineStylehistogram line style; Width_tfHistLineWidthhistogram line width; Bool_tfHistMinimumZerotrue if default minimum is 0, false if minimum is automatic; Double_tfHistTopMarginmargin between histogram's top and pad's top; Bool_tfIsReading!Set to FALSE when userclass::UseCurrentStyle is called by the style manager; Width_tfLegendBorderSizelegend box border size; Color_tfLegendFillColorlegend fill color; Style_tfLegendFontlegend font style; Float_tfLegoInnerRInner radius for cylindrical legos; Float_tfLineScalePSLine scale factor when drawing lines on Postscript; TStringfLineStyle[30]String describing line style i (for postScript); Int_tfNumberContoursdefault number of contours for 2-d plots; Int_tfOptDate=1 if date option is selected; Int_tfOptFile=1 if option File is selected; Int_tfOptFit=1 if option Fit is selected; Int_tfOptLogx=1 if log scale in X; Int_tfOptLogy=1 if log scale in y; Int_tfOptLogz=1 if log scale in z; Int_tfOptStat=1 if option Stat is selected; Int_tfOptTitle=1 if option Title is selected; Int_tfPadBorderModepad border mode; Width_tfPadBorderSizepad border size; Float_tfPadBottomMarginpad bottom margin; Color_tfPadColorpad color; Bool_tfPadGridXtrue to get the grid along X; Bool_tfPadGridYtrue to get the grid along Y; Float_tfPadLeftMarginpad left margin; Float_tfPadRightMarginpad right margin; Int_tfPadTickX=1 to set special pad ticks along X; Int_tfPadTickY=1 to set special pad ticks along Y; Float_tfPadTopMarginpad top margin; TStringfPaintTextFormatPrinting format for TH2::PaintText; Float_tfPaperSizeXPostScript paper size along X; Float_tfPaperSizeYPostScript paper size along Y; Float_tfScreenFactorMultiplication factor for canvas size and position; Int_tfShowEditorShow pad editor; Int_tfShowEventStatusShow event status panel; Int_tfShowToolBarShow toolbar; Width_tfStatBorderSizeborder size of S",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:20114,Testability,log,log,20114," fill color; Style_tfHistFillStylehistogram fill style; Color_tfHistLineColorhistogram line color; Style_tfHistLineStylehistogram line style; Width_tfHistLineWidthhistogram line width; Bool_tfHistMinimumZerotrue if default minimum is 0, false if minimum is automatic; Double_tfHistTopMarginmargin between histogram's top and pad's top; Bool_tfIsReading!Set to FALSE when userclass::UseCurrentStyle is called by the style manager; Width_tfLegendBorderSizelegend box border size; Color_tfLegendFillColorlegend fill color; Style_tfLegendFontlegend font style; Float_tfLegoInnerRInner radius for cylindrical legos; Float_tfLineScalePSLine scale factor when drawing lines on Postscript; TStringfLineStyle[30]String describing line style i (for postScript); Int_tfNumberContoursdefault number of contours for 2-d plots; Int_tfOptDate=1 if date option is selected; Int_tfOptFile=1 if option File is selected; Int_tfOptFit=1 if option Fit is selected; Int_tfOptLogx=1 if log scale in X; Int_tfOptLogy=1 if log scale in y; Int_tfOptLogz=1 if log scale in z; Int_tfOptStat=1 if option Stat is selected; Int_tfOptTitle=1 if option Title is selected; Int_tfPadBorderModepad border mode; Width_tfPadBorderSizepad border size; Float_tfPadBottomMarginpad bottom margin; Color_tfPadColorpad color; Bool_tfPadGridXtrue to get the grid along X; Bool_tfPadGridYtrue to get the grid along Y; Float_tfPadLeftMarginpad left margin; Float_tfPadRightMarginpad right margin; Int_tfPadTickX=1 to set special pad ticks along X; Int_tfPadTickY=1 to set special pad ticks along Y; Float_tfPadTopMarginpad top margin; TStringfPaintTextFormatPrinting format for TH2::PaintText; Float_tfPaperSizeXPostScript paper size along X; Float_tfPaperSizeYPostScript paper size along Y; Float_tfScreenFactorMultiplication factor for canvas size and position; Int_tfShowEditorShow pad editor; Int_tfShowEventStatusShow event status panel; Int_tfShowToolBarShow toolbar; Width_tfStatBorderSizeborder size of Stats PaveLabel; Color_tfStatColorst",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:20149,Testability,log,log,20149,"istogram fill style; Color_tfHistLineColorhistogram line color; Style_tfHistLineStylehistogram line style; Width_tfHistLineWidthhistogram line width; Bool_tfHistMinimumZerotrue if default minimum is 0, false if minimum is automatic; Double_tfHistTopMarginmargin between histogram's top and pad's top; Bool_tfIsReading!Set to FALSE when userclass::UseCurrentStyle is called by the style manager; Width_tfLegendBorderSizelegend box border size; Color_tfLegendFillColorlegend fill color; Style_tfLegendFontlegend font style; Float_tfLegoInnerRInner radius for cylindrical legos; Float_tfLineScalePSLine scale factor when drawing lines on Postscript; TStringfLineStyle[30]String describing line style i (for postScript); Int_tfNumberContoursdefault number of contours for 2-d plots; Int_tfOptDate=1 if date option is selected; Int_tfOptFile=1 if option File is selected; Int_tfOptFit=1 if option Fit is selected; Int_tfOptLogx=1 if log scale in X; Int_tfOptLogy=1 if log scale in y; Int_tfOptLogz=1 if log scale in z; Int_tfOptStat=1 if option Stat is selected; Int_tfOptTitle=1 if option Title is selected; Int_tfPadBorderModepad border mode; Width_tfPadBorderSizepad border size; Float_tfPadBottomMarginpad bottom margin; Color_tfPadColorpad color; Bool_tfPadGridXtrue to get the grid along X; Bool_tfPadGridYtrue to get the grid along Y; Float_tfPadLeftMarginpad left margin; Float_tfPadRightMarginpad right margin; Int_tfPadTickX=1 to set special pad ticks along X; Int_tfPadTickY=1 to set special pad ticks along Y; Float_tfPadTopMarginpad top margin; TStringfPaintTextFormatPrinting format for TH2::PaintText; Float_tfPaperSizeXPostScript paper size along X; Float_tfPaperSizeYPostScript paper size along Y; Float_tfScreenFactorMultiplication factor for canvas size and position; Int_tfShowEditorShow pad editor; Int_tfShowEventStatusShow event status panel; Int_tfShowToolBarShow toolbar; Width_tfStatBorderSizeborder size of Stats PaveLabel; Color_tfStatColorstat fill area color; Style_tfStatFon",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:43920,Testability,log,logx,43920,"leYOffset() const; {return GetTitleOffset(""Y"");}. Float_t GetTitleYSize() const; {return GetTitleSize(""Y"");}. Float_t GetTitleX() const; {return fTitleX;}. Float_t GetTitleY() const; {return fTitleY;}. Float_t GetTitleW() const; {return fTitleW;}. Float_t GetTitleH() const; {return fTitleH;}. const char * GetHeaderPS() const; {return fHeaderPS.Data();}. const char * GetTitlePS() const; {return fTitlePS.Data();}. Float_t GetLineScalePS() const; {return fLineScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. vo",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:43943,Testability,log,logx,43943,"leYOffset() const; {return GetTitleOffset(""Y"");}. Float_t GetTitleYSize() const; {return GetTitleSize(""Y"");}. Float_t GetTitleX() const; {return fTitleX;}. Float_t GetTitleY() const; {return fTitleY;}. Float_t GetTitleW() const; {return fTitleW;}. Float_t GetTitleH() const; {return fTitleH;}. const char * GetHeaderPS() const; {return fHeaderPS.Data();}. const char * GetTitlePS() const; {return fTitlePS.Data();}. Float_t GetLineScalePS() const; {return fLineScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. vo",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:43973,Testability,log,logy,43973,"at_t GetTitleYSize() const; {return GetTitleSize(""Y"");}. Float_t GetTitleX() const; {return fTitleX;}. Float_t GetTitleY() const; {return fTitleY;}. Float_t GetTitleW() const; {return fTitleW;}. Float_t GetTitleH() const; {return fTitleH;}. const char * GetHeaderPS() const; {return fHeaderPS.Data();}. const char * GetTitlePS() const; {return fTitlePS.Data();}. Float_t GetLineScalePS() const; {return fLineScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. void SetCanvasDefY(Int_t topy = 10); {fCanvasDefY = top",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:43996,Testability,log,logy,43996,"at_t GetTitleYSize() const; {return GetTitleSize(""Y"");}. Float_t GetTitleX() const; {return fTitleX;}. Float_t GetTitleY() const; {return fTitleY;}. Float_t GetTitleW() const; {return fTitleW;}. Float_t GetTitleH() const; {return fTitleH;}. const char * GetHeaderPS() const; {return fHeaderPS.Data();}. const char * GetTitlePS() const; {return fTitlePS.Data();}. Float_t GetLineScalePS() const; {return fLineScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. void SetCanvasDefY(Int_t topy = 10); {fCanvasDefY = top",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:44026,Testability,log,logz,44026,";}. Float_t GetTitleX() const; {return fTitleX;}. Float_t GetTitleY() const; {return fTitleY;}. Float_t GetTitleW() const; {return fTitleW;}. Float_t GetTitleH() const; {return fTitleH;}. const char * GetHeaderPS() const; {return fHeaderPS.Data();}. const char * GetTitlePS() const; {return fTitlePS.Data();}. Float_t GetLineScalePS() const; {return fLineScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. void SetCanvasDefY(Int_t topy = 10); {fCanvasDefY = topy;}. void SetLegendBorderSize(Width_t size = 4); {fLe",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:44049,Testability,log,logz,44049,";}. Float_t GetTitleX() const; {return fTitleX;}. Float_t GetTitleY() const; {return fTitleY;}. Float_t GetTitleW() const; {return fTitleW;}. Float_t GetTitleH() const; {return fTitleH;}. const char * GetHeaderPS() const; {return fHeaderPS.Data();}. const char * GetTitlePS() const; {return fTitlePS.Data();}. Float_t GetLineScalePS() const; {return fLineScalePS;}. Bool_t IsReading() const; {return fIsReading;}. void SetFitFormat(const char* format = ""5.4g""); {fFitFormat = format;}. void SetHatchesLineWidth(Int_t l); {fHatchesLineWidth = l;}. void SetHatchesSpacing(Double_t h); {fHatchesSpacing = TMath::Max(0.1,h);}. void SetLineScalePS(Float_t scale = 3); {fLineScalePS=scale;}. void SetLegoInnerR(Float_t rad = 0.5); {fLegoInnerR = rad;}. void SetScreenFactor(Float_t factor = 1); {fScreenFactor = factor;}. void SetOptFile(Int_t file = 1); {fOptFile = file;}. void SetOptLogx(Int_t logx = 1); {fOptLogx = logx;}. void SetOptLogy(Int_t logy = 1); {fOptLogy = logy;}. void SetOptLogz(Int_t logz = 1); {fOptLogz = logz;}. void SetOptTitle(Int_t tit = 1); {fOptTitle = tit;}. void SetBarOffset(Float_t baroff = 0.5); {fBarOffset = baroff;}. void SetBarWidth(Float_t barwidth = 0.5); {fBarWidth = barwidth;}. void SetDateX(Float_t x = 0.01); {fDateX = x;}. void SetDateY(Float_t y = 0.01); {fDateY = y;}. void SetErrorX(Float_t errorx = 0.5); {fErrorX = errorx;}. void SetCanvasPreferGL(Bool_t prefer = kTRUE); {fCanvasPreferGL=prefer;}. void SetDrawBorder(Int_t drawborder = 1); {fDrawBorder = drawborder;}. void SetCanvasColor(Color_t color = 19); {fCanvasColor = color;}. void SetCanvasBorderSize(Width_t size = 1); {fCanvasBorderSize = size;}. void SetCanvasBorderMode(Int_t mode = 1); {fCanvasBorderMode = mode;}. void SetCanvasDefH(Int_t h = 500); {fCanvasDefH = h;}. void SetCanvasDefW(Int_t w = 700); {fCanvasDefW = w;}. void SetCanvasDefX(Int_t topx = 10); {fCanvasDefX = topx;}. void SetCanvasDefY(Int_t topy = 10); {fCanvasDefY = topy;}. void SetLegendBorderSize(Width_t size = 4); {fLe",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyle.html:1150,Usability,Clear,Clear,1150," TStyle(); TStyle(const TStyle& style); TStyle(const char* name, const char* title); virtual~TStyle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAxisChoice(Option_t* axis) const; virtual voidBrowse(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error",MatchSource.WIKI,root/html532/TStyle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyle.html
https://root.cern/root/html532/TStyleDialog.html:4497,Availability,Error,Error,4497,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:4626,Availability,error,error,4626,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:4710,Availability,error,error,4710,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:18985,Availability,mask,mask,18985,,MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:11323,Integrability,Message,Message,11323,"Frame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:23383,Integrability,message,message,23383,"GFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TVirtualPad*fCurPadcurrent pad from which to import; TStyle*fCurStylestyle to copy or to rename; Int_tfMode1=new, 2=rename, 3=import; TGTextEntry*fNameTStyle name text entry; TGLabel*fNameLabelname label; TGTextButton*fOKsave button; TStyleManager*fStyleManagerparent style manager; TGTextEntry*fTitleTStyle title text entry; TGLabel*fTitleLabeltitle label; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGLabel*fWarnLabellabel for warnings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleDialog(TStyleManager* sm, TStyle* cur, Int_t mode, TVirtualPad* currentPad = 0); Constructor. Create the dialog window and draw it centered over the; main window 'mf'. A pointer to the style to copy or rename is given; by 'cur' and the parameter 'mode' specify the mode:; 1 = copy | 2 = rename | 3 = import from canvas. ~TStyleDialog(); Destructor. void DoCancel(); Slot called when the Cancel button is clicked. Close the window; without saving submitted changes. void DoCloseWindow(); Slot called when the window is closed via the window manager.; Close the window without saving submitted changes. void DoOK(); Slot called when the OK button is clicked. Rename or create the style; before closing the window. void DoUpdate(); Slot called every time the name is changed. Provide some protection; to avoid letting the user use an empty name or an already used one.; A warning message can be shown and the OK button disabled. » Author: Denis Favre-Miville 08/09/05 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TStyleDialog.h,v 1.0 2005/09/08 » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:9868,Modifiability,Inherit,InheritsFrom,9868,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:9934,Modifiability,Inherit,InheritsFrom,9934,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:22423,Modifiability,Inherit,Inheritance,22423,"nd; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TVirtualPad*fCurPadcurrent pad from which to import; TStyle*fCurStylestyle to copy or to rename; Int_tfMode1=new, 2=rename, 3=import; TGTextEntry*fNameTStyle name text entry; TGLabel*fNameLabelname label; TGTextButton*fOKsave button; TStyleManager*fStyleManagerparent style manager; TGTextEntry*fTitleTStyle title text entry; TGLabel*fTitleLabeltitle label; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGLabel*fWarnLabellabel for warnings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleDialog(TStyleManager* sm, TStyle* cur, Int_t mode, TVirtualPad* currentPad = 0); Constructor. Create the dialog window and draw it centered over the; main window 'mf'. A pointer to the style to copy or rename is given; by 'cur' and the parameter 'mode' specify the mode:; 1 = copy | 2 = rename | 3 = import from canvas. ~TStyleDialog(); Destructor. void DoCancel(); Slot called when the Cancel button is clicked. Close the window; without saving submitted changes. void DoCloseWindow(); Slot called when the window is closed via the window manager.; Close the window without saving submitted changes. void DoOK(); Slot called when the OK button is clicked. Rename or create the style; before closing the window. void DoUpdate(); Slot called every time the name is changed. Provide some protection; to avoid letting the user use an empty name or an already used one.; A warning message can be shown and the OK button disabled. » Author: Denis F",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:22436,Modifiability,Inherit,Inherited,22436,"nd; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TVirtualPad*fCurPadcurrent pad from which to import; TStyle*fCurStylestyle to copy or to rename; Int_tfMode1=new, 2=rename, 3=import; TGTextEntry*fNameTStyle name text entry; TGLabel*fNameLabelname label; TGTextButton*fOKsave button; TStyleManager*fStyleManagerparent style manager; TGTextEntry*fTitleTStyle title text entry; TGLabel*fTitleLabeltitle label; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGLabel*fWarnLabellabel for warnings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleDialog(TStyleManager* sm, TStyle* cur, Int_t mode, TVirtualPad* currentPad = 0); Constructor. Create the dialog window and draw it centered over the; main window 'mf'. A pointer to the style to copy or rename is given; by 'cur' and the parameter 'mode' specify the mode:; 1 = copy | 2 = rename | 3 = import from canvas. ~TStyleDialog(); Destructor. void DoCancel(); Slot called when the Cancel button is clicked. Close the window; without saving submitted changes. void DoCloseWindow(); Slot called when the window is closed via the window manager.; Close the window without saving submitted changes. void DoOK(); Slot called when the OK button is clicked. Rename or create the style; before closing the window. void DoUpdate(); Slot called every time the name is changed. Provide some protection; to avoid letting the user use an empty name or an already used one.; A warning message can be shown and the OK button disabled. » Author: Denis F",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:22308,Safety,avoid,avoid,22308,"me::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TVirtualPad*fCurPadcurrent pad from which to import; TStyle*fCurStylestyle to copy or to rename; Int_tfMode1=new, 2=rename, 3=import; TGTextEntry*fNameTStyle name text entry; TGLabel*fNameLabelname label; TGTextButton*fOKsave button; TStyleManager*fStyleManagerparent style manager; TGTextEntry*fTitleTStyle title text entry; TGLabel*fTitleLabeltitle label; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGLabel*fWarnLabellabel for warnings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleDialog(TStyleManager* sm, TStyle* cur, Int_t mode, TVirtualPad* currentPad = 0); Constructor. Create the dialog window and draw it centered over the; main window 'mf'. A pointer to the style to copy or rename is given; by 'cur' and the parameter 'mode' specify the mode:; 1 = copy | 2 = rename | 3 = import from canvas. ~TStyleDialog(); Destructor. void DoCancel(); Slot called when the Cancel button is clicked. Close the window; without saving submitted changes. void DoCloseWindow(); Slot called when the window is closed via the window manager.; Close the window without saving submitted changes. void DoOK(); Slot called when the OK butto",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:22352,Safety,avoid,avoid,22352,"me::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TVirtualPad*fCurPadcurrent pad from which to import; TStyle*fCurStylestyle to copy or to rename; Int_tfMode1=new, 2=rename, 3=import; TGTextEntry*fNameTStyle name text entry; TGLabel*fNameLabelname label; TGTextButton*fOKsave button; TStyleManager*fStyleManagerparent style manager; TGTextEntry*fTitleTStyle title text entry; TGLabel*fTitleLabeltitle label; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGLabel*fWarnLabellabel for warnings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleDialog(TStyleManager* sm, TStyle* cur, Int_t mode, TVirtualPad* currentPad = 0); Constructor. Create the dialog window and draw it centered over the; main window 'mf'. A pointer to the style to copy or rename is given; by 'cur' and the parameter 'mode' specify the mode:; 1 = copy | 2 = rename | 3 = import from canvas. ~TStyleDialog(); Destructor. void DoCancel(); Slot called when the Cancel button is clicked. Close the window; without saving submitted changes. void DoCloseWindow(); Slot called when the window is closed via the window manager.; Close the window without saving submitted changes. void DoOK(); Slot called when the OK butto",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:23307,Safety,avoid,avoid,23307,"GFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TVirtualPad*fCurPadcurrent pad from which to import; TStyle*fCurStylestyle to copy or to rename; Int_tfMode1=new, 2=rename, 3=import; TGTextEntry*fNameTStyle name text entry; TGLabel*fNameLabelname label; TGTextButton*fOKsave button; TStyleManager*fStyleManagerparent style manager; TGTextEntry*fTitleTStyle title text entry; TGLabel*fTitleLabeltitle label; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGLabel*fWarnLabellabel for warnings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleDialog(TStyleManager* sm, TStyle* cur, Int_t mode, TVirtualPad* currentPad = 0); Constructor. Create the dialog window and draw it centered over the; main window 'mf'. A pointer to the style to copy or rename is given; by 'cur' and the parameter 'mode' specify the mode:; 1 = copy | 2 = rename | 3 = import from canvas. ~TStyleDialog(); Destructor. void DoCancel(); Slot called when the Cancel button is clicked. Close the window; without saving submitted changes. void DoCloseWindow(); Slot called when the window is closed via the window manager.; Close the window without saving submitted changes. void DoOK(); Slot called when the OK button is clicked. Rename or create the style; before closing the window. void DoUpdate(); Slot called every time the name is changed. Provide some protection; to avoid letting the user use an empty name or an already used one.; A warning message can be shown and the OK button disabled. » Author: Denis Favre-Miville 08/09/05 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TStyleDialog.h,v 1.0 2005/09/08 » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:9578,Security,Hash,Hash,9578,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:16146,Testability,Test,TestBit,16146,"GMainFrame::SetIconName(const char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:16185,Testability,Test,TestBits,16185,"GMainFrame::SetIconName(const char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleDialog.html:1678,Usability,Clear,Clear,1678,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root/html532/TStyleDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleDialog.html
https://root.cern/root/html532/TStyleManager.html:817,Availability,Avail,Available,817,". TStyleManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TStyleManager. class TStyleManager: public TGMainFrame. TStyleManager. This class provides a Graphical User Interface to manage styles; in ROOT. It allows the user to edit styles, import / export; them to macros, apply a style on the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A c",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:856,Availability,avail,available,856,". TStyleManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TStyleManager. class TStyleManager: public TGMainFrame. TStyleManager. This class provides a Graphical User Interface to manage styles; in ROOT. It allows the user to edit styles, import / export; them to macros, apply a style on the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A c",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:1381,Availability,avail,available,1381,"nterface to manage styles; in ROOT. It allows the user to edit styles, import / export; them to macros, apply a style on the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A clone of the selected style will be used as a base of the new; style. All its values can be modified via the style editor later.; The dialog that appears will ask for the name and description of the; new style. Import a style (from a macro):; A style macro can be imported at any time. The new imported style in; the ROOT session will become the selected o",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:3273,Availability,avail,available,3273,"ed at any time. The new imported style in; the ROOT session will become the selected one. Import a style (from a canvas):; You can do that selecting the Style menu/Import from.../Canvas or; the corresponding Tool bar button. A new style will be created in the; ROOT session and will become the selected one. This style is a clone; of the gStyle with modified values as they are set in the currently; selected canvas. You can import a style from any canvas and apply it; later on some objects. Export a style (in a C++ macro file):; To store a style longer than for the current ROOT session you can; save it in a C++ macro file. This can be done via the menu or the; tool bar button. There is a naming convention for the style macros:; the name must be 'Style_*.C', where * can be replaced by anything; you want. Delete a style:; The selected style can be deleted from the list when you use the; Style menu/Delete or the corresponding tool bar button. The selected; style is removed from the list of all available styles for the; current ROOT session. WARRNING: it will be lost if you didn't saved; it in a C++ macro file before its deletion. Also, you cannot delete; the selected style if it is set to gStyle. A message 'Can not delete; gStyle' will be displayed on the CINT prompt. /*. */. Editor's buttons:; Open / close the style editor:; The button 'Edit >>' opens the style editor and its label changes to; 'Close <<'. For all details of what can be changed and how please see; the provided Help. Reset a style (to a previously saved state):; When the editor is opened, the 'Reset' button allows you to reset; the values of the selected style for editing. Doing that you cancel; all changes made since the last time you saved that style in a macro.; If the selected style is one of the five ROOT styles (Plain, Bold,; Video, Pub or Default), it will be recreated. Update the preview:; The button 'Update Preview' is available when a preview is shown and; the run time option is not selected. Thi",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:4191,Availability,avail,available,4191,"g tool bar button. The selected; style is removed from the list of all available styles for the; current ROOT session. WARRNING: it will be lost if you didn't saved; it in a C++ macro file before its deletion. Also, you cannot delete; the selected style if it is set to gStyle. A message 'Can not delete; gStyle' will be displayed on the CINT prompt. /*. */. Editor's buttons:; Open / close the style editor:; The button 'Edit >>' opens the style editor and its label changes to; 'Close <<'. For all details of what can be changed and how please see; the provided Help. Reset a style (to a previously saved state):; When the editor is opened, the 'Reset' button allows you to reset; the values of the selected style for editing. Doing that you cancel; all changes made since the last time you saved that style in a macro.; If the selected style is one of the five ROOT styles (Plain, Bold,; Video, Pub or Default), it will be recreated. Update the preview:; The button 'Update Preview' is available when a preview is shown and; the run time option is not selected. This button allows you to; refresh the preview any time you want to see how the style you edit; looks like. Help button:; Provides a help of the currently selected tab. Function Members (Methods); public:. TStyleManager(const TGWindow*); virtual~TStyleManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildList(TStyle* style = 0); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voi",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:8670,Availability,Error,Error,8670,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:8799,Availability,error,error,8799,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:8883,Availability,error,error,8883,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:31279,Availability,mask,mask,31279,,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:36514,Availability,error,error,36514,n; TGFileInfo*fCurMacrocurrent macro; TObject*fCurObjcurrent object; TGLabel*fCurObjLabellabel 'Object:'; TGTextEntry*fCurObjTextEntrylabel showing current object's name; TVirtualPad*fCurPadcurrent pad; TGLabel*fCurPadLabellabel 'Canvas:'; TGTextEntry*fCurPadTextEntrylabel showing current pad's name; TStyle*fCurSelStylecurrent selected style; TGLabel*fCurStylabellabel 'gStyle is set to:'; TGTextEntry*fCurStylelabel showing gStyle's name; Int_tfCurTabAxisNumcurrent opened axis tab number; Int_tfCurTabNumcurrent opened tab number; TGNumberEntry*fDateXcanvas date abscissa number entry; TGNumberEntry*fDateYcanvas date ordinate number entry; TGCheckButton*fDrawBorderfunction border show/hide check box; TGHorizontalFrame*fEditionButtonFrameeditor's buttons; TGVerticalFrame*fEditionFrameeditor; TGTextButton*fEditionHelphelp button; TGTextButton*fEditionResetreset button; TGTab*fEditionTabeditor's tabs; TGTextButton*fEditionUpdatePreviewupdate preview button; TGNumberEntry*fEndErrorSizeend error size number entry; TGNumberEntry*fErrorXerror along abscissa number entry; TGColorSelect*fFillColorgeneral fill color selection widget; TGedPatternSelect*fFillStylegeneral fill pattern selection widget; TGTextEntry*fFitFormatfit format text entry; TGLabel*fFitFormatLabellabel 'fit format'; TGButtonGroup*fFrameBorderModeframe border mode button group; TGLineWidthComboBox*fFrameBorderSizeframe border size combo box; TGColorSelect*fFrameFillColorframe fill color selection widget; TGedPatternSelect*fFrameFillStyleframe fill pattern selection widget; TGColorSelect*fFrameLineColorframe line color selection widget; TGLineStyleComboBox*fFrameLineStyleframe line style combo box; TGLineWidthComboBox*fFrameLineWidthframe line width combo box; TGColorSelect*fFuncColorfunction color selection widget; TGLineStyleComboBox*fFuncStylefunction line style combo box; TGLineWidthComboBox*fFuncWidthfunction width number entry; TGColorSelect*fGridColorpad grid line color selection widget; TGLineStyleCombo,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:39213,Availability,avail,available,39213,Tab*fHistosTabhistos' tabs; TGHorizontal3DLine*fHorizontal3DLinea line under the tool bar; TGPopupMenu*fImportCascadeCascaded menu 'Import'; Bool_tfLastChoice=kTRUE if the user choose OK in the last TStyleDialog; TGLayoutHints*fLayoutExpandXoften used layout; TGLayoutHints*fLayoutExpandXCenterYMarginoften used layout; TGLayoutHints*fLayoutExpandXMarginoften used layout; TGLayoutHints*fLayoutExpandXYoften used layout; TGLayoutHints*fLayoutExpandXYMarginoften used layout; TGLineWidthComboBox*fLegendBorderSizelegend border size combo box; TGLabel*fLegendBorderSizeLabellabel 'Legend's'; TGNumberEntry*fLegoInnerRhistograms lego inner radius number entry; TGColorSelect*fLineColorgeneral line color selection widget; TGNumberEntry*fLineScalePSps/pdf line scale number entry; TGLineStyleComboBox*fLineStylegeneral line style combo box; TGTextButton*fLineStyleEditgeneral line style editor open button; TGLineWidthComboBox*fLineWidthgeneral line width combo box; TGComboBox*fListComboBoxlist of available styles; TGLabel*fListLabellabel 'Available Styles:'; TGPictureButton*fMakeDefaultselected style becom gStyle; const TGPicture*fMakeDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOp,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:39256,Availability,Avail,Available,39256,ine*fHorizontal3DLinea line under the tool bar; TGPopupMenu*fImportCascadeCascaded menu 'Import'; Bool_tfLastChoice=kTRUE if the user choose OK in the last TStyleDialog; TGLayoutHints*fLayoutExpandXoften used layout; TGLayoutHints*fLayoutExpandXCenterYMarginoften used layout; TGLayoutHints*fLayoutExpandXMarginoften used layout; TGLayoutHints*fLayoutExpandXYoften used layout; TGLayoutHints*fLayoutExpandXYMarginoften used layout; TGLineWidthComboBox*fLegendBorderSizelegend border size combo box; TGLabel*fLegendBorderSizeLabellabel 'Legend's'; TGNumberEntry*fLegoInnerRhistograms lego inner radius number entry; TGColorSelect*fLineColorgeneral line color selection widget; TGNumberEntry*fLineScalePSps/pdf line scale number entry; TGLineStyleComboBox*fLineStylegeneral line style combo box; TGTextButton*fLineStyleEditgeneral line style editor open button; TGLineWidthComboBox*fLineWidthgeneral line width combo box; TGComboBox*fListComboBoxlist of available styles; TGLabel*fListLabellabel 'Available Styles:'; TGPictureButton*fMakeDefaultselected style becom gStyle; const TGPicture*fMakeDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TG,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:40055,Availability,error,errors,40055,extButton*fLineStyleEditgeneral line style editor open button; TGLineWidthComboBox*fLineWidthgeneral line width combo box; TGComboBox*fListComboBoxlist of available styles; TGLabel*fListLabellabel 'Available Styles:'; TGPictureButton*fMakeDefaultselected style becom gStyle; const TGPicture*fMakeDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TGCheckButton*fOptLogyY axis logarithmic scale check box; TGCheckButton*fOptLogzZ axis logarithmic scale check box; TGCheckButton*fOptStatEntriesstats entries show/hide check box; TGCheckButton*fOptStatErrorsstats errors check box; TGCheckButton*fOptStatIntegralstats integral show/hide check box; TGCheckButton*fOptStatKurtosisstats kurtosis show/hide check box; TGCheckButton*fOptStatMeanstats mean show/hide check box; TGCheckButton*fOptStatNamestats name show/hide check box; TGCheckButton*fOptStatOverflowstats overflow show/hide check box; TGCheckButton*fOptStatRMSstats RMS show/hide check box; TGCheckButton*fOptStatSkewnessstats Skewness show/hide check box; TGCheckButton*fOptStatUnderflowstats underflow show/hide check box; TGCheckButton*fOptTitletitle show/hide check box; TGButtonGroup*,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:40473,Availability,error,errors,40473,arker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TGCheckButton*fOptLogyY axis logarithmic scale check box; TGCheckButton*fOptLogzZ axis logarithmic scale check box; TGCheckButton*fOptStatEntriesstats entries show/hide check box; TGCheckButton*fOptStatErrorsstats errors check box; TGCheckButton*fOptStatIntegralstats integral show/hide check box; TGCheckButton*fOptStatKurtosisstats kurtosis show/hide check box; TGCheckButton*fOptStatMeanstats mean show/hide check box; TGCheckButton*fOptStatNamestats name show/hide check box; TGCheckButton*fOptStatOverflowstats overflow show/hide check box; TGCheckButton*fOptStatRMSstats RMS show/hide check box; TGCheckButton*fOptStatSkewnessstats Skewness show/hide check box; TGCheckButton*fOptStatUnderflowstats underflow show/hide check box; TGCheckButton*fOptTitletitle show/hide check box; TGButtonGroup*fPadBorderModepad border mode button group; TGLineWidthComboBox*fPadBorderSizepad border size combo box; TGNumberEntry*fPadBottomMarginpad bottom margin number entry; TGColorSelect*fPadColorpad fill color selection widget; TGCheckButton*fPadGridXpad grid along X show/hide check box; TGCheckButton*fPadGridYpad grid along Y show/hide check box; TGNumberEntry*fPadLeftMarginpad left margin number entry; TGNumberEntry*f,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50231,Availability,avail,available,50231,"r or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this metho",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:54442,Availability,Error,Errors,54442,AddHistosHistosAxis(TGCompositeFrame* f); Add the 'Axis' group frame to the 'Histos - Histos' tab. void AddHistosHistosLegoInnerR(TGCompositeFrame* f); Add the '3D Cylindrical' group frame to the 'Histos - Histos' tab. void CreateTabHistosFrames(TGCompositeFrame* tab); Add the sub-tab 'Frames' to the tab 'Histos'. void AddHistosFramesFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'Histos - Frames' tab. void AddHistosFramesLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'Histos - Frames' tab. void AddHistosFramesBorder(TGCompositeFrame* f); Add the 'Border' group frame to the 'Histos - Frames' tab. void CreateTabHistosGraphs(TGCompositeFrame* tab); Add the sub-tab 'Graphs' to the tab 'Histos'. void AddHistosGraphsLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'Histos - Graphs' tab. void AddHistosGraphsBorder(TGCompositeFrame* f); Add the 'Draw Border' check button to the 'Histos - Graphs' tab. void AddHistosGraphsErrors(TGCompositeFrame* f); Add the 'Errors' group frame to the 'Histos - Graphs' tab. void CreateTabAxis(TGCompositeFrame* tab); Add the tab 'Axis' to the editor. void CreateTabAxisX(TGCompositeFrame* tab); Add the sub-tab 'X Axis' to the tab 'Axis'. void AddAxisXLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'Axis - X Axis' tab. void AddAxisXTitle(TGCompositeFrame* f); Add the 'Title' group frame to the 'Axis - X Axis' tab. void AddAxisXDivisions(TGCompositeFrame* f); Add the 'Divisions' group frame to the 'Axis - X Axis' tab. void AddAxisXLabels(TGCompositeFrame* f); Add the 'Labels' group frame to the 'Axis - X Axis' tab. void CreateTabAxisY(TGCompositeFrame* tab); Add the sub-tab 'Y Axis' to the tab 'Axis'. void AddAxisYLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'Axis - Y Axis' tab. void AddAxisYTitle(TGCompositeFrame* f); Add the 'Title' group frame to the 'Axis - Y Axis' tab. void AddAxisYDivisions(TGCompositeFrame* f); Add the 'Divisions' group frame to the 'Axis - Y Axis' tab.,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:59886,Availability,avail,available,59886,"TGCompositeFrame* f, Int_t id); Add a text align combo box to the frame f. TGButtonGroup * AddBorderModeEntry(TGCompositeFrame* f, Int_t id1, Int_t id2, Int_t id3); Add a border mode button group to the frame f. TGComboBox * AddDateFormatEntry(TGCompositeFrame* f, Int_t id); Add a date format combo box to the frame f. TGCheckButton * AddCheckButton(TGCompositeFrame* f, const char* s, Int_t id, Int_t e1 = 0, Int_t e2 = 2); Add a check button to the frame f. TGTextEntry * AddTextEntry(TGCompositeFrame* f, const char* s, Int_t id); Add a text entry to the frame f. A caption can be added. TGComboBox * AddPaperSizeEntry(TGCompositeFrame* f, Int_t id); Add a prefered paper size combo box to the frame f. void DoMenu(Int_t menuID); Slot called when an item of the menu is selected. void DoImportMacro(Bool_t create); Slot called to import a style from a C++ macro file. If create=kTRUE,; a new style is created. Otherwise, the current style is reseted. void DoListSelect(); Slot called when the user select an item in the available styles' list.; Update the preview, the editor, the status bar. The current selected; style is changed. void DoRealTime(Bool_t b); Slot called when the user click on the run time update check button.; If b=kTRUE, the user asks for a real time preview. void DoPreview(Bool_t b); Slot called when the user click on the preview check button. If b=kTRUE,; the user asks for a preview, otherwise he wants to close it. void DoPreviewClosed(); Slot called to close the preview, via the preview check button, or; when the preview window is closed via the window manager. void DoMakeDefault(); Slot called to make the current selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to s",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:68177,Availability,error,error,68177, fill style is modified by the user. void ModFrameLineColor(); Slot called whenever the frame line color is modified by the user. void ModFrameLineWidth(); Slot called whenever the frame line width is modified by the user. void ModFrameLineStyle(); Slot called whenever the frame line style is modified by the user. void ModPaletteEdit(); Slot called whenever the palette editor is opened by the user. void ModFrameBorderMode(); Slot called whenever the frame border mode is modified by the user. void ModFrameBorderSize(); Slot called whenever the frame border size is modified by the user. void ModFuncColor(); Slot called whenever the function line color is modified by the user. void ModFuncWidth(); Slot called whenever the function line width is modified by the user. void ModFuncStyle(); Slot called whenever the function line style is modified by the user. void ModDrawBorder(); Slot called whenever the draw border boolean is modified by the user. void ModEndErrorSize(); Slot called whenever the end error size is modified by the user. void ModErrorX(); Slot called whenever the error along X is modified by the user. void ModTimeOffset(); Slot called whenever the time offset is modified by the user. void ModStripDecimals(); Slot called whenever the strip decimal boolean is modified by the user. void ModApplyOnXYZ(); Slot called whenever the apply on XYZ button is clicked. The settings of; the current selected axis pad are applyed on all axis.; NB: The logarithmic scale option isn't modified by this method. void ModXTitleSize(); Slot called whenever the X axis title size is modified by the user. void ModXTitleSizeInPixels(Bool_t b); Slot called whenever the X axis title size mode is modified by the user. void ModXTitleColor(); Slot called whenever the X axis title color is modified by the user. void ModXTitleOffset(); Slot called whenever the X axis title offset is modified by the user. void ModXTitleFont(); Slot called whenever the X axis title font is modified by the user.,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:68256,Availability,error,error,68256,e frame line color is modified by the user. void ModFrameLineWidth(); Slot called whenever the frame line width is modified by the user. void ModFrameLineStyle(); Slot called whenever the frame line style is modified by the user. void ModPaletteEdit(); Slot called whenever the palette editor is opened by the user. void ModFrameBorderMode(); Slot called whenever the frame border mode is modified by the user. void ModFrameBorderSize(); Slot called whenever the frame border size is modified by the user. void ModFuncColor(); Slot called whenever the function line color is modified by the user. void ModFuncWidth(); Slot called whenever the function line width is modified by the user. void ModFuncStyle(); Slot called whenever the function line style is modified by the user. void ModDrawBorder(); Slot called whenever the draw border boolean is modified by the user. void ModEndErrorSize(); Slot called whenever the end error size is modified by the user. void ModErrorX(); Slot called whenever the error along X is modified by the user. void ModTimeOffset(); Slot called whenever the time offset is modified by the user. void ModStripDecimals(); Slot called whenever the strip decimal boolean is modified by the user. void ModApplyOnXYZ(); Slot called whenever the apply on XYZ button is clicked. The settings of; the current selected axis pad are applyed on all axis.; NB: The logarithmic scale option isn't modified by this method. void ModXTitleSize(); Slot called whenever the X axis title size is modified by the user. void ModXTitleSizeInPixels(Bool_t b); Slot called whenever the X axis title size mode is modified by the user. void ModXTitleColor(); Slot called whenever the X axis title color is modified by the user. void ModXTitleOffset(); Slot called whenever the X axis title offset is modified by the user. void ModXTitleFont(); Slot called whenever the X axis title font is modified by the user. void ModXLabelSize(); Slot called whenever the X axis label size is modified by the ,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:1764,Deployability,update,updates,1764," the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A clone of the selected style will be used as a base of the new; style. All its values can be modified via the style editor later.; The dialog that appears will ask for the name and description of the; new style. Import a style (from a macro):; A style macro can be imported at any time. The new imported style in; the ROOT session will become the selected one. Import a style (from a canvas):; You can do that selecting the Style menu/Import from.../Canvas or; the corresponding Tool bar button. A new style will be created in the; ROOT session and will become the selected one. This style is a clone; of the gStyle with modified values as they are set in the currently; selected canvas. You can import a style from any canvas and apply it; later on some objects. Exp",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:4139,Deployability,Update,Update,4139,"g tool bar button. The selected; style is removed from the list of all available styles for the; current ROOT session. WARRNING: it will be lost if you didn't saved; it in a C++ macro file before its deletion. Also, you cannot delete; the selected style if it is set to gStyle. A message 'Can not delete; gStyle' will be displayed on the CINT prompt. /*. */. Editor's buttons:; Open / close the style editor:; The button 'Edit >>' opens the style editor and its label changes to; 'Close <<'. For all details of what can be changed and how please see; the provided Help. Reset a style (to a previously saved state):; When the editor is opened, the 'Reset' button allows you to reset; the values of the selected style for editing. Doing that you cancel; all changes made since the last time you saved that style in a macro.; If the selected style is one of the five ROOT styles (Plain, Bold,; Video, Pub or Default), it will be recreated. Update the preview:; The button 'Update Preview' is available when a preview is shown and; the run time option is not selected. This button allows you to; refresh the preview any time you want to see how the style you edit; looks like. Help button:; Provides a help of the currently selected tab. Function Members (Methods); public:. TStyleManager(const TGWindow*); virtual~TStyleManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildList(TStyle* style = 0); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voi",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:4172,Deployability,Update,Update,4172,"g tool bar button. The selected; style is removed from the list of all available styles for the; current ROOT session. WARRNING: it will be lost if you didn't saved; it in a C++ macro file before its deletion. Also, you cannot delete; the selected style if it is set to gStyle. A message 'Can not delete; gStyle' will be displayed on the CINT prompt. /*. */. Editor's buttons:; Open / close the style editor:; The button 'Edit >>' opens the style editor and its label changes to; 'Close <<'. For all details of what can be changed and how please see; the provided Help. Reset a style (to a previously saved state):; When the editor is opened, the 'Reset' button allows you to reset; the values of the selected style for editing. Doing that you cancel; all changes made since the last time you saved that style in a macro.; If the selected style is one of the five ROOT styles (Plain, Bold,; Video, Pub or Default), it will be recreated. Update the preview:; The button 'Update Preview' is available when a preview is shown and; the run time option is not selected. This button allows you to; refresh the preview any time you want to see how the style you edit; looks like. Help button:; Provides a help of the currently selected tab. Function Members (Methods); public:. TStyleManager(const TGWindow*); virtual~TStyleManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildList(TStyle* style = 0); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voi",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50376,Deployability,Update,UpdateStatusBar,50376," style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50395,Deployability,Update,Update,50395," style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50541,Deployability,Update,UpdateEditor,50541,"ar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral(TGCompositeFrame* tab); Add the tab 'General' to the editor. void AddGeneralFill(TGCompositeFrame* f); Add the 'Fill' group f",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50569,Deployability,Update,Update,50569,"ar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral(TGCompositeFrame* tab); Add the tab 'General' to the editor. void AddGeneralFill(TGCompositeFrame* f); Add the 'Fill' group f",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:51064,Deployability,Update,UpdateEditor,51064,"ill provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral(TGCompositeFrame* tab); Add the tab 'General' to the editor. void AddGeneralFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'General' tab. void AddGeneralLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'General' tab. void AddGeneralText(TGCompositeFrame* f); Add the 'Text' group frame to the 'General' tab. void AddGeneralMarker(TGCompositeFrame* f); Add the 'Marker' group frame to the 'General' tab. void CreateTabCanvas(TGCompositeFrame* tab); Add the tab 'Canvas' to the editor. void AddCanvasFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'Canvas' tab. void AddCanvasGeome",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:59911,Deployability,Update,Update,59911," f. TGButtonGroup * AddBorderModeEntry(TGCompositeFrame* f, Int_t id1, Int_t id2, Int_t id3); Add a border mode button group to the frame f. TGComboBox * AddDateFormatEntry(TGCompositeFrame* f, Int_t id); Add a date format combo box to the frame f. TGCheckButton * AddCheckButton(TGCompositeFrame* f, const char* s, Int_t id, Int_t e1 = 0, Int_t e2 = 2); Add a check button to the frame f. TGTextEntry * AddTextEntry(TGCompositeFrame* f, const char* s, Int_t id); Add a text entry to the frame f. A caption can be added. TGComboBox * AddPaperSizeEntry(TGCompositeFrame* f, Int_t id); Add a prefered paper size combo box to the frame f. void DoMenu(Int_t menuID); Slot called when an item of the menu is selected. void DoImportMacro(Bool_t create); Slot called to import a style from a C++ macro file. If create=kTRUE,; a new style is created. Otherwise, the current style is reseted. void DoListSelect(); Slot called when the user select an item in the available styles' list.; Update the preview, the editor, the status bar. The current selected; style is changed. void DoRealTime(Bool_t b); Slot called when the user click on the run time update check button.; If b=kTRUE, the user asks for a real time preview. void DoPreview(Bool_t b); Slot called when the user click on the preview check button. If b=kTRUE,; the user asks for a preview, otherwise he wants to close it. void DoPreviewClosed(); Slot called to close the preview, via the preview check button, or; when the preview window is closed via the window manager. void DoMakeDefault(); Slot called to make the current selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to show or hide the editor part of the; style manager. void DoEditionUpdate",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:60074,Deployability,update,update,60074,"utton group to the frame f. TGComboBox * AddDateFormatEntry(TGCompositeFrame* f, Int_t id); Add a date format combo box to the frame f. TGCheckButton * AddCheckButton(TGCompositeFrame* f, const char* s, Int_t id, Int_t e1 = 0, Int_t e2 = 2); Add a check button to the frame f. TGTextEntry * AddTextEntry(TGCompositeFrame* f, const char* s, Int_t id); Add a text entry to the frame f. A caption can be added. TGComboBox * AddPaperSizeEntry(TGCompositeFrame* f, Int_t id); Add a prefered paper size combo box to the frame f. void DoMenu(Int_t menuID); Slot called when an item of the menu is selected. void DoImportMacro(Bool_t create); Slot called to import a style from a C++ macro file. If create=kTRUE,; a new style is created. Otherwise, the current style is reseted. void DoListSelect(); Slot called when the user select an item in the available styles' list.; Update the preview, the editor, the status bar. The current selected; style is changed. void DoRealTime(Bool_t b); Slot called when the user click on the run time update check button.; If b=kTRUE, the user asks for a real time preview. void DoPreview(Bool_t b); Slot called when the user click on the preview check button. If b=kTRUE,; the user asks for a preview, otherwise he wants to close it. void DoPreviewClosed(); Slot called to close the preview, via the preview check button, or; when the preview window is closed via the window manager. void DoMakeDefault(); Slot called to make the current selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to show or hide the editor part of the; style manager. void DoEditionUpdatePreview(); Slot called when the user clicks on the 'Update preview' button. void DoChangeTab(Int_t i); Slot call",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:60986,Deployability,Update,Update,60986,"e current selected; style is changed. void DoRealTime(Bool_t b); Slot called when the user click on the run time update check button.; If b=kTRUE, the user asks for a real time preview. void DoPreview(Bool_t b); Slot called when the user click on the preview check button. If b=kTRUE,; the user asks for a preview, otherwise he wants to close it. void DoPreviewClosed(); Slot called to close the preview, via the preview check button, or; when the preview window is closed via the window manager. void DoMakeDefault(); Slot called to make the current selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to show or hide the editor part of the; style manager. void DoEditionUpdatePreview(); Slot called when the user clicks on the 'Update preview' button. void DoChangeTab(Int_t i); Slot called when the user changes the current tab. void DoChangeAxisTab(Int_t i); Slot called when the user changes the current axis tab. void DoSelectNoCanvas(); Slot called when the user close a TCanvas. Update the labels and the; pointers to the current pad and the current object. void DoSelectCanvas(TVirtualPad* pad, TObject* obj, Int_t mouseButton); Slot called when the user clicks on a TCanvas or on any object inside; a TCanvas. Update the pointers to the current pad and the current object. void CloseWindow(); Slot called to close the style manager via the window manager. void ModFillColor(); Slot called whenever the fill color is modified by the user. void ModFillStyle(); Slot called whenever the fill style is modified by the user. void ModHatchesLineWidth(); Slot called whenever the hatches line width is modified by the user. void ModHatchesSpacing(); Slot called whenever the hatches spacing is modified",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:61243,Deployability,Update,Update,61243,"wise he wants to close it. void DoPreviewClosed(); Slot called to close the preview, via the preview check button, or; when the preview window is closed via the window manager. void DoMakeDefault(); Slot called to make the current selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to show or hide the editor part of the; style manager. void DoEditionUpdatePreview(); Slot called when the user clicks on the 'Update preview' button. void DoChangeTab(Int_t i); Slot called when the user changes the current tab. void DoChangeAxisTab(Int_t i); Slot called when the user changes the current axis tab. void DoSelectNoCanvas(); Slot called when the user close a TCanvas. Update the labels and the; pointers to the current pad and the current object. void DoSelectCanvas(TVirtualPad* pad, TObject* obj, Int_t mouseButton); Slot called when the user clicks on a TCanvas or on any object inside; a TCanvas. Update the pointers to the current pad and the current object. void CloseWindow(); Slot called to close the style manager via the window manager. void ModFillColor(); Slot called whenever the fill color is modified by the user. void ModFillStyle(); Slot called whenever the fill style is modified by the user. void ModHatchesLineWidth(); Slot called whenever the hatches line width is modified by the user. void ModHatchesSpacing(); Slot called whenever the hatches spacing is modified by the user. void ModMarkerColor(); Slot called whenever the marker color is modified by the user. void ModMarkerStyle(); Slot called whenever the marker style is modified by the user. void ModMarkerSize(); Slot called whenever the marker size is modified by the user. void ModScreenFactor(); Slot called whenever the sc",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:61476,Deployability,Update,Update,61476,"rrent selected style (in the ComboBox); become gStyle. void DoApplyOnSelect(Int_t i); Slot called to choose on which object(s) the 'Apply' button will; have an effect. void DoApplyOn(); Slot called when the user clicks on the 'Apply' button. Apply the; current selected style to the specified object(s). void DoMoreLess(); Slot called when the user try to show or hide the editor part of the; style manager. void DoEditionUpdatePreview(); Slot called when the user clicks on the 'Update preview' button. void DoChangeTab(Int_t i); Slot called when the user changes the current tab. void DoChangeAxisTab(Int_t i); Slot called when the user changes the current axis tab. void DoSelectNoCanvas(); Slot called when the user close a TCanvas. Update the labels and the; pointers to the current pad and the current object. void DoSelectCanvas(TVirtualPad* pad, TObject* obj, Int_t mouseButton); Slot called when the user clicks on a TCanvas or on any object inside; a TCanvas. Update the pointers to the current pad and the current object. void CloseWindow(); Slot called to close the style manager via the window manager. void ModFillColor(); Slot called whenever the fill color is modified by the user. void ModFillStyle(); Slot called whenever the fill style is modified by the user. void ModHatchesLineWidth(); Slot called whenever the hatches line width is modified by the user. void ModHatchesSpacing(); Slot called whenever the hatches spacing is modified by the user. void ModMarkerColor(); Slot called whenever the marker color is modified by the user. void ModMarkerStyle(); Slot called whenever the marker style is modified by the user. void ModMarkerSize(); Slot called whenever the marker size is modified by the user. void ModScreenFactor(); Slot called whenever the screen factor is modified by the user. void ModLineColor(); Slot called whenever the line color is modified by the user. void ModLineWidth(); Slot called whenever the line width is modified by the user. void ModLineStyle(); Slo",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:354,Integrability,Interface,Interface,354,". TStyleManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TStyleManager. class TStyleManager: public TGMainFrame. TStyleManager. This class provides a Graphical User Interface to manage styles; in ROOT. It allows the user to edit styles, import / export; them to macros, apply a style on the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A c",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:634,Integrability,interface,interface,634,". TStyleManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TStyleManager. class TStyleManager: public TGMainFrame. TStyleManager. This class provides a Graphical User Interface to manage styles; in ROOT. It allows the user to edit styles, import / export; them to macros, apply a style on the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A c",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:687,Integrability,interface,interface,687,". TStyleManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TStyleManager. class TStyleManager: public TGMainFrame. TStyleManager. This class provides a Graphical User Interface to manage styles; in ROOT. It allows the user to edit styles, import / export; them to macros, apply a style on the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A c",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:3482,Integrability,message,message,3482,"created in the; ROOT session and will become the selected one. This style is a clone; of the gStyle with modified values as they are set in the currently; selected canvas. You can import a style from any canvas and apply it; later on some objects. Export a style (in a C++ macro file):; To store a style longer than for the current ROOT session you can; save it in a C++ macro file. This can be done via the menu or the; tool bar button. There is a naming convention for the style macros:; the name must be 'Style_*.C', where * can be replaced by anything; you want. Delete a style:; The selected style can be deleted from the list when you use the; Style menu/Delete or the corresponding tool bar button. The selected; style is removed from the list of all available styles for the; current ROOT session. WARRNING: it will be lost if you didn't saved; it in a C++ macro file before its deletion. Also, you cannot delete; the selected style if it is set to gStyle. A message 'Can not delete; gStyle' will be displayed on the CINT prompt. /*. */. Editor's buttons:; Open / close the style editor:; The button 'Edit >>' opens the style editor and its label changes to; 'Close <<'. For all details of what can be changed and how please see; the provided Help. Reset a style (to a previously saved state):; When the editor is opened, the 'Reset' button allows you to reset; the values of the selected style for editing. Doing that you cancel; all changes made since the last time you saved that style in a macro.; If the selected style is one of the five ROOT styles (Plain, Bold,; Video, Pub or Default), it will be recreated. Update the preview:; The button 'Update Preview' is available when a preview is shown and; the run time option is not selected. This button allows you to; refresh the preview any time you want to see how the style you edit; looks like. Help button:; Provides a help of the currently selected tab. Function Members (Methods); public:. TStyleManager(const TGWindow*); virtual~TSt",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:15501,Integrability,Message,Message,15501,"Frame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidModApplyOnXYZ(); voidModAttDateTextAlign(); voidModAttDateTextAngle(); voidModAttDateTextColor(); voidModAttDateTextFont(); voidModAttDateTextSize(); voidModAttDateTextSizeInPixels(Bool_t b); voidModBarOffset(); voidModBarWidth(); voidModCanvasBorderMode(); voidModCanvasBorderSize(); voidModCanvasColor(); voidModCanvasDefH(); voidModCanvasDefW(); voidModCanvasDefX(); voidModCanvasDefY(); voidModColorModelPS(); voidModDateX(); voidModDateY(); voidModDrawBorder(); voidModEndErrorSize(); voidModErrorX(); voidModFillColor(); voidModFillStyle(); voidModFitFormat(const char* fitformat); voidModFrameBorderMode(); voidModFrameBorderSize(); voidModFrameFillColor(); voidModFrameFillStyle(); voidModFrameLineColor(); voidModFrameLineStyle(); voidModFrameLineWidth(); voidModFuncColor(); voidModFuncStyle(); voidModFuncWidth(); voidModGridColor(); voidModGridStyle(); voidModGridWidth(); voidModHatchesLineWidth(); voidModHatchesSpacing(); voidModHeaderPS(); voidModHist",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:48797,Integrability,interface,interface,48797,lsZ axis label size check box; TGNumberEntry*fZNdivMainZ axis primary division number entry; TGNumberEntry*fZNdivSubZ axis secondary division number entry; TGNumberEntry*fZNdivSubSubZ axis tertiary division number entry; TGCheckButton*fZNdivisionsOptimizeZ axis division optimization check box; TGNumberEntry*fZTickLengthZ axis tick length number entry; TGColorSelect*fZTitleColorZ axis title color selection widget; TGFontTypeComboBox*fZTitleFontZ axis title font combo box; TGNumberEntry*fZTitleOffsetZ axis title offset number entry; TGNumberEntry*fZTitleSizeZ axis title size number entry; TGCheckButton*fZTitleSizeInPixelsZ axis title size check box; static TStyleManager*fgStyleManagersingleton style manager. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleManager(const TGWindow* ); Constructor. Create the main window of the style manager. ~TStyleManager(); Destructor. TStyleManager *& GetSM(); static: return style manager. void Init(); Set up the interface. Called by the ctor or by the 'Show' method. void Hide(); Called to hide the style manager. void Show(); Called to show the style manager. Static method. void Terminate(); Called to delete the style manager. Called when the ROOT session is; closed via a canvas' menu. void AddMenus(TGCompositeFrame* p); Add the menu bar to the frame 'p'. void DoNew(); Create a new style. Called via the menu bar or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void ,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50014,Integrability,interface,interface,50014,"e the style manager. Called when the ROOT session is; closed via a canvas' menu. void AddMenus(TGCompositeFrame* p); Add the menu bar to the frame 'p'. void DoNew(); Create a new style. Called via the menu bar or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect e",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50061,Integrability,interface,interface,50061,"mpositeFrame* p); Add the menu bar to the frame 'p'. void DoNew(); Create a new style. Called via the menu bar or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recurs",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50740,Integrability,interface,interface,50740,"tyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral(TGCompositeFrame* tab); Add the tab 'General' to the editor. void AddGeneralFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'General' tab. void AddGeneralLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'General' tab. void AddGeneralText(TGComp",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50825,Integrability,interface,interface,50825," Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral(TGCompositeFrame* tab); Add the tab 'General' to the editor. void AddGeneralFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'General' tab. void AddGeneralLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'General' tab. void AddGeneralText(TGCompositeFrame* f); Add the 'Text' group frame to the 'General' tab. void AddGeneralMa",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:1022,Modifiability,variab,variable,1022,"ss Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TStyleManager. class TStyleManager: public TGMainFrame. TStyleManager. This class provides a Graphical User Interface to manage styles; in ROOT. It allows the user to edit styles, import / export; them to macros, apply a style on the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A clone of the selected style will be used as a bas",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:14034,Modifiability,Inherit,InheritsFrom,14034,"rame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::I",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:14100,Modifiability,Inherit,InheritsFrom,14100,"nt(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static vo",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:48519,Modifiability,Inherit,Inheritance,48519,Z axis label color selection widget; TGFontTypeComboBox*fZLabelFontZ axis label font combo box; TGNumberEntry*fZLabelOffsetZ axis label offset number entry; TGNumberEntry*fZLabelSizeZ axis label size number entry; TGCheckButton*fZLabelSizeInPixelsZ axis label size check box; TGNumberEntry*fZNdivMainZ axis primary division number entry; TGNumberEntry*fZNdivSubZ axis secondary division number entry; TGNumberEntry*fZNdivSubSubZ axis tertiary division number entry; TGCheckButton*fZNdivisionsOptimizeZ axis division optimization check box; TGNumberEntry*fZTickLengthZ axis tick length number entry; TGColorSelect*fZTitleColorZ axis title color selection widget; TGFontTypeComboBox*fZTitleFontZ axis title font combo box; TGNumberEntry*fZTitleOffsetZ axis title offset number entry; TGNumberEntry*fZTitleSizeZ axis title size number entry; TGCheckButton*fZTitleSizeInPixelsZ axis title size check box; static TStyleManager*fgStyleManagersingleton style manager. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleManager(const TGWindow* ); Constructor. Create the main window of the style manager. ~TStyleManager(); Destructor. TStyleManager *& GetSM(); static: return style manager. void Init(); Set up the interface. Called by the ctor or by the 'Show' method. void Hide(); Called to hide the style manager. void Show(); Called to show the style manager. Static method. void Terminate(); Called to delete the style manager. Called when the ROOT session is; closed via a canvas' menu. void AddMenus(TGCompositeFrame* p); Add the menu bar to the frame 'p'. void DoNew(); Create a new style. Called via the menu bar or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the st,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:48532,Modifiability,Inherit,Inherited,48532,Z axis label color selection widget; TGFontTypeComboBox*fZLabelFontZ axis label font combo box; TGNumberEntry*fZLabelOffsetZ axis label offset number entry; TGNumberEntry*fZLabelSizeZ axis label size number entry; TGCheckButton*fZLabelSizeInPixelsZ axis label size check box; TGNumberEntry*fZNdivMainZ axis primary division number entry; TGNumberEntry*fZNdivSubZ axis secondary division number entry; TGNumberEntry*fZNdivSubSubZ axis tertiary division number entry; TGCheckButton*fZNdivisionsOptimizeZ axis division optimization check box; TGNumberEntry*fZTickLengthZ axis tick length number entry; TGColorSelect*fZTitleColorZ axis title color selection widget; TGFontTypeComboBox*fZTitleFontZ axis title font combo box; TGNumberEntry*fZTitleOffsetZ axis title offset number entry; TGNumberEntry*fZTitleSizeZ axis title size number entry; TGCheckButton*fZTitleSizeInPixelsZ axis title size check box; static TStyleManager*fgStyleManagersingleton style manager. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStyleManager(const TGWindow* ); Constructor. Create the main window of the style manager. ~TStyleManager(); Destructor. TStyleManager *& GetSM(); static: return style manager. void Init(); Set up the interface. Called by the ctor or by the 'Show' method. void Hide(); Called to hide the style manager. void Show(); Called to show the style manager. Static method. void Terminate(); Called to delete the style manager. Called when the ROOT session is; closed via a canvas' menu. void AddMenus(TGCompositeFrame* p); Add the menu bar to the frame 'p'. void DoNew(); Create a new style. Called via the menu bar or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the st,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:46094,Performance,optimiz,optimization,46094,BarImportCanvasPictool bar 'Import from canvas' picture; TGPictureButton*fToolBarImportMacrotool bar 'Import from macro' button; const TGPicture*fToolBarImportMacroPictool bar 'Import from macro' picture; TGPictureButton*fToolBarNewtool bar 'New' button; const TGPicture*fToolBarNewPictool bar 'New' picture; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGColorSelect*fXAxisColorX axis color selection widget; TGColorSelect*fXLabelColorX axis label color selection widget; TGFontTypeComboBox*fXLabelFontX axis label font combo box; TGNumberEntry*fXLabelOffsetX axis label offset number entry; TGNumberEntry*fXLabelSizeX axis label size number entry; TGCheckButton*fXLabelSizeInPixelsX axis label size check box; TGNumberEntry*fXNdivMainX axis primary division number entry; TGNumberEntry*fXNdivSubX axis secondary division number entry; TGNumberEntry*fXNdivSubSubX axis tertiary division number entry; TGCheckButton*fXNdivisionsOptimizeX axis division optimization check box; TGNumberEntry*fXTickLengthX axis tick length number entry; TGColorSelect*fXTitleColorX axis title color selection widget; TGFontTypeComboBox*fXTitleFontX axis title font combo box; TGNumberEntry*fXTitleOffsetX axis title offset number entry; TGNumberEntry*fXTitleSizeX axis title size number entry; TGCheckButton*fXTitleSizeInPixelsX axis title size check box; TGColorSelect*fYAxisColorY axis color selection widget; TGColorSelect*fYLabelColorY axis label color selection widget; TGFontTypeComboBox*fYLabelFontY axis label font combo box; TGNumberEntry*fYLabelOffsetY axis label offset number entry; TGNumberEntry*fYLabelSizeY axis label size number entry; TGCheckButton*fYLabelSizeInPixelsY axis label size check box; TGNumberEntry*fYNdivMainY axis primary division number entry; TGNumberEntry*fYNdivSubY axis secondary division number entry; TGNumberEntry*fYNdivSubSubY axis tertiary division number entry; TGCheckButton*fYNdivisionsOptimizeY axis division optimization check box; ,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:47077,Performance,optimiz,optimization,47077,s division optimization check box; TGNumberEntry*fXTickLengthX axis tick length number entry; TGColorSelect*fXTitleColorX axis title color selection widget; TGFontTypeComboBox*fXTitleFontX axis title font combo box; TGNumberEntry*fXTitleOffsetX axis title offset number entry; TGNumberEntry*fXTitleSizeX axis title size number entry; TGCheckButton*fXTitleSizeInPixelsX axis title size check box; TGColorSelect*fYAxisColorY axis color selection widget; TGColorSelect*fYLabelColorY axis label color selection widget; TGFontTypeComboBox*fYLabelFontY axis label font combo box; TGNumberEntry*fYLabelOffsetY axis label offset number entry; TGNumberEntry*fYLabelSizeY axis label size number entry; TGCheckButton*fYLabelSizeInPixelsY axis label size check box; TGNumberEntry*fYNdivMainY axis primary division number entry; TGNumberEntry*fYNdivSubY axis secondary division number entry; TGNumberEntry*fYNdivSubSubY axis tertiary division number entry; TGCheckButton*fYNdivisionsOptimizeY axis division optimization check box; TGNumberEntry*fYTickLengthY axis tick length number entry; TGColorSelect*fYTitleColorY axis title color selection widget; TGFontTypeComboBox*fYTitleFontY axis title font combo box; TGNumberEntry*fYTitleOffsetY axis title offset number entry; TGNumberEntry*fYTitleSizeY axis title size number entry; TGCheckButton*fYTitleSizeInPixelsY axis title size check box; TGColorSelect*fZAxisColorZ axis color selection widget; TGColorSelect*fZLabelColorZ axis label color selection widget; TGFontTypeComboBox*fZLabelFontZ axis label font combo box; TGNumberEntry*fZLabelOffsetZ axis label offset number entry; TGNumberEntry*fZLabelSizeZ axis label size number entry; TGCheckButton*fZLabelSizeInPixelsZ axis label size check box; TGNumberEntry*fZNdivMainZ axis primary division number entry; TGNumberEntry*fZNdivSubZ axis secondary division number entry; TGNumberEntry*fZNdivSubSubZ axis tertiary division number entry; TGCheckButton*fZNdivisionsOptimizeZ axis division optimization check box; ,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:48060,Performance,optimiz,optimization,48060,rY axis color selection widget; TGColorSelect*fYLabelColorY axis label color selection widget; TGFontTypeComboBox*fYLabelFontY axis label font combo box; TGNumberEntry*fYLabelOffsetY axis label offset number entry; TGNumberEntry*fYLabelSizeY axis label size number entry; TGCheckButton*fYLabelSizeInPixelsY axis label size check box; TGNumberEntry*fYNdivMainY axis primary division number entry; TGNumberEntry*fYNdivSubY axis secondary division number entry; TGNumberEntry*fYNdivSubSubY axis tertiary division number entry; TGCheckButton*fYNdivisionsOptimizeY axis division optimization check box; TGNumberEntry*fYTickLengthY axis tick length number entry; TGColorSelect*fYTitleColorY axis title color selection widget; TGFontTypeComboBox*fYTitleFontY axis title font combo box; TGNumberEntry*fYTitleOffsetY axis title offset number entry; TGNumberEntry*fYTitleSizeY axis title size number entry; TGCheckButton*fYTitleSizeInPixelsY axis title size check box; TGColorSelect*fZAxisColorZ axis color selection widget; TGColorSelect*fZLabelColorZ axis label color selection widget; TGFontTypeComboBox*fZLabelFontZ axis label font combo box; TGNumberEntry*fZLabelOffsetZ axis label offset number entry; TGNumberEntry*fZLabelSizeZ axis label size number entry; TGCheckButton*fZLabelSizeInPixelsZ axis label size check box; TGNumberEntry*fZNdivMainZ axis primary division number entry; TGNumberEntry*fZNdivSubZ axis secondary division number entry; TGNumberEntry*fZNdivSubSubZ axis tertiary division number entry; TGCheckButton*fZNdivisionsOptimizeZ axis division optimization check box; TGNumberEntry*fZTickLengthZ axis tick length number entry; TGColorSelect*fZTitleColorZ axis title color selection widget; TGFontTypeComboBox*fZTitleFontZ axis title font combo box; TGNumberEntry*fZTitleOffsetZ axis title offset number entry; TGNumberEntry*fZTitleSizeZ axis title size number entry; TGCheckButton*fZTitleSizeInPixelsZ axis title size check box; static TStyleManager*fgStyleManagersingleton style manager.,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:50644,Performance,load,loaded,50644,"the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral(TGCompositeFrame* tab); Add the tab 'General' to the editor. void AddGeneralFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'General' tab. void AddGeneralLine(TGCompositeFrame* f); Add t",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:45433,Safety,avoid,avoid,45433,fTitleTextColortitle text color selection widget; TGNumberEntry*fTitleWtitle width number entry; TGNumberEntry*fTitleXtitle abscissa number entry; TGNumberEntry*fTitleYtitle ordinate number entry; TGToolBar*fToolBarthe tool bar; TGPictureButton*fToolBarDeletetool bar 'Delete' button; const TGPicture*fToolBarDeletePictool bar 'Delete' picture; TGPictureButton*fToolBarExporttool bar 'Export' button; const TGPicture*fToolBarExportPictool bar 'Export' picture; TGPictureButton*fToolBarHelptool bar 'Help' button; const TGPicture*fToolBarHelpPictool bar 'Help' picture; TGPictureButton*fToolBarImportCanvastool bar 'Import from canvas' button; const TGPicture*fToolBarImportCanvasPictool bar 'Import from canvas' picture; TGPictureButton*fToolBarImportMacrotool bar 'Import from macro' button; const TGPicture*fToolBarImportMacroPictool bar 'Import from macro' picture; TGPictureButton*fToolBarNewtool bar 'New' button; const TGPicture*fToolBarNewPictool bar 'New' picture; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGColorSelect*fXAxisColorX axis color selection widget; TGColorSelect*fXLabelColorX axis label color selection widget; TGFontTypeComboBox*fXLabelFontX axis label font combo box; TGNumberEntry*fXLabelOffsetX axis label offset number entry; TGNumberEntry*fXLabelSizeX axis label size number entry; TGCheckButton*fXLabelSizeInPixelsX axis label size check box; TGNumberEntry*fXNdivMainX axis primary division number entry; TGNumberEntry*fXNdivSubX axis secondary division number entry; TGNumberEntry*fXNdivSubSubX axis tertiary division number entry; TGCheckButton*fXNdivisionsOptimizeX axis division optimization check box; TGNumberEntry*fXTickLengthX axis tick length number entry; TGColorSelect*fXTitleColorX axis title color selection widget; TGFontTypeComboBox*fXTitleFontX axis title font combo box; TGNumberEntry*fXTitleOffsetX axis title offset number entry; TGNumberEntry*fXTitleSizeX axis title size number entry; TGCheckButton*fXTit,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:45477,Safety,avoid,avoid,45477,dget; TGNumberEntry*fTitleWtitle width number entry; TGNumberEntry*fTitleXtitle abscissa number entry; TGNumberEntry*fTitleYtitle ordinate number entry; TGToolBar*fToolBarthe tool bar; TGPictureButton*fToolBarDeletetool bar 'Delete' button; const TGPicture*fToolBarDeletePictool bar 'Delete' picture; TGPictureButton*fToolBarExporttool bar 'Export' button; const TGPicture*fToolBarExportPictool bar 'Export' picture; TGPictureButton*fToolBarHelptool bar 'Help' button; const TGPicture*fToolBarHelpPictool bar 'Help' picture; TGPictureButton*fToolBarImportCanvastool bar 'Import from canvas' button; const TGPicture*fToolBarImportCanvasPictool bar 'Import from canvas' picture; TGPictureButton*fToolBarImportMacrotool bar 'Import from macro' button; const TGPicture*fToolBarImportMacroPictool bar 'Import from macro' picture; TGPictureButton*fToolBarNewtool bar 'New' button; const TGPicture*fToolBarNewPictool bar 'New' picture; TList*fTrashListFrameto avoid memory leak; TList*fTrashListLayoutto avoid memory leak; TGColorSelect*fXAxisColorX axis color selection widget; TGColorSelect*fXLabelColorX axis label color selection widget; TGFontTypeComboBox*fXLabelFontX axis label font combo box; TGNumberEntry*fXLabelOffsetX axis label offset number entry; TGNumberEntry*fXLabelSizeX axis label size number entry; TGCheckButton*fXLabelSizeInPixelsX axis label size check box; TGNumberEntry*fXNdivMainX axis primary division number entry; TGNumberEntry*fXNdivSubX axis secondary division number entry; TGNumberEntry*fXNdivSubSubX axis tertiary division number entry; TGCheckButton*fXNdivisionsOptimizeX axis division optimization check box; TGNumberEntry*fXTickLengthX axis tick length number entry; TGColorSelect*fXTitleColorX axis title color selection widget; TGFontTypeComboBox*fXTitleFontX axis title font combo box; TGNumberEntry*fXTitleOffsetX axis title offset number entry; TGNumberEntry*fXTitleSizeX axis title size number entry; TGCheckButton*fXTitleSizeInPixelsX axis title size check box; T,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:51082,Safety,avoid,avoid,51082,"ill provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this method, we can know if the style differs from the original style. void AddEdition(TGCompositeFrame* p); Add the editor to the frame 'p'. It contains the tabs allowing the user; to modify every data member of the current TStyle object. void CreateTabGeneral(TGCompositeFrame* tab); Add the tab 'General' to the editor. void AddGeneralFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'General' tab. void AddGeneralLine(TGCompositeFrame* f); Add the 'Line' group frame to the 'General' tab. void AddGeneralText(TGCompositeFrame* f); Add the 'Text' group frame to the 'General' tab. void AddGeneralMarker(TGCompositeFrame* f); Add the 'Marker' group frame to the 'General' tab. void CreateTabCanvas(TGCompositeFrame* tab); Add the tab 'Canvas' to the editor. void AddCanvasFill(TGCompositeFrame* f); Add the 'Fill' group frame to the 'Canvas' tab. void AddCanvasGeome",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:13732,Security,Hash,Hash,13732,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() c",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:24010,Testability,Test,TestBit,24010,"onPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); voidSetLastChoice(Bool_t choice); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); static voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:24049,Testability,Test,TestBits,24049,"onPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); voidSetLastChoice(Bool_t choice); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); static voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:40230,Testability,log,logarithmic,40230,el*fListLabellabel 'Available Styles:'; TGPictureButton*fMakeDefaultselected style becom gStyle; const TGPicture*fMakeDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TGCheckButton*fOptLogyY axis logarithmic scale check box; TGCheckButton*fOptLogzZ axis logarithmic scale check box; TGCheckButton*fOptStatEntriesstats entries show/hide check box; TGCheckButton*fOptStatErrorsstats errors check box; TGCheckButton*fOptStatIntegralstats integral show/hide check box; TGCheckButton*fOptStatKurtosisstats kurtosis show/hide check box; TGCheckButton*fOptStatMeanstats mean show/hide check box; TGCheckButton*fOptStatNamestats name show/hide check box; TGCheckButton*fOptStatOverflowstats overflow show/hide check box; TGCheckButton*fOptStatRMSstats RMS show/hide check box; TGCheckButton*fOptStatSkewnessstats Skewness show/hide check box; TGCheckButton*fOptStatUnderflowstats underflow show/hide check box; TGCheckButton*fOptTitletitle show/hide check box; TGButtonGroup*fPadBorderModepad border mode button group; TGLineWidthComboBox*fPadBorderSizepad border size combo box; TGNumberEntry*fPadBottomMarginpad bottom margin number entry; TGColorSel,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:40288,Testability,log,logarithmic,40288,akeDefaultselected style becom gStyle; const TGPicture*fMakeDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TGCheckButton*fOptLogyY axis logarithmic scale check box; TGCheckButton*fOptLogzZ axis logarithmic scale check box; TGCheckButton*fOptStatEntriesstats entries show/hide check box; TGCheckButton*fOptStatErrorsstats errors check box; TGCheckButton*fOptStatIntegralstats integral show/hide check box; TGCheckButton*fOptStatKurtosisstats kurtosis show/hide check box; TGCheckButton*fOptStatMeanstats mean show/hide check box; TGCheckButton*fOptStatNamestats name show/hide check box; TGCheckButton*fOptStatOverflowstats overflow show/hide check box; TGCheckButton*fOptStatRMSstats RMS show/hide check box; TGCheckButton*fOptStatSkewnessstats Skewness show/hide check box; TGCheckButton*fOptStatUnderflowstats underflow show/hide check box; TGCheckButton*fOptTitletitle show/hide check box; TGButtonGroup*fPadBorderModepad border mode button group; TGLineWidthComboBox*fPadBorderSizepad border size combo box; TGNumberEntry*fPadBottomMarginpad bottom margin number entry; TGColorSelect*fPadColorpad fill color selection widget; TGCheckButto,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:40346,Testability,log,logarithmic,40346,keDefaultPicbutton picture; TGColorSelect*fMarkerColorgeneral marker color selection widget; TGComboBox*fMarkerSizegeneral marker size combo box; TGedMarkerSelect*fMarkerStylegeneral marker style entry; TGMenuBar*fMenuBarthe main window menu bar; TGPopupMenu*fMenuHelpthe 'Help' popup menu; TGPopupMenu*fMenuStylethe 'Style' popup menu; Bool_tfMoreAndNotLess=kTRUE when editor is open; TGTextButton*fMoreLessopen/close the editor; TGNumberEntry*fNumberContourshistograms number of contours number entry; TGCheckButton*fOptDateBoolcanvas date show/hide check box; TGComboBox*fOptDateFormatcanvas date format text entry; TGCheckButton*fOptFitChifit Chi show/hide check box; TGCheckButton*fOptFitErrorsfit errors check box; TGCheckButton*fOptFitProbabilityfit probability show/hide check box; TGCheckButton*fOptFitValuesfit values show/hide check box; TGCheckButton*fOptLogxX axis logarithmic scale check box; TGCheckButton*fOptLogyY axis logarithmic scale check box; TGCheckButton*fOptLogzZ axis logarithmic scale check box; TGCheckButton*fOptStatEntriesstats entries show/hide check box; TGCheckButton*fOptStatErrorsstats errors check box; TGCheckButton*fOptStatIntegralstats integral show/hide check box; TGCheckButton*fOptStatKurtosisstats kurtosis show/hide check box; TGCheckButton*fOptStatMeanstats mean show/hide check box; TGCheckButton*fOptStatNamestats name show/hide check box; TGCheckButton*fOptStatOverflowstats overflow show/hide check box; TGCheckButton*fOptStatRMSstats RMS show/hide check box; TGCheckButton*fOptStatSkewnessstats Skewness show/hide check box; TGCheckButton*fOptStatUnderflowstats underflow show/hide check box; TGCheckButton*fOptTitletitle show/hide check box; TGButtonGroup*fPadBorderModepad border mode button group; TGLineWidthComboBox*fPadBorderSizepad border size combo box; TGNumberEntry*fPadBottomMarginpad bottom margin number entry; TGColorSelect*fPadColorpad fill color selection widget; TGCheckButton*fPadGridXpad grid along X show/hide check box; TGCheckBu,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:68636,Testability,log,logarithmic,68636,user. void ModFrameBorderSize(); Slot called whenever the frame border size is modified by the user. void ModFuncColor(); Slot called whenever the function line color is modified by the user. void ModFuncWidth(); Slot called whenever the function line width is modified by the user. void ModFuncStyle(); Slot called whenever the function line style is modified by the user. void ModDrawBorder(); Slot called whenever the draw border boolean is modified by the user. void ModEndErrorSize(); Slot called whenever the end error size is modified by the user. void ModErrorX(); Slot called whenever the error along X is modified by the user. void ModTimeOffset(); Slot called whenever the time offset is modified by the user. void ModStripDecimals(); Slot called whenever the strip decimal boolean is modified by the user. void ModApplyOnXYZ(); Slot called whenever the apply on XYZ button is clicked. The settings of; the current selected axis pad are applyed on all axis.; NB: The logarithmic scale option isn't modified by this method. void ModXTitleSize(); Slot called whenever the X axis title size is modified by the user. void ModXTitleSizeInPixels(Bool_t b); Slot called whenever the X axis title size mode is modified by the user. void ModXTitleColor(); Slot called whenever the X axis title color is modified by the user. void ModXTitleOffset(); Slot called whenever the X axis title offset is modified by the user. void ModXTitleFont(); Slot called whenever the X axis title font is modified by the user. void ModXLabelSize(); Slot called whenever the X axis label size is modified by the user. void ModXLabelSizeInPixels(Bool_t b); Slot called whenever the X axis label size mode is modified by the user. void ModXLabelColor(); Slot called whenever the X axis label color is modified by the user. void ModXLabelOffset(); Slot called whenever the X axis label offset is modified by the user. void ModXLabelFont(); Slot called whenever the X axis label font is modified by the user. void ModXAxis,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:69874,Testability,log,log,69874,s modified by the user. void ModXTitleColor(); Slot called whenever the X axis title color is modified by the user. void ModXTitleOffset(); Slot called whenever the X axis title offset is modified by the user. void ModXTitleFont(); Slot called whenever the X axis title font is modified by the user. void ModXLabelSize(); Slot called whenever the X axis label size is modified by the user. void ModXLabelSizeInPixels(Bool_t b); Slot called whenever the X axis label size mode is modified by the user. void ModXLabelColor(); Slot called whenever the X axis label color is modified by the user. void ModXLabelOffset(); Slot called whenever the X axis label offset is modified by the user. void ModXLabelFont(); Slot called whenever the X axis label font is modified by the user. void ModXAxisColor(); Slot called whenever the X axis color is modified by the user. void ModXTickLength(); Slot called whenever the X axis tick length is modified by the user. void ModOptLogx(); Slot called whenever the X axis log scale boolean is modified; by the user. void ModXNdivisions(); Slot called whenever the X axis Number of divisions is modified; by the user. void ModYTitleSize(); Slot called whenever the Y axis title size is modified by the user. void ModYTitleSizeInPixels(Bool_t b); Slot called whenever the Y axis title size mode is modified by the user. void ModYTitleColor(); Slot called whenever the Y axis title color is modified by the user. void ModYTitleOffset(); Slot called whenever the Y axis title offset is modified by the user. void ModYTitleFont(); Slot called whenever the Y axis title font is modified by the user. void ModYLabelSize(); Slot called whenever the Y axis label size is modified by the user. void ModYLabelSizeInPixels(Bool_t b); Slot called whenever the Y axis label size mode is modified by the user. void ModYLabelColor(); Slot called whenever the Y axis label color is modified by the user. void ModYLabelOffset(); Slot called whenever the Y axis label offset is modified ,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:71201,Testability,log,log,71201,s modified by the user. void ModYTitleColor(); Slot called whenever the Y axis title color is modified by the user. void ModYTitleOffset(); Slot called whenever the Y axis title offset is modified by the user. void ModYTitleFont(); Slot called whenever the Y axis title font is modified by the user. void ModYLabelSize(); Slot called whenever the Y axis label size is modified by the user. void ModYLabelSizeInPixels(Bool_t b); Slot called whenever the Y axis label size mode is modified by the user. void ModYLabelColor(); Slot called whenever the Y axis label color is modified by the user. void ModYLabelOffset(); Slot called whenever the Y axis label offset is modified by the user. void ModYLabelFont(); Slot called whenever the Y axis label font is modified by the user. void ModYAxisColor(); Slot called whenever the Y axis color is modified by the user. void ModYTickLength(); Slot called whenever the Y axis tick length is modified by the user. void ModOptLogy(); Slot called whenever the Y axis log scale boolean is modified by the user. void ModYNdivisions(); Slot called whenever the Y axis Number of divisions is modified; by the user. void ModZTitleSize(); Slot called whenever the Z axis title size is modified by the user. void ModZTitleSizeInPixels(Bool_t b); Slot called whenever the Z axis title size mode is modified by the user. void ModZTitleColor(); Slot called whenever the Z axis title color is modified by the user. void ModZTitleOffset(); Slot called whenever the Z axis title offset is modified by the user. void ModZTitleFont(); Slot called whenever the Z axis title font is modified by the user. void ModZLabelSize(); Slot called whenever the Z axis label size is modified by the user. void ModZLabelSizeInPixels(Bool_t b); Slot called whenever the Z axis Label size mode is modified by the user. void ModZLabelColor(); Slot called whenever the Z axis label color is modified by the user. void ModZLabelOffset(); Slot called whenever the Z axis label offset is modified ,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:72527,Testability,log,log,72527,s modified by the user. void ModZTitleColor(); Slot called whenever the Z axis title color is modified by the user. void ModZTitleOffset(); Slot called whenever the Z axis title offset is modified by the user. void ModZTitleFont(); Slot called whenever the Z axis title font is modified by the user. void ModZLabelSize(); Slot called whenever the Z axis label size is modified by the user. void ModZLabelSizeInPixels(Bool_t b); Slot called whenever the Z axis Label size mode is modified by the user. void ModZLabelColor(); Slot called whenever the Z axis label color is modified by the user. void ModZLabelOffset(); Slot called whenever the Z axis label offset is modified by the user. void ModZLabelFont(); Slot called whenever the Z axis label font is modified by the user. void ModZAxisColor(); Slot called whenever the Z axis color is modified by the user. void ModZTickLength(); Slot called whenever the Z axis tick length is modified by the user. void ModOptLogz(); Slot called whenever the Z axis log scale boolean is modified by the user. void ModZNdivisions(); Slot called whenever the Z axis Number of divisions is modified; by the user. void ModOptTitle(); Slot called whenever the OptTitle boolean is modified by the user. void ModTitleFillColor(); Slot called whenever the title fill color is modified by the user. void ModTitleStyle(); Slot called whenever the title fill style is modified by the user. void ModTitleTextColor(); Slot called whenever the title text color is modified by the user. void ModTitleFontSize(); Slot called whenever the text size is modified by the user. void ModTitleFontSizeInPixels(Bool_t b); Slot called whenever the text size mode is modified by the user. void ModTitleFont(); Slot called whenever the title text font is modified by the user. void ModTitleAlign(); Slot called whenever the title text align is modified by the user. void ModTitleBorderSize(); Slot called whenever the title border size is modified by the user. void ModLegendBorderSize();,MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:1422,Usability,undo,undo,1422,"cted object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A clone of the selected style will be used as a base of the new; style. All its values can be modified via the style editor later.; The dialog that appears will ask for the name and description of the; new style. Import a style (from a macro):; A style macro can be imported at any time. The new imported style in; the ROOT session will become the selected one. Import a style (from a canvas):; You can do that selecting the Style menu/Import from.../Canvas or; the corresponding Tool b",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStyleManager.html:5515,Usability,Clear,Clear,5515,"eManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildList(TStyle* style = 0); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root/html532/TStyleManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStyleManager.html
https://root.cern/root/html532/TStylePreview.html:4447,Availability,Error,Error,4447,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:4576,Availability,error,error,4576,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:4660,Availability,error,error,4660,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:19025,Availability,mask,mask,19025,,MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:22448,Deployability,Update,Update,22448," Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TRootEmbeddedCanvas*fEcancanvas for preview; TVirtualPad*fPadoriginal pad previewed; TList*fTrashListLayoutto avoid memory leak. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStylePreview(const TGWindow* p, TStyle* style, TVirtualPad* currentPad); Constructor. Create a new window and draw a clone of; currentPad->GetCanvas() in it, using the style 'style'.; Thanks to that method, one can have a preview of any; style with any object. ~TStylePreview(); Destructor. void Update(TStyle* style, TVirtualPad* pad); Update the preview with possibly another style and; another object than previously. void MapTheWindow(); Initialize the layout algorithm. TCanvas * GetMainCanvas(); Return pointer to the selected canvas. » Author: Denis Favre-Miville 08/09/05 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TStylePreview.h,v 1.0 2005/09/08 » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:22489,Deployability,Update,Update,22489," Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TRootEmbeddedCanvas*fEcancanvas for preview; TVirtualPad*fPadoriginal pad previewed; TList*fTrashListLayoutto avoid memory leak. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStylePreview(const TGWindow* p, TStyle* style, TVirtualPad* currentPad); Constructor. Create a new window and draw a clone of; currentPad->GetCanvas() in it, using the style 'style'.; Thanks to that method, one can have a preview of any; style with any object. ~TStylePreview(); Destructor. void Update(TStyle* style, TVirtualPad* pad); Update the preview with possibly another style and; another object than previously. void MapTheWindow(); Initialize the layout algorithm. TCanvas * GetMainCanvas(); Return pointer to the selected canvas. » Author: Denis Favre-Miville 08/09/05 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TStylePreview.h,v 1.0 2005/09/08 » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:11318,Integrability,Message,Message,11318," const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); voidMapTheWindow(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:9843,Modifiability,Inherit,InheritsFrom,9843,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:9909,Modifiability,Inherit,InheritsFrom,9909,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:22074,Modifiability,Inherit,Inheritance,22074," Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TRootEmbeddedCanvas*fEcancanvas for preview; TVirtualPad*fPadoriginal pad previewed; TList*fTrashListLayoutto avoid memory leak. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStylePreview(const TGWindow* p, TStyle* style, TVirtualPad* currentPad); Constructor. Create a new window and draw a clone of; currentPad->GetCanvas() in it, using the style 'style'.; Thanks to that method, one can have a preview of any; style with any object. ~TStylePreview(); Destructor. void Update(TStyle* style, TVirtualPad* pad); Update the preview with possibly another style and; another object than previously. void MapTheWindow(); Initialize the layout algorithm. TCanvas * GetMainCanvas(); Return pointer to the selected canvas. » Author: Denis Favre-Miville 08/09/05 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TStylePreview.h,v 1.0 2005/09/08 » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:22087,Modifiability,Inherit,Inherited,22087," Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TRootEmbeddedCanvas*fEcancanvas for preview; TVirtualPad*fPadoriginal pad previewed; TList*fTrashListLayoutto avoid memory leak. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStylePreview(const TGWindow* p, TStyle* style, TVirtualPad* currentPad); Constructor. Create a new window and draw a clone of; currentPad->GetCanvas() in it, using the style 'style'.; Thanks to that method, one can have a preview of any; style with any object. ~TStylePreview(); Destructor. void Update(TStyle* style, TVirtualPad* pad); Update the preview with possibly another style and; another object than previously. void MapTheWindow(); Initialize the layout algorithm. TCanvas * GetMainCanvas(); Return pointer to the selected canvas. » Author: Denis Favre-Miville 08/09/05 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TStylePreview.h,v 1.0 2005/09/08 » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:22041,Safety,avoid,avoid,22041,"dowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TRootEmbeddedCanvas*fEcancanvas for preview; TVirtualPad*fPadoriginal pad previewed; TList*fTrashListLayoutto avoid memory leak. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStylePreview(const TGWindow* p, TStyle* style, TVirtualPad* currentPad); Constructor. Create a new window and draw a clone of; currentPad->GetCanvas() in it, using the style 'style'.; Thanks to that method, one can have a preview of any; style with any object. ~TStylePreview(); Destructor. void Update(TStyle* style, TVirtualPad* pad); Update the preview with possibly another style and; another object than previously. void MapTheWindow(); Initialize the layout algorithm. TCanvas * GetMainCanvas(); Return pointer to the selected canvas. » Author: Denis Favre-Miville 08/09/05 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TStylePreview.h,v 1.0 2005/09/08 » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:9553,Security,Hash,Hash,9553,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:16141,Testability,Test,TestBit,16141,"nst TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdate(TStyle* style, TVirtualPad* pad); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:16180,Testability,Test,TestBits,16180,"nst TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdate(TStyle* style, TVirtualPad* pad); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TStylePreview.html:1693,Usability,Clear,Clear,1693,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root/html532/TStylePreview.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TStylePreview.html
https://root.cern/root/html532/TSubString.html:1132,Modifiability,Inherit,Inheritance,1132,"on members; data members; class charts. ROOT; » CORE; » BASE; » TSubString. class TSubString. TString. Basic string class. Cannot be stored in a TCollection... use TObjString instead. Function Members (Methods); public:. TSubString(const TSubString& s); ~TSubString(); const char*Data() const; Bool_tIsNull() const; Ssiz_tLength() const; intoperator!() const; char&operator()(Ssiz_t i); charoperator()(Ssiz_t i) const; TSubString&operator=(const char* s); TSubString&operator=(const TString& s); TSubString&operator=(const TSubString& s); char&operator[](Ssiz_t i); charoperator[](Ssiz_t i) const; Ssiz_tStart() const; TString&String(); voidToLower(); voidToUpper(). protected:. voidAssertElement(Ssiz_t i) const; voidSubStringError(Ssiz_t, Ssiz_t, Ssiz_t) const. private:. TSubString(const TString& s, Ssiz_t start, Ssiz_t len). Data Members; private:. Ssiz_tfBeginIndex of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. void SubSt",MatchSource.WIKI,root/html532/TSubString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSubString.html
https://root.cern/root/html532/TSubString.html:1145,Modifiability,Inherit,Inherited,1145,"on members; data members; class charts. ROOT; » CORE; » BASE; » TSubString. class TSubString. TString. Basic string class. Cannot be stored in a TCollection... use TObjString instead. Function Members (Methods); public:. TSubString(const TSubString& s); ~TSubString(); const char*Data() const; Bool_tIsNull() const; Ssiz_tLength() const; intoperator!() const; char&operator()(Ssiz_t i); charoperator()(Ssiz_t i) const; TSubString&operator=(const char* s); TSubString&operator=(const TString& s); TSubString&operator=(const TSubString& s); char&operator[](Ssiz_t i); charoperator[](Ssiz_t i) const; Ssiz_tStart() const; TString&String(); voidToLower(); voidToUpper(). protected:. voidAssertElement(Ssiz_t i) const; voidSubStringError(Ssiz_t, Ssiz_t, Ssiz_t) const. private:. TSubString(const TString& s, Ssiz_t start, Ssiz_t len). Data Members; private:. Ssiz_tfBeginIndex of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. void SubSt",MatchSource.WIKI,root/html532/TSubString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSubString.html
https://root.cern/root/html532/TSubString.html:2560,Safety,detect,detecting,2560,"of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. void SubStringError(Ssiz_t , Ssiz_t , Ssiz_t ) const. void AssertElement(Ssiz_t i) const. TSubString(const TSubString& s); { }. TSubString & operator=(const char* s). TSubString & operator=(const TString& s). char & operator()(Ssiz_t i). char & operator[](Ssiz_t i). Ssiz_t Length() const; { return fExtent; }. Ssiz_t Start() const; { return fBegin; }. void ToLower(). void ToUpper(). Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. int operator!() const; { return fBegin == kNPOS; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TString.h 40340 2011-07-23 16:57:07Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSubString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSubString.html
https://root.cern/root/html532/TSubString.html:1748,Security,Access,Access,1748,"z_tStart() const; TString&String(); voidToLower(); voidToUpper(). protected:. voidAssertElement(Ssiz_t i) const; voidSubStringError(Ssiz_t, Ssiz_t, Ssiz_t) const. private:. TSubString(const TString& s, Ssiz_t start, Ssiz_t len). Data Members; private:. Ssiz_tfBeginIndex of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. void SubStringError(Ssiz_t , Ssiz_t , Ssiz_t ) const. void AssertElement(Ssiz_t i) const. TSubString(const TSubString& s); { }. TSubString & operator=(const char* s). TSubString & operator=(const TString& s). char & operator()(Ssiz_t i). char & operator[](Ssiz_t i). Ssiz_t Length() const; { return fExtent; }. Ssiz_t Start() const; { return fBegin; }. void ToLower(). void ToUpper(). Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. int operator!() const; { return fBegin == kNPOS; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademaker",MatchSource.WIKI,root/html532/TSubString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSubString.html
https://root.cern/root/html532/TSubString.html:1805,Testability,Assert,AssertElement,1805,"er(). protected:. voidAssertElement(Ssiz_t i) const; voidSubStringError(Ssiz_t, Ssiz_t, Ssiz_t) const. private:. TSubString(const TString& s, Ssiz_t start, Ssiz_t len). Data Members; private:. Ssiz_tfBeginIndex of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. void SubStringError(Ssiz_t , Ssiz_t , Ssiz_t ) const. void AssertElement(Ssiz_t i) const. TSubString(const TSubString& s); { }. TSubString & operator=(const char* s). TSubString & operator=(const TString& s). char & operator()(Ssiz_t i). char & operator[](Ssiz_t i). Ssiz_t Length() const; { return fExtent; }. Ssiz_t Start() const; { return fBegin; }. void ToLower(). void ToUpper(). Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. int operator!() const; { return fBegin == kNPOS; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TString.h 40340 2011-07-",MatchSource.WIKI,root/html532/TSubString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSubString.html
https://root.cern/root/html532/TSubString.html:2207,Testability,Assert,AssertElement,2207,"of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. void SubStringError(Ssiz_t , Ssiz_t , Ssiz_t ) const. void AssertElement(Ssiz_t i) const. TSubString(const TSubString& s); { }. TSubString & operator=(const char* s). TSubString & operator=(const TString& s). char & operator()(Ssiz_t i). char & operator[](Ssiz_t i). Ssiz_t Length() const; { return fExtent; }. Ssiz_t Start() const; { return fBegin; }. void ToLower(). void ToUpper(). Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. int operator!() const; { return fBegin == kNPOS; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TString.h 40340 2011-07-23 16:57:07Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSubString.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSubString.html
https://root.cern/root/html532/TSVDUnfold.html:1117,Availability,error,errors,1117," Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TSVDUnfold. class TSVDUnfold: public TObject. SVD Approach to Data Unfolding. Reference: Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307]. TSVDUnfold implements the singular value decomposition based unfolding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum. The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. Monte Carlo inputs:. xini: true underlying spectrum (TH1D, n bins); bini: reconstructed spectrum (TH1D, n bins); Adet: response matrix (TH2D, nxn bins). Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitely, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by. TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );. where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be d",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:4135,Availability,Error,Error,4135,"* xini, const TH2D* Adet); TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); virtual~TSVDUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(co",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:4264,Availability,error,error,4264,"l~TSVDUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); virtual UInt_tTObject::GetUniqueID() const; TH2D*GetXinv() const; TH2D*GetXtau() con",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:4348,Availability,error,error,4348,"Object::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); virtual UInt_tTObject::GetUniqueID() const; TH2D*GetXinv() const; TH2D*GetXtau() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash(",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:10844,Availability,error,error,10844,"umentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments; Note that this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments. TH1D* GetD() const; Returns d vector (for choosing appropriate regularisation). TH1D* GetSV() const; Returns singular values vector. TH2D* GetXtau() const; Returns the computed regularized covariance matrix corresponding to total uncertainties on measured spectrum as passed in the constructor.; Note that this covariance matrix will not contain the effects of forced normalization if spectrum is normalized to unit area. TH2D* GetXinv() const; Returns the computed ",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:12179,Availability,error,errors,12179,"t this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments. TH1D* GetD() const; Returns d vector (for choosing appropriate regularisation). TH1D* GetSV() const; Returns singular values vector. TH2D* GetXtau() const; Returns the computed regularized covariance matrix corresponding to total uncertainties on measured spectrum as passed in the constructor.; Note that this covariance matrix will not contain the effects of forced normalization if spectrum is normalized to unit area. TH2D* GetXinv() const; Returns the computed inverse of the covariance matrix. void H2V(const TH1D* histo, TVectorD& vec); Fill 1D histogram into vector. void H2Verr(const TH1D* histo, TVectorD& vec); Fill 1D histogram errors into vector. void V2H(const TVectorD& vec, TH1D& histo); Fill vector into 1D histogram. void H2M(const TH2D* histo, TMatrixD& mat); Fill 2D histogram into matrix. void M2H(const TMatrixD& mat, TH2D& histo); Fill 2D histogram into matrix. TVectorD VecDiv(const TVectorD& vec1, const TVectorD& vec2, Int_t zero = 0); Divide entries of two vectors. TMatrixD MatDivVec(const TMatrixD& mat, const TVectorD& vec, Int_t zero = 0); Divide matrix entries by vector. TVectorD CompProd(const TVectorD& vec1, const TVectorD& vec2); Multiply entries of two vectors. Double_t GetCurvature(const TVectorD& vec, const TMatrixD& curv); Compute curvature of vector. void FillCurvatureMatrix(TMatrixD& tCurv, TMatrixD& tC) const. void InitHistos(). void RegularisedSymMatInvert(TMatrixDSym& mat, Double_t eps = 1e-3); naive regularised inversion cuts off small elements. Double_t ComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); Helper routine to compute chi-squared between di",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:13115,Integrability,rout,routine,13115,"red spectrum as passed in the constructor.; Note that this covariance matrix will not contain the effects of forced normalization if spectrum is normalized to unit area. TH2D* GetXinv() const; Returns the computed inverse of the covariance matrix. void H2V(const TH1D* histo, TVectorD& vec); Fill 1D histogram into vector. void H2Verr(const TH1D* histo, TVectorD& vec); Fill 1D histogram errors into vector. void V2H(const TVectorD& vec, TH1D& histo); Fill vector into 1D histogram. void H2M(const TH2D* histo, TMatrixD& mat); Fill 2D histogram into matrix. void M2H(const TMatrixD& mat, TH2D& histo); Fill 2D histogram into matrix. TVectorD VecDiv(const TVectorD& vec1, const TVectorD& vec2, Int_t zero = 0); Divide entries of two vectors. TMatrixD MatDivVec(const TMatrixD& mat, const TVectorD& vec, Int_t zero = 0); Divide matrix entries by vector. TVectorD CompProd(const TVectorD& vec1, const TVectorD& vec2); Multiply entries of two vectors. Double_t GetCurvature(const TVectorD& vec, const TMatrixD& curv); Compute curvature of vector. void FillCurvatureMatrix(TMatrixD& tCurv, TMatrixD& tC) const. void InitHistos(). void RegularisedSymMatInvert(TMatrixDSym& mat, Double_t eps = 1e-3); naive regularised inversion cuts off small elements. Double_t ComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); Helper routine to compute chi-squared between distributions using the computed inverse of the covariance matrix for the unfolded spectrum as given in paper. void SetNormalize(Bool_t normalize); Set option to normalize unfolded spectrum to unit area; ""normalize"" - switch. { fNormalize = normalize; }. Int_t GetKReg() const; Regularisation parameter. { return fKReg; }. » Author: Kerstin Tackmann, Andreas Hoecker, Heiko Lacker » Copyright (c) 2010: *; » Last changed: Thu Nov 3 20:22:48 2011 » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:5456,Modifiability,Inherit,InheritsFrom,5456,"har* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); virtual UInt_tTObject::GetUniqueID() const; TH2D*GetXinv() const; TH2D*GetXtau() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:5522,Modifiability,Inherit,InheritsFrom,5522,"indObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); virtual UInt_tTObject::GetUniqueID() const; TH2D*GetXinv() const; TH2D*GetXtau() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operat",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:9939,Modifiability,Inherit,Inheritance,9939,"leted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. const TH2D*fAdetDetector response matrix; TH2D*fBcovcovariance matrix of measured distribution (data); const TH1D*fBdatmeasured distribution (data); const TH1D*fBinireconstructed distribution (MC); TH1D*fDHist! Distribution of d (for checking regularization); Int_tfDdim! Derivative for curvature matrix; Int_tfKReg! Regularisation parameter; Bool_tfMatToyMode! Internal switch for evaluation of statistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured s",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:9952,Modifiability,Inherit,Inherited,9952,"leted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. const TH2D*fAdetDetector response matrix; TH2D*fBcovcovariance matrix of measured distribution (data); const TH1D*fBdatmeasured distribution (data); const TH1D*fBinireconstructed distribution (MC); TH1D*fDHist! Distribution of d (for checking regularization); Int_tfDdim! Derivative for curvature matrix; Int_tfKReg! Regularisation parameter; Bool_tfMatToyMode! Internal switch for evaluation of statistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured s",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:1613,Performance,perform,performed,1613,"unfolded spectrum. The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. Monte Carlo inputs:. xini: true underlying spectrum (TH1D, n bins); bini: reconstructed spectrum (TH1D, n bins); Adet: response matrix (TH2D, nxn bins). Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitely, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by. TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );. where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] using the distribution of the |d_i|<\tt> that can be obtained by tsvdunf->GetD() and/or using pseudo-experiments. Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the GetUnfoldCovMatrix method, which uses pseudo experiments for the propagation. In addition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response ma",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:10688,Performance,Perform,Perform,10688,"D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments; Note that this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments. TH1D* GetD() const; Returns d vector (for choosing appropriate regularisation). TH1D* GetSV() const; Returns singular values vector. TH2D* GetXtau() const; Returns ",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:1251,Safety,detect,detector,1251,"cl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307]. TSVDUnfold implements the singular value decomposition based unfolding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum. The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. Monte Carlo inputs:. xini: true underlying spectrum (TH1D, n bins); bini: reconstructed spectrum (TH1D, n bins); Adet: response matrix (TH2D, nxn bins). Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitely, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by. TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );. where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] using the distribution of the |d_i|<\tt> that can be obtained by tsvdunf->GetD() and/or using pseudo-experiments. Covariance matrices on the measured spectrum (for either the total uncertainties or i",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:9755,Safety,detect,detector,9755,"DivVec(const TMatrixD& mat, const TVectorD& vec, Int_t zero = 0); static voidRegularisedSymMatInvert(TMatrixDSym& mat, Double_t eps = 1e-3); static voidV2H(const TVectorD& vec, TH1D& histo); static TVectorDVecDiv(const TVectorD& vec1, const TVectorD& vec2, Int_t zero = 0). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. const TH2D*fAdetDetector response matrix; TH2D*fBcovcovariance matrix of measured distribution (data); const TH1D*fBdatmeasured distribution (data); const TH1D*fBinireconstructed distribution (MC); TH1D*fDHist! Distribution of d (for checking regularization); Int_tfDdim! Derivative for curvature matrix; Int_tfKReg! Regularisation parameter; Bool_tfMatToyMode! Internal switch for evaluation of statistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spec",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:10176,Safety,detect,detector,10176,"const TH1D*fBdatmeasured distribution (data); const TH1D*fBinireconstructed distribution (MC); TH1D*fDHist! Distribution of d (for checking regularization); Int_tfDdim! Derivative for curvature matrix; Int_tfKReg! Regularisation parameter; Bool_tfMatToyMode! Internal switch for evaluation of statistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments;",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:10499,Safety,detect,detector,10499,"tatistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments; Note that this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""nto",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:5346,Security,Hash,Hash,5346,"error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); virtual UInt_tTObject::GetUniqueID() const; TH2D*GetXinv() const; TH2D*GetXtau() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:7505,Testability,Test,TestBit,7505,"t::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNormalize(Bool_t normalize); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TH1D*Unfold(Int_t kreg); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:7544,Testability,Test,TestBits,7544,"t::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNormalize(Bool_t normalize); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TH1D*Unfold(Int_t kreg); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:10151,Testability,test,test,10151,"const TH1D*fBdatmeasured distribution (data); const TH1D*fBinireconstructed distribution (MC); TH1D*fDHist! Distribution of d (for checking regularization); Int_tfDdim! Derivative for curvature matrix; Int_tfKReg! Regularisation parameter; Bool_tfMatToyMode! Internal switch for evaluation of statistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments;",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:10474,Testability,test,test,10474,"tatistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments; Note that this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""nto",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:2068,Usability,guid,guidelines,2068,"t passed explicitely, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by. TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );. where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] using the distribution of the |d_i|<\tt> that can be obtained by tsvdunf->GetD() and/or using pseudo-experiments. Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the GetUnfoldCovMatrix method, which uses pseudo experiments for the propagation. In addition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response matrix using pseudo experiments. The covariance matrix corresponding to Bcov is also computed as described in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] and can be obtained from tsvdunf->GetXtau() and its (regularisation independent) inverse from tsvdunf->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV(). See also the tutorial for a toy example.; . Function Members (Methods); public:. TSVDUn",MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVDUnfold.html:3526,Usability,Clear,Clear,3526,,MatchSource.WIKI,root/html532/TSVDUnfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVDUnfold.html
https://root.cern/root/html532/TSVG.html:3167,Availability,Error,Error,3167,"py(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() co",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:3296,Availability,error,error,3296,"py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObje",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:3380,Availability,error,error,3380,"istancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Opt",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:14569,Energy Efficiency,power,power,14569,"ves only to point x,y.; If NN=0 the x,y are written in the SVG file; according to the current transformation.; If NN>0 the line is clipped as a line.; If NN<0 the line is clipped as a fill area. void DrawPolyMarker(Int_t n, Float_t* x, Float_t* y); Paint PolyMarker. void DrawPolyMarker(Int_t n, Double_t* x, Double_t* y); Paint PolyMarker. void DrawPS(Int_t n, Double_t* xw, Double_t* yw); This function defines a path with xw and yw and draw it according the; value of nn:. If nn>0 a line is drawn.; If nn<0 a closed polygon is drawn. void Initialize(); Initialize the SVG file. The main task of the function is to ouput the; SVG header file which consist in <title>, <desc> and <defs>. The; HeaderPS provided by the user program is written in the <defs> part. void MovePS(Int_t x, Int_t y); Move to a new position (ix, iy). The move is done in relative coordinates; which allows to have short numbers which decrease the size of the file.; This function use the full power of the SVG's paths by using the; horizontal and vertical move whenever it is possible. void NewPage(); Start the SVG page. This function initialize the pad conversion; coefficients and ouput the <svg> directive which is close later in the; the function Close. void Range(Float_t xrange, Float_t yrange); Set the range for the paper in centimetres. void SetFillColor(Color_t cindex = 1); Set color index for fill areas. void SetLineColor(Color_t cindex = 1); Set color index for lines. void SetLineStyle(Style_t linestyle = 1); Change the line style. linestyle = 2 dashed; = 3 dotted; = 4 dash-dotted; = else solid (1 in is used most of the time). void SetLineWidth(Width_t linewidth = 1); Set the lines width. void SetMarkerColor(Color_t cindex = 1); Set color index for markers. void SetColor(Int_t color = 1); Set color with its color index. void SetColor(Float_t r, Float_t g, Float_t b); Set color with its R G B components. r: % of red in [0,1]; g: % of green in [0,1]; b: % of blue in [0,1]. void SetTextColor(Color_t ci",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:15534,Energy Efficiency,green,green,15534,"le.; This function use the full power of the SVG's paths by using the; horizontal and vertical move whenever it is possible. void NewPage(); Start the SVG page. This function initialize the pad conversion; coefficients and ouput the <svg> directive which is close later in the; the function Close. void Range(Float_t xrange, Float_t yrange); Set the range for the paper in centimetres. void SetFillColor(Color_t cindex = 1); Set color index for fill areas. void SetLineColor(Color_t cindex = 1); Set color index for lines. void SetLineStyle(Style_t linestyle = 1); Change the line style. linestyle = 2 dashed; = 3 dotted; = 4 dash-dotted; = else solid (1 in is used most of the time). void SetLineWidth(Width_t linewidth = 1); Set the lines width. void SetMarkerColor(Color_t cindex = 1); Set color index for markers. void SetColor(Int_t color = 1); Set color with its color index. void SetColor(Float_t r, Float_t g, Float_t b); Set color with its R G B components. r: % of red in [0,1]; g: % of green in [0,1]; b: % of blue in [0,1]. void SetTextColor(Color_t cindex = 1); Set color index for text. void Text(Double_t x, Double_t y, const char* string); Draw text. xx: x position of the text; yy: y position of the text; chars: text to be drawn. void TextNDC(Double_t u, Double_t v, const char* string); Write a string of characters in NDC. Int_t UtoSVG(Double_t u); Convert U from NDC coordinate to SVG. Int_t VtoSVG(Double_t v); Convert V from NDC coordinate to SVG. Int_t XtoSVG(Double_t x); Convert X from world coordinate to SVG. Int_t YtoSVG(Double_t y); Convert Y from world coordinate to SVG. void CellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); Begin the Cell Array painting. void CellArrayFill(Int_t r, Int_t g, Int_t b); Paint the Cell Array. void CellArrayEnd(); End the Cell Array painting. void DrawPS(Int_t n, Float_t* xw, Float_t* yw); Not needed in SVG case. Int_t CMtoSVG(Double_t u); {return Int_t(0.5 + 72*u/2.54);}. void SetLineScale(Float_",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:299,Integrability,interface,interface,299,". TSVG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TSVG. class TSVG: public TVirtualPS. TSVG: Graphics interface to SVG; SVG; (Scalable Vector Graphics) is a language for describing two-dimensional; graphics in XML. SVG allows high quality vector graphics in; HTML pages. To print a ROOT canvas ""c1"" into an SVG file simply do:. c1->Print(""c1.svg"");. The result is the ASCII file c1.svg. It can be open direclty using a web browser or included in a html document; the following way:. <embed width=""95%"" height=""500"" src=""c1.svg"" />>. It is best viewed with Internet Explorer and you need the; Adobe SVG; Viewer. To zoom using the Adobe SVG Viewer, position the mouse over; the area you want to zoom and click the right button. To define the zoom area,; use Control+drag to mark the boundaries of the zoom area. To pan, use Alt+drag.; By clicking with the right mouse button on the SVG graphics you will get; a pop-up menu giving other ways to interact with the image. SVG files can be used directly in compressed mode to minimize the time; transfer over the network. Compressed SVG files should be created using; gzip on a normal ASCII SVG file and should then be renamed; using the file extension .svgz.; . Function Members (Methods); public:. TSVG(); TSVG(const char* filename, Int_t type = -113); virtual~TSVG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const c",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:12144,Integrability,interface,interface,12144,"arker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTVirtualPS::fNByteNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Bool_tfRangeTrue when a range has been defined; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypeWorkstation type used to know if the SVG is open; Float_tfXsizePage size along X; Float_tfYsizePage size along Y; Int_tfYsizeSVGPage's Y size in SVG units. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVG(); Default SVG constructor. TSVG(const char* filename, Int_t type = -113); Initialize the SVG interface. fname : SVG file name; wtype : SVG workstation type. Not used in the SVG driver. But as TSVG; inherits from TVirtualPS it should be kept. Anyway it is not; necessary to specify this parameter at creation time because it; has a default value (which is ignore in the SVG case). void Open(const char* filename, Int_t type = -111); Open a SVG file. ~TSVG(); Default SVG destructor. void Close(Option_t* opt = """"); Close a SVG file. void On(); Activate an already open SVG file. void Off(); Deactivate an already open SVG file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front of the screen; border is the border size in already pre-computed SVG units dark is the; color for the dark part of the fr",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:5008,Modifiability,Inherit,InheritsFrom,5008,"tyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual void*TVirtualPS::GetStream() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual Int_tTVirtualPS::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); voidMovePS(Int_t x, Int_t y); virtual voidNewPage(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOff(); voidOn(); virtual voidOpen(const char* filename, Int_t type = -111); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject:",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:5074,Modifiability,Inherit,InheritsFrom,5074,"al Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual void*TVirtualPS::GetStream() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual Int_tTVirtualPS::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); voidMovePS(Int_t x, Int_t y); virtual voidNewPage(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOff(); voidOn(); virtual voidOpen(const char* filename, Int_t type = -111); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:11968,Modifiability,Inherit,Inheritance,11968,"TAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTVirtualPS::fNByteNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Bool_tfRangeTrue when a range has been defined; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypeWorkstation type used to know if the SVG is open; Float_tfXsizePage size along X; Float_tfYsizePage size along Y; Int_tfYsizeSVGPage's Y size in SVG units. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVG(); Default SVG constructor. TSVG(const char* filename, Int_t type = -113); Initialize the SVG interface. fname : SVG file name; wtype : SVG workstation type. Not used in the SVG driver. But as TSVG; inherits from TVirtualPS it should be kept. Anyway it is not; necessary to specify this parameter at creation time because it; has a default value (which is ignore in the SVG case). void Open(const char* filename, Int_t type = -111); Open a SVG file. ~TSVG(); Default SVG destructor. void Close(Option_t* opt = """"); Close a SVG file. void On(); Activate an already open SVG file. void Off(); Deactivate an already open SVG file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:11981,Modifiability,Inherit,Inherited,11981,"TAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTVirtualPS::fNByteNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Bool_tfRangeTrue when a range has been defined; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypeWorkstation type used to know if the SVG is open; Float_tfXsizePage size along X; Float_tfYsizePage size along Y; Int_tfYsizeSVGPage's Y size in SVG units. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVG(); Default SVG constructor. TSVG(const char* filename, Int_t type = -113); Initialize the SVG interface. fname : SVG file name; wtype : SVG workstation type. Not used in the SVG driver. But as TSVG; inherits from TVirtualPS it should be kept. Anyway it is not; necessary to specify this parameter at creation time because it; has a default value (which is ignore in the SVG case). void Open(const char* filename, Int_t type = -111); Open a SVG file. ~TSVG(); Default SVG destructor. void Close(Option_t* opt = """"); Close a SVG file. void On(); Activate an already open SVG file. void Off(); Deactivate an already open SVG file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:12249,Modifiability,inherit,inherits,12249,"eNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Bool_tfRangeTrue when a range has been defined; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypeWorkstation type used to know if the SVG is open; Float_tfXsizePage size along X; Float_tfYsizePage size along Y; Int_tfYsizeSVGPage's Y size in SVG units. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVG(); Default SVG constructor. TSVG(const char* filename, Int_t type = -113); Initialize the SVG interface. fname : SVG file name; wtype : SVG workstation type. Not used in the SVG driver. But as TSVG; inherits from TVirtualPS it should be kept. Anyway it is not; necessary to specify this parameter at creation time because it; has a default value (which is ignore in the SVG case). void Open(const char* filename, Int_t type = -111); Open a SVG file. ~TSVG(); Default SVG destructor. void Close(Option_t* opt = """"); Close a SVG file. void On(); Activate an already open SVG file. void Off(); Deactivate an already open SVG file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front of the screen; border is the border size in already pre-computed SVG units dark is the; color for the dark part of the frame light is the color for the light; part of the frame. void DrawPolyLine(Int_t n, TPoints* xy); Draw a PolyLine. Draw a polyline through the point",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:323,Performance,Scalab,Scalable,323,". TSVG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TSVG. class TSVG: public TVirtualPS. TSVG: Graphics interface to SVG; SVG; (Scalable Vector Graphics) is a language for describing two-dimensional; graphics in XML. SVG allows high quality vector graphics in; HTML pages. To print a ROOT canvas ""c1"" into an SVG file simply do:. c1->Print(""c1.svg"");. The result is the ASCII file c1.svg. It can be open direclty using a web browser or included in a html document; the following way:. <embed width=""95%"" height=""500"" src=""c1.svg"" />>. It is best viewed with Internet Explorer and you need the; Adobe SVG; Viewer. To zoom using the Adobe SVG Viewer, position the mouse over; the area you want to zoom and click the right button. To define the zoom area,; use Control+drag to mark the boundaries of the zoom area. To pan, use Alt+drag.; By clicking with the right mouse button on the SVG graphics you will get; a pop-up menu giving other ways to interact with the image. SVG files can be used directly in compressed mode to minimize the time; transfer over the network. Compressed SVG files should be created using; gzip on a normal ASCII SVG file and should then be renamed; using the file extension .svgz.; . Function Members (Methods); public:. TSVG(); TSVG(const char* filename, Int_t type = -113); virtual~TSVG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const c",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:4898,Security,Hash,Hash,4898,"har*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual void*TVirtualPS::GetStream() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual Int_tTVirtualPS::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); voidMovePS(Int_t x, Int_t y); virtual voidNewPage(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOff(); voidOn(); virtual voidOpen(const char* filename, Int_t type = -111); static void",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:9565,Testability,Test,TestBit,9565,"tual voidSetLineStyle(Style_t linestyle = 1); virtual voidSetLineWidth(Width_t linewidth = 1); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidSetMarkerColor(Color_t cindex = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTVirtualPS::SetStream(ofstream* os); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidSetTextColor(Color_t cindex = 1); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTVirtualPS::SetType(Int_t = -111); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidText(Double_t x, Double_t y, const char* string); voidTextNDC(Double_t u, Double_t v, const char* string); virtual voidTObject::UseCurrentStyle(); Int_tUtoSVG(Double_t u); Int_tVtoSVG(Double_t v); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTVirtualPS::WriteInteger(Int_t i, Bool_t space = kTRUE); virtual voidTVirtualPS::WriteReal(Float_t r); Int_tXtoSVG(Double_t x); Int_tYtoSVG(Double_t y).",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:9604,Testability,Test,TestBits,9604,"tual voidSetLineStyle(Style_t linestyle = 1); virtual voidSetLineWidth(Width_t linewidth = 1); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidSetMarkerColor(Color_t cindex = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTVirtualPS::SetStream(ofstream* os); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidSetTextColor(Color_t cindex = 1); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTVirtualPS::SetType(Int_t = -111); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidText(Double_t x, Double_t y, const char* string); voidTextNDC(Double_t u, Double_t v, const char* string); virtual voidTObject::UseCurrentStyle(); Int_tUtoSVG(Double_t u); Int_tVtoSVG(Double_t v); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTVirtualPS::WriteInteger(Int_t i, Bool_t space = kTRUE); virtual voidTVirtualPS::WriteReal(Float_t r); Int_tXtoSVG(Double_t x); Int_tYtoSVG(Double_t y).",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:513,Usability,simpl,simply,513,". TSVG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TSVG. class TSVG: public TVirtualPS. TSVG: Graphics interface to SVG; SVG; (Scalable Vector Graphics) is a language for describing two-dimensional; graphics in XML. SVG allows high quality vector graphics in; HTML pages. To print a ROOT canvas ""c1"" into an SVG file simply do:. c1->Print(""c1.svg"");. The result is the ASCII file c1.svg. It can be open direclty using a web browser or included in a html document; the following way:. <embed width=""95%"" height=""500"" src=""c1.svg"" />>. It is best viewed with Internet Explorer and you need the; Adobe SVG; Viewer. To zoom using the Adobe SVG Viewer, position the mouse over; the area you want to zoom and click the right button. To define the zoom area,; use Control+drag to mark the boundaries of the zoom area. To pan, use Alt+drag.; By clicking with the right mouse button on the SVG graphics you will get; a pop-up menu giving other ways to interact with the image. SVG files can be used directly in compressed mode to minimize the time; transfer over the network. Compressed SVG files should be created using; gzip on a normal ASCII SVG file and should then be renamed; using the file extension .svgz.; . Function Members (Methods); public:. TSVG(); TSVG(const char* filename, Int_t type = -113); virtual~TSVG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const c",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSVG.html:1934,Usability,Clear,Clear,1934," TSVG(); TSVG(const char* filename, Int_t type = -113); virtual~TSVG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const c",MatchSource.WIKI,root/html532/TSVG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSVG.html
https://root.cern/root/html532/TSynapse.html:1410,Availability,Error,Error,1410," TSynapse(); TSynapse(const TSynapse&); TSynapse(TNeuron*, TNeuron*, Double_t w = 1); virtual~TSynapse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; s",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:1539,Availability,error,error,1539,"(const TSynapse&); TSynapse(TNeuron*, TNeuron*, Double_t w = 1); virtual~TSynapse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TNeuron*GetPost() const; TNeuron*GetPre() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue() const; Double_tGetWeight() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObjec",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:1623,Availability,error,error,1623," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TNeuron*GetPost() const; TNeuron*GetPre() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue() const; Double_tGetWeight() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:5593,Availability,error,error,5593,"rNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { ",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:6180,Availability,error,error,6180,"option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fweight; }. Double_t GetDEDw() const; { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id: TSynapse.h 21922 2008-01-30 13:08:54Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:6465,Availability,error,error,6465,"option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fweight; }. Double_t GetDEDw() const; { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id: TSynapse.h 21922 2008-01-30 13:08:54Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:2655,Modifiability,Inherit,InheritsFrom,2655,"teEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TNeuron*GetPost() const; TNeuron*GetPre() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue() const; Double_tGetWeight() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:2721,Modifiability,Inherit,InheritsFrom,2721,"al(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TNeuron*GetPost() const; TNeuron*GetPre() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue() const; Double_tGetWeight() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSynapse&operator=(cons",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:5765,Modifiability,Inherit,Inheritance,5765,"nt_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fweight; }. Double_t GetDEDw() const; { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Re",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:5778,Modifiability,Inherit,Inherited,5778,"nt_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fweight; }. Double_t GetDEDw() const; { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Re",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:2545,Security,Hash,Hash,2545,"0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TNeuron*GetPost() const; TNeuron*GetPre() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue() const; Double_tGetWeight() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:4764,Testability,Test,TestBit,4764," voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSynapse&operator=(const TSynapse&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDEDw(Double_t in); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetPost(TNeuron* post); voidSetPre(TNeuron* pre); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWeight(Double_t w); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:4803,Testability,Test,TestBits,4803," voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSynapse&operator=(const TSynapse&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDEDw(Double_t in); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetPost(TNeuron* post); voidSetPre(TNeuron* pre); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWeight(Double_t w); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:304,Usability,simpl,simple,304,". TSynapse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TSynapse. class TSynapse: public TObject. TSynapse. This is a simple weighted bidirectionnal connection between; two neurons.; A network is built connecting two neurons by a synapse.; In addition to the value, the synapse can return the DeDw. Function Members (Methods); public:. TSynapse(); TSynapse(const TSynapse&); TSynapse(TNeuron*, TNeuron*, Double_t w = 1); virtual~TSynapse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; s",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSynapse.html:870,Usability,Clear,Clear,870," TSynapse(); TSynapse(const TSynapse&); TSynapse(TNeuron*, TNeuron*, Double_t w = 1); virtual~TSynapse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDeDw() const; Double_tGetDEDw() const; virtual Option_t*TObject::GetDrawOption() const; s",MatchSource.WIKI,root/html532/TSynapse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSynapse.html
https://root.cern/root/html532/TSysEvtHandler.html:518,Availability,avail,available,518,". TSysEvtHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSysEvtHandler. class TSysEvtHandler: public TObject, public TQObject. TSysEvtHandler. Abstract base class for handling system events. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSysEvtHandler(); voidTObject::AbstractMethod(const char* method) const; voidActivate(); virtual voidActivated()SIGNAL ; virtual voidAdd(); virtual voidAdded()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidDeActivate(); virtual voidDeActivated()SIGNAL ; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQOb",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:3657,Availability,Error,Error,3657,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virt",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:3786,Availability,error,error,3786,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:3870,Availability,error,error,3870,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQ",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:5735,Integrability,Message,Message,5735,"er* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidNotified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidRemo",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:5043,Modifiability,Inherit,InheritsFrom,5043,"FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidNotified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operato",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:5109,Modifiability,Inherit,InheritsFrom,5109,"bject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidNotified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:9117,Modifiability,Inherit,Inheritance,9117,"_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). private:. virtual void*GetSender(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. Bool_tfIsActivekTRUE if handler is active, kFALSE if not active. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Activate(); Activate a system event handler. All handlers are by default; activated. Use this method to activate a de-activated handler. void DeActivate(); De-activate a system event handler. Use this method to temporarily; disable an event handler to avoid it from being recursively called.; Use DeActivate() / Activate() instead of Remove() / Add() for this; purpose, since the Add() will add the handler back to the end of; the list of handlers and cause it to be called again for the same,; already handled, event. void * GetSender(); { return this; }. virtual ~TSysEvtHandler(); { }. Bool_t IsActive() const; { return fIsActive; }. void Add(). void Remove(). Bool_t Notify(). void Activated(); { Emit(""Activated()""); }. void DeActivated(); { Emit(""DeActivated()""); }. void Notified(); { Emit(""Notified()""); }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. » Author: Fons Rademakers 16/09/95 » Copyright (C) 19",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:9130,Modifiability,Inherit,Inherited,9130,"_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). private:. virtual void*GetSender(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. Bool_tfIsActivekTRUE if handler is active, kFALSE if not active. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Activate(); Activate a system event handler. All handlers are by default; activated. Use this method to activate a de-activated handler. void DeActivate(); De-activate a system event handler. Use this method to temporarily; disable an event handler to avoid it from being recursively called.; Use DeActivate() / Activate() instead of Remove() / Add() for this; purpose, since the Add() will add the handler back to the end of; the list of handlers and cause it to be called again for the same,; already handled, event. void * GetSender(); { return this; }. virtual ~TSysEvtHandler(); { }. Bool_t IsActive() const; { return fIsActive; }. void Add(). void Remove(). Bool_t Notify(). void Activated(); { Emit(""Activated()""); }. void DeActivated(); { Emit(""DeActivated()""); }. void Notified(); { Emit(""Notified()""); }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. » Author: Fons Rademakers 16/09/95 » Copyright (C) 19",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:9451,Safety,avoid,avoid,9451,"der(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. Bool_tfIsActivekTRUE if handler is active, kFALSE if not active. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Activate(); Activate a system event handler. All handlers are by default; activated. Use this method to activate a de-activated handler. void DeActivate(); De-activate a system event handler. Use this method to temporarily; disable an event handler to avoid it from being recursively called.; Use DeActivate() / Activate() instead of Remove() / Add() for this; purpose, since the Add() will add the handler back to the end of; the list of handlers and cause it to be called again for the same,; already handled, event. void * GetSender(); { return this; }. virtual ~TSysEvtHandler(); { }. Bool_t IsActive() const; { return fIsActive; }. void Add(). void Remove(). Bool_t Notify(). void Activated(); { Emit(""Activated()""); }. void DeActivated(); { Emit(""DeActivated()""); }. void Notified(); { Emit(""Notified()""); }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. » Author: Fons Rademakers 16/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TSysEvtHandler.h 21455 2007-12-18 15:44:33Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:4845,Security,Hash,Hash,4845,"jArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidNotified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::Nu",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:7434,Testability,Test,TestBit,7434,"L ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidRemoved()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:7473,Testability,Test,TestBits,7473,"L ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidRemoved()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSysEvtHandler.html:1156,Usability,Clear,Clear,1156," virtual~TSysEvtHandler(); voidTObject::AbstractMethod(const char* method) const; voidActivate(); virtual voidActivated()SIGNAL ; virtual voidAdd(); virtual voidAdded()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidDeActivate(); virtual voidDeActivated()SIGNAL ; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQOb",MatchSource.WIKI,root/html532/TSysEvtHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html
https://root.cern/root/html532/TSystem.html:3317,Availability,Error,Error,3317," pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intCompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*ConcatFileName(const char* dir, const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual char*DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tDynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tExec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExit(int code, Bool_t mode = kTRUE); virtual voidExitLoop(); virtual Bool_tExpandPathName(TString& path); virtual char*ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeGetAclicMode() const; virtual Int_tGetAclicProperties() const; voidGetBeepDefaults(Int_t& freq, I",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:3487,Availability,error,error,3487,"r* build_dir = """", UInt_t dirmode = 0); virtual char*ConcatFileName(const char* dir, const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual char*DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tDynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tExec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExit(int code, Bool_t mode = kTRUE); virtual voidExitLoop(); virtual Bool_tExpandPathName(TString& path); virtual char*ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeGetAclicMode() const; virtual Int_tGetAclicProperties() const; voidGetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*GetBuildArch() const; virtual const char*GetBuildCompiler() const; virtual const char*GetBuildCompilerVersion() const; virtual c",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:3571,Availability,error,error,3571," const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual char*DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tDynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tExec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExit(int code, Bool_t mode = kTRUE); virtual voidExitLoop(); virtual Bool_tExpandPathName(TString& path); virtual char*ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeGetAclicMode() const; virtual Int_tGetAclicProperties() const; voidGetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*GetBuildArch() const; virtual const char*GetBuildCompiler() const; virtual const char*GetBuildCompilerVersion() const; virtual const char*GetBuildDir() const; virtual const char*GetBuildNode() const; virtual intG",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:11737,Availability,mask,mask,11737,"oidRun(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelect(TList* active, Long_t timeout); virtual Int_tSelect(TFileHandler* fh, Long_t timeout); virtual intSendBuf(int sock, const void* buffer, int length); virtual intSendRaw(int sock, const void* buffer, int length, int flag); virtual voidSetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidSetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDynamicPath(const char* pathname); virtual voidSetenv(const char* name, const char* value); voidSetErrorStr(const char* errstr); virtual voidSetFlagsDebug(const char*); virtual voidSetFlagsOpt(const char*); virtual Int_tSetFPEMask(Int_t mask = kDefaultMask); virtual voidSetIncludePath(const char* includePath); virtual voidSetLinkdefSuffix(const char* suffix); virtual voidSetLinkedLibs(const char* linkedLibs); virtual voidSetMakeExe(const char* directives); virtual voidSetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetObjExt(const char* objExt); virtual voidSetProgname(const char* name); virtual intSetSockOpt(int sock, int kind, int val); virtual voidSetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidSleep(UInt_t milliSec); virtual TStringSplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; v",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:13227,Availability,mask,mask,13227,"nkedLibs); virtual voidSetMakeExe(const char* directives); virtual voidSetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetObjExt(const char* objExt); virtual voidSetProgname(const char* name); virtual intSetSockOpt(int sock, int kind, int val); virtual voidSetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidSleep(UInt_t milliSec); virtual TStringSplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidStackTrace(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual intSymlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidSyslog(ELogLevel level, const char* mess); virtual const char*TempDirectory() const; virtual FILE*TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual intUmask(Int_t mask); virtual const char*UnixPathName(const char* unixpathname); virtual intUnlink(const char* name); virtual voidUnload(const char* module); virtual voidUnsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intUtime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:16053,Availability,error,error,16053,"ilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be chec",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:16635,Availability,mask,mask,16635,"ingfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Ge",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:16673,Availability,mask,mask,16673,"ingfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Ge",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:16745,Availability,mask,masks,16745,"ingfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Ge",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:18007,Availability,error,error,18007,"_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:18121,Availability,error,error,18121," that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:18149,Availability,error,error,18149,"SeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t Pr",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:18279,Availability,error,error,18279,"ction*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the re",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:18344,Availability,error,error,18344,"tle; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the result of; TROOT::IsInterrupted(). The interrupt flag (TROOT:",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:18410,Availability,error,error,18410," should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the result of; TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); can be set during the handling of the events. T",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:22105,Availability,mask,mask,22105,"set is true reset the signal handler for the specified signal; to the default handler, else restore previous behaviour. void IgnoreSignal(ESignals sig, Bool_t ignore = kTRUE); If ignore is true ignore the specified signal, else restore previous; behaviour. void IgnoreInterrupt(Bool_t ignore = kTRUE); If ignore is true ignore the interrupt signal, else restore previous; behaviour. Typically call ignore interrupt before writing to disk. void AddStdExceptionHandler(TStdExceptionHandler* eh); Add an exception handler to list of system exception handlers. Only adds; the handler if it is not already in the list of exception handlers. TStdExceptionHandler * RemoveStdExceptionHandler(TStdExceptionHandler* eh); Remove an exception handler from list of exception handlers. Returns; the handler or 0 if the handler was not in the list of exception handlers. Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* command, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. TString GetFromPipe(const char* command); Execute command and return output in TString. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. TSystem * FindHelper(const char* path, void* dirptr = 0); Create helper TSystem to handle file and directory operations that; might be special for remote file access, like via rfiod or rootd. Bool_t ConsistentWith(const char* path, void* dirptr = 0); Check consistency of this helper with the one required; by 'path' or 'dirptr'. int MakeDirectory(const char* name); Make a directory. Returns 0 in case of success and; -1 if the directory could not be created (either alread",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:25451,Availability,error,error,25451,"st be deleted by the caller. const char * DirName(const char* pathname); Return the directory name in pathname. DirName of /user/root is /user.; In case no dirname is specified ""."" is returned. const char * UnixPathName(const char* unixpathname); Convert from a Unix pathname to a local pathname. E.g. from /user/root to \user\root. char * ConcatFileName(const char* dir, const char* name); Concatenate a directory and a file name. User must delete returned string. const char * PrependPathName(const char* dir, TString& name); Concatenate a directory and a file name. const char * ExpandFileName(const char* fname); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. This is a protected function called; from the OS specific system classes, like TUnixSystem and TWinNTSystem.; Returns the expanded filename or 0 in case of error. Bool_t ExpandPathName(TString& path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Retur",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:26780,Availability,failure,failure,26780,"tting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); Copy a file. If overwrite is true and file already exists the; file will be overwritten. Returns 0 when successful, -1 in case; of file open failure, -2 in case the file already exists and overwrite; was false and -3 in case of error during copy. int Rename(const char* from, const char* to); Rename a file. int Link(const char* from, const char* to); Create a link from file1 to file2. int Symlink(const char* from, const char* to); Create a symbolic link from file1 to file2. int Unlink(const char* name); Unlink, i.e. remove, a file. int GetPathInfo(const char* path, Long_t* id, Long_t* size, Long_t* flags, Long_t* modtime); Get info about a file: id, size, flags, modification time.; Id is (statbuf.st_dev << 24) + statbuf.st_ino; Size is the file size; Flags is file type: 0 is regular file, bit 0 set executable,; bit 1 set directory, bit 2 set special file; (socket, fifo, pipe, etc.); Modtime is modification time.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Get info about a file: id, size, flags, modification time.; Id ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:26867,Availability,error,error,26867,"tting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); Copy a file. If overwrite is true and file already exists the; file will be overwritten. Returns 0 when successful, -1 in case; of file open failure, -2 in case the file already exists and overwrite; was false and -3 in case of error during copy. int Rename(const char* from, const char* to); Rename a file. int Link(const char* from, const char* to); Create a link from file1 to file2. int Symlink(const char* from, const char* to); Create a symbolic link from file1 to file2. int Unlink(const char* name); Unlink, i.e. remove, a file. int GetPathInfo(const char* path, Long_t* id, Long_t* size, Long_t* flags, Long_t* modtime); Get info about a file: id, size, flags, modification time.; Id is (statbuf.st_dev << 24) + statbuf.st_ino; Size is the file size; Flags is file type: 0 is regular file, bit 0 set executable,; bit 1 set directory, bit 2 set special file; (socket, fifo, pipe, etc.); Modtime is modification time.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Get info about a file: id, size, flags, modification time.; Id ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:29051,Availability,error,error,29051," function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effec",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:29152,Availability,error,error,29152,"path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(cons",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:29188,Availability,mask,mask,29188,"s returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:29230,Availability,mask,mask,29230,"s returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:29428,Availability,error,error,29428,", Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t ui",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:30531,Availability,error,error,30531,"ion of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(cons",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:30763,Availability,error,error,30763,"e mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31030,Availability,error,error,31030," the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", Re",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31353,Availability,error,error,31353,"ile being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this fu",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:32733,Availability,error,error,32733,"cility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course o",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:33414,Availability,error,error,33414,"ly the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:34455,Availability,error,error,34455," case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service)",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:36993,Availability,error,error,36993,"e unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37170,Availability,error,error,37170,", void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if bu",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37421,Availability,error,error,37421,"ly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37580,Availability,error,error,37580,"gth indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The library is stored in a sub-directories; of 'build_dir' including the full pathn",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37908,Availability,error,error,37908," system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The library is stored in a sub-directories; of 'build_dir' including the full pathname of the script unless a flat; directory structure is requested ('-' option). With the '-' option the libraries; are created directly in the directory 'build_dir'; in particular this means that; 2 scripts with the same name in different source directory will over-write each; other's library.; ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:40994,Availability,avail,available,40994,"ynopsis:. The purpose of this addition is to allow the user to use an external; compiler to create a shared library from its C++ macro (scripts).; Currently in order to execute a script, a user has to type at the root; prompt. .X myfunc.C(arg1,arg2). We allow him to type:. .X myfunc.C++(arg1,arg2); or; .X myfunc.C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the function TSystem::SetMakeSharedLib(), the user will be able to; indicate, with shell commands, how to build a shared library (a good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been sele",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:41791,Availability,avail,available,41791,"unction TSystem::SetMakeSharedLib(), the user will be able to; indicate, with shell commands, how to build a shared library (a good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of ea",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:42082,Availability,avail,available,42082,":. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of each bit. const char * GetBuildArch() const; Return the build architecture. const char * GetBuildCompiler() const; Return the build compiler. const char * GetBuildCompilerVersion() const; Return the build compiler version. const char * GetBuildNode() const; Return the build node name. const char * GetBuildDir() const; Return the path of the build directory. const char ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:47433,Deployability,RELEASE,RELEASE,47433,"l be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt. e.g.:; gSystem->SetMakeSharedLib(; ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; --no_exceptions --signed_chars --display_error_number; --diag_suppress 68 -o $SharedLib"");. gSystem->setMakeSharedLib(; ""Cxx $IncludePath -c $SourceFile;; ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc"". gSystem->SetMakeSharedLib(; ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; -shared -o $SharedLib"");. gSystem->SetMakeSharedLib(; ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; -D_WINDOWS $IncludePath $SourceFile; /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLOGO; $LinkedLibs -entry:_DllMainCRTStartup@12 -dll /out:$SharedLib""). void AddIncludePath(const char* includePath); Add includePath to the already set include path. void AddLinkedLibs(const char* linkedLib); Add linkedLib to already set linked libs. void SetIncludePath(const char* includePath); IncludePath should contain the list of compiler flags to indicate where; to find user defined header files. It is used to expand $IncludePath in; the directives given to SetMakeSharedLib() and SetMakeExe(), e.g.:; gSystem->SetInclude(""-I$ROOTSYS/include -Imydirectory/include"");; the default value of IncludePath on Unix is:; ""-I$ROOTSYS/include ""; and on Windows:; ""/I%ROOTSYS%/include "". void SetLinkedLibs(const char* linkedLibs); LinkedLibs should contain the library directory and list of libraries; needed to recreate the current executable. It is used to expand $LinkedLibs; in the directives given to SetMakeSharedLib() and SetMakeExe(); T",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:329,Integrability,interface,interface,329,". TSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSystem. class TSystem: public TNamed. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); virtual~TSystem(); virtual voidAbort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intAcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode = kFileExists); virtual voidAddDynamicPath(const char* pathname); virtual voidAddFileHandler(TFileHandler* fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TCla",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:9082,Integrability,protocol,protocol,9082,"llpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intLink(const char* from, const char* to); virtual voidListLibraries(const char* regexp = """"); virtual voidListSymbols(const char* module, const char* re = """"); virtual intLoad(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual voidTNamed::ls(Option_t* option = """") const; virtual intMakeDirectory(const char* name); voidTObject::MayNotUse(const char* method) const; virtual intmkdir(const char* name, Bool_t recursive = kFALSE); virtual Long_tNextTimeOut(Bool_t mode); virtual Bool_tTObject::Notify(); virtual voidNotifyApplicationCreated(); virtual TTimeNow(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual intOpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); virtual void*OpenDirectory(const char* name); virtual voidOpenlog(const char* name, Int_t options, ELogFacility facility); virtual FILE*OpenPipe(const char* command, const char* mode); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual const char*PrependPathName(const char* dir, TString& name); virtual voidTNamed::Print(Option_t* option = """") const; virtual Bool_tProcessEvents(); const char*pwd(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual intRecvBuf(int sock, void* buffer, int length);",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:16059,Integrability,message,message,16059,"ilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be chec",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:17657,Integrability,interface,interface,17657," Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:17694,Integrability,interface,interface,17694,"gTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(In",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:17738,Integrability,interface,interface,17738,"dNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:18506,Integrability,interface,interface,18506,"ng. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the result of; TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); can be set during the handling of the events. This mechanism allows; macros running in tight calculating loops to be interrupte",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:19492,Integrability,depend,depending,19492,"should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the result of; TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); can be set during the handling of the events. This mechanism allows; macros running in tight calculating loops to be interrupted by some; GUI event (depending on the interval with which this method is; called). For example hitting ctrl-c in a canvas will set the; interrupt flag. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milli seconds. Int_t Select(TList* active, Long_t timeout); Select on active file descriptors (called by TMonitor). Int_t Select(TFileHandler* fh, Long_t timeout); Select on active file descriptors (called by TMonitor). TTime Now(); Get current time in milliseconds since 0:00 Jan 1 1995. void AddTimer(TTimer* t); Add timer to list of system timers. TTimer * RemoveTimer(TTimer* t); Remove timer from list of system timers. Returns removed timer or 0; if timer was not active. Long_t NextTimeOut(Bool_t mode); Time when next timer of mode (synchronous=kTRUE or; asynchronous=kFALSE) will time-out (in ms). void AddSignalHandler(TSignalHandler* sh); Add a signal handler to list of system signal handlers. Only adds; the handle",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31872,Integrability,message,message,31872,"ure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:35168,Integrability,Protocol,Protocol,35168,"y. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service); Get port # of internet service. char * GetServiceByPort(int port); Get name of internet service. int OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); Open a connection to another host. int AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); Announce TCP/IP service. int AnnounceUdpService(int port, int backlog); Announce UDP service. int AnnounceUnixService(int port, int backlog); Announce unix domain service. int AnnounceUnixService(const char* sockpath, int backlog); Announce unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int R",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:35248,Integrability,Protocol,Protocol,35248,"ildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service); Get port # of internet service. char * GetServiceByPort(int port); Get name of internet service. int OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); Open a connection to another host. int AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); Announce TCP/IP service. int AnnounceUdpService(int port, int backlog); Announce UDP service. int AnnounceUnixService(int port, int backlog); Announce unix domain service. int AnnounceUnixService(const char* sockpath, int backlog); Announce unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer.",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:35346,Integrability,Protocol,Protocol,35346," shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service); Get port # of internet service. char * GetServiceByPort(int port); Get name of internet service. int OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); Open a connection to another host. int AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); Announce TCP/IP service. int AnnounceUdpService(int port, int backlog); Announce UDP service. int AnnounceUnixService(int port, int backlog); Announce unix domain service. int AnnounceUnixService(const char* sockpath, int backlog); Announce unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket).",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:35613,Integrability,protocol,protocol,35613," loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service); Get port # of internet service. char * GetServiceByPort(int port); Get name of internet service. int OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); Open a connection to another host. int AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); Announce TCP/IP service. int AnnounceUdpService(int port, int backlog); Announce UDP service. int AnnounceUnixService(int port, int backlog); Announce unix domain service. int AnnounceUnixService(const char* sockpath, int backlog); Announce unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int S",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:46512,Integrability,depend,depends,46512,"ate an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt. e.g.:; gSystem->SetMakeSharedLib(; ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; --no_exceptions --signed_chars --display_error_number; --diag_suppress 68 -o $SharedLib"");. gSystem->setMakeSharedLib(; ""Cxx $IncludePath -c $SourceFile;; ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc"". gSystem->SetMakeSharedLib(; ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; -shared -o $SharedLib"");. gSystem->SetMakeSharedLib(; ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:7660,Modifiability,Inherit,InheritsFrom,7660,"tProcInfo(ProcInfo_t* info) const; virtual intGetServiceByName(const char* service); virtual char*GetServiceByPort(int port); virtual TInetAddressGetSockName(int sock); virtual intGetSockOpt(int sock, int kind, int* val); virtual const char*GetSoExt() const; virtual intGetSysInfo(SysInfo_t* info) const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetUid(const char* user = 0); virtual UInt_tTObject::GetUniqueID() const; virtual UserGroup_t*GetUserInfo(Int_t uid); virtual UserGroup_t*GetUserInfo(const char* user = 0); virtual TList*GetVolumes(Option_t*) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual const char*HomeDirectory(const char* userName = 0); virtual const char*HostName(); virtual voidIgnoreInterrupt(Bool_t ignore = kTRUE); virtual voidIgnoreSignal(ESignals sig, Bool_t ignore = kTRUE); Bool_tInControl() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tInit(); virtual voidInnerLoop(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsAbsoluteFileName(const char* dir); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFileInIncludePath(const char* name, char** fullpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intLink(const char* from, const char* to); virtual voidListLibraries(const char* regexp = """"); virtual voidListSymbols(const char* module, const char* re = """"); virtual intLoad(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual voidTNamed::ls(Option_t* option = """") const; virtual intMakeDirectory(const char* name); voidTObject::MayNotUse(",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:7726,Modifiability,Inherit,InheritsFrom,7726,"st char* service); virtual char*GetServiceByPort(int port); virtual TInetAddressGetSockName(int sock); virtual intGetSockOpt(int sock, int kind, int* val); virtual const char*GetSoExt() const; virtual intGetSysInfo(SysInfo_t* info) const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetUid(const char* user = 0); virtual UInt_tTObject::GetUniqueID() const; virtual UserGroup_t*GetUserInfo(Int_t uid); virtual UserGroup_t*GetUserInfo(const char* user = 0); virtual TList*GetVolumes(Option_t*) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual const char*HomeDirectory(const char* userName = 0); virtual const char*HostName(); virtual voidIgnoreInterrupt(Bool_t ignore = kTRUE); virtual voidIgnoreSignal(ESignals sig, Bool_t ignore = kTRUE); Bool_tInControl() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tInit(); virtual voidInnerLoop(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsAbsoluteFileName(const char* dir); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFileInIncludePath(const char* name, char** fullpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intLink(const char* from, const char* to); virtual voidListLibraries(const char* regexp = """"); virtual voidListSymbols(const char* module, const char* re = """"); virtual intLoad(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual voidTNamed::ls(Option_t* option = """") const; virtual intMakeDirectory(const char* name); voidTObject::MayNotUse(const char* method) const; virtual intmkdir(const char* name, Bool",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:15158,Modifiability,config,configure,15158,"Libraries(); voidTObject::MakeZombie(); virtual voidSigAlarmInterruptsSyscalls(Bool_t); static const char*StripOffProto(const char* path, const char* proto). private:. TSystem(const TSystem&); TSystem&operator=(const TSystem&). Data Members; public:. enum EAclicMode { kDefault; kDebug; kOpt; };; enum EAclicProperties { kFlatBuildDir; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSystem::EAclicModefAclicModeWhether the compilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives g",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:17487,Modifiability,Inherit,Inheritance,17487,"used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interfa",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:17500,Modifiability,Inherit,Inherited,17500,"used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interfa",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:17909,Modifiability,variab,variable,17909,"at should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectivel",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:25201,Modifiability,variab,variables,25201,"at can be found in the ROOT include; path or the current directory.; If 'name' contains any ACLiC style information (e.g. trailing +[+][g|O]),; it will be striped off 'name'.; If fullpath is != 0, the full path to the file is returned in *fullpath,; which must be deleted by the caller. const char * DirName(const char* pathname); Return the directory name in pathname. DirName of /user/root is /user.; In case no dirname is specified ""."" is returned. const char * UnixPathName(const char* unixpathname); Convert from a Unix pathname to a local pathname. E.g. from /user/root to \user\root. char * ConcatFileName(const char* dir, const char* name); Concatenate a directory and a file name. User must delete returned string. const char * PrependPathName(const char* dir, TString& name); Concatenate a directory and a file name. const char * ExpandFileName(const char* fname); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. This is a protected function called; from the OS specific system classes, like TUnixSystem and TWinNTSystem.; Returns the expanded filename or 0 in case of error. Bool_t ExpandPathName(TString& path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can a",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:25651,Modifiability,variab,variables,25651,". const char * UnixPathName(const char* unixpathname); Convert from a Unix pathname to a local pathname. E.g. from /user/root to \user\root. char * ConcatFileName(const char* dir, const char* name); Concatenate a directory and a file name. User must delete returned string. const char * PrependPathName(const char* dir, TString& name); Concatenate a directory and a file name. const char * ExpandFileName(const char* fname); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. This is a protected function called; from the OS specific system classes, like TUnixSystem and TWinNTSystem.; Returns the expanded filename or 0 in case of error. Bool_t ExpandPathName(TString& path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t over",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:25941,Modifiability,variab,variables,25941,"pendPathName(const char* dir, TString& name); Concatenate a directory and a file name. const char * ExpandFileName(const char* fname); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. This is a protected function called; from the OS specific system classes, like TUnixSystem and TWinNTSystem.; Returns the expanded filename or 0 in case of error. Bool_t ExpandPathName(TString& path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); Copy a file. If overwrite is true and file already exists the; file will be overwritten. Returns 0 when successful, -1 in case; of file open failure, -2 in case the file already exists and overwrite; was false and -3 in case of error during copy. int Rename(const char* fro",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:28588,Modifiability,config,configured,28588," of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Get info about a file: id, size, flags, modification time.; Id is (statbuf.st_dev << 24) + statbuf.st_ino; Size is the file size; Flags is file type: 0 is regular file, bit 0 set executable,; bit 1 set directory, bit 2 set special file; (socket, fifo, pipe, etc.); Modtime is modification time.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31440,Modifiability,variab,variable,31440,"d); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a stati",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31501,Modifiability,variab,variable,31501,"; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31565,Modifiability,variab,variable,31565,"returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:39754,Modifiability,variab,variables,39754,"hat; 2 scripts with the same name in different source directory will over-write each; other's library.; See also TSystem::SetBuildDir. If dirmode is not zero and we need to create the target directory, the; file mode bit will be change to 'dirmode' using chmod. If library_specified is not specified, CompileMacro generate a default name; for library by taking the name of the file ""filename"" but replacing the; dot before the extension by an underscore and by adding the shared; library extension for the current platform.; For example on most platform, hsimple.cxx will generate hsimple_cxx.so. It uses the directive fMakeSharedLibs to create a shared library.; If loading the shared library fails, it tries to output a list of missing; symbols by creating an executable (on some platforms like OSF, this does; not HAVE to be an executable) containing the script. It uses the; directive fMakeExe to do so.; For both directives, before passing them to TSystem::Exec, it expands the; variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; information on those variables. This method is used to implement the following feature:. Synopsis:. The purpose of this addition is to allow the user to use an external; compiler to create a shared library from its C++ macro (scripts).; Currently in order to execute a script, a user has to type at the root; prompt. .X myfunc.C(arg1,arg2). We allow him to type:. .X myfunc.C++(arg1,arg2); or; .X myfunc.C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the functi",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:39919,Modifiability,variab,variables,39919,"uildDir. If dirmode is not zero and we need to create the target directory, the; file mode bit will be change to 'dirmode' using chmod. If library_specified is not specified, CompileMacro generate a default name; for library by taking the name of the file ""filename"" but replacing the; dot before the extension by an underscore and by adding the shared; library extension for the current platform.; For example on most platform, hsimple.cxx will generate hsimple_cxx.so. It uses the directive fMakeSharedLibs to create a shared library.; If loading the shared library fails, it tries to output a list of missing; symbols by creating an executable (on some platforms like OSF, this does; not HAVE to be an executable) containing the script. It uses the; directive fMakeExe to do so.; For both directives, before passing them to TSystem::Exec, it expands the; variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; information on those variables. This method is used to implement the following feature:. Synopsis:. The purpose of this addition is to allow the user to use an external; compiler to create a shared library from its C++ macro (scripts).; Currently in order to execute a script, a user has to type at the root; prompt. .X myfunc.C(arg1,arg2). We allow him to type:. .X myfunc.C++(arg1,arg2); or; .X myfunc.C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the function TSystem::SetMakeSharedLib(), the user will be able to; indicate, with shell commands, how to build a shared library (a good",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:42279,Modifiability,variab,variables,42279,"es try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of each bit. const char * GetBuildArch() const; Return the build architecture. const char * GetBuildCompiler() const; Return the build compiler. const char * GetBuildCompilerVersion() const; Return the build compiler version. const char * GetBuildNode() const; Return the build node name. const char * GetBuildDir() const; Return the path of the build directory. const char * GetFlagsDebug() const; Return the debug flags. const char * GetFlagsOpt() const; Return the optimization flags. const char * GetMakeSh",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:45493,Modifiability,variab,variable,45493," Note that in this; mode there is a risk than 2 script of the same in different source; directory will over-write each other. void SetFlagsDebug(const char* ); FlagsDebug should contain the options to pass to the C++ compiler; in order to compile the library in debug mode. void SetFlagsOpt(const char* ); FlagsOpt should contain the options to pass to the C++ compiler; in order to compile the library in optimized mode. void SetAclicMode(TSystem::EAclicMode mode); AclicMode indicates whether the library should be built in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this libra",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:46031,Modifiability,variab,variables,46031,"ilt in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt. e.g.:; gSystem->SetMakeSharedLib(; ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; --no_exceptions --signed_chars --display_error_number; --diag_suppress 68 -o $SharedLib"");. gSystem->setMakeSharedLib(; ""Cxx $IncludePath -c $SourceFile;; ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; \$Opt -shared",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:46096,Modifiability,variab,variables,46096,"ate an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt. e.g.:; gSystem->SetMakeSharedLib(; ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; --no_exceptions --signed_chars --display_error_number; --diag_suppress 68 -o $SharedLib"");. gSystem->setMakeSharedLib(; ""Cxx $IncludePath -c $SourceFile;; ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc"". gSystem->SetMakeSharedLib(; ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; -shared -o $SharedLib"");. gSystem->SetMakeSharedLib(; ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:46142,Modifiability,Variab,Variable,46142,"ate an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt. e.g.:; gSystem->SetMakeSharedLib(; ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; --no_exceptions --signed_chars --display_error_number; --diag_suppress 68 -o $SharedLib"");. gSystem->setMakeSharedLib(; ""Cxx $IncludePath -c $SourceFile;; ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc"". gSystem->SetMakeSharedLib(; ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; -shared -o $SharedLib"");. gSystem->SetMakeSharedLib(; ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:48422,Modifiability,config,config,48422,"ncludePath $SourceFile; /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLOGO; $LinkedLibs -entry:_DllMainCRTStartup@12 -dll /out:$SharedLib""). void AddIncludePath(const char* includePath); Add includePath to the already set include path. void AddLinkedLibs(const char* linkedLib); Add linkedLib to already set linked libs. void SetIncludePath(const char* includePath); IncludePath should contain the list of compiler flags to indicate where; to find user defined header files. It is used to expand $IncludePath in; the directives given to SetMakeSharedLib() and SetMakeExe(), e.g.:; gSystem->SetInclude(""-I$ROOTSYS/include -Imydirectory/include"");; the default value of IncludePath on Unix is:; ""-I$ROOTSYS/include ""; and on Windows:; ""/I%ROOTSYS%/include "". void SetLinkedLibs(const char* linkedLibs); LinkedLibs should contain the library directory and list of libraries; needed to recreate the current executable. It is used to expand $LinkedLibs; in the directives given to SetMakeSharedLib() and SetMakeExe(); The default value on Unix is: root-config --glibs. void SetLinkdefSuffix(const char* suffix); The 'suffix' will be appended to the name of a script loaded by ACLiC; and used to locate any eventual additional linkdef information that; ACLiC should used to produce the dictionary.; So by default, when doing .L MyScript.cxx, ACLiC will look; for a file name MyScript_linkdef and having one of the .h (.hpp,; etc.) extensions. If such a file exist, it will be added to; the end of the linkdef file used to created the ACLiC dictionary.; This effectively enable the full customization of the creation; of the dictionary. It should be noted that the file is intended; as a linkdef 'fragment', so usually you would not list the; typical '#pragma link off ...."". void SetSoExt(const char* soExt); Set shared library extension, should be either .so, .sl, .a, .dll, etc. void SetObjExt(const char* objExt); Set object files extension, should be either .o, .obj, etc. TString SplitAclic",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:15694,Performance,optimiz,optimized,15694,"ilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be chec",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:16349,Performance,cache,cache,16349,"ilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be chec",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:16457,Performance,Cache,Cache,16457,"ingfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdSet*fReadready!Files with reads waiting; Int_tfSigcntNumber of pending signals; TSeqCollection*fSignalHandlerList of signal handlers; TFdSet*fSignals!Signals that were trapped; TStringfSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*fStdExceptionHandlerList of std::exception handlers; TSeqCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Ge",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:33204,Performance,Load,Load,33204," be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wild",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:33278,Performance,Load,Load,33278," be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wild",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:33325,Performance,load,loading,33325,"ly the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:33361,Performance,load,loaded,33361,"ly the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:33485,Performance,load,loaded,33485,"illed with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:34209,Performance,load,loaded,34209,"value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of h",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:34359,Performance,load,loaded,34359,"lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:34597,Performance,load,loaded,34597,"when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service); Get port # of internet service. char * GetServiceByPort(int port); Get name of internet service. int OpenConne",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:34827,Performance,load,loaded,34827,"unc_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service); Get port # of internet service. char * GetServiceByPort(int port); Get name of internet service. int OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); Open a connection to another host. int AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); Announce TCP/IP service. int AnnounceUdpService(int port, int backlog); Announce UDP service. i",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:34946,Performance,load,loaded,34946,"brary. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service); Get port # of internet service. char * GetServiceByPort(int port); Get name of internet service. int OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); Open a connection to another host. int AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); Announce TCP/IP service. int AnnounceUdpService(int port, int backlog); Announce UDP service. int AnnounceUnixService(int port, int backlog); Announce unix domain service. int AnnounceUnixService(",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37090,Performance,load,load,37090,"nnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignor",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37107,Performance,load,load,37107,"nnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignor",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37245,Performance,load,load,37245," buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_spec",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:37764,Performance,load,loads,37764,"int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The library is stored in a sub-directories; of 'build_dir' including the full pathname of the script unless a flat; directory structure is requested ('-' option). With the '-' option the libraries; are created directly in",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:38055,Performance,optimiz,optimized,38055,"pu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The library is stored in a sub-directories; of 'build_dir' including the full pathname of the script unless a flat; directory structure is requested ('-' option). With the '-' option the libraries; are created directly in the directory 'build_dir'; in particular this means that; 2 scripts with the same name in different source directory will over-write each; other's library.; See also TSystem::SetBuildDir. If dirmode is not zero and we need to create the target directory, the; file mode bit will be change to 'dirmode' using chmod. If library_specified is not specified, CompileMacro gene",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:38140,Performance,load,load,38140,"pu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The library is stored in a sub-directories; of 'build_dir' including the full pathname of the script unless a flat; directory structure is requested ('-' option). With the '-' option the libraries; are created directly in the directory 'build_dir'; in particular this means that; 2 scripts with the same name in different source directory will over-write each; other's library.; See also TSystem::SetBuildDir. If dirmode is not zero and we need to create the target directory, the; file mode bit will be change to 'dirmode' using chmod. If library_specified is not specified, CompileMacro gene",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:39437,Performance,load,loading,39437,"ries; of 'build_dir' including the full pathname of the script unless a flat; directory structure is requested ('-' option). With the '-' option the libraries; are created directly in the directory 'build_dir'; in particular this means that; 2 scripts with the same name in different source directory will over-write each; other's library.; See also TSystem::SetBuildDir. If dirmode is not zero and we need to create the target directory, the; file mode bit will be change to 'dirmode' using chmod. If library_specified is not specified, CompileMacro generate a default name; for library by taking the name of the file ""filename"" but replacing the; dot before the extension by an underscore and by adding the shared; library extension for the current platform.; For example on most platform, hsimple.cxx will generate hsimple_cxx.so. It uses the directive fMakeSharedLibs to create a shared library.; If loading the shared library fails, it tries to output a list of missing; symbols by creating an executable (on some platforms like OSF, this does; not HAVE to be an executable) containing the script. It uses the; directive fMakeExe to do so.; For both directives, before passing them to TSystem::Exec, it expands the; variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; information on those variables. This method is used to implement the following feature:. Synopsis:. The purpose of this addition is to allow the user to use an external; compiler to create a shared library from its C++ macro (scripts).; Currently in order to execute a script, a user has to type at the root; prompt. .X myfunc.C(arg1,arg2). We allow him to type:. .X myfunc.C++(arg1,arg2); or; .X myfunc.C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is a",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:40429,Performance,load,loaded,40429,"e shared library fails, it tries to output a list of missing; symbols by creating an executable (on some platforms like OSF, this does; not HAVE to be an executable) containing the script. It uses the; directive fMakeExe to do so.; For both directives, before passing them to TSystem::Exec, it expands the; variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; information on those variables. This method is used to implement the following feature:. Synopsis:. The purpose of this addition is to allow the user to use an external; compiler to create a shared library from its C++ macro (scripts).; Currently in order to execute a script, a user has to type at the root; prompt. .X myfunc.C(arg1,arg2). We allow him to type:. .X myfunc.C++(arg1,arg2); or; .X myfunc.C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the function TSystem::SetMakeSharedLib(), the user will be able to; indicate, with shell commands, how to build a shared library (a good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the l",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:41313,Performance,load,loaded,41313,"C+(arg1,arg2). In which case an external compiler will be called to create a shared; library. This shared library will then be loaded and the function; myfunc will be called with the two arguments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the function TSystem::SetMakeSharedLib(), the user will be able to; indicate, with shell commands, how to build a shared library (a good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:41446,Performance,load,loading,41446,"ments. With '++' the shared library; is always recompiled. With '+' the shared library is recompiled only; if it does not exist yet or the macro file is newer than the shared; library. Of course the + and ++ notation is supported in similar way for .x and .L. Through the function TSystem::SetMakeSharedLib(), the user will be able to; indicate, with shell commands, how to build a shared library (a good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:41737,Performance,load,loader,41737,"unction TSystem::SetMakeSharedLib(), the user will be able to; indicate, with shell commands, how to build a shared library (a good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of ea",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:41853,Performance,load,loaded,41853,"icate, with shell commands, how to build a shared library (a good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of each bit. const char * GetBuildArch() const; Return the build archit",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:41879,Performance,Load,Load,41879,"good; default will be provided). The most common change, namely where to find; header files, will be available through the function; TSystem::SetIncludePath().; A good default will be provided so that a typical user session should be at; most:. root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of each bit. const char * GetBuildArch() const; Return the build architecture. const char * GetBuildCompiler() const; Return the bui",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:43230,Performance,optimiz,optimization,43230,"ustomization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of each bit. const char * GetBuildArch() const; Return the build architecture. const char * GetBuildCompiler() const; Return the build compiler. const char * GetBuildCompilerVersion() const; Return the build compiler version. const char * GetBuildNode() const; Return the build node name. const char * GetBuildDir() const; Return the path of the build directory. const char * GetFlagsDebug() const; Return the debug flags. const char * GetFlagsOpt() const; Return the optimization flags. const char * GetMakeSharedLib() const; Return the command line use to make a shared library.; See TSystem::CompileMacro for more details. const char * GetMakeExe() const; Return the command line use to make an executable.; See TSystem::CompileMacro for more details. const char * GetIncludePath(); Get the list of include path. const char * GetLinkedLibs() const; Return the list of library linked to this executable.; See TSystem::CompileMacro for more details. const char * GetLinkdefSuffix() const; Return the linkdef suffix chosen by the user for ACLiC.; See TSystem::CompileMacro for more details. const char * GetSoExt() const; Get the shared library extension. const char * GetObjExt() const; Get the object file extension. void SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); Set the location where ACLiC will create libraries and use as; a scratch area.; If isflast is flase, then the libraries are actually stored in; sub-directories of 'build_d",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:44915,Performance,optimiz,optimized,44915,"st char * GetSoExt() const; Get the shared library extension. const char * GetObjExt() const; Get the object file extension. void SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); Set the location where ACLiC will create libraries and use as; a scratch area.; If isflast is flase, then the libraries are actually stored in; sub-directories of 'build_dir' including the full pathname of the; script. If the script is location at /full/path/name/macro.C; the library will be located at 'build_dir+/full/path/name/macro_C.so'; If 'isflat' is true, then no subdirectory is created and the library; is created directly in the directory 'build_dir'. Note that in this; mode there is a risk than 2 script of the same in different source; directory will over-write each other. void SetFlagsDebug(const char* ); FlagsDebug should contain the options to pass to the C++ compiler; in order to compile the library in debug mode. void SetFlagsOpt(const char* ); FlagsOpt should contain the options to pass to the C++ compiler; in order to compile the library in optimized mode. void SetAclicMode(TSystem::EAclicMode mode); AclicMode indicates whether the library should be built in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell comm",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:45050,Performance,optimiz,optimized,45050,"ir(const char* build_dir, Bool_t isflat = kFALSE); Set the location where ACLiC will create libraries and use as; a scratch area.; If isflast is flase, then the libraries are actually stored in; sub-directories of 'build_dir' including the full pathname of the; script. If the script is location at /full/path/name/macro.C; the library will be located at 'build_dir+/full/path/name/macro_C.so'; If 'isflat' is true, then no subdirectory is created and the library; is created directly in the directory 'build_dir'. Note that in this; mode there is a risk than 2 script of the same in different source; directory will over-write each other. void SetFlagsDebug(const char* ); FlagsDebug should contain the options to pass to the C++ compiler; in order to compile the library in debug mode. void SetFlagsOpt(const char* ); FlagsOpt should contain the options to pass to the C++ compiler; in order to compile the library in optimized mode. void SetAclicMode(TSystem::EAclicMode mode); AclicMode indicates whether the library should be built in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this d",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:45194,Performance,optimiz,optimized,45194,"s flase, then the libraries are actually stored in; sub-directories of 'build_dir' including the full pathname of the; script. If the script is location at /full/path/name/macro.C; the library will be located at 'build_dir+/full/path/name/macro_C.so'; If 'isflat' is true, then no subdirectory is created and the library; is created directly in the directory 'build_dir'. Note that in this; mode there is a risk than 2 script of the same in different source; directory will over-write each other. void SetFlagsDebug(const char* ); FlagsDebug should contain the options to pass to the C++ compiler; in order to compile the library in debug mode. void SetFlagsOpt(const char* ); FlagsOpt should contain the options to pass to the C++ compiler; in order to compile the library in optimized mode. void SetAclicMode(TSystem::EAclicMode mode); AclicMode indicates whether the library should be built in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before executio",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:45442,Performance,load,loading,45442,"ubdirectory is created and the library; is created directly in the directory 'build_dir'. Note that in this; mode there is a risk than 2 script of the same in different source; directory will over-write each other. void SetFlagsDebug(const char* ); FlagsDebug should contain the options to pass to the C++ compiler; in order to compile the library in debug mode. void SetFlagsOpt(const char* ); FlagsOpt should contain the options to pass to the C++ compiler; in order to compile the library in optimized mode. void SetAclicMode(TSystem::EAclicMode mode); AclicMode indicates whether the library should be built in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:46639,Performance,optimiz,optimization,46639,"11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt. e.g.:; gSystem->SetMakeSharedLib(; ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; --no_exceptions --signed_chars --display_error_number; --diag_suppress 68 -o $SharedLib"");. gSystem->setMakeSharedLib(; ""Cxx $IncludePath -c $SourceFile;; ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc"". gSystem->SetMakeSharedLib(; ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; -shared -o $SharedLib"");. gSystem->SetMakeSharedLib(; ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; -D_WINDOWS $IncludePath $SourceFile; /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLOGO; $LinkedLibs -entry:_DllMainCRTStartup@12 -dll /out:$SharedLib""). void AddIncludePath(const char* includePath); Add includePath to the already set include path. void AddLinkedLibs(const char* linkedLib); Ad",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:48535,Performance,load,loaded,48535,"udePath); Add includePath to the already set include path. void AddLinkedLibs(const char* linkedLib); Add linkedLib to already set linked libs. void SetIncludePath(const char* includePath); IncludePath should contain the list of compiler flags to indicate where; to find user defined header files. It is used to expand $IncludePath in; the directives given to SetMakeSharedLib() and SetMakeExe(), e.g.:; gSystem->SetInclude(""-I$ROOTSYS/include -Imydirectory/include"");; the default value of IncludePath on Unix is:; ""-I$ROOTSYS/include ""; and on Windows:; ""/I%ROOTSYS%/include "". void SetLinkedLibs(const char* linkedLibs); LinkedLibs should contain the library directory and list of libraries; needed to recreate the current executable. It is used to expand $LinkedLibs; in the directives given to SetMakeSharedLib() and SetMakeExe(); The default value on Unix is: root-config --glibs. void SetLinkdefSuffix(const char* suffix); The 'suffix' will be appended to the name of a script loaded by ACLiC; and used to locate any eventual additional linkdef information that; ACLiC should used to produce the dictionary.; So by default, when doing .L MyScript.cxx, ACLiC will look; for a file name MyScript_linkdef and having one of the .h (.hpp,; etc.) extensions. If such a file exist, it will be added to; the end of the linkdef file used to created the ACLiC dictionary.; This effectively enable the full customization of the creation; of the dictionary. It should be noted that the file is intended; as a linkdef 'fragment', so usually you would not list the; typical '#pragma link off ...."". void SetSoExt(const char* soExt); Set shared library extension, should be either .so, .sl, .a, .dll, etc. void SetObjExt(const char* objExt); Set object files extension, should be either .o, .obj, etc. TString SplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; This method split a filename of the form:; [path/]macro.C[+|++[g|O]][(args)].; It stores the ACliC mode [+|++[g",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:10954,Safety,timeout,timeout,10954,"ad(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual intRecvBuf(int sock, void* buffer, int length); virtual intRecvRaw(int sock, void* buffer, int length, int flag); virtual Int_tRedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); virtual TFileHandler*RemoveFileHandler(TFileHandler* fh); voidRemoveOnExit(TObject* obj); virtual TSignalHandler*RemoveSignalHandler(TSignalHandler* sh); virtual TStdExceptionHandler*RemoveStdExceptionHandler(TStdExceptionHandler* eh); virtual TTimer*RemoveTimer(TTimer* t); virtual intRename(const char* from, const char* to); voidTObject::ResetBit(UInt_t f); static voidResetErrno(); virtual voidResetSignal(ESignals sig, Bool_t reset = kTRUE); virtual voidResetTimer(TTimer*); virtual voidRun(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelect(TList* active, Long_t timeout); virtual Int_tSelect(TFileHandler* fh, Long_t timeout); virtual intSendBuf(int sock, const void* buffer, int length); virtual intSendRaw(int sock, const void* buffer, int length, int flag); virtual voidSetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidSetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDynamicPath(const char* pathname); virtual voidSetenv(const char* name, const char* value); voidSetErrorStr(const char* errstr); virtual voidSetFlagsDebug(const char*); virtual voidSetFlagsOpt(const char*); virtual Int_tSetFPEMask(Int_t mask = kDefaultMask); virtual voidSetIncludePath(const char* includePath); virtual voidSetLinkdefSuffix(const char* suffix); virtual voidSetLinkedLibs(const char* linkedLibs); virtual voidSetMakeExe(const char* directives",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:11009,Safety,timeout,timeout,11009,"ove(TObject* obj); virtual intRecvBuf(int sock, void* buffer, int length); virtual intRecvRaw(int sock, void* buffer, int length, int flag); virtual Int_tRedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); virtual TFileHandler*RemoveFileHandler(TFileHandler* fh); voidRemoveOnExit(TObject* obj); virtual TSignalHandler*RemoveSignalHandler(TSignalHandler* sh); virtual TStdExceptionHandler*RemoveStdExceptionHandler(TStdExceptionHandler* eh); virtual TTimer*RemoveTimer(TTimer* t); virtual intRename(const char* from, const char* to); voidTObject::ResetBit(UInt_t f); static voidResetErrno(); virtual voidResetSignal(ESignals sig, Bool_t reset = kTRUE); virtual voidResetTimer(TTimer*); virtual voidRun(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelect(TList* active, Long_t timeout); virtual Int_tSelect(TFileHandler* fh, Long_t timeout); virtual intSendBuf(int sock, const void* buffer, int length); virtual intSendRaw(int sock, const void* buffer, int length, int flag); virtual voidSetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidSetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDynamicPath(const char* pathname); virtual voidSetenv(const char* name, const char* value); voidSetErrorStr(const char* errstr); virtual voidSetFlagsDebug(const char*); virtual voidSetFlagsOpt(const char*); virtual Int_tSetFPEMask(Int_t mask = kDefaultMask); virtual voidSetIncludePath(const char* includePath); virtual voidSetLinkdefSuffix(const char* suffix); virtual voidSetLinkedLibs(const char* linkedLibs); virtual voidSetMakeExe(const char* directives); virtual voidSetMakeSharedLib(const char* directives)",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:19794,Safety,timeout,timeout,19794,"eq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the result of; TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); can be set during the handling of the events. This mechanism allows; macros running in tight calculating loops to be interrupted by some; GUI event (depending on the interval with which this method is; called). For example hitting ctrl-c in a canvas will set the; interrupt flag. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milli seconds. Int_t Select(TList* active, Long_t timeout); Select on active file descriptors (called by TMonitor). Int_t Select(TFileHandler* fh, Long_t timeout); Select on active file descriptors (called by TMonitor). TTime Now(); Get current time in milliseconds since 0:00 Jan 1 1995. void AddTimer(TTimer* t); Add timer to list of system timers. TTimer * RemoveTimer(TTimer* t); Remove timer from list of system timers. Returns removed timer or 0; if timer was not active. Long_t NextTimeOut(Bool_t mode); Time when next timer of mode (synchronous=kTRUE or; asynchronous=kFALSE) will time-out (in ms). void AddSignalHandler(TSignalHandler* sh); Add a signal handler to list of system signal handlers. Only adds; the handler if it is not already in the list of signal handlers. TSignalHandler * RemoveSignalHandler(TSignalHandler* sh); Remove a signal handler from list of signal handlers. Returns; the handler or 0 if the handler was not in the list of signal handlers. void AddFileHandler(TFileHandler* fh); Add a file handler to the list of system file handl",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:19898,Safety,timeout,timeout,19898,"fault value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the result of; TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); can be set during the handling of the events. This mechanism allows; macros running in tight calculating loops to be interrupted by some; GUI event (depending on the interval with which this method is; called). For example hitting ctrl-c in a canvas will set the; interrupt flag. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milli seconds. Int_t Select(TList* active, Long_t timeout); Select on active file descriptors (called by TMonitor). Int_t Select(TFileHandler* fh, Long_t timeout); Select on active file descriptors (called by TMonitor). TTime Now(); Get current time in milliseconds since 0:00 Jan 1 1995. void AddTimer(TTimer* t); Add timer to list of system timers. TTimer * RemoveTimer(TTimer* t); Remove timer from list of system timers. Returns removed timer or 0; if timer was not active. Long_t NextTimeOut(Bool_t mode); Time when next timer of mode (synchronous=kTRUE or; asynchronous=kFALSE) will time-out (in ms). void AddSignalHandler(TSignalHandler* sh); Add a signal handler to list of system signal handlers. Only adds; the handler if it is not already in the list of signal handlers. TSignalHandler * RemoveSignalHandler(TSignalHandler* sh); Remove a signal handler from list of signal handlers. Returns; the handler or 0 if the handler was not in the list of signal handlers. void AddFileHandler(TFileHandler* fh); Add a file handler to the list of system file handlers. Only adds; the handler if it is not already in the list of file handlers. TFileHandler * RemoveFi",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:22574,Safety,Abort,Abort,22574,"andler(TStdExceptionHandler* eh); Add an exception handler to list of system exception handlers. Only adds; the handler if it is not already in the list of exception handlers. TStdExceptionHandler * RemoveStdExceptionHandler(TStdExceptionHandler* eh); Remove an exception handler from list of exception handlers. Returns; the handler or 0 if the handler was not in the list of exception handlers. Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* command, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. TString GetFromPipe(const char* command); Execute command and return output in TString. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. TSystem * FindHelper(const char* path, void* dirptr = 0); Create helper TSystem to handle file and directory operations that; might be special for remote file access, like via rfiod or rootd. Bool_t ConsistentWith(const char* path, void* dirptr = 0); Check consistency of this helper with the one required; by 'path' or 'dirptr'. int MakeDirectory(const char* name); Make a directory. Returns 0 in case of success and; -1 if the directory could not be created (either already exists or; illegal path name). void * OpenDirectory(const char* name); Open a directory. Returns 0 if directory does not exist. void FreeDirectory(void* dirp); Free a directory. const char * GetDirEntry(void* dirp); Get a directory entry. Returns 0 if no more entries. Bool_t ChangeDirectory(const char* path); Change directory. const char * WorkingDirectory(); Return working directory. const char * HomeDirectory(const char* userName = 0); Return the user's",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:22595,Safety,Abort,Abort,22595,"andler(TStdExceptionHandler* eh); Add an exception handler to list of system exception handlers. Only adds; the handler if it is not already in the list of exception handlers. TStdExceptionHandler * RemoveStdExceptionHandler(TStdExceptionHandler* eh); Remove an exception handler from list of exception handlers. Returns; the handler or 0 if the handler was not in the list of exception handlers. Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* command, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. TString GetFromPipe(const char* command); Execute command and return output in TString. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. TSystem * FindHelper(const char* path, void* dirptr = 0); Create helper TSystem to handle file and directory operations that; might be special for remote file access, like via rfiod or rootd. Bool_t ConsistentWith(const char* path, void* dirptr = 0); Check consistency of this helper with the one required; by 'path' or 'dirptr'. int MakeDirectory(const char* name); Make a directory. Returns 0 in case of success and; -1 if the directory could not be created (either already exists or; illegal path name). void * OpenDirectory(const char* name); Open a directory. Returns 0 if directory does not exist. void FreeDirectory(void* dirp); Free a directory. const char * GetDirEntry(void* dirp); Get a directory entry. Returns 0 if no more entries. Bool_t ChangeDirectory(const char* path); Change directory. const char * WorkingDirectory(); Return working directory. const char * HomeDirectory(const char* userName = 0); Return the user's",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:26509,Safety,avoid,avoid,26509,"f special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); Copy a file. If overwrite is true and file already exists the; file will be overwritten. Returns 0 when successful, -1 in case; of file open failure, -2 in case the file already exists and overwrite; was false and -3 in case of error during copy. int Rename(const char* from, const char* to); Rename a file. int Link(const char* from, const char* to); Create a link from file1 to file2. int Symlink(const char* from, const char* to); Create a symbolic link from file1 to file2. int Unlink(const char* name); Unlink, i.e. remove, a file. int GetPathInfo(const char* path, Long_t* id, Long_t* size, Long_t* flags, Long_t* modtime); Get info about a file: id, size, flags, modification time.; Id is (statbuf.st_dev << 24) + statbuf.st_ino; Size is the file size; Flags is file type: 0 is regular file, bit 0 set executable,; bit 1 set directory, bit 2 set special file; (socket, fifo, pipe, ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:28960,Safety,safe,safely,28960,"it 2 set special file; (socket, fifo, pipe, etc.); Modtime is modification time.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:28994,Safety,avoid,avoids,28994,"it 2 set special file; (socket, fifo, pipe, etc.); Modtime is modification time.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:44545,Safety,risk,risk,44545," path. const char * GetLinkedLibs() const; Return the list of library linked to this executable.; See TSystem::CompileMacro for more details. const char * GetLinkdefSuffix() const; Return the linkdef suffix chosen by the user for ACLiC.; See TSystem::CompileMacro for more details. const char * GetSoExt() const; Get the shared library extension. const char * GetObjExt() const; Get the object file extension. void SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); Set the location where ACLiC will create libraries and use as; a scratch area.; If isflast is flase, then the libraries are actually stored in; sub-directories of 'build_dir' including the full pathname of the; script. If the script is location at /full/path/name/macro.C; the library will be located at 'build_dir+/full/path/name/macro_C.so'; If 'isflat' is true, then no subdirectory is created and the library; is created directly in the directory 'build_dir'. Note that in this; mode there is a risk than 2 script of the same in different source; directory will over-write each other. void SetFlagsDebug(const char* ); FlagsDebug should contain the options to pass to the C++ compiler; in order to compile the library in debug mode. void SetFlagsOpt(const char* ); FlagsOpt should contain the options to pass to the C++ compiler; in order to compile the library in optimized mode. void SetAclicMode(TSystem::EAclicMode mode); AclicMode indicates whether the library should be built in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:45966,Safety,avoid,avoided,45966,"e(TSystem::EAclicMode mode); AclicMode indicates whether the library should be built in; debug mode or optimized. The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library. void SetMakeExe(const char* directives); Directives has the same syntax as the argument of SetMakeSharedLib but is; used to create an executable. This creation is used as a means to output; a list of unresolved symbols, when loading a shared library has failed.; The required variable is $ExeName rather than $SharedLib, e.g.:; gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");. void SetMakeSharedLib(const char* directives); Directives should contain the description on how to compile and link a; shared lib. This description can be any valid shell command, including; the use of ';' to separate several instructions. However, shell specific; construct should be avoided. In particular this description can contain; environment variables, like $ROOTSYS (or %ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt. e.g.:; gSystem->SetMakeSharedLib(; ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; --no_exceptions --signed_chars --display_error_number; --diag_suppress 68 -o $SharedLib"");. gSystem->setMakeSharedLib(; ""Cxx $IncludePath -c $SourceFile;; ld -",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:7319,Security,Hash,Hash,7319,"ct::GetOption() const; virtual intGetPathInfo(const char* path, FileStat_t& buf); intGetPathInfo(const char* path, Long_t* id, Long_t* size, Long_t* flags, Long_t* modtime); intGetPathInfo(const char* path, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); virtual TInetAddressGetPeerName(int sock); virtual intGetPid(); virtual intGetProcInfo(ProcInfo_t* info) const; virtual intGetServiceByName(const char* service); virtual char*GetServiceByPort(int port); virtual TInetAddressGetSockName(int sock); virtual intGetSockOpt(int sock, int kind, int* val); virtual const char*GetSoExt() const; virtual intGetSysInfo(SysInfo_t* info) const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetUid(const char* user = 0); virtual UInt_tTObject::GetUniqueID() const; virtual UserGroup_t*GetUserInfo(Int_t uid); virtual UserGroup_t*GetUserInfo(const char* user = 0); virtual TList*GetVolumes(Option_t*) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual const char*HomeDirectory(const char* userName = 0); virtual const char*HostName(); virtual voidIgnoreInterrupt(Bool_t ignore = kTRUE); virtual voidIgnoreSignal(ESignals sig, Bool_t ignore = kTRUE); Bool_tInControl() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tInit(); virtual voidInnerLoop(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsAbsoluteFileName(const char* dir); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFileInIncludePath(const char* name, char** fullpath = 0); virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsPathLocal(const char* path); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intLink(const char* f",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:15794,Security,access,access,15794,"ilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); TStringfLastErrorStringLast system error message; Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be chec",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:22817,Security,access,access,22817,"tion handlers. TStdExceptionHandler * RemoveStdExceptionHandler(TStdExceptionHandler* eh); Remove an exception handler from list of exception handlers. Returns; the handler or 0 if the handler was not in the list of exception handlers. Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* command, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. TString GetFromPipe(const char* command); Execute command and return output in TString. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. TSystem * FindHelper(const char* path, void* dirptr = 0); Create helper TSystem to handle file and directory operations that; might be special for remote file access, like via rfiod or rootd. Bool_t ConsistentWith(const char* path, void* dirptr = 0); Check consistency of this helper with the one required; by 'path' or 'dirptr'. int MakeDirectory(const char* name); Make a directory. Returns 0 in case of success and; -1 if the directory could not be created (either already exists or; illegal path name). void * OpenDirectory(const char* name); Open a directory. Returns 0 if directory does not exist. void FreeDirectory(void* dirp); Free a directory. const char * GetDirEntry(void* dirp); Get a directory entry. Returns 0 if no more entries. Bool_t ChangeDirectory(const char* path); Change directory. const char * WorkingDirectory(); Return working directory. const char * HomeDirectory(const char* userName = 0); Return the user's home directory. int mkdir(const char* name, Bool_t recursive = kFALSE); Make a file system directory. Returns 0 in case of success and; -1 if the directory cou",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:26080,Security,Access,AccessPathName,26080,"ility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. This is a protected function called; from the OS specific system classes, like TUnixSystem and TWinNTSystem.; Returns the expanded filename or 0 in case of error. Bool_t ExpandPathName(TString& path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); Copy a file. If overwrite is true and file already exists the; file will be overwritten. Returns 0 when successful, -1 in case; of file open failure, -2 in case the file already exists and overwrite; was false and -3 in case of error during copy. int Rename(const char* from, const char* to); Rename a file. int Link(const char* from, const char* to); Create a link from file1 to file2. int Symlink(const char* from, const char* to); Create a symbolic link from file1 to file2. int Unlink(const char* name)",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:26171,Security,access,access,26171,"ility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. This is a protected function called; from the OS specific system classes, like TUnixSystem and TWinNTSystem.; Returns the expanded filename or 0 in case of error. Bool_t ExpandPathName(TString& path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); Copy a file. If overwrite is true and file already exists the; file will be overwritten. Returns 0 when successful, -1 in case; of file open failure, -2 in case the file already exists and overwrite; was false and -3 in case of error during copy. int Rename(const char* from, const char* to); Rename a file. int Link(const char* from, const char* to); Create a link from file1 to file2. int Symlink(const char* from, const char* to); Create a symbolic link from file1 to file2. int Unlink(const char* name)",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:26205,Security,access,access,26205,"ility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. This is a protected function called; from the OS specific system classes, like TUnixSystem and TWinNTSystem.; Returns the expanded filename or 0 in case of error. Bool_t ExpandPathName(TString& path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. char * ExpandPathName(const char* path); Expand a pathname getting rid of special shell characaters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. The user must delete returned string. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists); Returns FALSE if one can access a file using the specified access mode.; The file name must not contain any special shell characters line ~ or $,; in those cases first call ExpandPathName().; Attention, bizarre convention of return value!!. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); Copy a file. If overwrite is true and file already exists the; file will be overwritten. Returns 0 when successful, -1 in case; of file open failure, -2 in case the file already exists and overwrite; was false and -3 in case of error during copy. int Rename(const char* from, const char* to); Rename a file. int Link(const char* from, const char* to); Create a link from file1 to file2. int Symlink(const char* from, const char* to); Create a symbolic link from file1 to file2. int Unlink(const char* name)",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:28720,Security,secur,secure,28720,"gs, Long_t* modtime); Get info about a file: id, size, flags, modification time.; Id is (statbuf.st_dev << 24) + statbuf.st_ino; Size is the file size; Flags is file type: 0 is regular file, bit 0 set executable,; bit 1 set directory, bit 2 set special file; (socket, fifo, pipe, etc.); Modtime is modification time.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(co",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:29009,Security,secur,security,29009,"it 2 set special file; (socket, fifo, pipe, etc.); Modtime is modification time.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:29329,Security,access,access,29329,"rns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective grou",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:13139,Testability,Test,TestBit,13139,"nkedLibs); virtual voidSetMakeExe(const char* directives); virtual voidSetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetObjExt(const char* objExt); virtual voidSetProgname(const char* name); virtual intSetSockOpt(int sock, int kind, int val); virtual voidSetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidSleep(UInt_t milliSec); virtual TStringSplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidStackTrace(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual intSymlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidSyslog(ELogLevel level, const char* mess); virtual const char*TempDirectory() const; virtual FILE*TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual intUmask(Int_t mask); virtual const char*UnixPathName(const char* unixpathname); virtual intUnlink(const char* name); virtual voidUnload(const char* module); virtual voidUnsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intUtime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:13178,Testability,Test,TestBits,13178,"nkedLibs); virtual voidSetMakeExe(const char* directives); virtual voidSetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetObjExt(const char* objExt); virtual voidSetProgname(const char* name); virtual intSetSockOpt(int sock, int kind, int val); virtual voidSetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidSleep(UInt_t milliSec); virtual TStringSplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidStackTrace(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual intSymlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidSyslog(ELogLevel level, const char* mess); virtual const char*TempDirectory() const; virtual FILE*TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual intUmask(Int_t mask); virtual const char*UnixPathName(const char* unixpathname); virtual intUnlink(const char* name); virtual voidUnload(const char* module); virtual voidUnsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intUtime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31671,Testability,log,log,31671,"e UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subse",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31844,Testability,log,logging,31844,"ure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31908,Testability,log,log,31908,"ure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:31957,Testability,log,log,31957,"ll are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dyn",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:643,Usability,simpl,simple,643,". TSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSystem. class TSystem: public TNamed. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); virtual~TSystem(); virtual voidAbort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intAcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode = kFileExists); virtual voidAddDynamicPath(const char* pathname); virtual voidAddFileHandler(TFileHandler* fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TCla",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:2115,Usability,Clear,Clear,2115," fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidCleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseConnection(int sock, Bool_t force = kFALSE); virtual voidCloselog(); virtual intClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intCompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*ConcatFileName(const char* dir, const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; ",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystem.html:42206,Usability,simpl,simplify,42206," .x myfunc.C++(10,20);. The user may sometimes try to compile a script before it has loaded all the; needed shared libraries. In this case we want to be helpfull and output a; list of the unresolved symbols. So if the loading of the created shared; library fails, we will try to build a executable that contains the; script. The linker should then output a list of missing symbols. To support this we provide a TSystem::SetMakeExe() function, that sets the; directive telling how to create an executable. The loader will need; to be informed of all the libraries available. The information about; the libraries that has been loaded by .L and TSystem::Load() is accesible; to the script compiler. However, the information about; the libraries that have been selected at link time by the application; builder (like the root libraries for root.exe) are not available and need; to be explictly listed in fLinkedLibs (either by default or by a call to; TSystem::SetLinkedLibs()). To simplify customization we could also add to the .rootrc support for the; variables. Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include. Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib .... And also support for MakeSharedLibs() and MakeExe(). (the ... have to be replaced by the actual values and are here only to; shorten this comment). Int_t GetAclicProperties() const; Return the ACLiC properties field. See EAclicProperties for details; on the semantic of each bit. const char * GetBuildArch() const; Return the build architecture. const char * GetBuildCompiler() const; Return the build compiler. const char * GetBuildCompilerVersion() const; Return the build compiler version. const char * GetBuildNode() const; Return the build node name. const char * GetBuildDir() const; Return the path of the build directory. const char * GetFlagsDebug() const; Return the debug flags. const char * GetFlagsOpt() const; Return the",MatchSource.WIKI,root/html532/TSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystem.html
https://root.cern/root/html532/TSystemDirectory.html:1384,Availability,Error,Error,1384," TSystemDirectory(); TSystemDirectory(const char* dirname, const char* path); virtual~TSystemDirectory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char*); virtual voidCopy(TObject&) const; virtual voidDelete(); virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidTSystemFile::Dump() const; virtual voidEdit(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorO",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:1513,Availability,error,error,1513,"emDirectory(); TSystemDirectory(const char* dirname, const char* path); virtual~TSystemDirectory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char*); virtual voidCopy(TObject&) const; virtual voidDelete(); virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidTSystemFile::Dump() const; virtual voidEdit(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TSystemFile::GetIconName() const; virtual TList*GetListOfFiles() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, con",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:1597,Availability,error,error,1597,"temDirectory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char*); virtual voidCopy(TObject&) const; virtual voidDelete(); virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidTSystemFile::Dump() const; virtual voidEdit(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TSystemFile::GetIconName() const; virtual TList*GetListOfFiles() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) c",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:6747,Availability,error,errors,6747,"kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TOrdCollection*fDirsInBrowser; TOrdCollection*fFilesInBrowser; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystemDirectory(); Create a system directory object. TSystemDirectory(const char* dirname, const char* path); Create a system directory object. TSystemDirectory(const TSystemDirectory& ); copy constructor. TSystemDirectory& operator=(const TSystemDirectory& ); assignment operator. ~TSystemDirectory(); Delete system directory object. TList * GetListOfFiles() const; Returns a TList of TSystemFile objects representing the contents; of the directory. It's the responsibility of the user to delete; the list (the list owns the contained objects).; Returns 0 in case of errors. void SetDirectory(const char* name); Create a system directory object. Bool_t IsItDirectory(const char* name) const; Check if name is a directory. void Browse(TBrowser* b); Browse OS system directories. TSystemDirectory * FindDirObj(const char* name); Method that returns system directory object if it; exists in list, 0 otherwise. TSystemFile * FindFileObj(const char* name, const char* dir); Method that returns system file object if it exists in; list, 0 otherwise. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsDirectory(const char* = 0) const; { return kTRUE; }. void Edit(); { }. void Delete(); {}. void Copy(const char* ); {}. void Move(const char* ); {}. void DrawClass() const; dummy methods from TObject. { }. TObject * DrawClone(Option_t* ) const; { return 0; }. void SetDrawOption(Option_t* ); { }. void SetName(const char* name); { TSystemFile::SetName(name); }. void SetTitle(const char* title); { TSystemFile::SetTitle(title); }. void Delete(Option_t* ); { }. vo",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:2563,Modifiability,Inherit,InheritsFrom,2563,", TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TSystemFile::GetIconName() const; virtual TList*GetListOfFiles() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSystemFile::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsDirectory(const char* = 0) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMove(const char*); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(si",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:2629,Modifiability,Inherit,InheritsFrom,2629,"teEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TSystemFile::GetIconName() const; virtual TList*GetListOfFiles() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSystemFile::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsDirectory(const char* = 0) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMove(const char*); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:6101,Modifiability,Inherit,Inheritance,6101,"st char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TSystemDirectory(const TSystemDirectory&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TSystemDirectory*FindDirObj(const char* name); TSystemFile*FindFileObj(const char* name, const char* dir); Bool_tIsItDirectory(const char* name) const; voidTObject::MakeZombie(); TSystemDirectory&operator=(const TSystemDirectory&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TOrdCollection*fDirsInBrowser; TOrdCollection*fFilesInBrowser; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystemDirectory(); Create a system directory object. TSystemDirectory(const char* dirname, const char* path); Create a system directory object. TSystemDirectory(const TSystemDirectory& ); copy constructor. TSystemDirectory& operator=(const TSystemDirectory& ); assignment operator. ~TSystemDirectory(); Delete system directory object. TList * GetListOfFiles() const; Returns a TList of TSystemFile objects representing the contents; of the directory. It's the responsibility of the user to delete; the list (the list owns the contained objects).; Returns 0 in case of errors. void SetDirectory(const char* name); Create a system directory object. Bool_t IsItDirectory(const char* name) const; Check if name is a directory. void Browse(TBrowser* b); Browse OS system directories. TSystemDirectory * FindDirObj(const char* name); Method that returns system directory object if it; exists in list, 0 otherwise. TSystemFile * FindFileObj(const char* na",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:6114,Modifiability,Inherit,Inherited,6114,"st char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TSystemDirectory(const TSystemDirectory&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TSystemDirectory*FindDirObj(const char* name); TSystemFile*FindFileObj(const char* name, const char* dir); Bool_tIsItDirectory(const char* name) const; voidTObject::MakeZombie(); TSystemDirectory&operator=(const TSystemDirectory&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TOrdCollection*fDirsInBrowser; TOrdCollection*fFilesInBrowser; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystemDirectory(); Create a system directory object. TSystemDirectory(const char* dirname, const char* path); Create a system directory object. TSystemDirectory(const TSystemDirectory& ); copy constructor. TSystemDirectory& operator=(const TSystemDirectory& ); assignment operator. ~TSystemDirectory(); Delete system directory object. TList * GetListOfFiles() const; Returns a TList of TSystemFile objects representing the contents; of the directory. It's the responsibility of the user to delete; the list (the list owns the contained objects).; Returns 0 in case of errors. void SetDirectory(const char* name); Create a system directory object. Bool_t IsItDirectory(const char* name) const; Check if name is a directory. void Browse(TBrowser* b); Browse OS system directories. TSystemDirectory * FindDirObj(const char* name); Method that returns system directory object if it; exists in list, 0 otherwise. TSystemFile * FindFileObj(const char* na",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:2453,Security,Hash,Hash,2453,"t::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TSystemFile::GetIconName() const; virtual TList*GetListOfFiles() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSystemFile::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsDirectory(const char* = 0) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMove(const char*); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTOb",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:4914,Testability,Test,TestBit,4914,"rs) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSystemFile::Rename(const char* name)MENU ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDirectory(const char* name); virtual voidSetDrawOption(Option_t*); static voidTObject::SetDtorOnly(void* obj); virtual voidTSystemFile::SetIconName(const char* name); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:4953,Testability,Test,TestBits,4953,"rs) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSystemFile::Rename(const char* name)MENU ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDirectory(const char* name); virtual voidSetDrawOption(Option_t*); static voidTObject::SetDtorOnly(void* obj); virtual voidTSystemFile::SetIconName(const char* name); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemDirectory.html:849,Usability,Clear,Clear,849," TSystemDirectory(); TSystemDirectory(const char* dirname, const char* path); virtual~TSystemDirectory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char*); virtual voidCopy(TObject&) const; virtual voidDelete(); virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidTSystemFile::Dump() const; virtual voidEdit(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorO",MatchSource.WIKI,root/html532/TSystemDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemDirectory.html
https://root.cern/root/html532/TSystemFile.html:1349,Availability,Error,Error,1349," TSystemFile(); TSystemFile(const TSystemFile&); TSystemFile(const char* filename, const char* dirname); virtual~TSystemFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char* to)MENU ; virtual voidCopy(TObject&) const; virtual voidDelete()MENU ; virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidDump() const; virtual voidEdit()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconNa",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:1478,Availability,error,error,1478," TSystemFile&); TSystemFile(const char* filename, const char* dirname); virtual~TSystemFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char* to)MENU ; virtual voidCopy(TObject&) const; virtual voidDelete()MENU ; virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidDump() const; virtual voidEdit()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::Inhe",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:1562,Availability,error,error,1562,"temFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char* to)MENU ; virtual voidCopy(TObject&) const; virtual voidDelete()MENU ; virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidDump() const; virtual voidEdit()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TCl",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:2477,Modifiability,Inherit,InheritsFrom,2477," = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsDirectory(const char* dir = 0) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMove(const char* to)MENU ; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operato",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:2543,Modifiability,Inherit,InheritsFrom,2543,"rams, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsDirectory(const char* dir = 0) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMove(const char* to)MENU ; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:5722,Modifiability,Inherit,Inheritance,5722,"const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfIconNameicon name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystemFile(); TSystemFile default constructor. TSystemFile(const char* filename, const char* dirname); TSystemFile normal constructor. ~TSystemFile(); Delete TSystemFile object. Bool_t IsDirectory(const char* dir = 0) const; Check if object is a directory. void Browse(TBrowser* b); Execute default action for this system file (action is specified; in the $HOME/.root.mimes or $ROOTSYS/etc/root.mimes file. void Edit(); Invoke text editor on this file. void Copy(const char* to); copy this file. void Move(const char* to); move this file. void Delete(); delete this file. void Rename(const char* name); rename this file. void Inspect() const; inspect this file. void Dump() const; dump this file. TSystemFile(). void Delete(). void Copy(const char* to). void SetIconName(const char* name); { fIconName = name; }. const char * GetIconName() const; { return fIconName.Data(); }. void DrawClass() const; { }. TObject * DrawClone(Option_t* ) const; { r",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:5735,Modifiability,Inherit,Inherited,5735,"const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfIconNameicon name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystemFile(); TSystemFile default constructor. TSystemFile(const char* filename, const char* dirname); TSystemFile normal constructor. ~TSystemFile(); Delete TSystemFile object. Bool_t IsDirectory(const char* dir = 0) const; Check if object is a directory. void Browse(TBrowser* b); Execute default action for this system file (action is specified; in the $HOME/.root.mimes or $ROOTSYS/etc/root.mimes file. void Edit(); Invoke text editor on this file. void Copy(const char* to); copy this file. void Move(const char* to); move this file. void Delete(); delete this file. void Rename(const char* name); rename this file. void Inspect() const; inspect this file. void Dump() const; dump this file. TSystemFile(). void Delete(). void Copy(const char* to). void SetIconName(const char* name); { fIconName = name; }. const char * GetIconName() const; { return fIconName.Data(); }. void DrawClass() const; { }. TObject * DrawClone(Option_t* ) const; { r",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:2367,Security,Hash,Hash,2367,"thod, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsDirectory(const char* dir = 0) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMove(const char* to)MENU ; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:4809,Testability,Test,TestBit,4809,", const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSystemFile&operator=(const TSystemFile&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRename(const char* name)MENU ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDrawOption(Option_t*); static voidTObject::SetDtorOnly(void* obj); virtual voidSetIconName(const char* name); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:4848,Testability,Test,TestBits,4848,", const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSystemFile&operator=(const TSystemFile&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRename(const char* name)MENU ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDrawOption(Option_t*); static voidTObject::SetDtorOnly(void* obj); virtual voidSetIconName(const char* name); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TSystemFile.html:809,Usability,Clear,Clear,809," TSystemFile(); TSystemFile(const TSystemFile&); TSystemFile(const char* filename, const char* dirname); virtual~TSystemFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char* to)MENU ; virtual voidCopy(TObject&) const; virtual voidDelete()MENU ; virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidDump() const; virtual voidEdit()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconNa",MatchSource.WIKI,root/html532/TSystemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TSystemFile.html
https://root.cern/root/html532/TTabCom.html:2666,Availability,error,error,2666,"complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; this won't work... looks for a file in pwd starting with TDict. 11. the prototypes tend to omit the word ""const"" a lot.; this is a problem with ROOT or CINT. 12. when listing ambiguous matches, only one column is used,; even if there are many completions. 13. anonymous objects are not currently identified; so, for example,. root> printf( TString([TAB. gives an error message instead of listing TString's constructors.; (this could be fixed). 14. the routine that adds the ""appendage"" isn't smart enough to know; if it's already there:. root> TCanvas::Update(); press [TAB] here ^; root> TCanvas::Update()(); (this could be fixed). 15. the appendage is only applied if there is exactly 1 match.; eg, this. root> G__at[TAB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. TTabCom(); virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineCla",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:4405,Availability,error,errorLevel,4405,"AB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. TTabCom(); virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineClass(const char* varName); static Bool_tExcludedByFignore(TString s); const TSeqCollection*GetListOfClasses(); const TSeqCollection*GetListOfCppDirectives(); const TSeqCollection*GetListOfEnvVars(); const TSeqCollection*GetListOfFilesInPath(const char* path); const TSeqCollection*GetListOfGlobalFunctions(); const TSeqCollection*GetListOfGlobals(); const TSeqCollection*GetListOfPragmas(); const TSeqCollection*GetListOfSysIncFiles(); const TSeqCollection*GetListOfUsers(); static TStringGetSysIncludePath(); Int_tHook(char* buf, int* pLoc, ostream& out); virtual TClass*IsA() const; static Bool_tIsDirectory(const char* fileName); static TSeqCollection*NewListOfFilesInPath(const char* path); static voidNoMsg(Int_t errorLevel); static Bool_tPathIsSpecifiedInFileName(const TString& fileName); voidRehashAll(); voidRehashClasses(); voidRehashCppDirectives(); voidRehashEnvVars(); voidRehashFiles(); voidRehashGlobalFunctions(); voidRehashGlobals(); voidRehashPragmas(); voidRehashSysIncFiles(); voidRehashUsers(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TTabCom(const TTabCom&); Int_tComplete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); voidCopyMatc",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:9648,Availability,failure,failure,9648," * GetListOfPragmas(); Return the list of pragmas. const TSeqCollection * GetListOfSysIncFiles(); Return the list of system include files. const TSeqCollection * GetListOfUsers(); reads from ""/etc/passwd"". Char_t AllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); [static utility function]. if all the strings in ""*pList"" have the same ith character,; that character is returned.; otherwise 0 is returned. any string ""s"" for which ""ExcludedByFignore(s)"" is true; will be ignored unless All the strings in ""*pList""; are ""ExcludedByFignore()"". in addition, the number of strings which were not; ""ExcludedByFignore()"" is returned in ""nGoodStrings"". void AppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); [static utility function]. adds a TObjString to ""*pList""; for each entry found in the system directory ""dirName"". directories that do not exist are silently ignored. TString DetermineClass(const char* varName); [static utility function]. returns empty string on failure.; otherwise returns something like this: ""TROOT*"".; fails for non-class types (ie, int, char, etc).; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utili",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10129,Availability,failure,failure,10129,"ue; will be ignored unless All the strings in ""*pList""; are ""ExcludedByFignore()"". in addition, the number of strings which were not; ""ExcludedByFignore()"" is returned in ""nGoodStrings"". void AppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); [static utility function]. adds a TObjString to ""*pList""; for each entry found in the system directory ""dirName"". directories that do not exist are silently ignored. TString DetermineClass(const char* varName); [static utility function]. returns empty string on failure.; otherwise returns something like this: ""TROOT*"".; fails for non-class types (ie, int, char, etc).; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); rese",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10869,Availability,error,errorLevel,10869," with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); re",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10925,Availability,error,errorLevel,10925," [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. T",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10970,Availability,error,errorLevel,10970," [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. T",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10997,Availability,error,errors,10997," [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. T",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:11018,Availability,error,errorLevel,11018," [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. T",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:11809,Availability,error,error,11809,"4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineCon",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:11969,Availability,error,error,11969,"evel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:12078,Availability,error,error,12078,"l be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has be",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:12220,Availability,error,error,12220,"mplete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:12383,Availability,error,error,12383,"mplete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:2856,Deployability,Update,Update,2856,"ude directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; this won't work... looks for a file in pwd starting with TDict. 11. the prototypes tend to omit the word ""const"" a lot.; this is a problem with ROOT or CINT. 12. when listing ambiguous matches, only one column is used,; even if there are many completions. 13. anonymous objects are not currently identified; so, for example,. root> printf( TString([TAB. gives an error message instead of listing TString's constructors.; (this could be fixed). 14. the routine that adds the ""appendage"" isn't smart enough to know; if it's already there:. root> TCanvas::Update(); press [TAB] here ^; root> TCanvas::Update()(); (this could be fixed). 15. the appendage is only applied if there is exactly 1 match.; eg, this. root> G__at[TAB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. TTabCom(); virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineClass(const char* varName); static Bool_tExcludedByFignore(TString s); const TSeqCollection*GetListOfClasses(); const TSeqCollection*GetListOfCppDirectives(); const TSeqCollection*GetListOfEnvVars(); co",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:2901,Deployability,Update,Update,2901,"ude directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; this won't work... looks for a file in pwd starting with TDict. 11. the prototypes tend to omit the word ""const"" a lot.; this is a problem with ROOT or CINT. 12. when listing ambiguous matches, only one column is used,; even if there are many completions. 13. anonymous objects are not currently identified; so, for example,. root> printf( TString([TAB. gives an error message instead of listing TString's constructors.; (this could be fixed). 14. the routine that adds the ""appendage"" isn't smart enough to know; if it's already there:. root> TCanvas::Update(); press [TAB] here ^; root> TCanvas::Update()(); (this could be fixed). 15. the appendage is only applied if there is exactly 1 match.; eg, this. root> G__at[TAB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. TTabCom(); virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineClass(const char* varName); static Bool_tExcludedByFignore(TString s); const TSeqCollection*GetListOfClasses(); const TSeqCollection*GetListOfCppDirectives(); const TSeqCollection*GetListOfEnvVars(); co",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10476,Energy Efficiency,allocate,allocated,10476," do not exist are silently ignored. TString DetermineClass(const char* varName); [static utility function]. returns empty string on failure.; otherwise returns something like this: ""TROOT*"".; fails for non-class types (ie, int, char, etc).; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* de",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:2672,Integrability,message,message,2672,"complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; this won't work... looks for a file in pwd starting with TDict. 11. the prototypes tend to omit the word ""const"" a lot.; this is a problem with ROOT or CINT. 12. when listing ambiguous matches, only one column is used,; even if there are many completions. 13. anonymous objects are not currently identified; so, for example,. root> printf( TString([TAB. gives an error message instead of listing TString's constructors.; (this could be fixed). 14. the routine that adds the ""appendage"" isn't smart enough to know; if it's already there:. root> TCanvas::Update(); press [TAB] here ^; root> TCanvas::Update()(); (this could be fixed). 15. the appendage is only applied if there is exactly 1 match.; eg, this. root> G__at[TAB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. TTabCom(); virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineCla",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:2755,Integrability,rout,routine,2755,"terpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; this won't work... looks for a file in pwd starting with TDict. 11. the prototypes tend to omit the word ""const"" a lot.; this is a problem with ROOT or CINT. 12. when listing ambiguous matches, only one column is used,; even if there are many completions. 13. anonymous objects are not currently identified; so, for example,. root> printf( TString([TAB. gives an error message instead of listing TString's constructors.; (this could be fixed). 14. the routine that adds the ""appendage"" isn't smart enough to know; if it's already there:. root> TCanvas::Update(); press [TAB] here ^; root> TCanvas::Update()(); (this could be fixed). 15. the appendage is only applied if there is exactly 1 match.; eg, this. root> G__at[TAB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. TTabCom(); virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineClass(const char* varName); static Bool_tExcludedByFignore(TString s); const TSeqCollection*GetListOfClasses(",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:12084,Integrability,message,message,12084,"l be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has be",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:404,Modifiability,variab,variable,404,". TTabCom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TTabCom. class TTabCom. TTabCom. This class performs basic tab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows or VMS; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they s",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:559,Modifiability,variab,variable,559,". TTabCom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TTabCom. class TTabCom. TTabCom. This class performs basic tab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows or VMS; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they s",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:1276,Modifiability,variab,variables,1276,"ab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows or VMS; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; ",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:6822,Modifiability,Inherit,Inheritance,6822,NT_Edit; kCINT_Load; kCINT_Exec; kCINT_EXec; kCINT_pragma; kCINT_includeSYS; kCINT_includePWD; kCINT_cpp; kROOT_Load; kSYS_FileName; kCXX_NewProto; kCXX_ConstructorProto; kCXX_ScopeProto; kCXX_DirectProto; kCXX_IndirectProto; kCXX_ScopeMember; kCXX_DirectMember; kCXX_IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragm,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:6835,Modifiability,Inherit,Inherited,6835,NT_Edit; kCINT_Load; kCINT_Exec; kCINT_EXec; kCINT_pragma; kCINT_includeSYS; kCINT_includePWD; kCINT_cpp; kROOT_Load; kSYS_FileName; kCXX_NewProto; kCXX_ConstructorProto; kCXX_ScopeProto; kCXX_DirectProto; kCXX_IndirectProto; kCXX_ScopeMember; kCXX_DirectMember; kCXX_IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragm,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7127,Modifiability,variab,variables,7127,IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. co,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7295,Modifiability,variab,variables,7295,"rName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initiali",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7667,Modifiability,variab,variables,7667,"on*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); Return the list of globals. const TSeqCollection * GetListOfGlobalFunctions(); Return the list of global functions. const TSeqCollection * GetListOfPragmas()",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:8449,Modifiability,variab,variables,8449,"e system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); Return the list of globals. const TSeqCollection * GetListOfGlobalFunctions(); Return the list of global functions. const TSeqCollection * GetListOfPragmas(); Return the list of pragmas. const TSeqCollection * GetListOfSysIncFiles(); Return the list of system include files. const TSeqCollection * GetListOfUsers(); reads from ""/etc/passwd"". Char_t AllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); [static utility function]. if all the strings in ""*pList"" have the same ith character,; that character is returned.; otherwise 0 is returned. any string ""s"" for which ""ExcludedByFignore(s)"" is true; will be ignored unless All the strings in ""*pList""; are ""ExcludedByFignore()"". in addition, the number of strings which were not; ""ExcludedByFignore()"" is returned in ""nGoodStrings"". void AppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); [static utilit",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10825,Modifiability,variab,variable,10825,"); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling ",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:11553,Modifiability,Extend,ExtendPath,11553,"cifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:12332,Modifiability,variab,variable,12332,"mplete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:286,Performance,perform,performs,286,". TTabCom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TTabCom. class TTabCom. TTabCom. This class performs basic tab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows or VMS; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they s",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:864,Security,access,access,864,". TTabCom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TTabCom. class TTabCom. TTabCom. This class performs basic tab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows or VMS; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they s",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:10750,Testability,test,test,10750,".; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const c",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:6960,Usability,Clear,ClearClasses,6960,NewProto; kCXX_ConstructorProto; kCXX_ScopeProto; kCXX_DirectProto; kCXX_IndirectProto; kCXX_ScopeMember; kCXX_DirectMember; kCXX_IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds a,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:6976,Usability,Clear,Clear,6976,NewProto; kCXX_ConstructorProto; kCXX_ScopeProto; kCXX_DirectProto; kCXX_IndirectProto; kCXX_ScopeMember; kCXX_DirectMember; kCXX_IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds a,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7022,Usability,Clear,ClearCppDirectives,7022,to; kCXX_IndirectProto; kCXX_ScopeMember; kCXX_DirectMember; kCXX_IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const ,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7088,Usability,Clear,ClearEnvVars,7088,IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. co,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7155,Usability,Clear,ClearFiles,7155,PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Retu,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7191,Usability,Clear,ClearGlobalFunctions,7191,t_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection *,MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7261,Usability,Clear,ClearGlobals,7261,"rName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initiali",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7323,Usability,Clear,ClearPragmas,7323,"st char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. co",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7376,Usability,Clear,ClearSysIncFiles,7376,"on plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""en",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7421,Usability,Clear,ClearUsers,7421,"r or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of en",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7469,Usability,Clear,ClearAll,7469,"ves; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); Re",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7481,Usability,clear,clears,7481,"ves; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); Re",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTabCom.html:7959,Usability,clear,clears,7959,"nd namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); Return the list of globals. const TSeqCollection * GetListOfGlobalFunctions(); Return the list of global functions. const TSeqCollection * GetListOfPragmas(); Return the list of pragmas. const TSeqCollection * GetListOfSysIncFiles(); Return the list of system include files. const TSeqCollection * GetListOfUsers(); reads from ""/etc/passwd"". Char_t AllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); [static utility function]. if all the strings in ""*pList"" have the",MatchSource.WIKI,root/html532/TTabCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTabCom.html
https://root.cern/root/html532/TTable.html:6724,Availability,Error,Error,6724,"(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tCopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidCopySet(TTable& array); virtual voidDeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual TH1*Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidFit(const char* formula, const char* varexp, const char* selection = """", Opti",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:6853,Availability,error,error,6853,"newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tCopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidCopySet(TTable& array); virtual voidDeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual TH1*Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidFit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; void*GetArray() const; virtua",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:6937,Availability,error,error,6937," voidTNamed::Copy(TObject& named) const; Int_tCopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidCopySet(TTable& array); virtual voidDeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual TH1*Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidFit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; void*GetArray() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual const Char_t*GetColumnComm",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:26287,Availability,down,down,26287," row index the ""row"" has occupied. row == 0 see method TTable::AddAt(const void *row, Int_t i). void AddAt(const void* c, Int_t i); Add one element (""row"") of structure at position ""i"".; Check for out of bounds. If the row == 0 the ""i"" cell is still occupied and; filled with the pattern ""ff"". void CopyStruct(Char_t* dest, const Char_t* src); Copy the C-structure src into the new location; the length of the strucutre is defined by this class descriptor. void CopySet(TTable& array); to be documented. const Char_t * GetColumnComment(Int_t columnIndex) const; Get a comment from the table descriptor. Long_t AppendRows(const void* row, UInt_t nRows); Append nRows row of the array ""row"" to the table; return; - the new table size (# of table rows); - 0 if the object doesn't own the internal array and can not expand it. Long_t InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); void InsertRows(cons void *row, Long_t indx, UInt_t nRows). Insert one or several rows into the table at ""indx"" position; The rest table stuff is shifted down. cons void - a pointer to the array of rows to be inserted; Long_t indx = The position these rows will be inserted to; Int_t nRows - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if spa",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:27252,Availability,avail,available,27252,"rows into the table at ""indx"" position; The rest table stuff is shifted down. cons void - a pointer to the array of rows to be inserted; Long_t indx = The position these rows will be inserted to; Int_t nRows - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:29156,Availability,error,error,29156,"(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in the current directory.; Example:; table.Fit(pol4,""sqrt(x)>>hsqrt"",""y>0""); will fit sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. const Char_t * GetType() const; Returns the type of the wrapped C-structure kept as the TNamed title. Bool_t IsFolder() const; return Folder flag to be used by TBrowse object; The table is a folder if; - it has sub-dataset; or; - GetNRows > 0. Int_t NaN(). return the total number of the NaN for float/double cells of this table; Thanks Victor Perevoztchikov. TTable * New(const Char_t* name, const Char_t* type, void* array, UInt_t size); This static method creates a new TTable object if provided. Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. Char_t * Print(Char_t* buf, Int_t n) const; Create IDL table defintion (to be used for XDF I/O). const Char_t * PrintHeader() const; Print general table inforamtion. const Char_t * Print(Int_t row, Int_t rownumber = 10, const Char_t* colfirst = """", const Char_t* collast = """") const; const Char_t *TTable::Print(Int_t row, Int_t rownumber, const Char_t *colfirst, const Char_t *collast) const. Print the contents of internal table per COLUMN. row - the index of the first row to print (counting from ZERO); rownumber - the total number of rows to print out (=10 by default). (No use !) Char_t *colfirst, *collast - the names of the first/last; to print out (not implemented yet). Check bounds and adjust it. void PrintContents(Option_t* opt = """") const; to be documented. void Project(const char* hname, const char* varexp, const char* selection = """", Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); -*-*",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:32107,Deployability,Update,Update,32107,"etNRows() method. return the name of temporary file with the current expressions. void Reset(Int_t c = 0); Fill the entire table with byte ""c"" ;; c=0 ""be default"". void ResetMap(Bool_t wipe = kTRUE); Clean all filled columns with the pointers to TTableMap; if any; wipe = kTRUE - delete all object the Map's point to; kFALSE - zero pointer, do not call ""delete"" though. void Set(Int_t n, Char_t* array); Set array size of TTable object to n longs and copy array.; If n<0 leave array unchanged. void StreamerTable(TBuffer& b, Version_t version = 3); Stream an object of class TTable. void StreamerHeader(TBuffer& b, Version_t version = 3); Read ""table parameters first"". Int_t SetfN(Long_t len); to be documented. TTableDescriptor * GetRowDescriptors() const; to be documented. TTableDescriptor * GetDescriptorPointer() const; to be documented. void SetDescriptorPointer(TTableDescriptor* list); to be documented. void Streamer(TBuffer& b); Stream an array of the ""plain"" C-structures. void Update(); to be documented. void Update(TDataSet* set, UInt_t opt = 0); Kill the table current data; and adopt those from set. const char * TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors); Query the TClass instance for the C-stucture dicitonary; This method is to be used with TableImp CPP macro (see $ROOTSYS/table/inc/Ttypes.h. Int_t GetColumnIndex(const Char_t* columnName) const; {return GetRowDescriptors()->ColumnByName(columnName);}. const Char_t * GetColumnName(Int_t columnIndex) const; {return GetRowDescriptors()->ColumnName(columnIndex); }. const UInt_t * GetIndexArray(Int_t columnIndex) const; {return GetRowDescriptors()->IndexArray(columnIndex); }. UInt_t GetNumberOfColumns() const; {return GetRowDescriptors()->NumberOfColumns(); }. UInt_t GetOffset(Int_t columnIndex) const; {return GetRowDescriptors()->Offset(columnIndex); }. Int_t GetOffset(const Char_t* columnName = 0) const; {return GetRowDescriptors()->Offset(columnName); }. UInt_t Ge",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:32140,Deployability,Update,Update,32140,"nt expressions. void Reset(Int_t c = 0); Fill the entire table with byte ""c"" ;; c=0 ""be default"". void ResetMap(Bool_t wipe = kTRUE); Clean all filled columns with the pointers to TTableMap; if any; wipe = kTRUE - delete all object the Map's point to; kFALSE - zero pointer, do not call ""delete"" though. void Set(Int_t n, Char_t* array); Set array size of TTable object to n longs and copy array.; If n<0 leave array unchanged. void StreamerTable(TBuffer& b, Version_t version = 3); Stream an object of class TTable. void StreamerHeader(TBuffer& b, Version_t version = 3); Read ""table parameters first"". Int_t SetfN(Long_t len); to be documented. TTableDescriptor * GetRowDescriptors() const; to be documented. TTableDescriptor * GetDescriptorPointer() const; to be documented. void SetDescriptorPointer(TTableDescriptor* list); to be documented. void Streamer(TBuffer& b); Stream an array of the ""plain"" C-structures. void Update(); to be documented. void Update(TDataSet* set, UInt_t opt = 0); Kill the table current data; and adopt those from set. const char * TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors); Query the TClass instance for the C-stucture dicitonary; This method is to be used with TableImp CPP macro (see $ROOTSYS/table/inc/Ttypes.h. Int_t GetColumnIndex(const Char_t* columnName) const; {return GetRowDescriptors()->ColumnByName(columnName);}. const Char_t * GetColumnName(Int_t columnIndex) const; {return GetRowDescriptors()->ColumnName(columnIndex); }. const UInt_t * GetIndexArray(Int_t columnIndex) const; {return GetRowDescriptors()->IndexArray(columnIndex); }. UInt_t GetNumberOfColumns() const; {return GetRowDescriptors()->NumberOfColumns(); }. UInt_t GetOffset(Int_t columnIndex) const; {return GetRowDescriptors()->Offset(columnIndex); }. Int_t GetOffset(const Char_t* columnName = 0) const; {return GetRowDescriptors()->Offset(columnName); }. UInt_t GetColumnSize(Int_t columnIndex) const; {return GetRowDescriptors()-",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:2294,Energy Efficiency,charge,charge,2294," start (cm). See also comments*; float phi0; /* azimuthal angle at start (deg) *; float z0; /* z-coord. at start (cm) *; float psi; /* azimuthal angle of pT vector (deg) *; float tanl; /* tan(dip) =pz/pt at start *; float invpt; /* 1/pt at start (GeV/c)^(-1) *; float curvature; /* Track curvature (1/cm) *; float covar[15]; /* full covariance matrix *; float chisq[2]; /* Chi-square per degree of freedom *; float x_first[3]; /* coord. of first measured point (cm) *; float x_last[3]; /* coord. of last measured point (cm) *; float length; /* from first to last point (cm) *; float impact; /* primary vertex (cm) *; unsigned long map[2]; /* extrap. info. (see preceeding comments)*; int id; /* Primary key (see comments) *; int iflag; /* bitmask quality info. (see comments) *; int det_id; /* Detector id information *; int method; /* Track finding/fitting method, packed *; int pid; /* Geant particle ID for assumed mass *; int n_point; /* SVT, TPC, FTPC component #s are packed *; int n_max_point; /* SVT, TPC, FTPC component #s are packed *; int n_fit_point; /* SVT, TPC, FTPC component #s are packed *; int icharge; /* Particle charge in units of |e| *; int id_start_vertex; /* final fit and primary track candidates *; } DST_TRACK_ST;. class St_dst_track : public TTable; {; public:; ClassDefTable(St_dst_track,dst_track_st); ClassDef(St_dst_track,2) //C++ wrapper for <dst_track> StAF table; };; #endif. where the CPP macro defines several convinient methods for the; ""table"" class (see: $ROOTSYS/table/inc/Ttypes.h for details:. #define ClassDefTable(className,structName); protected:; static TTableDescriptor *fgColDescriptors;; virtual TTableDescriptor *GetDescriptorPointer() const { return fgColDescriptors;}; virtual void SetDescriptorPointer(TTableDescriptor *list) const { fgColDescriptors = list;}; public:; typedef structName* iterator;; className() : TTable(_QUOTE_(className),sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name) : TTable(name,sizeof(stru",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:26631,Energy Efficiency,allocate,allocated,26631,"ss descriptor. void CopySet(TTable& array); to be documented. const Char_t * GetColumnComment(Int_t columnIndex) const; Get a comment from the table descriptor. Long_t AppendRows(const void* row, UInt_t nRows); Append nRows row of the array ""row"" to the table; return; - the new table size (# of table rows); - 0 if the object doesn't own the internal array and can not expand it. Long_t InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); void InsertRows(cons void *row, Long_t indx, UInt_t nRows). Insert one or several rows into the table at ""indx"" position; The rest table stuff is shifted down. cons void - a pointer to the array of rows to be inserted; Long_t indx = The position these rows will be inserted to; Int_t nRows - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be docum",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:26888,Energy Efficiency,allocate,allocated,26888," the table; return; - the new table size (# of table rows); - 0 if the object doesn't own the internal array and can not expand it. Long_t InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); void InsertRows(cons void *row, Long_t indx, UInt_t nRows). Insert one or several rows into the table at ""indx"" position; The rest table stuff is shifted down. cons void - a pointer to the array of rows to be inserted; Long_t indx = The position these rows will be inserted to; Int_t nRows - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:27174,Energy Efficiency,Allocate,Allocate,27174,"rows into the table at ""indx"" position; The rest table stuff is shifted down. cons void - a pointer to the array of rows to be inserted; Long_t indx = The position these rows will be inserted to; Int_t nRows - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:27903,Energy Efficiency,allocate,allocated,27903,"size> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in the current directory.; Example:; table.Fit(pol4,""sqrt(x)>>hsqrt"",""y>0""); will fit sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. const Char_t * GetType() const; Returns the type of the wrapped C-structure kept as the TNamed title. Bool_t IsFolder() const; return Folder flag to be used by TBrowse object; The table is a folder if; - it has sub-dataset; or; - GetNRows > 0. Int_t NaN(). return the total number of the NaN for float/double cel",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:30497,Energy Efficiency,allocate,allocated,30497,"nst; const Char_t *TTable::Print(Int_t row, Int_t rownumber, const Char_t *colfirst, const Char_t *collast) const. Print the contents of internal table per COLUMN. row - the index of the first row to print (counting from ZERO); rownumber - the total number of rows to print out (=10 by default). (No use !) Char_t *colfirst, *collast - the names of the first/last; to print out (not implemented yet). Check bounds and adjust it. void PrintContents(Option_t* opt = """") const; to be documented. void Project(const char* hname, const char* varexp, const char* selection = """", Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); -*-*Make a projection of a TTable using selections; *-* =============================================. Depending on the value of varexp (described in Draw) a 1-D,2-D,etc; projection of the TTable will be filled in histogram hname.; Note that the dimension of hname must match with the dimension of varexp. Int_t Purge(Option_t* opt = """"); Shrink the table to free the unused but still allocated rows. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void Set(Int_t n); Set array size of TTable object to n longs. If n<0 leave array unchanged. void SetTablePointer(void* table); to be documented. void SetType(const char *const type); to be documented. Char_t * MakeExpression(const Char_t** expressions, Int_t nExpressions); Create CINT macro to evaluate the user-provided expresssion; Expression may contains:; - the table columen names; - 2 meta names: i$ - the current column index,; n$ - the total table size provided by TTable::GetNRows() method. return the name of temporary file with the current expressions. void Reset(Int_t c = 0); Fill the entire table with byte ""c"" ;; c=0 ""be default"". void ResetMap(Bool_t wipe = kTRUE); Clean all filled columns with the pointers to TTableMap; if any; wipe = kTRUE - delete all object the Map's point to; kFALSE - zero pointer, do not ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:289,Integrability,Wrap,Wraps,289,". TTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TTable. class TTable: public TDataSet. TTable. Wraps the array of the plain C-structures (one C-structure per element). class TTable provides the automatic schema evolution for; the derived ""table"" classes saved with ROOT format. ""Automatic Schema evolution"" provides:; - skipping data-member if it is not present for the current; implementation of the ""table"" but was present at the time the; table was written;; - assign a default value ZERO for the brand-new data-members,; those were not in the structure when the object was written but; present now;; - trace propely any change in the order of the data-members. To enjoy this class one has to derive his/her own custom class:. St_dst_track_Table.h:. #ifndef STAF_St_dst_track_Table; #define STAF_St_dst_track_Table. #include ""TTable.h"". #include ""dst_track.h"" the C-structure defintion may be kept; separately; typedef struct dst_track_st {; float r0; /* radius at start (cm). See also comments*; float phi0; /* azimuthal angle at start (deg) *; float z0; /* z-coord. at start (cm) *; float psi; /* azimuthal angle of pT vector (deg) *; float tanl; /* tan(dip) =pz/pt at start *; float invpt; /* 1/pt at start (GeV/c)^(-1) *; float curvature; /* Track curvature (1/cm) *; float covar[15]; /* full covariance matrix *; float chisq[2]; /* Chi-square per degree of freedom *; float x_first[3]; /* coord. of first measured point (cm) *; float x_last[3]; /* coord. of last measured point (cm) *; float length; /* from first to last point (cm) *; float impact; /* primary vertex (cm) *; unsigned long map[2]; /* extrap. info. (see preceeding comments)*; int id; /* Primary key (see comments) *; int iflag; /* bitmask quality info. (see comments) *; int det_id; /* Detector id information *; int method; /* Trac",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:2524,Integrability,wrap,wrapper,2524,"/* full covariance matrix *; float chisq[2]; /* Chi-square per degree of freedom *; float x_first[3]; /* coord. of first measured point (cm) *; float x_last[3]; /* coord. of last measured point (cm) *; float length; /* from first to last point (cm) *; float impact; /* primary vertex (cm) *; unsigned long map[2]; /* extrap. info. (see preceeding comments)*; int id; /* Primary key (see comments) *; int iflag; /* bitmask quality info. (see comments) *; int det_id; /* Detector id information *; int method; /* Track finding/fitting method, packed *; int pid; /* Geant particle ID for assumed mass *; int n_point; /* SVT, TPC, FTPC component #s are packed *; int n_max_point; /* SVT, TPC, FTPC component #s are packed *; int n_fit_point; /* SVT, TPC, FTPC component #s are packed *; int icharge; /* Particle charge in units of |e| *; int id_start_vertex; /* final fit and primary track candidates *; } DST_TRACK_ST;. class St_dst_track : public TTable; {; public:; ClassDefTable(St_dst_track,dst_track_st); ClassDef(St_dst_track,2) //C++ wrapper for <dst_track> StAF table; };; #endif. where the CPP macro defines several convinient methods for the; ""table"" class (see: $ROOTSYS/table/inc/Ttypes.h for details:. #define ClassDefTable(className,structName); protected:; static TTableDescriptor *fgColDescriptors;; virtual TTableDescriptor *GetDescriptorPointer() const { return fgColDescriptors;}; virtual void SetDescriptorPointer(TTableDescriptor *list) const { fgColDescriptors = list;}; public:; typedef structName* iterator;; className() : TTable(_QUOTE_(className),sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name) : TTable(name,sizeof(structName)) {SetType(_QUOTE_(structName));}; className(Int_t n) : TTable(_QUOTE_(className),n,sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name,Int_t n) : TTable(name,n,sizeof(structName)) {SetType(_QUOTE_(structName));}; structName *GetTable(Int_t i=0) const { return ((structName *)GetArray())+i;",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:4305,Integrability,wrap,wrapped,4305,"e));}; className(const char *name,Int_t n) : TTable(name,n,sizeof(structName)) {SetType(_QUOTE_(structName));}; structName *GetTable(Int_t i=0) const { return ((structName *)GetArray())+i;}; structName &operator[](Int_t i){ assert(i>=0 && i < GetNRows()); return *GetTable(i); }; const structName &operator[](Int_t i) const { assert(i>=0 && i < GetNRows()); return *((const structName *)(GetTable(i))); }; structName *begin() const { return GetNRows()? GetTable(0):0;}; structName *end() const {Int_t i = GetNRows(); return i? GetTable(i):0;}. The class implementation file may 2 lines and look as follows:; (for the example above):. St_dst_track_Table.cxx:. #include ""St_dst_track_Table.h""; TableClassImpl(St_dst_track, dst_track_st). LinkDef.h. To provide ROOT I/O for this class TWO CINT dictonary entries; should be defined with your custom LinkDef.h file; 1. First entry (as usually) for the class derived from TTable; for example:; #pragma C++ class St_dst_track; 2. Second entry for the C-structure wrapped into the class.; Since C-structuire is not derived from TObject it must be; properly defined as ""foreign"" ROOT class; #pragma C++ class dst_track_st+;. meta-variables i$ and n$ introduced; where ""i$"" stands for the current row index; ""n$"" stands for the total number of rows; meta-variable can be used along the normal; table column names in the expressions (see for example; method TTable::Draw. Function Members (Methods); public:. TTable(const TTable& table); TTable(const char* name = 0, Int_t size = 0); TTable(const char* name, Int_t n, Int_t size); TTable(const char* name, Int_t n, Char_t* array, Int_t size); TTable(const char* name, const char* type, Int_t n, Char_t* array, Int_t size); virtual~TTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDataSet::Add(TDataSet* dataset); virtual Int_tAddAt(const void* c); virtual voidAddAt(const void* c, Int_t i); virtual voidAddAt(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddAtAndExpand(TD",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:27303,Integrability,Wrap,Wrap,27303,"the array of rows to be inserted; Long_t indx = The position these rows will be inserted to; Int_t nRows - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is cal",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:27760,Integrability,wrap,wrapped,27760,"le; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in the current directory.; Example:; table.Fit(pol4,""sqrt(x)>>hsqrt"",""y>0""); will fit sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. const Char_t * GetType() const; Returns the type of the wrapped C-structure kept as the TNamed title. Bool_t IsFolder() const; return Folder flag to be used by T",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:28627,Integrability,wrap,wrapped,28627,"DataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in the current directory.; Example:; table.Fit(pol4,""sqrt(x)>>hsqrt"",""y>0""); will fit sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. const Char_t * GetType() const; Returns the type of the wrapped C-structure kept as the TNamed title. Bool_t IsFolder() const; return Folder flag to be used by TBrowse object; The table is a folder if; - it has sub-dataset; or; - GetNRows > 0. Int_t NaN(). return the total number of the NaN for float/double cells of this table; Thanks Victor Perevoztchikov. TTable * New(const Char_t* name, const Char_t* type, void* array, UInt_t size); This static method creates a new TTable object if provided. Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. Char_t * Print(Char_t* buf, Int_t n) const; Create IDL table defintion (to be used for XDF I/O). const Char_t * PrintHeader() const; Print general table inforamtion. const Char_t * Print(Int_t row, Int_t rownumber = 10, const Char_t* colfirst = """", const Char_t* collast = """") const; const Char_t *TTable::Print(Int_t row, Int_t rownumber, const Char_t *colfirst, const Char_t *collast) const. Print the contents of internal table per C",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:30215,Integrability,Depend,Depending,30215,"O). const Char_t * PrintHeader() const; Print general table inforamtion. const Char_t * Print(Int_t row, Int_t rownumber = 10, const Char_t* colfirst = """", const Char_t* collast = """") const; const Char_t *TTable::Print(Int_t row, Int_t rownumber, const Char_t *colfirst, const Char_t *collast) const. Print the contents of internal table per COLUMN. row - the index of the first row to print (counting from ZERO); rownumber - the total number of rows to print out (=10 by default). (No use !) Char_t *colfirst, *collast - the names of the first/last; to print out (not implemented yet). Check bounds and adjust it. void PrintContents(Option_t* opt = """") const; to be documented. void Project(const char* hname, const char* varexp, const char* selection = """", Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); -*-*Make a projection of a TTable using selections; *-* =============================================. Depending on the value of varexp (described in Draw) a 1-D,2-D,etc; projection of the TTable will be filled in histogram hname.; Note that the dimension of hname must match with the dimension of varexp. Int_t Purge(Option_t* opt = """"); Shrink the table to free the unused but still allocated rows. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void Set(Int_t n); Set array size of TTable object to n longs. If n<0 leave array unchanged. void SetTablePointer(void* table); to be documented. void SetType(const char *const type); to be documented. Char_t * MakeExpression(const Char_t** expressions, Int_t nExpressions); Create CINT macro to evaluate the user-provided expresssion; Expression may contains:; - the table columen names; - 2 meta names: i$ - the current column index,; n$ - the total table size provided by TTable::GetNRows() method. return the name of temporary file with the current expressions. void Reset(Int_t c = 0); Fill the entire table with byte ""c"" ;; c=0 ""be default",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:4470,Modifiability,variab,variables,4470,"tructName &operator[](Int_t i) const { assert(i>=0 && i < GetNRows()); return *((const structName *)(GetTable(i))); }; structName *begin() const { return GetNRows()? GetTable(0):0;}; structName *end() const {Int_t i = GetNRows(); return i? GetTable(i):0;}. The class implementation file may 2 lines and look as follows:; (for the example above):. St_dst_track_Table.cxx:. #include ""St_dst_track_Table.h""; TableClassImpl(St_dst_track, dst_track_st). LinkDef.h. To provide ROOT I/O for this class TWO CINT dictonary entries; should be defined with your custom LinkDef.h file; 1. First entry (as usually) for the class derived from TTable; for example:; #pragma C++ class St_dst_track; 2. Second entry for the C-structure wrapped into the class.; Since C-structuire is not derived from TObject it must be; properly defined as ""foreign"" ROOT class; #pragma C++ class dst_track_st+;. meta-variables i$ and n$ introduced; where ""i$"" stands for the current row index; ""n$"" stands for the total number of rows; meta-variable can be used along the normal; table column names in the expressions (see for example; method TTable::Draw. Function Members (Methods); public:. TTable(const TTable& table); TTable(const char* name = 0, Int_t size = 0); TTable(const char* name, Int_t n, Int_t size); TTable(const char* name, Int_t n, Char_t* array, Int_t size); TTable(const char* name, const char* type, Int_t n, Char_t* array, Int_t size); virtual~TTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDataSet::Add(TDataSet* dataset); virtual Int_tAddAt(const void* c); virtual voidAddAt(const void* c, Int_t i); virtual voidAddAt(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddFirst(TDataSet* dataset); virtual voidTDataSet::AddLast(TDataSet* dataset); virtual voidAdopt(Int_t n, void* array); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long_tAppendRows(const void* row, UInt_t nRows); ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:4594,Modifiability,variab,variable,4594,"tructName &operator[](Int_t i) const { assert(i>=0 && i < GetNRows()); return *((const structName *)(GetTable(i))); }; structName *begin() const { return GetNRows()? GetTable(0):0;}; structName *end() const {Int_t i = GetNRows(); return i? GetTable(i):0;}. The class implementation file may 2 lines and look as follows:; (for the example above):. St_dst_track_Table.cxx:. #include ""St_dst_track_Table.h""; TableClassImpl(St_dst_track, dst_track_st). LinkDef.h. To provide ROOT I/O for this class TWO CINT dictonary entries; should be defined with your custom LinkDef.h file; 1. First entry (as usually) for the class derived from TTable; for example:; #pragma C++ class St_dst_track; 2. Second entry for the C-structure wrapped into the class.; Since C-structuire is not derived from TObject it must be; properly defined as ""foreign"" ROOT class; #pragma C++ class dst_track_st+;. meta-variables i$ and n$ introduced; where ""i$"" stands for the current row index; ""n$"" stands for the total number of rows; meta-variable can be used along the normal; table column names in the expressions (see for example; method TTable::Draw. Function Members (Methods); public:. TTable(const TTable& table); TTable(const char* name = 0, Int_t size = 0); TTable(const char* name, Int_t n, Int_t size); TTable(const char* name, Int_t n, Char_t* array, Int_t size); TTable(const char* name, const char* type, Int_t n, Char_t* array, Int_t size); virtual~TTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDataSet::Add(TDataSet* dataset); virtual Int_tAddAt(const void* c); virtual voidAddAt(const void* c, Int_t i); virtual voidAddAt(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddFirst(TDataSet* dataset); virtual voidTDataSet::AddLast(TDataSet* dataset); virtual voidAdopt(Int_t n, void* array); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long_tAppendRows(const void* row, UInt_t nRows); ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:10136,Modifiability,Inherit,InheritsFrom,10136,"tGetOffset(Int_t columnIndex) const; virtual Int_tGetOffset(const Char_t* columnName = 0) const; virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*GetRowClass() const; virtual TTableDescriptor*GetRowDescriptors() const; virtual Long_tGetRowSize() const; Int_tGetSize() const; virtual TTableDescriptor*GetTableDescriptors() const; virtual Long_tGetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*GetType() const; static TTable::EColumnTypeGetTypeId(const char* typeName); static const char*GetTypeName(TTable::EColumnType type); virtual UInt_tGetTypeSize(Int_t columnIndex) const; virtual Int_tGetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tHasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tInsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; virtual voidTDataSet::ls(Int_t depth) const; virtual Char_t*MakeExpression(const Char_t** expressions, Int_t nExpressions); voidTD",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:10202,Modifiability,Inherit,InheritsFrom,10202,"Char_t* columnName = 0) const; virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*GetRowClass() const; virtual TTableDescriptor*GetRowDescriptors() const; virtual Long_tGetRowSize() const; Int_tGetSize() const; virtual TTableDescriptor*GetTableDescriptors() const; virtual Long_tGetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*GetType() const; static TTable::EColumnTypeGetTypeId(const char* typeName); static const char*GetTypeName(TTable::EColumnType type); virtual UInt_tGetTypeSize(Int_t columnIndex) const; virtual Int_tGetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tHasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tInsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; virtual voidTDataSet::ls(Int_t depth) const; virtual Char_t*MakeExpression(const Char_t** expressions, Int_t nExpressions); voidTDataSet::Mark()MENU ; voidTDataSet::Mark(UInt_t flag, TDataSet::EBi",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:17537,Modifiability,Inherit,Inheritance,17537,"Own; };; enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. static const char*fgTypeName[13]. protected:. TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; Long_tfMaxIndexThe used capacity of this array; Int_tfNNumber of array elements; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; Long_tfSizeSize of the one element (row) of the table; Char_t*fTableArray of (fN*fSize) longs; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTableDescriptor * GetTableDescriptors() const; protected: create a new TTableDescriptor descriptor for this table. void AsString(void* buf, TTable::EColumnType type, Int_t width, ostream& out) const. AsString represents the value provided via ""void *b"" with type defined; by ""name"". void *buf - the pointer to the value to be printed out.; type - the basic data type for the value above; width - the number of psotion to be used to print the value out. const char * GetTypeName(TTable::EColumnType type); return table type name. const void * At(Int_t i) const; Returns a pointer to the i-th row of the table. Int_t CopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); CopyRows copies nRows from starting from the srcRow of srcTable; to the dstRow in this table upto nRows or by the end of this table. This table if automaticaly increased if expand = kTRUE.; The old values of this table ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:17550,Modifiability,Inherit,Inherited,17550,"Own; };; enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. static const char*fgTypeName[13]. protected:. TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; Long_tfMaxIndexThe used capacity of this array; Int_tfNNumber of array elements; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; Long_tfSizeSize of the one element (row) of the table; Char_t*fTableArray of (fN*fSize) longs; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTableDescriptor * GetTableDescriptors() const; protected: create a new TTableDescriptor descriptor for this table. void AsString(void* buf, TTable::EColumnType type, Int_t width, ostream& out) const. AsString represents the value provided via ""void *b"" with type defined; by ""name"". void *buf - the pointer to the value to be printed out.; type - the basic data type for the value above; width - the number of psotion to be used to print the value out. const char * GetTypeName(TTable::EColumnType type); return table type name. const void * At(Int_t i) const; Returns a pointer to the i-th row of the table. Int_t CopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); CopyRows copies nRows from starting from the srcRow of srcTable; to the dstRow in this table upto nRows or by the end of this table. This table if automaticaly increased if expand = kTRUE.; The old values of this table ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:20129,Modifiability,variab,variable,20129,"he rows been copied. void DeleteRows(Long_t indx, UInt_t nRows = 1); Delete one or several rows from the table. Int_t indx - index of the first row to be deleted; Int_t nRows - the total number of rows to be deleted; = 1 ""by default. TH1 * Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); *-*-*-*-*-*Draw expression varexp for specified entries; *-* ===========================================. This function accepts TCut objects as arguments.; Useful to use the string operator +; example:; table.Draw(""x"",cut1+cut2+cut3);. TCutG object with ""CUTG"" name can be created via the graphics editor. TH1 * Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); *-*-*-*-*-*Draw expression varexp for specified entries; *-* ===========================================. varexp is an expression of the general form e1:e2:e3; where e1,etc is a C++ expression referencing a combination of the TTable columns; One can use two extra meta variable ""i$"" and ""n$"" along with the table; column names.; i$ is to involve the current row number; n$ refers the total num,ber of rows of this table provided by TTable::GetNRows(). Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x); = i$:sqrt(x) 2-Dim dsitribution of i versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is no",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:20642,Modifiability,variab,variables,20642," object with ""CUTG"" name can be created via the graphics editor. TH1 * Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); *-*-*-*-*-*Draw expression varexp for specified entries; *-* ===========================================. varexp is an expression of the general form e1:e2:e3; where e1,etc is a C++ expression referencing a combination of the TTable columns; One can use two extra meta variable ""i$"" and ""n$"" along with the table; column names.; i$ is to involve the current row number; n$ refers the total num,ber of rows of this table provided by TTable::GetNRows(). Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x); = i$:sqrt(x) 2-Dim dsitribution of i versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is not filled.; In general, the expression may be of the form:. value*(boolean expression). if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2 && 6 < i$ && i$ < n$""; selection2 = ""(x+y)*(sqrt(z)>3.2""; selection3 = ""signal*(log(signal)>1.2)""; selection1 returns a weigth = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>3.2; returns a weight = 0 otherwise.; selection3 returns a weight = signal if log(signal)>1.2. option is the drawing option; see TH1::Draw for the list of all drawing options.; If option contains th",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:21971,Modifiability,variab,variable,21971," operations, the result; is 0 or 1. If the result is 0, the histogram is not filled.; In general, the expression may be of the form:. value*(boolean expression). if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2 && 6 < i$ && i$ < n$""; selection2 = ""(x+y)*(sqrt(z)>3.2""; selection3 = ""signal*(log(signal)>1.2)""; selection1 returns a weigth = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>3.2; returns a weight = 0 otherwise.; selection3 returns a weight = signal if log(signal)>1.2. option is the drawing option; see TH1::Draw for the list of all drawing options.; If option contains the string ""goff"", no graphics is generated. nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). Saving the result of Draw to an histogram. By default the temporary histogram created is called htemp.; If varexp0 contains >>hnew (following the variable(s) name(s),; the new histogram created is called hnew and it is kept in the current; directory.; Example:; tree.Draw(""sqrt(x)>>hsqrt"",""y>0""); will draw sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. By default, the specified histogram is reset.; To continue to append data to an existing histogram, use ""+"" in front; of the histogram name;; table.Draw(""sqrt(x)>>+hsqrt"",""y>0""); will not reset hsqrt, but will continue filling. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instead of a TH2F histogram by specyfying option=prof or option=profs.; The option=prof is automatically selected in case of y:x>>pf; where pf is an existing TProfile histogram. Saving the result of Draw to a TEventList. TTable::Draw can be used to fill a TEventList object (list of entry numbers); instead of histogramming one variable.; If varexp0 has the form >>elist , a TEventList object named ""elist""; is created in the current directory. elist will contain the list; ",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:22855,Modifiability,variab,variable,22855,"ess (default is 0). Saving the result of Draw to an histogram. By default the temporary histogram created is called htemp.; If varexp0 contains >>hnew (following the variable(s) name(s),; the new histogram created is called hnew and it is kept in the current; directory.; Example:; tree.Draw(""sqrt(x)>>hsqrt"",""y>0""); will draw sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. By default, the specified histogram is reset.; To continue to append data to an existing histogram, use ""+"" in front; of the histogram name;; table.Draw(""sqrt(x)>>+hsqrt"",""y>0""); will not reset hsqrt, but will continue filling. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instead of a TH2F histogram by specyfying option=prof or option=profs.; The option=prof is automatically selected in case of y:x>>pf; where pf is an existing TProfile histogram. Saving the result of Draw to a TEventList. TTable::Draw can be used to fill a TEventList object (list of entry numbers); instead of histogramming one variable.; If varexp0 has the form >>elist , a TEventList object named ""elist""; is created in the current directory. elist will contain the list; of entry numbers satisfying the current selection.; Example:; tree.Draw("">>yplus"",""y>0""); will create a TEventList object named ""yplus"" in the current directory.; In an interactive session, one can type (after TTable::Draw); yplus.Print(""all""); to print the list of entry numbers in the list. By default, the specified entry list is reset.; To continue to append data to an existing list, use ""+"" in front; of the list name;; table.Draw("">>+yplus"",""y>0""); will not reset yplus, but will enter the selected entries at the end; of the existing list. Bool_t EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"). EntryLoop creates a CINT bytecode to evaluate the given expressions for; all table rows in loop and fill the",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:24263,Performance,Load,Load,24263,"entry numbers in the list. By default, the specified entry list is reset.; To continue to append data to an existing list, use ""+"" in front; of the list name;; table.Draw("">>+yplus"",""y>0""); will not reset yplus, but will enter the selected entries at the end; of the existing list. Bool_t EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"). EntryLoop creates a CINT bytecode to evaluate the given expressions for; all table rows in loop and fill the appropriated histograms. Solution for Byte code; From: Masaharu Goto <MXJ02154@nifty.ne.jp>; To: <fine@bnl.gov>; Cc: <rootdev@hpsalo.cern.ch>; Sent: 13-th august 1999 year 23:01. action = 1 Fill 1-D histogram obj; = 2 Fill 2-D histogram obj; = 3 Fill 3-D histogram obj; = 4 Fill Profile histogram obj; = 5 Fill a TEventlist; = 11 Estimate Limits; = 12 Fill 2-D PolyMarker obj; = 13 Fill 3-D PolyMarker obj; action < 0 Evaluate Limits for case abs(action). Load file. TTable(const char* name = 0, Int_t size = 0); Default TTable ctor. TTable(const char* name, Int_t n, Int_t size); Create TTable object and set array size to n longs. TTable(const char* name, Int_t n, Char_t* array, Int_t size); Create TTable object and initialize it with values of array. TTable(const char* name, const char* type, Int_t n, Char_t* array, Int_t size); Create TTable object and initialize it with values of array. TTable(const TTable& table); Copy constructor. TTable & operator=(const TTable& rhs); TTable assignment operator.; This operator REALLOCATEs this table to fit the number of; the USED rows of the source table if any. ~TTable(); Delete TTable object. void Adopt(Int_t n, void* array); Adopt array arr into TTable, i.e. don't copy arr but use it directly; in TTable. User may not delete arr, TTable dtor will do it. Int_t AddAt(const void* c); Add the ""row"" at the GetNRows() position, and; reallocate the table if neccesary, and; return the row index the ""row"" has o",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:27612,Performance,perform,perform,27612,"ows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in the current directory.; Example:; table.Fit(pol4,""sqrt(x)>>hsqrt"",""y>0""); will fit sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. const Char_t * GetType() const; Returns the type of t",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:1955,Safety,Detect,Detector,1955," start (cm). See also comments*; float phi0; /* azimuthal angle at start (deg) *; float z0; /* z-coord. at start (cm) *; float psi; /* azimuthal angle of pT vector (deg) *; float tanl; /* tan(dip) =pz/pt at start *; float invpt; /* 1/pt at start (GeV/c)^(-1) *; float curvature; /* Track curvature (1/cm) *; float covar[15]; /* full covariance matrix *; float chisq[2]; /* Chi-square per degree of freedom *; float x_first[3]; /* coord. of first measured point (cm) *; float x_last[3]; /* coord. of last measured point (cm) *; float length; /* from first to last point (cm) *; float impact; /* primary vertex (cm) *; unsigned long map[2]; /* extrap. info. (see preceeding comments)*; int id; /* Primary key (see comments) *; int iflag; /* bitmask quality info. (see comments) *; int det_id; /* Detector id information *; int method; /* Track finding/fitting method, packed *; int pid; /* Geant particle ID for assumed mass *; int n_point; /* SVT, TPC, FTPC component #s are packed *; int n_max_point; /* SVT, TPC, FTPC component #s are packed *; int n_fit_point; /* SVT, TPC, FTPC component #s are packed *; int icharge; /* Particle charge in units of |e| *; int id_start_vertex; /* final fit and primary track candidates *; } DST_TRACK_ST;. class St_dst_track : public TTable; {; public:; ClassDefTable(St_dst_track,dst_track_st); ClassDef(St_dst_track,2) //C++ wrapper for <dst_track> StAF table; };; #endif. where the CPP macro defines several convinient methods for the; ""table"" class (see: $ROOTSYS/table/inc/Ttypes.h for details:. #define ClassDefTable(className,structName); protected:; static TTableDescriptor *fgColDescriptors;; virtual TTableDescriptor *GetDescriptorPointer() const { return fgColDescriptors;}; virtual void SetDescriptorPointer(TTableDescriptor *list) const { fgColDescriptors = list;}; public:; typedef structName* iterator;; className() : TTable(_QUOTE_(className),sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name) : TTable(name,sizeof(stru",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:10026,Security,Hash,Hash,10026,"irtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual UInt_tGetOffset(Int_t columnIndex) const; virtual Int_tGetOffset(const Char_t* columnName = 0) const; virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*GetRowClass() const; virtual TTableDescriptor*GetRowDescriptors() const; virtual Long_tGetRowSize() const; Int_tGetSize() const; virtual TTableDescriptor*GetTableDescriptors() const; virtual Long_tGetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*GetType() const; static TTable::EColumnTypeGetTypeId(const char* typeName); static const char*GetTypeName(TTable::EColumnType type); virtual UInt_tGetTypeSize(Int_t columnIndex) const; virtual Int_tGetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tHasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tInsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; virtual voidTDat",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:3523,Testability,assert,assert,3523,"int icharge; /* Particle charge in units of |e| *; int id_start_vertex; /* final fit and primary track candidates *; } DST_TRACK_ST;. class St_dst_track : public TTable; {; public:; ClassDefTable(St_dst_track,dst_track_st); ClassDef(St_dst_track,2) //C++ wrapper for <dst_track> StAF table; };; #endif. where the CPP macro defines several convinient methods for the; ""table"" class (see: $ROOTSYS/table/inc/Ttypes.h for details:. #define ClassDefTable(className,structName); protected:; static TTableDescriptor *fgColDescriptors;; virtual TTableDescriptor *GetDescriptorPointer() const { return fgColDescriptors;}; virtual void SetDescriptorPointer(TTableDescriptor *list) const { fgColDescriptors = list;}; public:; typedef structName* iterator;; className() : TTable(_QUOTE_(className),sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name) : TTable(name,sizeof(structName)) {SetType(_QUOTE_(structName));}; className(Int_t n) : TTable(_QUOTE_(className),n,sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name,Int_t n) : TTable(name,n,sizeof(structName)) {SetType(_QUOTE_(structName));}; structName *GetTable(Int_t i=0) const { return ((structName *)GetArray())+i;}; structName &operator[](Int_t i){ assert(i>=0 && i < GetNRows()); return *GetTable(i); }; const structName &operator[](Int_t i) const { assert(i>=0 && i < GetNRows()); return *((const structName *)(GetTable(i))); }; structName *begin() const { return GetNRows()? GetTable(0):0;}; structName *end() const {Int_t i = GetNRows(); return i? GetTable(i):0;}. The class implementation file may 2 lines and look as follows:; (for the example above):. St_dst_track_Table.cxx:. #include ""St_dst_track_Table.h""; TableClassImpl(St_dst_track, dst_track_st). LinkDef.h. To provide ROOT I/O for this class TWO CINT dictonary entries; should be defined with your custom LinkDef.h file; 1. First entry (as usually) for the class derived from TTable; for example:; #pragma C++ class St_dst_track; 2",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:3625,Testability,assert,assert,3625,"int icharge; /* Particle charge in units of |e| *; int id_start_vertex; /* final fit and primary track candidates *; } DST_TRACK_ST;. class St_dst_track : public TTable; {; public:; ClassDefTable(St_dst_track,dst_track_st); ClassDef(St_dst_track,2) //C++ wrapper for <dst_track> StAF table; };; #endif. where the CPP macro defines several convinient methods for the; ""table"" class (see: $ROOTSYS/table/inc/Ttypes.h for details:. #define ClassDefTable(className,structName); protected:; static TTableDescriptor *fgColDescriptors;; virtual TTableDescriptor *GetDescriptorPointer() const { return fgColDescriptors;}; virtual void SetDescriptorPointer(TTableDescriptor *list) const { fgColDescriptors = list;}; public:; typedef structName* iterator;; className() : TTable(_QUOTE_(className),sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name) : TTable(name,sizeof(structName)) {SetType(_QUOTE_(structName));}; className(Int_t n) : TTable(_QUOTE_(className),n,sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name,Int_t n) : TTable(name,n,sizeof(structName)) {SetType(_QUOTE_(structName));}; structName *GetTable(Int_t i=0) const { return ((structName *)GetArray())+i;}; structName &operator[](Int_t i){ assert(i>=0 && i < GetNRows()); return *GetTable(i); }; const structName &operator[](Int_t i) const { assert(i>=0 && i < GetNRows()); return *((const structName *)(GetTable(i))); }; structName *begin() const { return GetNRows()? GetTable(0):0;}; structName *end() const {Int_t i = GetNRows(); return i? GetTable(i):0;}. The class implementation file may 2 lines and look as follows:; (for the example above):. St_dst_track_Table.cxx:. #include ""St_dst_track_Table.h""; TableClassImpl(St_dst_track, dst_track_st). LinkDef.h. To provide ROOT I/O for this class TWO CINT dictonary entries; should be defined with your custom LinkDef.h file; 1. First entry (as usually) for the class derived from TTable; for example:; #pragma C++ class St_dst_track; 2",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:14548,Testability,Test,TestBit,14548,"t::RecursiveRemove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidReset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidResetMap(Bool_t wipe = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidSet(Int_t n); virtual voidSet(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidUpdate(); virtual voidUpdate(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:14587,Testability,Test,TestBits,14587,"t::RecursiveRemove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidReset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidResetMap(Bool_t wipe = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidSet(Int_t n); virtual voidSet(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidUpdate(); virtual voidUpdate(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:21367,Testability,log,log,21367,"distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x); = i$:sqrt(x) 2-Dim dsitribution of i versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is not filled.; In general, the expression may be of the form:. value*(boolean expression). if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2 && 6 < i$ && i$ < n$""; selection2 = ""(x+y)*(sqrt(z)>3.2""; selection3 = ""signal*(log(signal)>1.2)""; selection1 returns a weigth = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>3.2; returns a weight = 0 otherwise.; selection3 returns a weight = signal if log(signal)>1.2. option is the drawing option; see TH1::Draw for the list of all drawing options.; If option contains the string ""goff"", no graphics is generated. nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). Saving the result of Draw to an histogram. By default the temporary histogram created is called htemp.; If varexp0 contains >>hnew (following the variable(s) name(s),; the new histogram created is called hnew and it is kept in the current; directory.; Example:; tree.Draw(""sqrt(x)>>hsqrt"",""y>0""); will draw sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. By default, the specified histogram is reset.; To continue to append data to an existing histogram, use ""+"" in front; of the histogram name;; table.Draw(""sqrt(x",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:21547,Testability,log,log,21547,"versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is not filled.; In general, the expression may be of the form:. value*(boolean expression). if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2 && 6 < i$ && i$ < n$""; selection2 = ""(x+y)*(sqrt(z)>3.2""; selection3 = ""signal*(log(signal)>1.2)""; selection1 returns a weigth = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>3.2; returns a weight = 0 otherwise.; selection3 returns a weight = signal if log(signal)>1.2. option is the drawing option; see TH1::Draw for the list of all drawing options.; If option contains the string ""goff"", no graphics is generated. nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). Saving the result of Draw to an histogram. By default the temporary histogram created is called htemp.; If varexp0 contains >>hnew (following the variable(s) name(s),; the new histogram created is called hnew and it is kept in the current; directory.; Example:; tree.Draw(""sqrt(x)>>hsqrt"",""y>0""); will draw sqrt(x) and save the histogram as ""hsqrt"" in the current; directory. By default, the specified histogram is reset.; To continue to append data to an existing histogram, use ""+"" in front; of the histogram name;; table.Draw(""sqrt(x)>>+hsqrt"",""y>0""); will not reset hsqrt, but will continue filling. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instea",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:20333,Usability,simpl,simplest,20333,"ied entries; *-* ===========================================. This function accepts TCut objects as arguments.; Useful to use the string operator +; example:; table.Draw(""x"",cut1+cut2+cut3);. TCutG object with ""CUTG"" name can be created via the graphics editor. TH1 * Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); *-*-*-*-*-*Draw expression varexp for specified entries; *-* ===========================================. varexp is an expression of the general form e1:e2:e3; where e1,etc is a C++ expression referencing a combination of the TTable columns; One can use two extra meta variable ""i$"" and ""n$"" along with the table; column names.; i$ is to involve the current row number; n$ refers the total num,ber of rows of this table provided by TTable::GetNRows(). Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x); = i$:sqrt(x) 2-Dim dsitribution of i versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is not filled.; In general, the expression may be of the form:. value*(boolean expression). if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2 && 6 < i$ && i$ < n$""; selection2 = ""(x+y)*(sqrt(z)>3.2""; selection3 = ""signal*(log(signal)>1.2)""; selection1 returns a weigth = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable.html:27367,Usability,Clear,Clear,27367,"ws - the total number of rows to be inserted; = 1 ""by default; return:; The number of the rows has been shifted to accomodate; the new rows. void * ReAllocate(); Reallocate this table leaving only (used rows)+1 allocated; GetTableSize() = GetNRows() + 1; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void * ReAllocate(Int_t newsize); Reallocate this table leaving only <newsize> allocated; GetTableSize() = newsize;; returns a pointer to the first row of the reallocated table; Note:; The table is reallocated if it is an owner of the internal array. void ReAlloc(Int_t newsize); The table is reallocated if it is an owner of the internal array. Char_t * Create(); Allocate a space for the new table, if any; Sleep for a while if space is not available and try again. void Browse(TBrowser* b); Wrap each table coulumn with TColumnView object to browse. void Clear(Option_t* opt = """"); Deletes the internal array of this class; if this object does own its internal table. void Delete(Option_t* opt = """"). Delete the internal array and free the memory it occupied; if this object did own this array. Then perform TDataSet::Delete(opt). TClass * GetRowClass() const; to be documented. Long_t GetNRows() const; Returns the number of the used rows for the wrapped table. Long_t GetRowSize() const; Returns the size (in bytes) of one table row. Long_t GetTableSize() const; Returns the number of the allocated rows. void Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); Fit a projected item(s) from a TTable*-; *-* =======================================. formula is a TF1 expression. See TTable::Draw for explanations of the other parameters. By default the temporary histogram created is called htemp.; If varexp contains >>hnew , the new histogram created is called hnew; and it is kept in t",MatchSource.WIKI,root/html532/TTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable.html
https://root.cern/root/html532/TTable3Points.html:4161,Availability,Error,Error,4161,"irtual Int_tTPoints3DABC::Add(Float_t x, Float_t y, Float_t z); virtual Int_tTPoints3DABC::AddLast(Float_t x, Float_t y, Float_t z); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; static Int_tTPoints3DABC::DistancetoLine(Int_t px, Int_t py, Float_t x1, Float_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); virtual Int_tTTablePoints::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetAnyPoint(Int_t idx, TTable3Points::EPointDirection xAxis) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetKey(Int_t); virtual Int_tTTablePoints::GetLastPosition() const; virtual Int_tGetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TTablePoints::GetOption",MatchSource.WIKI,root/html532/TTable3Points.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable3Points.html
https://root.cern/root/html532/TTable3Points.html:4290,Availability,error,error,4290,"z); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; static Int_tTPoints3DABC::DistancetoLine(Int_t px, Int_t py, Float_t x1, Float_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); virtual Int_tTTablePoints::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetAnyPoint(Int_t idx, TTable3Points::EPointDirection xAxis) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetKey(Int_t); virtual Int_tTTablePoints::GetLastPosition() const; virtual Int_tGetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TTablePoints::GetOption() const; virtual Float_t*GetP() const; virtual void*TTablePoints::GetTable(); virtual const char*TObject::GetTitle() const; virt",MatchSource.WIKI,root/html532/TTable3Points.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable3Points.html
https://root.cern/root/html532/TTable3Points.html:4374,Availability,error,error,4374,"se(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; static Int_tTPoints3DABC::DistancetoLine(Int_t px, Int_t py, Float_t x1, Float_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); virtual Int_tTTablePoints::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetAnyPoint(Int_t idx, TTable3Points::EPointDirection xAxis) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetKey(Int_t); virtual Int_tTTablePoints::GetLastPosition() const; virtual Int_tGetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TTablePoints::GetOption() const; virtual Float_t*GetP() const; virtual void*TTablePoints::GetTable(); virtual const char*TObject::GetTitle() const; virtual Int_tGetTotalKeys(); virtual UInt_tTObject::GetUniqueID() const; virtual Float_t",MatchSource.WIKI,root/html532/TTable3Points.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable3Points.html
https://root.cern/root/html532/TTable3Points.html:5825,Modifiability,Inherit,InheritsFrom,5825,"nst char*TObject::GetIconName() const; virtual Int_tGetKey(Int_t); virtual Int_tTTablePoints::GetLastPosition() const; virtual Int_tGetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TTablePoints::GetOption() const; virtual Float_t*GetP() const; virtual void*TTablePoints::GetTable(); virtual const char*TObject::GetTitle() const; virtual Int_tGetTotalKeys(); virtual UInt_tTObject::GetUniqueID() const; virtual Float_tGetX(Int_t idx) const; virtual const Float_t*GetXYZ(Int_t); virtual Float_t*GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; virtual Float_tGetY(Int_t idx) const; virtual Float_tGetZ(Int_t idx) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tTTablePoints::Indx(Int_t sortedIndx) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TTable3Points.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable3Points.html
https://root.cern/root/html532/TTable3Points.html:5891,Modifiability,Inherit,InheritsFrom,5891," virtual Int_tTTablePoints::GetLastPosition() const; virtual Int_tGetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TTablePoints::GetOption() const; virtual Float_t*GetP() const; virtual void*TTablePoints::GetTable(); virtual const char*TObject::GetTitle() const; virtual Int_tGetTotalKeys(); virtual UInt_tTObject::GetUniqueID() const; virtual Float_tGetX(Int_t idx) const; virtual const Float_t*GetXYZ(Int_t); virtual Float_t*GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; virtual Float_tGetY(Int_t idx) const; virtual Float_tGetZ(Int_t idx) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tTTablePoints::Indx(Int_t sortedIndx) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPoints3DABC&TPoints3DA",MatchSource.WIKI,root/html532/TTable3Points.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable3Points.html
https://root.cern/root/html532/TTable3Points.html:9756,Modifiability,Inherit,Inheritance,9756," option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTTablePoints::SetTablePointer(void* table). Data Members; public:. enum EPointDirection { kXPoints; kYPoints; kZPoints; kTotalSize; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_t*fColumnOffset!; Int_tTTablePoints::fFirstRowThe first row to take in account; const void*TTablePoints::fKeypointer to key value to select rows; void*TTablePoints::fRowsPointer the first row of the STAF table; Int_tTTablePoints::fSize; TTableSorter*TTablePoints::fTableSorter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTable3Points(); to be documented. TTable3Points(TTableSorter* sorter, const void* key, const Char_t* xName = ""x"", const Char_t* yName = ""y"", const Char_t* zName = ""z"", Option_t* opt = """"); to be documented. TTable3Points(TTableSorter* sorter, Int_t keyIndex, const Char_t* xName = ""x"", const Char_t* yName = ""y"", const Char_t* zName = ""z"", Option_t* opt = """"); to be documented. ~TTable3Points(); to be documented. Float_t GetAnyPoint(Int_t idx, TTable3Points::EPointDirection xAxis) const; to be documented. void SetAnyColumn(const Char_t* anyName, TTable3Points::EPointDirection indx); to be documented. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; to be documented. TTable3Points(). void SetXColumn(const Char_t* xName); { SetAnyColumn(xName,kXPoints);}. void SetYColumn(const Char_t* yName); { SetAnyColumn(yName,kYPoints);}. void SetZColumn(const Char_t* zName); { SetAnyColumn(zName,kZPoints);}. Int_t GetTotalKeys(); { ret",MatchSource.WIKI,root/html532/TTable3Points.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable3Points.html
https://root.cern/root/html532/TTable3Points.html:9769,Modifiability,Inherit,Inherited,9769," option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTTablePoints::SetTablePointer(void* table). Data Members; public:. enum EPointDirection { kXPoints; kYPoints; kZPoints; kTotalSize; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_t*fColumnOffset!; Int_tTTablePoints::fFirstRowThe first row to take in account; const void*TTablePoints::fKeypointer to key value to select rows; void*TTablePoints::fRowsPointer the first row of the STAF table; Int_tTTablePoints::fSize; TTableSorter*TTablePoints::fTableSorter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTable3Points(); to be documented. TTable3Points(TTableSorter* sorter, const void* key, const Char_t* xName = ""x"", const Char_t* yName = ""y"", const Char_t* zName = ""z"", Option_t* opt = """"); to be documented. TTable3Points(TTableSorter* sorter, Int_t keyIndex, const Char_t* xName = ""x"", const Char_t* yName = ""y"", const Char_t* zName = ""z"", Option_t* opt = """"); to be documented. ~TTable3Points(); to be documented. Float_t GetAnyPoint(Int_t idx, TTable3Points::EPointDirection xAxis) const; to be documented. void SetAnyColumn(const Char_t* anyName, TTable3Points::EPointDirection indx); to be documented. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; to be documented. TTable3Points(). void SetXColumn(const Char_t* xName); { SetAnyColumn(xName,kXPoints);}. void SetYColumn(const Char_t* yName); { SetAnyColumn(yName,kYPoints);}. void SetZColumn(const Char_t* zName); { SetAnyColumn(zName,kZPoints);}. Int_t GetTotalKeys(); { ret",MatchSource.WIKI,root/html532/TTable3Points.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TTable3Points.html
